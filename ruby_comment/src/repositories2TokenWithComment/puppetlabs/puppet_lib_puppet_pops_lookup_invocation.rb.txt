UNK on_const on_nl UNK on_symbeg scope on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg explainer on_comma on_symbeg module_name on_comma on_symbeg # @api private
def UNK on_lparen scope on_rparen on_ignored_nl yield on_lparen on_const on_period new on_lparen scope on_comma UNK on_comma UNK on_comma explainer on_rparen # Creates a new instance with same settings as this instance but with a new given scope # and yields with that scope. # # @param scope [Puppet::Parser::Scope] The new scope # @return [Invocation] the new instance
def UNK on_lparen scope on_comma UNK on_op on_const on_comma UNK on_op on_const on_comma explainer on_op nil on_comma adapter_class on_op nil # Creates a context object for a lookup invocation. The object contains the current scope, overrides, and default # values and may optionally contain an {ExplanationAcceptor} instance that will receive book-keeping information # about the progress of the lookup. # # If the _explain_ argument is a boolean, then _false_ means that no explanation is needed and _true_ means that # the default explanation acceptor should be used. The _explain_ argument may also be an instance of the # `ExplanationAcceptor` class. # # @param scope [Puppet::Parser::Scope] The scope to use for the lookup # @param override_values [Hash<String,Object>|nil] A map to use as override. Values found here are returned immediately (no merge) # @param default_values [Hash<String,Object>] A map to use as the last resort (but before default) # @param explainer [boolean,Explanainer] An boolean true to use the default explanation acceptor or an explainer instance that will receive information about the lookup
on_ivar on_op parent_invocation on_period UNK on_nl on_ivar on_op parent_invocation on_period adapter_class on_nl on_ignored_nl UNK if parent_invocation on_period UNK on_nl UNK # Inherit from parent invocation (track recursion)
UNK if parent_invocation on_period UNK on_nl UNK if parent_invocation on_period UNK on_nl UNK if parent_invocation on_period UNK on_nl UNK on_op # Inherit Hiera 3 legacy properties
explainer on_op explainer on_op UNK on_op nil on_op parent_invocation on_period explainer on_nl UNK on_ignored_nl on_ivar on_op UNK UNK on_nl on_ivar # Inherit explainer unless a new explainer is given or disabled using false
def UNK on_lparen on_op UNK on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl if explainer # This method is overridden by the special Invocation used while resolving interpolations in a # Hiera configuration file (hiera.yaml) where it's used for collecting and remembering the current # values that the configuration was based on # # @api private
end on_nl on_ignored_nl def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl if explainer on_period nil? on_nl yield on_nl UNK on_ignored_nl # Does nothing by default
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl if explainer on_period nil? on_nl yield on_nl UNK on_ignored_nl on_ivar on_period UNK # The qualifier_type can be one of: # :global - qualifier is the data binding terminus name # :data_provider - qualifier a DataProvider instance # :path - qualifier is a ResolvedPath instance # :merge - qualifier is a MergeStrategy instance # :interpolation - qualifier is the unresolved interpolation expression # :meta - qualifier is the module name # :data - qualifier is the key # # @param qualifier [Object] A branch, a provider, or a path
def UNK on_lparen value on_rparen on_ignored_nl on_ivar on_period UNK on_lparen value on_rparen unless on_ivar on_period nil? on_nl value on_nl end # Report the result of a merge or fully resolved interpolated string # @param value [Object] The result to report # @return [Object] the given value
def UNK on_nl on_ivar on_op UNK on_nl self on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_period UNK on_nl end # Instructs the lookup framework to only perform lookups in the global layer # @return [Invocation] self
def UNK on_nl UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_lparen on_symbeg on_ivar on_rparen on_nl end # @return [Pathname] the full path of the hiera.yaml config file
def UNK on_nl UNK on_lparen on_symbeg on_ivar on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op UNK on_nl end # @return [Boolean] `true` if the invocation stems from the hiera_xxx function family
def UNK on_nl UNK on_lparen on_symbeg on_ivar on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op UNK on_nl end # @return [Boolean] `true` if the invocation stems from the hiera_xxx function family
def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op UNK UNK UNK on_period UNK unless UNK on_period nil? on_nl end on_nl # Overrides passed from hiera_xxx functions down to V3DataHashFunctionProvider
