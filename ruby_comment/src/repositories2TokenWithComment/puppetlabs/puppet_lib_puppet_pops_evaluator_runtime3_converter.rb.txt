UNK on_const on_nl on_const on_op on_const on_op on_const on_op on_const on_nl on_const on_op on_const on_op on_const on_op on_const on_nl on_ignored_nl # Converts nested 4x supported values to 3x values. This is required because # resources and other objects do not know about the new type system, and does not support # regular expressions. Unfortunately this has to be done for array and hash as well. # A complication is that catalog types needs to be resolved against the scope. # # Users should not create instances of this class. Instead the class methods {Runtime3Converter.convert}, # {Runtime3Converter.map_args}, or {Runtime3Converter.instance} should be used
def self on_period UNK on_lparen UNK on_comma scope on_comma undef_value on_rparen on_ignored_nl on_ivar on_period UNK on_lparen UNK on_comma scope on_comma # Converts 4x supported values to a 3x values. Same as calling Runtime3Converter.instance.map_args(...) # # @param args [Array] Array of values to convert # @param scope [Puppet::Parser::Scope] The scope to use when converting # @param undef_value [Object] The value that nil is converted to # @return [Array] The converted values #
def self on_period convert on_lparen o on_comma scope on_comma undef_value on_rparen on_ignored_nl on_ivar on_period convert on_lparen o on_comma scope on_comma # Converts 4x supported values to a 3x values. Same as calling Runtime3Converter.instance.convert(...) # # @param o [Object]The value to convert # @param scope [Puppet::Parser::Scope] The scope to use when converting # @param undef_value [Object] The value that nil is converted to # @return [Object] The converted value #
def self on_period UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_comma scope on_comma undef_value on_rparen on_ignored_nl # Returns the singleton instance of this class. # @return [Runtime3Converter] The singleton instance
def UNK on_lparen UNK on_comma scope on_comma undef_value on_rparen on_ignored_nl UNK on_period UNK on_lbrace on_op UNK on_op convert on_lparen UNK # Converts 4x supported values to a 3x values. # # @param args [Array] Array of values to convert # @param scope [Puppet::Parser::Scope] The scope to use when converting # @param undef_value [Object] The value that nil is converted to # @return [Array] The converted values #
def convert on_lparen o on_comma scope on_comma undef_value on_rparen on_ignored_nl on_ivar on_period UNK on_lparen self on_comma o on_comma scope on_comma # Converts a 4x supported value to a 3x value. # # @param o [Object]The value to convert # @param scope [Puppet::Parser::Scope] The scope to use when converting # @param undef_value [Object] The value that nil is converted to # @return [Object] The converted value #
UNK on_op o on_period UNK on_nl UNK UNK UNK UNK on_op o on_nl UNK on_const on_op on_const on_comma on_tstring_beg on_tstring_content # transform to same value float value if possible without any rounding error
o on_period UNK on_op on_op on_const on_period UNK on_period UNK on_op o on_period UNK on_op o on_nl end on_nl on_ignored_nl # Although wasteful, a dup is needed because user code may mutate these strings when applying # Resources. This does not happen when in master mode since it only uses Resources that are # in puppet core and those are all safe.
t on_comma title on_op UNK on_lparen o on_rparen on_nl t on_op on_const on_period UNK on_lparen scope on_comma t on_rparen UNK # Since 4x does not support dynamic scoping, all names are absolute and can be # used as is (with some check/transformation/mangling between absolute/relative form # due to Puppet::Resource's idiosyncratic behavior where some references must be # absolute and others cannot be. # Thus there is no need to call scope.resolve_type_and_titles to do dynamic lookup.
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_lparen on_const on_op on_const on_op on_const on_op on_const on_rparen # Produces an array with [type, title] from a PCatalogEntryType # This method is used to produce the arguments for creation of reference resource instances # (used when 3x is operating on a resource). # Ensures that resources are *not* absolute. #
UNK UNK on_period UNK on_op nil on_op UNK on_period UNK on_lparen UNK on_tstring_content UNK on_comma on_tstring_beg on_tstring_end on_rparen on_period UNK # Ensure that title is '' if nil # Resources with absolute name always results in error because tagging does not support leading ::
UNK on_const on_comma UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_ignored_nl on_lbrace UNK UNK on_period UNK on_rbrace on_nl end on_nl #TRANSLATORS 'PClassType' and 'PResourceType' are Puppet types and should not be translated
UNK on_const on_op on_const on_nl on_ignored_nl def UNK on_lparen o on_comma scope on_comma undef_value on_rparen on_ignored_nl o on_period UNK on_nl # A Ruby function written for the 3.x API cannot be expected to handle extended data types. This # converter ensures that they are converted to String format # @api private
o on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen o on_comma scope on_comma undef_value on_rparen on_ignored_nl o on_period UNK # Puppet 3x cannot handle parameter values that are regular expressions. Turn into regexp string in # source form
o on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen o on_comma scope on_comma undef_value on_rparen on_ignored_nl o on_period UNK # Puppet 3x cannot handle SemVers. Use the string form
o on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen o on_comma scope on_comma undef_value on_rparen on_ignored_nl o on_period UNK # Puppet 3x cannot handle SemVerRanges. Use the string form
o on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen o on_comma scope on_comma undef_value on_rparen on_ignored_nl o on_period UNK # Puppet 3x cannot handle Binary. Use the string form
o on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen o on_comma scope on_comma undef_value on_rparen on_ignored_nl o on_period UNK # Puppet 3x cannot handle Timespans. Use the string form
o on_period UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen val3x on_rparen on_ignored_nl UNK val3x on_op UNK UNK # Puppet 3x cannot handle Timestamps. Use the string form
def self on_period UNK on_lparen val3x on_rparen on_ignored_nl UNK val3x on_op UNK UNK on_nl nil on_nl UNK val3x on_period UNK # Converts result back to 4.x by replacing :undef with nil in Array and Hash objects #
