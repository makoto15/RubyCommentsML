UNK UNK on_op UNK on_op UNK on_op UNK on_op UNK on_nl UNK UNK on_period UNK UNK UNK on_comma on_op UNK # Complies with Proc API by mapping a Puppet::Pops::Evaluator::Closure to a ruby Proc. # Creating and passing an instance of this class instead of just a plain block makes # it possible to inherit the parameter info and arity from the closure. Advanced users # may also access the closure itself. The Puppet::Pops::Functions::Dispatcher uses this # when it needs to get the Callable type of the closure. # # The class is part of the Puppet Function API for Ruby and thus public API but a user # should never create an instance of this class. # # @api public
UNK UNK on_period UNK UNK UNK on_comma on_op UNK UNK on_ignored_nl UNK on_op UNK UNK on_op UNK UNK on_nl UNK # Creates a new instance from a closure and a block that will dispatch # all parameters to the closure. The block must be similar to: # # { |*args| closure.call(*args) } # # @param closure [Puppet::Pops::Evaluator::Closure] The closure to map # @param &block [Block] The varargs block that invokes the closure.call method # # @api private
UNK on_symbeg UNK on_nl on_ignored_nl UNK UNK on_nl UNK on_nl end on_nl on_ignored_nl UNK UNK on_nl UNK on_period UNK on_period # @return [Puppet::Pops::Evaluator::Closure] the mapped closure # @api public
UNK UNK on_nl UNK on_nl end on_nl on_ignored_nl UNK UNK on_nl UNK on_period UNK on_period UNK UNK on_op param on_op # @overrides Block.lambda? # @return [Boolean] always false since this proc doesn't do the Ruby lambda magic # @api public
UNK UNK on_nl UNK on_period UNK on_period UNK UNK on_op param on_op on_ignored_nl UNK on_op param on_period UNK on_period UNK # Maps the closure parameters to standard Block parameter info where each # parameter is represented as a two element Array where the first # element is :req, :opt, or :rest and the second element is the name # of the parameter. # # @return [Array<Array<Symbol>>] array of parameter info pairs # @overrides Block.parameters # @api public
UNK UNK on_nl UNK on_period UNK UNK UNK UNK UNK on_op UNK on_comma param on_op on_ignored_nl UNK on_op UNK on_op # @return [Integer] the arity of the block # @overrides Block.arity # @api public
