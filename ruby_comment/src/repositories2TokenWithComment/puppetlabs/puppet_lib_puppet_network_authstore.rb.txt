on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_op on_const on_op # standard module for determining whether a given hostname or IP has access to # the requested resource
def UNK on_lparen name on_comma ip on_rparen on_ignored_nl if name UNK ip on_nl UNK on_const on_op on_const on_comma UNK on_lparen # Is a given combination of name and ip address allowed? If either input # is non-nil, then both inputs must be provided. If neither input # is provided, then the authstore is considered local and defaults to "true".
UNK on_const on_op on_const on_comma UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen UNK name UNK ip on_nl else on_ignored_nl UNK UNK # This is probably unnecessary, and can cause some weirdness in # cases where we're operating over localhost but don't have a real # IP defined.
else on_ignored_nl UNK UNK on_nl end on_nl on_ignored_nl UNK UNK if UNK on_nl on_ignored_nl UNK on_op UNK on_period UNK on_lbrace # else, we're networked and such
UNK UNK on_nl end on_nl on_ignored_nl UNK UNK if UNK on_nl on_ignored_nl UNK on_op UNK on_period UNK on_lbrace on_op UNK # we're local
UNK UNK if UNK on_nl on_ignored_nl UNK on_op UNK on_period UNK on_lbrace on_op UNK on_op UNK on_period UNK on_lparen name # yay insecure overrides
def UNK on_lparen pattern on_rparen on_ignored_nl if pattern on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ivar on_op UNK on_nl else on_ignored_nl UNK # Mark a given pattern as allowed.
if pattern on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ivar on_op UNK on_nl else on_ignored_nl UNK on_lparen on_symbeg UNK on_comma pattern on_rparen # a simple way to allow anyone at all to connect
def UNK on_lparen pattern on_rparen on_ignored_nl UNK on_lparen on_symbeg UNK on_comma pattern on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen # Deny a given pattern.
def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK on_op on_ivar on_period UNK on_op on_int # Is global allow enabled?
def UNK on_nl on_ivar on_period UNK on_op on_ivar on_period UNK on_op on_int on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar # does this auth store has any rules?
def UNK on_nl on_ivar on_op on_ivar on_nl end on_nl on_ignored_nl def UNK on_lparen type on_comma pattern on_rparen on_ignored_nl on_ivar on_op # Returns our ACEs list, but if we have a modification of it, let's return # it. This is used if we want to override the this purely immutable list # by a modified version.
def UNK on_lparen type on_comma pattern on_rparen on_ignored_nl on_ivar on_op on_const on_period new on_lparen type on_comma pattern on_rparen on_nl on_ivar # Store the results of a pattern into our hash. Basically just # converts the pattern and sticks it into the hash.
UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl UNK on_symbeg type on_nl on_const on_op on_lbracket on_symbeg # A single declaration. Stores the info for a given declaration, # provides the methods for determining whether a declaration matches, # and handles sorting the declarations appropriately.
UNK on_symbeg type on_nl on_const on_op on_lbracket on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_rbracket on_nl # The type of declaration: either :allow or :deny
UNK on_symbeg pattern on_nl on_ignored_nl UNK on_symbeg length on_nl on_ignored_nl def on_op on_lparen other on_rparen on_ignored_nl UNK on_lparen UNK on_comma # The pattern we're matching against. Can be an IPAddr instance, # or an array of strings, resulting from reversing a hostname # or domain name.
UNK on_symbeg length on_nl on_ignored_nl def on_op on_lparen other on_rparen on_ignored_nl UNK on_lparen UNK on_comma other on_period UNK on_rparen on_op # The length. Only used for iprange and domain.
def on_op on_lparen other on_rparen on_ignored_nl UNK on_lparen UNK on_comma other on_period UNK on_rparen on_op on_ignored_nl UNK on_lparen UNK on_comma # Sort the declarations most specific first.
def UNK on_nl name on_op on_symbeg ip on_nl end on_nl on_ignored_nl def UNK on_lparen name on_comma ip on_rparen on_ignored_nl if # Are we an IP type?
def UNK on_lparen name on_comma ip on_rparen on_ignored_nl if UNK on_nl pattern on_period UNK on_lparen on_const on_period new on_lparen ip # Does this declaration match the name/ip combo?
def UNK on_lparen pattern on_rparen on_ignored_nl if on_lbracket on_symbeg UNK on_comma on_symbeg UNK on_rbracket on_period UNK on_lparen UNK on_period type # Set the pattern appropriately. Also sets the name and length.
def UNK on_nl on_lbracket on_symbeg UNK on_comma on_symbeg UNK on_rbracket on_period UNK on_lparen type on_rparen on_nl end on_nl on_ignored_nl def # Mapping a type of statement into a return value.
def UNK on_lparen type on_rparen on_ignored_nl type on_op type on_period UNK on_nl UNK on_const on_comma UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end # Set the declaration type. Either :allow or :deny.
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_nl if on_ivar on_op on_symbeg UNK on_nl UNK on_period pattern on_op # interpolate a pattern to replace any # backreferences by the given match # for instance if our pattern is $1.reductivelabs.com # and we're called with a MatchData whose capture 1 is puppet # we'll return a pattern of puppet.reductivelabs.com
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl on_lparen UNK UNK UNK on_rparen on_op nil on_op UNK on_op on_op on_int # Returns nil if both values are true or both are false, returns # -1 if the first is true, and 1 if the second is true. Used # in the <=> operator.
def UNK on_lparen name on_rparen on_ignored_nl UNK on_ivar on_nl when on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_nl name # Does the name match our pattern?
def UNK on_lparen name on_rparen on_ignored_nl name on_period UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period UNK on_nl end # Convert the name to a common pattern.
name on_period UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period UNK on_nl end on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content # Change to name.downcase.split(".",-1).reverse for FQDN support
on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_op on_tstring_beg on_embexpr_beg on_const on_embexpr_end on_tstring_content on_embexpr_beg on_const on_embexpr_end on_tstring_content on_embexpr_beg on_const on_embexpr_end # Parse our input pattern and figure out what kind of allowable # statement it is. The output of this is used for later matching.
on_const on_op on_tstring_beg on_embexpr_beg on_const on_embexpr_end on_tstring_content on_embexpr_beg on_const on_embexpr_end on_tstring_end on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end on_comma on_tstring_beg on_tstring_content # It should be: # IP = "#{IPv4}|#{IPv6_full}|(#{IPv6_partial}#{IPv4})".gsub(/_/,'([0-9a-fA-F]{1,4})').gsub(/\(/,'(?:') # but ruby's ipaddr lib doesn't support the hybrid format
on_lbracket on_symbeg UNK on_comma UNK on_period UNK on_comma on_const on_period new on_lparen value on_rparen on_rbracket on_nl when on_regexp_beg on_tstring_content on_embexpr_beg # 12.34.56.78/24, a001:b002::efff/120, c444:1000:2000::9:192.168.0.1/112
on_lbracket on_symbeg UNK on_comma nil on_comma on_const on_period new on_lparen value on_rparen on_rbracket on_nl when on_regexp_beg on_tstring_content on_embexpr_beg on_const on_embexpr_end # 10.20.30.40,
UNK on_op value on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_lbracket on_int on_op on_op on_int on_rbracket on_nl UNK on_op on_int # an ip address with a '*' at the end
on_lbracket on_symbeg UNK on_comma on_symbeg UNK on_comma nil on_comma UNK on_lparen value on_rparen on_rbracket on_nl when on_regexp_beg on_tstring_content on_regexp_end UNK # a full hostname # Change to /^(\w[-\w]*\.)+[-\w]+\.?$/ for FQDN support
UNK on_op UNK on_lparen value on_rparen on_lbracket on_int on_op on_op on_int on_rbracket on_nl on_lbracket on_symbeg UNK on_comma on_symbeg UNK on_comma # *.domain.com
on_lbracket on_symbeg UNK on_comma on_symbeg UNK on_comma nil on_comma UNK on_lparen value on_rparen on_rbracket on_nl when on_regexp_beg on_tstring_content on_regexp_end on_lbracket # a backreference pattern ala $1.reductivelabs.com or 192.168.0.$1 or $1.$2
on_lbracket on_symbeg UNK on_comma on_symbeg UNK on_comma nil on_comma on_lbracket value on_rbracket on_rbracket on_nl when on_regexp_beg on_tstring_content on_regexp_end on_lbracket on_symbeg # ? Just like a host name but allow '@'s and ending '.'s
on_lbracket on_symbeg UNK on_comma on_symbeg UNK on_comma nil on_comma value on_rbracket on_nl else on_ignored_nl UNK on_const on_comma on_tstring_beg on_tstring_content on_embexpr_beg # a regular expression
