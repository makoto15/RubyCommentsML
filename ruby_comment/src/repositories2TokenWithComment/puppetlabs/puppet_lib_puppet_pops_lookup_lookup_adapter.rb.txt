UNK on_const on_op on_const on_nl on_ignored_nl on_const on_op on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_period freeze on_nl on_const on_op # A LookupAdapter is a specialized DataAdapter that uses its hash to store data providers. It also remembers the compiler # that it is attached to and maintains a cache of _lookup options_ retrieved from the data providers associated with the # compiler's environment. # # @api private
on_ivar on_op on_const on_period lookup on_lparen on_symbeg UNK on_rparen on_lbrace on_const on_period UNK on_rbrace on_nl end on_nl on_ignored_nl def lookup # Get a KeyRecorder from context, and set a "null recorder" if not defined
def lookup on_lparen key on_comma lookup_invocation on_comma merge on_rparen on_ignored_nl if key on_op on_const on_op key on_period UNK on_lparen on_const # Performs a lookup using global, environment, and module data providers. Merge the result using the given # _merge_ strategy. If the merge strategy is nil, then an attempt is made to find merge options in the # `lookup_options` hash for an entry associated with the key. If no options are found, the no merge is performed # and the first found entry is returned. # # @param key [String] The key to lookup # @param lookup_invocation [Invocation] the lookup invocation # @param merge [MergeStrategy,String,Hash{String => Object},nil] Merge strategy, merge strategy name, strategy and options hash, or nil (implies "first found") # @return [Object] the found object # @throw :no_such_key when the object is not found #
if key on_op on_const on_op key on_period UNK on_lparen on_const on_rparen on_nl lookup_invocation on_period with on_lparen on_symbeg UNK on_comma on_const # The 'lookup_options' key is reserved and not found as normal data
on_ivar on_period UNK on_lparen key on_rparen on_nl on_ignored_nl key on_op on_const on_period new on_lparen key on_rparen on_nl lookup_invocation on_period lookup # Record that the key was looked up. This will record all keys for which a lookup is performed # except 'lookup_options' (since that is illegal from a user perspective, # and from an impact perspective is always looked up).
merge on_op lookup_options on_lbracket on_const on_rbracket on_nl lookup_invocation on_period UNK on_lparen on_const on_rparen unless merge on_period nil? on_nl end on_nl # Used cached lookup_options # merge = lookup_merge_options(key, lookup_invocation)
def UNK on_lparen key on_comma lookup_options on_comma lookup_invocation on_comma UNK on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_nl convert_to on_op # Performs a possible conversion of the result of calling `the_lookup` lambda # The conversion takes place if there is a 'convert_to' key in the lookup_options # If there is no conversion, the result of calling `the_lookup` is returned # otherwise the successfully converted value. # Errors are raised if the convert_to is faulty (bad type string, or if a call to # new(T, <args>) fails. # # @param key [String] The key to lookup # @param lookup_options [Hash] a hash of options # @param lookup_invocation [Invocation] the lookup invocation # @param the_lookup [Lambda] zero arg lambda that performs the lookup of a value # @return [Object] the looked up value, or converted value if there was conversion # @throw :no_such_key when the object is not found (if thrown by `the_lookup`) #
UNK on_op on_const on_op on_const on_op on_const on_op on_const on_period UNK on_period UNK on_lparen convert_to on_rparen on_nl lookup_invocation on_period UNK # TRANSLATORS 'lookup_options', 'convert_to' and args_string variable should not be translated,
UNK on_op lookup_invocation on_period UNK on_op on_symbeg UNK on_op on_const on_lbracket on_symbeg UNK on_rbracket on_nl UNK UNK on_nl when on_symbeg # hiera_xxx will always use global_provider regardless of data_binding_terminus setting
lookup_invocation on_period UNK on_lparen key on_rparen on_nl throw on_symbeg no_such_key on_nl else on_ignored_nl lookup_invocation on_period with on_lparen on_symbeg UNK on_comma # If global lookup is disabled, immediately report as not found
throw on_symbeg no_such_key if module_name on_period nil? on_nl on_ignored_nl provider on_op UNK on_lparen lookup_invocation on_comma module_name on_rparen on_nl if provider # Do not attempt to do a lookup in a module unless the name is qualified.
throw on_symbeg no_such_key if module_name on_period nil? on_nl on_ignored_nl provider on_op UNK on_lparen lookup_invocation on_comma module_name on_rparen on_nl throw on_symbeg # Do not attempt to do a lookup in a module unless the name is qualified.
def UNK on_lparen key on_comma lookup_invocation on_rparen on_ignored_nl lookup_options on_op UNK on_lparen key on_comma lookup_invocation on_rparen on_nl lookup_options on_period nil? # Retrieve the merge options that match the given `name`. # # @param key [LookupKey] The key for which we want merge options # @param lookup_invocation [Invocation] the lookup invocation # @return [String,Hash,nil] The found merge options or nil #
def UNK on_lparen key on_comma lookup_invocation on_rparen on_ignored_nl module_name on_op key on_period module_name on_nl on_ignored_nl if on_op on_ivar on_period UNK # Retrieve the lookup options that match the given `name`. # # @param key [LookupKey] The key for which we want lookup options # @param lookup_invocation [Puppet::Pops::Lookup::Invocation] the lookup invocation # @return [String,Hash,nil] The found lookup options or nil #
if on_op on_ivar on_period UNK on_lparen module_name on_rparen on_nl options on_op UNK on_lparen module_name on_comma lookup_invocation on_comma on_const on_period UNK # Retrieve the options for the module. We use nil as a key in case we have no module
def UNK on_lparen lookup_invocation on_rparen on_ignored_nl ep on_op UNK on_lparen lookup_invocation on_rparen on_nl ep on_period nil? on_op UNK on_op ep # @param lookup_invocation [Puppet::Pops::Lookup::Invocation] the lookup invocation # @return [Boolean] `true` if an environment data provider version 5 is configured
def UNK on_nl on_ivar on_op on_const on_period new on_lparen on_const on_period UNK on_lbracket on_symbeg UNK on_rbracket on_rparen on_nl end on_nl # @return [Pathname] the full path of the hiera.yaml config file
def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op on_const on_period new on_lparen UNK on_rparen on_nl self on_nl end on_nl on_ignored_nl # @param path [String] the absolute path name of the global hiera.yaml file. # @return [LookupAdapter] self
def UNK on_nl on_ivar on_op UNK on_nl self on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl on_const on_op on_lbracket on_symbeg UNK # Instructs the lookup framework to only perform lookups in the global layer # @return [LookupAdapter] self
def UNK on_lparen module_name on_comma lookup_invocation on_comma merge_strategy on_rparen on_ignored_nl meta_invocation on_op on_const on_period new on_lparen lookup_invocation on_period scope on_rparen # Retrieve lookup options that applies when using a specific module (i.e. a merge of the pre-cached # `env_lookup_options` and the module specific data)
on_ivar on_lbracket nil on_rbracket on_op UNK on_lparen opts on_rparen unless on_ivar on_period UNK on_lparen nil on_rparen on_nl catch on_lparen on_symbeg # Store environment options at key nil. This removes the need for an additional lookup for keys that are not prefixed.
def UNK on_lparen lookup_invocation on_comma merge_strategy on_rparen on_ignored_nl if on_op UNK on_lparen on_symbeg on_ivar on_rparen on_nl on_ivar on_op nil on_nl # Retrieve and cache the global lookup options
def UNK on_lparen lookup_invocation on_comma merge_strategy on_rparen on_ignored_nl if on_op UNK on_lparen on_symbeg on_ivar on_rparen on_nl UNK on_op UNK on_lparen # Retrieve and cache lookup options specific to the environment of the compiler that this adapter is attached to (i.e. a merge # of global and environment lookup options).
unless self on_period UNK on_lparen module_name on_rparen on_nl self on_lbracket module_name on_rbracket on_op UNK on_lparen lookup_invocation on_comma module_name on_rparen on_nl # Test if the key is present for the given module_name. It might be there even if the # value is nil (which indicates that no module provider is configured for the given name)
UNK on_op mp on_period config on_lparen lookup_invocation on_rparen on_nl if UNK on_period nil? on_nl mp on_op nil on_nl UNK UNK # A version 5 hiera.yaml trumps a data provider setting in the module
provider_name on_op UNK on_period UNK on_nl env_path on_op on_const on_lparen UNK on_period UNK on_rparen on_nl UNK on_op env_path on_op on_const # Get the name of the data provider from the environment's configuration
UNK on_op ep on_period config on_lparen lookup_invocation on_rparen on_nl if UNK on_period nil? on_nl ep on_op nil on_nl UNK UNK # A version 5 hiera.yaml trumps any data provider setting in the environment.conf
ep on_op on_const on_period new on_nl when on_tstring_beg on_tstring_content on_tstring_end on_nl ep on_op on_const on_period new on_nl ep on_period config # Use hiera.yaml or default settings if it is missing
def environment on_nl on_ivar on_period environment on_nl end on_nl end on_nl end on_nl end on_nl on_ignored_nl require_relative on_tstring_beg on_tstring_content on_tstring_end # @return [Puppet::Node::Environment] the environment of the compiler that this adapter is associated with
