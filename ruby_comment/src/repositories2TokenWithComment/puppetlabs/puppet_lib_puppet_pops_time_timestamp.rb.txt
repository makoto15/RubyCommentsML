def self on_period UNK on_lparen UNK on_rparen on_ignored_nl if UNK on_op UNK on_tstring_content UNK on_nl UNK on_nl else on_ignored_nl offset # Converts a timezone that strptime can parse using '%z' into '-HH:MM' or '+HH:MM' # @param [String] tz the timezone to convert # @return [String] the converted timezone # # @api private
def self on_period UNK on_lparen timezone on_rparen on_ignored_nl if on_const on_period UNK on_lparen timezone on_rparen on_op on_int on_nl on_op on_const # Returns the zone offset from utc for the given `timezone` # @param [String] timezone the timezone to get the offset for # @return [Integer] the timezone offset, in seconds # # @api private
def self on_period UNK on_lparen format on_comma UNK on_comma timezone on_rparen on_ignored_nl UNK timezone on_period nil? on_op timezone on_period UNK # Formats a ruby Time object using the given timezone
UNK on_op UNK on_op on_int UNK UNK on_period nil? on_nl on_ignored_nl UNK on_op on_op on_const on_period UNK on_lparen parsed on_lbracket # Convert msec rational found in _strptime hash to usec
UNK on_op on_op on_const on_period UNK on_lparen parsed on_lbracket on_symbeg UNK on_rbracket on_comma parsed on_lbracket on_symbeg UNK on_rbracket on_comma parsed # Create the Time instance and adjust for timezone
UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl UNK on_symbeg on_op on_comma on_symbeg on_op on_comma on_symbeg UNK on_comma on_symbeg UNK # Convert to Timestamp
if UNK on_lparen on_symbeg UNK on_rparen on_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_nl end on_nl if UNK on_lparen on_symbeg # does not make sense on a Timestamp
on_const on_period new on_lparen UNK on_op o on_period UNK on_rparen on_nl UNK on_const on_nl on_const on_period new on_lparen UNK on_op # Diff between two timestamps is a timespan
on_const on_period new on_lparen UNK on_op on_lparen o on_op on_const on_rparen on_period UNK on_rparen on_nl else on_ignored_nl raise on_const on_comma # Subtract seconds
