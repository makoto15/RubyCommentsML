UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK UNK on_lparen UNK on_rparen on_ignored_nl manifest on_op on_tstring_beg on_tstring_end on_nl UNK on_period UNK do # create single manifest calling all functions
UNK on_period UNK do on_op function on_comma index on_op on_ignored_nl UNK function on_lbracket on_symbeg rvalue on_rbracket on_nl manifest on_op on_tstring_beg # use index to work around puppet's immutable variables # use variables so we can concatenate strings
on_ignored_nl on_ignored_nl UNK on_op on_lbracket on_ignored_nl on_lbrace on_symbeg name on_op on_symbeg UNK on_comma on_symbeg args on_op on_tstring_beg on_tstring_content on_tstring_end on_comma # if agent["platform"] =~ /win/ # generator = {:args => '"c:/windows/system32/tasklist.exe"', :expected => /\nImage Name/} # else # generator = {:args => '"/bin/date"', :expected => /\w\w\w.*?\d\d:\d\d\:\d\d/} # end
on_ignored_nl UNK on_op on_lbracket on_ignored_nl on_lbrace on_symbeg name on_op on_symbeg UNK on_comma on_symbeg args on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg # create list of 3x functions and args # notes: hiera functions are well tested elsewhere, included for completeness # special cases: contain (call this from call_em_all) # do fail last because it errors out
on_lbrace on_symbeg name on_op on_symbeg UNK on_comma on_symbeg args on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg lambda on_op nil on_comma on_symbeg #{:name => :break, :args => '', :lambda => nil, :expected => '', :rvalue => false}, # this is explicitly called from call_em_all module which is included below #{:name => :contain, :args => 'call_em_all', :lambda => nil, :expected => '', :rvalue => true}, # below doens't instance the resource. no output
on_lbrace on_symbeg name on_op on_symbeg UNK on_comma on_symbeg args on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg lambda on_op nil on_comma on_symbeg # no output expected unless run with debug
on_lbrace on_symbeg name on_op on_symbeg UNK on_comma on_symbeg args on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg lambda on_op nil on_comma on_symbeg # Expect sha256 hash value for the digest when running on fips enabled system
on_lbrace on_symbeg name on_op on_symbeg UNK on_comma on_symbeg args on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg lambda on_op nil on_comma on_symbeg # generate requires a fully qualified exe; which requires specifics for windows vs posix #{:name => :generate, :args => generator[:args], :lambda => nil, :expected => generator[:expected], :rvalue => true},
on_lbrace on_symbeg name on_op on_symbeg UNK on_comma on_symbeg args on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg lambda on_op nil on_comma on_symbeg # no ouput unless in debug mode
on_lbrace on_symbeg name on_op UNK on_lparen agent on_comma UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_rparen on_period UNK on_op on_regexp_beg on_tstring_content # test the living life out of this thing in lookup.rb, and it doesn't allow for a default value #{:name => :lookup, :args => 'date,lookup_date', :lambda => nil, :expected => '', :rvalue => true}, # well tested elsewhere # Use fips approved hash when running on fips enabled system
on_lbrace on_symbeg name on_op on_symbeg UNK on_comma on_symbeg args on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg lambda on_op nil on_comma on_symbeg # Integer.new
on_lbrace on_symbeg name on_op on_symbeg UNK on_comma on_symbeg args on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg lambda on_op nil on_comma on_symbeg # TODO: create a virtual first
on_lbrace on_symbeg name on_op on_symbeg UNK on_comma on_symbeg args on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg lambda on_op nil on_comma on_symbeg # explicitly called in call_em_all; implicitly called by the include above #{:name => :require, :args => '[4,5,6]', :lambda => nil, :expected => '', :rvalue => true}, # 4x output contains brackets around scanf output
on_lbrace on_symbeg name on_op on_symbeg UNK on_comma on_symbeg args on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg lambda on_op nil on_comma on_symbeg # 4x output contains brackets around split output and commas btwn values
on_lbrace on_symbeg name on_op on_symbeg UNK on_comma on_symbeg args on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg lambda on_op nil on_comma on_symbeg # explicitly called in call_em_all #{:name => :tag, :args => '[4,5,6]', :lambda => nil, :expected => '', :rvalue => true},
on_lbrace on_symbeg name on_op on_symbeg UNK on_comma on_symbeg args on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg lambda on_op nil on_comma on_symbeg # do this one last or it will not allow the others to run.
on_lbrace on_symbeg name on_op on_symbeg UNK on_comma on_symbeg args on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg lambda on_op nil on_comma on_symbeg # find_file() called by binary_file #{:name => :find_file, :args => '[4,5,6]', :lambda => '|$x| {true}', :expected => '[4, 5, 6]', :rvalue => true},
on_lbrace on_symbeg name on_op on_symbeg UNK on_comma on_symbeg args on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg lambda on_op on_tstring_beg on_tstring_content on_tstring_end #{:name => :lest, :args => '100', :lambda => '"100"', :expected => '100', :rvalue => true},
on_lbrace on_symbeg name on_op on_symbeg UNK on_comma on_symbeg args on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg lambda on_op on_tstring_beg on_tstring_content on_tstring_end #{:name => :next, :args => '100', :lambda => nil, :expected => '100', :rvalue => true},
on_lbrace on_symbeg name on_op on_symbeg UNK on_comma on_symbeg args on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg lambda on_op nil on_comma on_symbeg #{:name => :return, :args => '100', :lambda => nil, :expected => '100', :rvalue => true},
on_lbrace on_symbeg name on_op on_symbeg UNK on_comma on_symbeg args on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg lambda on_op nil on_comma on_symbeg # :reuse,:recycle
UNK on_op on_lbrace on_symbeg UNK on_op on_tstring_beg on_embexpr_beg testdir on_embexpr_end on_tstring_content on_tstring_end on_comma on_ignored_nl on_symbeg UNK on_op UNK on_rbrace on_nl # apply the 4x function manifest with future parser
UNK function on_lbracket on_symbeg expected on_rbracket on_period UNK on_lparen UNK on_rparen on_nl UNK function on_lbracket on_symbeg name on_rbracket on_op on_symbeg # append the function name to the matcher so it's more expressive
