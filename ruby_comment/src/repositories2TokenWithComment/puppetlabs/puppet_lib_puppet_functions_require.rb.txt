on_const on_op on_const on_period UNK on_lparen on_symbeg UNK on_comma on_const on_op on_const on_op on_const on_rparen UNK on_ignored_nl UNK on_symbeg UNK # Requires the specified classes. # Evaluate one or more classes, adding the required class as a dependency. # # The relationship metaparameters work well for specifying relationships # between individual resources, but they can be clumsy for specifying # relationships between classes. This function is a superset of the # 'include' function, adding a class relationship so that the requiring # class depends on the required class. # # Warning: using require in place of include can lead to unwanted dependency cycles. # # For instance the following manifest, with 'require' instead of 'include' would produce a nasty # dependence cycle, because notify imposes a before between File[/foo] and Service[foo]: # # ```puppet # class myservice { # service { foo: ensure => running } # } # # class otherstuff { # include myservice # file { '/foo': notify => Service[foo] } # } # ``` # # Note that this function only works with clients 0.25 and later, and it will # fail if used with earlier clients. # # You must use the class's full name; # relative names are not allowed. In addition to names in string form, # you may also directly use Class and Resource Type values that are produced when evaluating # resource and relationship expressions. # # - Since 4.0.0 Class and Resource types, absolute names # - Since 4.7.0 Returns an Array[Type[Class]] with references to the required classes #
UNK UNK UNK UNK on_comma on_symbeg UNK on_nl UNK on_nl on_ignored_nl UNK UNK on_lparen scope on_comma on_op classes on_rparen on_ignored_nl # The function supports what the type system sees as Ruby runtime objects, and # they cannot be parameterized to find what is actually valid instances. # The validation is instead done in the function body itself via a call to # `transform_and_assert_classnames` on the calling scope.
classes on_op scope on_period UNK on_lparen classes on_period UNK on_rparen on_nl on_ignored_nl UNK on_op classes on_period UNK UNK on_op UNK # Make call patterns uniform and protected against nested arrays, also make # names absolute if so desired.
scope on_period UNK on_period UNK on_lparen classes on_comma scope on_comma UNK on_rparen on_nl UNK on_op scope on_period UNK on_period UNK # This is the same as calling the include function (but faster) since it again # would otherwise need to perform the optional absolute name transformation # (for no reason since they are already made absolute here). #
klass on_op on_lparen UNK on_op UNK on_period UNK on_lparen klass on_rparen on_rparen on_op UNK on_period UNK on_op UNK on_nl UNK # lookup the class in the scopes
