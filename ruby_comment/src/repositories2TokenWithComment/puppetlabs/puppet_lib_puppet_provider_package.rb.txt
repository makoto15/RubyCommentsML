UNK UNK on_period UNK UNK UNK UNK on_ignored_nl UNK on_period UNK UNK on_op UNK on_op on_ignored_nl UNK on_op UNK UNK # Prefetch our package list, yo.
UNK UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl UNK UNK on_nl UNK on_ivar on_period UNK on_nl UNK on_op # Clear out the cached values.
UNK UNK on_nl UNK on_ivar on_period UNK on_nl UNK on_op UNK on_period UNK on_period UNK UNK UNK UNK UNK on_op # Look up the current status.
UNK on_op UNK on_period UNK on_period UNK UNK UNK UNK UNK on_op UNK UNK on_op UNK UNK on_nl on_ivar on_op # For providers that support purging, default to purged; otherwise default to absent # Purged is the "most uninstalled" a package can be, so a purged package will be in-sync with # either `ensure => absent` or `ensure => purged`; an absent package will be out of sync with `ensure => purged`.
UNK UNK UNK UNK UNK on_ignored_nl UNK UNK UNK on_nl on_ignored_nl UNK on_period UNK UNK on_op UNK on_op on_ignored_nl UNK # Turns a array of options into flags to be passed to a command. # The options can be passed as a string or hash. Note that passing a hash # should only be used in case --foo=bar must be passed, # which can be accomplished with: # install_options => [ { '--foo' => 'bar' } ] # Regular flags like '--foo' must be passed as a string. # @param options [Array] # @return Concatenated list of options # @api private
