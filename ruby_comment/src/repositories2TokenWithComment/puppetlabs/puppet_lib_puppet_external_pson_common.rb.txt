UNK on_const on_nl class on_op UNK on_nl def on_op on_lparen object on_comma opts on_op on_lbrace on_rbrace on_rparen on_ignored_nl if object # PSON is a vendored version of pure_json v1.1.9 plus puppet patches. It # is deprecated and should not be used for future work. Use JSON instead. # # @deprecated
def on_op on_lparen object on_comma opts on_op on_lbrace on_rbrace on_rparen on_ignored_nl if object on_period respond_to? on_symbeg to_str on_nl on_const on_period # If _object_ is string-like parse the string and return the parsed result # as a Ruby data structure. Otherwise generate a PSON text from the Ruby # data structure object and return it. # # The _opts_ argument is passed through to generate/parse respectively, see # generate and parse for their documentation.
UNK on_symbeg parser on_nl on_ignored_nl def UNK on_lparen parser on_rparen UNK on_op parser on_nl UNK on_symbeg on_const if UNK on_symbeg # Returns the PSON parser class, that is used by PSON. This might be either # PSON::Ext::Parser or PSON::Pure::Parser.
def UNK on_lparen parser on_rparen UNK on_op parser on_nl UNK on_symbeg on_const if UNK on_symbeg on_const on_nl UNK on_symbeg on_const # Set the PSON parser class _parser_ to be used by PSON.
UNK on_op parser on_nl UNK on_symbeg on_const if UNK on_symbeg on_const on_nl UNK on_symbeg on_const on_comma parser on_nl end on_nl # :nodoc:
def UNK on_lparen UNK on_rparen UNK on_op UNK on_period UNK on_nl UNK on_period UNK on_lparen UNK on_tstring_content UNK on_rparen on_period # Return the constant located at _path_. # Anything may be registered as a path by calling register_path, above. # Otherwise, the format of _path_ has to be either ::A::B::C or A::B::C. # In either of these cases A has to be defined in Object (e.g. the path # must be an absolute namespace path. If the constant doesn't exist at # the given path, an ArgumentError is raised.
UNK on_op UNK on_period UNK on_nl UNK on_period UNK on_lparen UNK on_tstring_content UNK on_rparen on_period UNK on_lparen on_const on_rparen UNK # :nodoc:
def UNK on_lparen UNK on_rparen UNK on_op UNK on_nl UNK on_op UNK on_op on_const on_nl UNK UNK UNK UNK on_period # Set the module _generator_ to be used by PSON.
UNK on_op UNK on_nl UNK on_op UNK on_op on_const on_nl UNK UNK UNK UNK on_period UNK on_nl UNK on_op UNK # :nodoc:
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg state on_nl on_ignored_nl UNK on_symbeg UNK on_nl end on_nl UNK on_period UNK on_op # Returns the PSON generator modul, that is used by PSON. This might be # either PSON::Ext::Generator or PSON::Pure::Generator.
UNK on_symbeg state on_nl on_ignored_nl UNK on_symbeg UNK on_nl end on_nl UNK on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl # Returns the PSON generator state class, that is used by PSON. This might # be either PSON::Ext::Generator::State or PSON::Pure::Generator::State.
UNK on_symbeg UNK on_nl end on_nl UNK on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl on_const on_op on_lparen on_op UNK # This is create identifier, that is used to decide, if the _pson_create_ # hook of a class should be called. It defaults to 'document_type'.
class on_const on_op on_const on_semicolon end on_nl on_ignored_nl class on_const on_op on_const on_semicolon end on_nl on_ignored_nl class on_const on_op on_const # The base exception for PSON errors.
class on_const on_op on_const on_semicolon end on_nl on_ignored_nl class on_const on_op on_const on_semicolon end on_nl on_ignored_nl class on_const on_op on_const # This exception is raised, if a parser error occurs.
class on_const on_op on_const on_semicolon end on_nl on_ignored_nl class on_const on_op on_const on_semicolon end on_nl on_const on_op on_const on_nl on_ignored_nl # This exception is raised, if the nesting of parsed datastructures is too # deep.
class on_const on_op on_const on_semicolon end on_nl on_const on_op on_const on_nl on_ignored_nl class on_const on_op on_const on_semicolon end on_nl on_ignored_nl # This exception is raised, if a generator or unparser error occurs.
on_const on_op on_const on_nl on_ignored_nl class on_const on_op on_const on_semicolon end on_nl on_ignored_nl class on_const on_op on_const on_semicolon end on_nl # For backwards compatibility
class on_const on_op on_const on_semicolon end on_nl on_ignored_nl class on_const on_op on_const on_semicolon end on_nl on_ignored_nl module_function on_nl on_ignored_nl def # If a circular data structure is encountered while unparsing # this exception is raised.
class on_const on_op on_const on_semicolon end on_nl on_ignored_nl module_function on_nl on_ignored_nl def parse on_lparen source on_comma opts on_op on_lbrace on_rbrace # This exception is raised, if the required unicode support is missing on the # system. Usually this means, that the iconv library is not installed.
def parse on_lparen source on_comma opts on_op on_lbrace on_rbrace on_rparen on_ignored_nl on_const on_period parser on_period UNK on_lparen source on_comma opts # Parse the PSON string _source_ into a Ruby data structure and return it. # # _opts_ can have the following # keys: # * *max_nesting*: The maximum depth of nesting allowed in the parsed data # structures. Disable depth checking with :max_nesting => false, it defaults # to 19. # * *allow_nan*: If set to true, allow NaN, Infinity and -Infinity in # defiance of RFC 4627 to be parsed by the Parser. This option defaults # to false.
def UNK on_lparen source on_comma opts on_op on_lbrace on_rbrace on_rparen on_ignored_nl opts on_op on_lbrace on_ignored_nl on_symbeg UNK on_op UNK on_comma # Parse the PSON string _source_ into a Ruby data structure and return it. # The bang version of the parse method, defaults to the more dangerous values # for the _opts_ hash, so be sure only to parse trusted _source_ strings. # # _opts_ can have the following keys: # * *max_nesting*: The maximum depth of nesting allowed in the parsed data # structures. Enable depth checking with :max_nesting => anInteger. The parse! # methods defaults to not doing max depth checking: This can be dangerous, # if someone wants to fill up your stack. # * *allow_nan*: If set to true, allow NaN, Infinity, and -Infinity in # defiance of RFC 4627 to be parsed by the Parser. This option defaults # to true.
def generate on_lparen obj on_comma state on_op nil on_rparen on_ignored_nl if state on_nl state on_op on_const on_period UNK on_lparen state # Unparse the Ruby data structure _obj_ into a single line PSON string and # return it. _state_ is # * a PSON::State object, # * or a Hash like object (responding to to_hash), # * an object convertible into a hash by a to_h method, # that is used as or to configure a State object. # # It defaults to a state object, that creates the shortest possible PSON text # in one line, checks for circular data structures and doesn't allow NaN, # Infinity, and -Infinity. # # A _state_ hash can have the following keys: # * *indent*: a string used to indent levels (default: ''), # * *space*: a string that is put after, a : or , delimiter (default: ''), # * *space_before*: a string that is put before a : pair delimiter (default: ''), # * *object_nl*: a string that is put at the end of a PSON object (default: ''), # * *array_nl*: a string that is put at the end of a PSON array (default: ''), # * *check_circular*: true if checking for circular data structures # should be done (the default), false otherwise. # * *allow_nan*: true if NaN, Infinity, and -Infinity should be # generated, otherwise an exception is thrown, if these values are # encountered. This options defaults to false. # * *max_nesting*: The maximum depth of nesting allowed in the data # structures from which PSON is to be generated. Disable depth checking # with :max_nesting => false, it defaults to 19. # # See also the fast_generate for the fastest creation method with the least # amount of sanity checks, and the pretty_generate method for some # defaults for a pretty output.
UNK UNK generate on_nl module_function on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen obj on_rparen on_ignored_nl obj on_period UNK on_lparen nil # :stopdoc: # I want to deprecate these later, so I'll first be silent about them, and # later delete them.
on_ignored_nl def UNK on_lparen obj on_rparen on_ignored_nl obj on_period UNK on_lparen nil on_rparen on_nl end on_nl on_ignored_nl UNK UNK UNK # :startdoc:
def UNK on_lparen obj on_rparen on_ignored_nl obj on_period UNK on_lparen nil on_rparen on_nl end on_nl on_ignored_nl UNK UNK UNK on_nl # Unparse the Ruby data structure _obj_ into a single line PSON string and # return it. This method disables the checks for circles in Ruby objects, and # also generates NaN, Infinity, and, -Infinity float values. # # *WARNING*: Be careful not to pass any Ruby data structures with circles as # _obj_ argument, because this will cause PSON to go into an infinite loop.
UNK UNK UNK on_nl module_function on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen obj on_comma opts on_op nil on_rparen on_ignored_nl on_ignored_nl # :stopdoc: # I want to deprecate these later, so I'll first be silent about them, and later delete them.
on_ignored_nl def UNK on_lparen obj on_comma opts on_op nil on_rparen on_ignored_nl on_ignored_nl state on_op on_const on_period state on_period UNK on_lparen # :startdoc:
def UNK on_lparen obj on_comma opts on_op nil on_rparen on_ignored_nl on_ignored_nl state on_op on_const on_period state on_period UNK on_lparen on_ignored_nl # Unparse the Ruby data structure _obj_ into a PSON string and return it. The # returned string is a prettier form of the string returned by #unparse. # # The _opts_ argument can be used to configure the generator, see the # generate method for a more detailed explanation.
UNK UNK UNK on_nl module_function on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen source on_comma proc on_op nil on_rparen on_ignored_nl if # :stopdoc: # I want to deprecate these later, so I'll first be silent about them, and later delete them.
on_ignored_nl def UNK on_lparen source on_comma proc on_op nil on_rparen on_ignored_nl if source on_period respond_to? on_symbeg to_str on_nl source on_op # :startdoc:
def UNK on_lparen source on_comma proc on_op nil on_rparen on_ignored_nl if source on_period respond_to? on_symbeg to_str on_nl source on_op source # Load a ruby data structure from a PSON _source_ and return it. A source can # either be a string-like object, an IO like object, or an object responding # to the read method. If _proc_ was given, it will be called with any nested # Ruby object as an argument recursively in depth first order. # # This method is part of the implementation of the load/dump interface of # Marshal and YAML.
def UNK on_lparen obj on_comma anio on_op nil on_comma UNK on_op nil on_rparen on_ignored_nl if anio UNK UNK on_period UNK # Dumps _obj_ as a PSON string, i.e. calls generate on the object and returns # the result. # # If anIO (an IO like object or an object that responds to the write method) # was given, the resulting PSON is written to it. # # If the number of nested arrays or objects exceeds _limit_ an ArgumentError # exception is raised. This argument is similar (but not exactly the # same!) to the _limit_ argument in Marshal.dump. # # This method is part of the implementation of the load/dump interface of # Marshal and YAML.
if on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl def UNK on_lparen UNK on_comma UNK on_comma UNK on_rparen on_ignored_nl # Provide a smarter wrapper for changing string encoding that works with # both Ruby 1.8 (iconv) and 1.9 (String#encode). Thankfully they seem to # have compatible input syntax, at least for the encodings we touch.
def UNK on_lparen on_op UNK on_rparen on_ignored_nl UNK on_period UNK UNK on_op obj on_op on_ignored_nl UNK on_const on_op generate on_lparen # Outputs _objs_ to STDOUT as PSON strings in the shortest form, that is in # one line.
def UNK on_lparen on_op UNK on_rparen on_ignored_nl UNK on_period UNK UNK on_op obj on_op on_ignored_nl UNK on_const on_op UNK on_lparen # Outputs _objs_ to STDOUT as PSON strings in a pretty format, with # indentation and over many lines.
def on_const on_lparen object on_comma opts on_op on_lbrace on_rbrace on_rparen on_ignored_nl if object on_period respond_to? on_symbeg to_str on_nl on_const on_period # If _object_ is string-like parse the string and return the parsed result as # a Ruby data structure. Otherwise generate a PSON text from the Ruby data # structure object and return it. # # The _opts_ argument is passed through to generate/parse respectively, see # generate and parse for their documentation.
def UNK on_nl respond_to? on_lparen on_symbeg UNK on_rparen on_nl end on_nl end on_nl EMP EMP EMP EMP EMP EMP EMP # Returns true, if this class can be used to create an instance # from a serialised PSON string. The class has to implement a class # method _pson_create_ that expects a hash as first parameter, which includes # the required data.
