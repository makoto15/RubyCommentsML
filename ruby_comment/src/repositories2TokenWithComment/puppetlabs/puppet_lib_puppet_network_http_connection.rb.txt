UNK on_const on_op on_const on_op on_const UNK end on_nl on_ignored_nl UNK on_const on_nl on_ignored_nl on_const on_op on_lbrace on_ignored_nl on_symbeg UNK # This will be raised if too many redirects happen for a given HTTP request
UNK on_const on_nl on_ignored_nl on_const on_op on_lbrace on_ignored_nl on_symbeg UNK on_op UNK on_comma on_ignored_nl on_symbeg UNK on_op nil on_comma on_symbeg # This class provides simple methods for issuing various types of HTTP # requests. It's interface is intended to mirror Ruby's Net::HTTP # object, but it provides a few important bits of additional # functionality. Notably: # # * Any HTTPS requests made using this class will use Puppet's SSL # certificate configuration for their authentication, and # * Provides some useful error handling for any SSL errors that occur # during a request. # @api public
on_symbeg verifier on_op nil on_comma on_ignored_nl on_symbeg UNK on_op on_int on_comma on_ignored_nl on_rbrace on_nl on_ignored_nl def UNK on_lparen UNK on_comma # Puppet::SSL::Validator is deprecated
def UNK on_lparen UNK on_comma UNK on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl on_ivar on_op UNK on_nl on_ivar on_op UNK # Creates a new HTTP client connection to `host`:`port`. # @param host [String] the host to which this client will connect to # @param port [Integer] the port to which this client will connect to # @param options [Hash] options influencing the properties of the created # connection, # @option options [Boolean] :use_ssl true to connect with SSL, false # otherwise, defaults to true # @option options [#setup_connection] :verify An object that will configure # any verification to do on the connection # @option options [Integer] :redirect_limit the number of allowed # redirections, defaults to 10 passing any other option in the options # hash results in a Puppet::Error exception # # @note the HTTP connection itself happens lazily only when {#request}, or # one of the {#get}, {#post}, {#delete}, {#head} or {#put} is called # @note The correct way to obtain a connection is to use one of the factory # methods on {Puppet::Network::HttpPool} # @api private
on_ignored_nl def UNK on_lparen path on_comma headers on_op on_lbrace on_rbrace on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl do_request on_lparen on_const # @!macro [new] common_options # @param options [Hash] options influencing the request made. Any # options not recognized by this class will be ignored - no error will # be thrown. # @option options [Hash{Symbol => String}] :basic_auth The basic auth # :username and :password to use for the request, :metric_id Ignored # by this class - used by Puppet Server only. The metric id by which # to track metrics on requests.
def UNK on_lparen path on_comma headers on_op on_lbrace on_rbrace on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl do_request on_lparen on_const on_op # @param path [String] # @param headers [Hash{String => String}] # @!macro common_options # @api public
def UNK on_lparen path on_comma UNK on_comma headers on_op nil on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl request on_op on_const # @param path [String] # @param data [String] # @param headers [Hash{String => String}] # @!macro common_options # @api public
def UNK on_lparen path on_comma headers on_op on_lbrace on_rbrace on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl do_request on_lparen on_const on_op # @param path [String] # @param headers [Hash{String => String}] # @!macro common_options # @api public
def UNK on_lparen path on_comma headers on_op on_lbrace on_tstring_beg on_tstring_content on_tstring_end on_op on_tstring_beg on_tstring_content on_tstring_end on_rbrace on_comma options on_op on_lbrace # @param path [String] # @param headers [Hash{String => String}] # @!macro common_options # @api public
def UNK on_lparen path on_comma UNK on_comma headers on_op nil on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl request on_op on_const # @param path [String] # @param data [String] # @param headers [Hash{String => String}] # @!macro common_options # @api public
def UNK on_lparen on_op args on_comma on_op block on_rparen on_ignored_nl with_connection on_lparen on_ivar on_rparen do on_op http on_op on_ignored_nl resp # TODO: These are proxies for the Net::HTTP#request_* methods, which are # almost the same as the "get", "post", etc. methods that we've ported above, # but they are able to accept a code block and will yield to it, which is # necessary to stream responses, e.g. file content. For now # we're not funneling these proxy implementations through our #request # method above, so they will not inherit the same error handling. In the # future we may want to refactor these so that they are funneled through # that method and do inherit the error handling.
on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl # end of Net::HTTP#request_* proxies
def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl # The address to connect to.
def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl # The port to connect to.
def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def verifier on_nl on_ivar on_nl end on_nl on_ignored_nl UNK on_nl # Whether to use ssl
def verifier on_nl on_ivar on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl def do_request on_lparen request on_comma options on_rparen on_ignored_nl current_request # @api private
UNK on_op on_const on_period UNK on_lparen UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_rparen on_nl UNK on_op UNK on_period UNK on_lparen # handle redirection
current_request on_op current_request on_period UNK on_period new on_lparen UNK on_period path on_rparen on_nl current_request on_period UNK on_op request on_period UNK # update to the current request path
end on_nl on_ignored_nl UNK on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label on_ivar on_comma on_label on_ivar on_rbrace # and try again...
def UNK on_lparen response on_rparen on_ignored_nl retry_after on_op response on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl UNK response if retry_after on_period # Handles the Retry-After header of a HTTPResponse # # This method checks the response for a Retry-After header and handles # it by sleeping for the indicated number of seconds. The response is # returned unmodified if no Retry-After header is present. # # @param response [Net::HTTPResponse] A response received from the # HTTP client. # # @return [nil] Sleeps and returns nil if the response contained a # Retry-After header that indicated the request should be retried. # @return [Net::HTTPResponse] Returns the `response` unmodified if # no Retry-After header was present or the Retry-After header could # not be parsed as an integer or RFC 2822 date.
UNK on_op if response on_period uri on_period UNK on_lparen on_const on_rparen on_nl response on_period uri on_period UNK on_nl UNK on_ignored_nl # Recover remote hostname if Net::HTTPResponse was generated by a # method that fills in the uri attribute. #
_ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl if retry_sleep on_period UNK on_nl on_const on_period UNK on_lparen _ # TRANSLATORS: Used in the phrase: # "Received a response from the remote server."
retry_sleep on_op on_lbracket retry_sleep on_comma on_const on_lbracket on_symbeg UNK on_rbracket on_rbracket on_period UNK on_nl on_ignored_nl on_const on_period UNK on_lparen _ # Cap maximum sleep at the run interval of the Puppet agent.
def UNK on_lparen UNK on_rparen on_ignored_nl retry_after on_op UNK on_ignored_nl on_const on_lparen UNK on_rparen on_nl UNK on_const on_comma on_const on_nl # Parse the value of a Retry-After header # # Parses a string containing an Integer or RFC 2822 datestamp and returns # an integer number of seconds before a request can be retried. # # @param header_value [String] The value of the Retry-After header. # # @return [Integer] Number of seconds to wait before retrying the # request. Will be equal to 0 for the case of date that has already # passed. # @return [nil] Returns `nil` when the `header_value` can't be # parsed as an Integer or RFC 2822 date.
