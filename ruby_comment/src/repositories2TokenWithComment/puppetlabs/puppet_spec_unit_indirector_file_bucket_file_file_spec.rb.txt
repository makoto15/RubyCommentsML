UNK on_op on_lbracket on_int on_comma on_int on_comma on_int on_comma on_int on_comma on_ignored_nl on_int on_comma on_int on_comma on_int on_comma on_int on_comma # This is the shortest known MD5 collision (little endian). See https://eprint.iacr.org/2010/643.pdf
expect on_lparen on_const on_rparen on_period to UNK on_lparen on_symbeg UNK on_rparen on_period UNK on_lparen UNK on_tstring_content on_embexpr_beg on_const on_lbracket on_symbeg # We expect Puppet to log an error with the path to the file
expect do on_ignored_nl save_bucket_file on_lparen UNK on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_period to UNK on_lparen on_const on_op on_const # But the exception should not contain it
UNK on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl let on_lparen on_symbeg UNK on_rparen on_lbrace on_tstring_beg on_tstring_content on_tstring_end on_rbrace on_nl let on_lparen on_symbeg # See PUP-1334
on_const on_op on_const on_period UNK on_lparen contents_file on_rparen if on_const on_op on_const on_period UNK on_lparen contents_file on_rparen on_nl on_const on_op # Ensure we're starting with a clean slate - no pre-existing backup
on_const on_op on_const on_op on_const on_period indirection on_period save on_lparen bucket_file on_rparen on_nl on_const on_op on_const on_period UNK on_lparen contents_file # Create initial "correct" backup
on_const on_op on_const on_period UNK on_lparen contents_file on_rparen on_const on_op on_const on_period UNK on_lparen contents_file on_comma on_int on_rparen on_lbrace on_op # Modify the contents file so that it no longer matches the SHA, simulating a corrupt backup
on_const on_op on_const on_period UNK on_lparen contents_file on_comma on_int on_rparen on_lbrace on_op UNK on_op UNK on_period UNK on_tstring_beg on_tstring_content on_tstring_end # bucket_files are read-only
save_bucket_file on_lparen plaintext on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl save_bucket_file on_lparen plaintext on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl dir_path on_op # save it twice
end on_nl end on_nl on_ignored_nl describe on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl UNK do on_ignored_nl it on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl # end
find_result on_op on_const on_op on_const on_op on_const on_period indirection on_period find on_lparen on_tstring_beg on_embexpr_beg digest_algorithm on_embexpr_end on_tstring_content on_embexpr_beg checksum1 on_embexpr_end # Use the first checksum as we know it's stored in the bucket
UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl expect on_lparen find_result on_period UNK on_rparen on_period to UNK on_lparen on_const on_period new on_lparen # The list is sort order from date and file name, so first and third checksums come before the second
if on_const on_op on_const on_op on_const on_period windows? on_op on_lparen on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period # this one replaces most of the lets in the "when # digest_digest_algorithm is set..." shared context, but it still needs digest_algorithm
else on_ignored_nl on_const on_lbracket on_symbeg bucketdir on_rbracket on_op on_ivar on_nl end on_nl on_ignored_nl on_ivar on_op on_tstring_beg on_embexpr_beg on_ivar on_embexpr_end on_tstring_content # should not be used
else on_ignored_nl UNK on_op on_ivar on_period find on_lparen on_ivar on_rparen on_nl expect on_lparen UNK on_rparen on_period to UNK on_lparen on_const # because path didn't match
