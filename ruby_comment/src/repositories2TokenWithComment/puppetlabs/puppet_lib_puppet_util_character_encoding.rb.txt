on_ignored_nl UNK on_const on_op on_const on_op on_const on_nl UNK on_op UNK on_nl UNK UNK on_lparen string on_rparen on_ignored_nl original_encoding on_op # A module to centralize heuristics/practices for managing character encoding in Puppet
UNK UNK on_lparen string on_rparen on_ignored_nl original_encoding on_op string on_period UNK on_nl string_copy on_op string on_period UNK on_nl UNK on_ignored_nl # Given a string, attempts to convert a copy of the string to UTF-8. Conversion uses # encode - the string's internal byte representation is modifed to UTF-8. # # This method is intended for situations where we generally trust that the # string's bytes are a faithful representation of the current encoding # associated with it, and can use it as a starting point for transcoding # (conversion) to UTF-8. # # @api public # @param [String] string a string to transcode # @return [String] copy of the original string, in UTF-8 if transcodable
return string_copy on_nl UNK on_ignored_nl string_copy on_period UNK on_lparen on_const on_period UNK on_rparen if original_encoding on_op on_const on_op on_const on_nl # String is already valid UTF-8 - noop
string_copy on_period UNK on_lparen on_const on_period UNK on_rparen if original_encoding on_op on_const on_op on_const on_nl return string_copy on_period UNK on_lparen # If the string comes to us as BINARY encoded, we don't know what it # started as. However, to encode! we need a starting place, and our # best guess is whatever the system currently is (default_external). # So set external_encoding to default_external before we try to # transcode to UTF-8.
string_copy on_period UNK on_lparen original_encoding on_rparen if original_encoding on_op on_const on_op on_const on_nl on_ignored_nl on_const on_period UNK on_lparen UNK on_lparen # Set the encoding on our copy back to its original if we modified it
on_const on_period UNK on_lparen UNK on_lparen UNK UNK UNK on_rparen on_op on_ignored_nl UNK UNK UNK on_period UNK UNK UNK string # Catch both our own self-determined failure to transcode as well as any # error on ruby's part, ie Encoding::UndefinedConversionError on a # failure to encode!.
UNK UNK on_lparen string on_rparen on_ignored_nl string_copy on_op string on_period UNK on_nl original_encoding on_op string_copy on_period UNK on_nl return string_copy # Given a string, tests if that string's bytes represent valid UTF-8, and if # so return a copy of the string with external encoding set to UTF-8. Does # not modify the byte representation of the string. If the string does not # represent valid UTF-8, does not set the external encoding. # # This method is intended for situations where we do not believe that the # encoding associated with a string is an accurate reflection of its actual # bytes, i.e., effectively when we believe Ruby is incorrect in its # assertion of the encoding of the string. # # @api public # @param [String] string to set external encoding (re-label) to utf-8 # @return [String] a copy of string with external encoding set to utf-8, or # a copy of the original string if override would result in invalid encoding.
return string_copy on_period UNK on_lparen original_encoding on_rparen on_nl end on_nl end on_nl end on_nl end on_nl EMP EMP EMP EMP # Set copy back to its original encoding before returning
