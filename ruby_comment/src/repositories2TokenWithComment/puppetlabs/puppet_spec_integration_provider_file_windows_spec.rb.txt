UNK on_const on_period UNK on_period UNK on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_const on_op on_const on_period UNK on_lparen on_symbeg # For some reason the provider test will not filter out on windows when using the # :if => Puppet.features.microsoft_windows? method of filtering the tests.
on_const on_op on_const on_op on_const on_op on_const on_period UNK on_lparen UNK on_comma tmp_file on_rparen unless UNK on_period nil? on_nl on_const # There are other tests to ensure that these methods do indeed # set the owner and group. Therefore it's ok to depend on them # here
on_const on_op on_const on_op on_const on_op on_const on_period UNK on_lparen UNK on_period UNK on_lparen UNK on_rparen on_comma tmp_file on_comma UNK # Pretend we are managing the owner and group to FORCE this mode, even if it's "bad"
value on_op on_op on_const on_op on_const on_op on_const on_op on_const on_op on_const on_nl end on_nl on_ignored_nl UNK on_op on_lbrace on_ignored_nl # For the purposes of these tests we don't care about the extra-ace bit in modes # This function removes it
on_ignored_nl on_const on_period UNK on_tstring_beg on_tstring_content on_tstring_end do on_op testcase on_op on_ignored_nl on_ignored_nl UNK on_lparen on_symbeg UNK on_rparen do on_ignored_nl # Testcase Hash options # create_* : These options are used when creating the initial test file # create_owner (Required!) # create_group (Required!) # create_mode # # manifest_* : These options are used to craft the manifest which is applied to the test file after createion # manifest_owner, # manifest_group, # manifest_mode (Required!) # # actual_* : These options are used to check the _actual_ values as opposed to the munged values from puppet # actual_mode (Uses manifest_mode for checks if not set)
UNK on_lparen result on_period UNK on_period UNK on_rparen on_period UNK UNK UNK on_nl end on_nl on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end # Idempotent. Should be no changed resources
UNK on_lparen result on_period UNK on_period UNK on_rparen on_period UNK UNK on_op UNK on_nl end on_nl end on_nl end on_nl # Not idempotent. Expect changed resources
on_lbracket on_ignored_nl on_lbrace on_symbeg create_owner on_op on_symbeg system on_comma on_symbeg create_group on_op on_symbeg administrators on_comma on_symbeg manifest_mode on_op on_tstring_beg on_tstring_content # These scenarios round-trip permissions and are idempotent
it_behaves_like on_tstring_beg on_tstring_content on_tstring_end on_comma testcase on_nl it_behaves_like on_tstring_beg on_tstring_content on_tstring_end on_comma testcase on_period merge on_lparen on_lbrace on_symbeg manifest_owner on_op # What happens if the owner and group are not managed
it_behaves_like on_tstring_beg on_tstring_content on_tstring_end on_comma testcase on_period merge on_lparen on_lbrace on_symbeg manifest_owner on_op testcase on_lbracket on_symbeg create_owner on_rbracket on_rbrace on_rparen # What happens if the owner is managed
it_behaves_like on_tstring_beg on_tstring_content on_tstring_end on_comma testcase on_period merge on_lparen on_lbrace on_symbeg manifest_group on_op testcase on_lbracket on_symbeg create_group on_rbracket on_rbrace on_rparen # What happens if the group is managed
it_behaves_like on_tstring_beg on_tstring_content on_tstring_end on_comma testcase on_period merge on_lparen on_lbrace on_ignored_nl on_symbeg manifest_owner on_op testcase on_lbracket on_symbeg create_owner on_rbracket on_comma # What happens if both the owner and group are managed
both_system_testcase on_op on_lbrace on_symbeg create_owner on_op on_symbeg system on_comma on_symbeg create_group on_op on_symbeg system on_comma on_symbeg manifest_mode on_op on_tstring_beg on_tstring_content # SYSTEM is special in that when specifying less than mode 7, the owner and/or group MUST be managed # otherwise it's munged to 7 behind the scenes and is not idempotent
it_behaves_like on_tstring_beg on_tstring_content on_tstring_end on_comma both_system_testcase on_period merge on_lparen on_lbrace on_symbeg is_idempotent on_op UNK on_rbrace on_rparen on_nl it_behaves_like on_tstring_beg on_tstring_content # What happens if the owner and group are not managed
it_behaves_like on_tstring_beg on_tstring_content on_tstring_end on_comma both_system_testcase on_period merge on_lparen on_lbrace on_symbeg manifest_owner on_op both_system_testcase on_lbracket on_symbeg create_owner on_rbracket on_rbrace on_rparen # What happens if the owner is managed
it_behaves_like on_tstring_beg on_tstring_content on_tstring_end on_comma both_system_testcase on_period merge on_lparen on_lbrace on_symbeg manifest_group on_op both_system_testcase on_lbracket on_symbeg create_group on_rbracket on_rbrace on_rparen # What happens if the group is managed
it_behaves_like on_tstring_beg on_tstring_content on_tstring_end on_comma both_system_testcase on_period merge on_lparen on_lbrace on_ignored_nl on_symbeg manifest_owner on_op both_system_testcase on_lbracket on_symbeg create_owner on_rbracket on_comma # However when we manage SYSTEM explicitly, then the modes lower than 7 stick and the file provider # assumes it's insync (i.e. idempotent)
on_lbracket on_ignored_nl on_lbrace on_symbeg create_owner on_op on_symbeg system on_comma on_symbeg create_group on_op on_symbeg system on_comma on_symbeg manifest_mode on_op on_tstring_beg on_tstring_content # What happens if we _create_ a file that SYSTEM is a part of, and is Full Control, but the manifest says it should not be Full Control # Behind the scenes the mode should be changed to 7 and be idempotent
