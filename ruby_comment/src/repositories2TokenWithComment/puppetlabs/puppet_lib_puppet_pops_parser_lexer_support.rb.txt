UNK on_const on_nl on_ignored_nl def UNK on_nl UNK on_tstring_beg on_tstring_content on_tstring_end UNK on_ivar on_period UNK on_nl UNK on_op on_ivar on_period # This is an integral part of the Lexer. It is broken out into a separate module # for maintainability of the code, and making the various parts of the lexer focused. #
def UNK on_nl UNK on_tstring_beg on_tstring_content on_tstring_end UNK on_ivar on_period UNK on_nl UNK on_op on_ivar on_period UNK on_lbracket on_int on_comma # Returns "<eof>" if at end of input, else the following 5 characters with \n \r \t escaped
def UNK on_lparen UNK on_rparen on_ignored_nl UNK UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_ignored_nl on_tstring_beg # Returns a quoted string using " or ' depending on the given a strings's content
def UNK on_lparen issue on_comma args on_op on_lbrace on_rbrace on_rparen on_ignored_nl UNK on_const on_op on_const on_period new on_lparen issue on_period # Raises a Puppet::LexError with the given message
def UNK on_lparen issue on_comma args on_op on_lbrace on_rbrace on_comma pos on_op nil on_rparen on_ignored_nl UNK UNK on_lparen issue on_comma # Raises a Puppet::ParserErrorWithIssue with the given issue and arguments
def UNK on_lparen issue on_comma args on_op on_lbrace on_rbrace on_comma pos on_op nil on_rparen on_ignored_nl on_const on_op on_const on_period new # @param issue [Issues::Issue] the issue # @param args [Hash<Symbol,String>] Issue arguments # @param pos [Integer] # @return [Puppet::ParseErrorWithIssue] the created error
def UNK on_lparen value on_comma pos on_rparen on_ignored_nl UNK value on_op on_regexp_beg on_tstring_content on_regexp_end on_nl UNK on_lparen on_const on_op on_const # Asserts that the given string value is a float, or an integer in decimal, octal or hex form. # An error is raised if the given value does not comply. #
UNK on_const on_op on_const on_nl UNK on_symbeg UNK on_nl UNK on_symbeg UNK on_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK # A TokenValue keeps track of the token symbol, the lexed text for the token, its length # and its position in its source container. There is a cost associated with computing the # line and position on line information. #
on_tstring_beg on_tstring_content UNK UNK on_lbracket on_symbeg value on_rbracket UNK on_tstring_content UNK on_ivar on_lbracket on_int on_rbracket UNK on_tstring_content on_tstring_end on_nl end # This format is very compact and is intended for debugging output from racc parser in # debug mode. If this is made more elaborate the output from a debug run becomes very hard to read. #
end on_nl on_ignored_nl on_ignored_nl on_const on_op on_const on_op on_const on_op on_const on_nl on_const on_op on_const on_op on_const on_nl on_ignored_nl on_const # TODO: Make this comparable for testing # vs symbolic, vs array with symbol and non hash, array with symbol and hash) #
on_const on_period new on_lparen on_ignored_nl on_lparen content on_period UNK on_lparen on_int on_rparen on_op on_tstring_beg on_tstring_content on_tstring_end on_rparen on_comma on_ignored_nl on_lparen # get 5 bytes as efficiently as possible (none of the string methods works since a bom consists of # illegal characters on most platforms, and there is no get_bytes(n). Explicit calls are faster than # looping with a lambda. The get_byte returns nil if there are too few characters, and they # are changed to spaces
