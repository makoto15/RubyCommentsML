UNK on_const on_op on_const on_nl on_ignored_nl class on_const on_op on_const on_op on_const on_nl def initialize on_lparen UNK on_comma UNK on_op # @api private
UNK on_const on_nl def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl on_const on_op on_const on_op on_const on_period UNK on_lparen on_symbeg # @api private
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl on_const on_op on_const on_op on_const on_period UNK on_lparen on_symbeg UNK on_comma on_ignored_nl # Create an anonymous environment. # # @param module_path [String] A list of module directories separated by the # PATH_SEPARATOR # @param manifest [String] The path to the manifest # @return A new environment with the `name` `:anonymous` # # @api private
UNK on_const on_nl def UNK on_lparen name on_rparen on_ignored_nl UNK on_op get on_lparen name on_rparen on_nl if UNK on_nl UNK # Provide any common methods that loaders should have. It requires that any # classes that include this module implement get # @api private
def UNK on_lparen name on_rparen on_ignored_nl UNK on_op get on_lparen name on_rparen on_nl if UNK on_nl UNK on_nl UNK on_ignored_nl # @!macro loader_get_or_fail
on_ignored_nl class on_const on_nl include on_const on_nl include on_const on_nl on_ignored_nl def initialize on_lparen on_op UNK on_rparen on_ignored_nl on_ivar on_op # @!macro [new] loader_search_paths # A list of indicators of where the loader is getting its environments from. # @return [Array<String>] The URIs of the load locations # # @!macro [new] loader_list # @return [Array<Puppet::Node::Environment>] All of the environments known # to the loader # # @!macro [new] loader_get # Find a named environment # # @param name [String,Symbol] The name of environment to find # @return [Puppet::Node::Environment, nil] the requested environment or nil # if it wasn't found # # @!macro [new] loader_get_conf # Attempt to obtain the initial configuration for the environment. Not all # loaders can provide this. # # @param name [String,Symbol] The name of the environment whose configuration # we are looking up # @return [Puppet::Setting::EnvironmentConf, nil] the configuration for the # requested environment, or nil if not found or no configuration is available # # @!macro [new] loader_get_or_fail # Find a named environment or raise # Puppet::Environments::EnvironmentNotFound when the named environment is # does not exist. # # @param name [String,Symbol] The name of environment to find # @return [Puppet::Node::Environment] the requested environment
class on_const on_nl include on_const on_nl include on_const on_nl on_ignored_nl def initialize on_lparen on_op UNK on_rparen on_ignored_nl on_ivar on_op UNK # A source of pre-defined environments. # # @api private
def search_paths on_nl on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl end on_nl on_ignored_nl def list on_nl on_ivar on_nl end on_nl on_ignored_nl # @!macro loader_search_paths
def list on_nl on_ivar on_nl end on_nl on_ignored_nl def get on_lparen name on_rparen on_ignored_nl on_ivar on_period UNK do on_op env # @!macro loader_list
def get on_lparen name on_rparen on_ignored_nl on_ivar on_period UNK do on_op env on_op on_ignored_nl env on_period name on_op name on_period # @!macro loader_get
def get_conf on_lparen name on_rparen on_ignored_nl env on_op get on_lparen name on_rparen on_nl if env on_nl on_const on_op on_const on_op # Returns a basic environment configuration object tied to the environment's # implementation values. Will not interpolate. # # @!macro loader_get_conf
class on_const on_op on_const on_nl on_ignored_nl def list on_nl on_lbracket on_rbracket on_nl end on_nl end on_nl on_ignored_nl class on_const on_op # A source of unlisted pre-defined environments. # # Used only for internal bootstrapping environments which are not relevant # to an end user (such as the fall back 'configured' environment). # # @api private
def list on_nl on_lbracket on_rbracket on_nl end on_nl end on_nl on_ignored_nl class on_const on_op on_const on_nl def initialize on_lparen env_name # Unlisted # # @!macro loader_list
def initialize on_lparen env_name on_comma UNK on_comma UNK on_rparen on_ignored_nl UNK on_lparen UNK on_rparen on_nl on_ivar on_op UNK on_nl on_ivar # Accepts a single environment in the given directory having the given name (not required to be reflected as the name # of the directory)
def get_conf on_lparen name on_rparen on_ignored_nl return nil UNK name on_period UNK on_op on_ivar on_nl on_const on_op on_const on_op on_const # @!macro loader_get_conf
class on_const on_nl include on_const on_nl on_ignored_nl def initialize on_lparen UNK on_comma UNK on_rparen on_ignored_nl on_ivar on_op on_const on_op on_const # Reads environments from a directory on disk. Each environment is # represented as a sub-directory. The environment's manifest setting is the # `manifest` directory of the environment directory. The environment's # modulepath setting is the global modulepath (from the `[master]` section # for the master) prepended with the `modules` directory of the environment # directory. # # @api private
def UNK on_period UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_lparen on_const on_op on_const on_rparen # Generate an array of directory loaders from a path string. # @param path [String] path to environment directories # @param global_module_path [Array<String>] the global modulepath setting # @return [Array<Puppet::Environments::Directories>] An array # of configured directory loaders.
def search_paths on_nl on_lbracket on_tstring_beg on_tstring_content on_embexpr_beg on_ivar on_embexpr_end on_tstring_end on_rbracket on_nl end on_nl on_ignored_nl def list on_nl UNK on_period # @!macro loader_search_paths
def list on_nl UNK on_period UNK do on_op name on_op on_ignored_nl UNK on_lparen name on_rparen on_nl end on_nl end on_nl # @!macro loader_list
def get on_lparen name on_rparen on_ignored_nl if UNK on_lparen on_const on_period UNK on_lparen on_ivar on_comma name on_period UNK on_rparen on_rparen # @!macro loader_get
def get_conf on_lparen name on_rparen on_ignored_nl envdir on_op UNK on_lparen on_const on_period UNK on_lparen on_ivar on_comma name on_period UNK on_rparen # @!macro loader_get_conf
class on_const on_nl include on_const on_nl on_ignored_nl def initialize on_lparen on_op UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl end on_nl # Combine together multiple loaders to act as one. # @api private
def search_paths on_nl on_ivar on_period UNK on_lparen on_op on_symbeg search_paths on_rparen on_period UNK on_nl end on_nl on_ignored_nl def list on_nl # @!macro loader_search_paths
def list on_nl on_ivar on_period UNK on_lparen on_op on_symbeg list on_rparen on_period UNK on_nl end on_nl on_ignored_nl def get on_lparen # @!macro loader_list
def get on_lparen name on_rparen on_ignored_nl on_ivar on_period UNK do on_op loader on_op on_ignored_nl env on_op loader on_period get on_lparen # @!macro loader_get
def get_conf on_lparen name on_rparen on_ignored_nl on_ivar on_period UNK do on_op loader on_op on_ignored_nl UNK on_op loader on_period get_conf on_lparen # @!macro loader_get_conf
def UNK on_period UNK on_nl on_const on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl on_const on_op UNK on_nl on_const # Returns the end of time (the next Mesoamerican Long Count cycle-end after 2012 (5125+2012) = 7137
on_ivar on_op on_const on_period new on_nl on_ignored_nl on_ivar on_op on_const on_nl end on_nl on_ignored_nl def list on_nl on_ivar on_period list # Holds expiration times in sorted order - next to expire is first
on_ivar on_op on_const on_nl end on_nl on_ignored_nl def list on_nl on_ivar on_period list on_nl end on_nl on_ignored_nl def search_paths on_nl # Infinity since it there are no entries, this is a cache of the first to expire time
def list on_nl on_ivar on_period list on_nl end on_nl on_ignored_nl def search_paths on_nl on_ivar on_period search_paths on_nl end on_nl on_ignored_nl # @!macro loader_list
def search_paths on_nl on_ivar on_period search_paths on_nl end on_nl on_ignored_nl def get on_lparen name on_rparen on_ignored_nl UNK on_nl result on_op # @!macro loader_search_paths
def get on_lparen name on_rparen on_ignored_nl UNK on_nl result on_op on_ivar on_lbracket name on_rbracket on_nl if result on_nl return result # @!macro loader_get
UNK on_nl result on_op on_ivar on_lbracket name on_rbracket on_nl if result on_nl return result on_period value on_nl UNK on_lparen result # Aggressively evict all that has expired # This strategy favors smaller memory footprint over environment # retrieval time.
return result on_period value on_nl UNK on_lparen result on_op on_ivar on_period get on_lparen name on_rparen on_rparen on_nl cache_entry on_op entry # found in cache
cache_entry on_op entry on_lparen result on_rparen on_nl on_ivar on_period UNK on_lparen result on_rparen on_nl UNK on_lparen name on_comma cache_entry on_rparen # environment loaded, cache it
def UNK on_lparen name on_comma cache_entry on_rparen on_ignored_nl on_const on_period UNK on_lbrace on_tstring_beg on_tstring_content on_embexpr_beg name on_embexpr_end on_tstring_content on_embexpr_beg cache_entry # Adds a cache entry to the cache
def UNK on_lparen name on_rparen on_ignored_nl on_ivar on_period UNK on_lparen name on_rparen on_nl on_const on_op on_const on_period UNK on_lparen name # Clears the cache of the environment with the given name. # (The intention is that this could be used from a MANUAL cache eviction command (TBD)
def UNK on_lparen on_rparen on_ignored_nl UNK on_nl on_ivar on_op on_lbrace on_rbrace on_nl on_ivar on_period UNK on_nl on_ivar on_op on_const on_nl # Clears all cached environments. # (The intention is that this could be used from a MANUAL cache eviction command (TBD)
def UNK on_lparen on_rparen on_ignored_nl UNK on_op on_const on_period UNK on_nl return if UNK on_op on_ivar on_op on_op on_ivar on_period # Clears all environments that have expired, either by exceeding their time to live, or # through an explicit eviction determined by the cache expiration service. #
def get_conf on_lparen name on_rparen on_ignored_nl UNK on_lparen name on_rparen on_nl on_ivar on_period get_conf on_lparen name on_rparen on_nl end on_nl # This implementation evicts the cache, and always gets the current # configuration of the environment # # TODO: While this is wasteful since it # needs to go on a search for the conf, it is too disruptive to optimize # this. # # @!macro loader_get_conf
def entry on_lparen env on_rparen on_ignored_nl UNK on_op on_lparen UNK on_op get_conf on_lparen env on_period name on_rparen on_rparen on_op UNK # Creates a suitable cache entry given the time to live for one environment #
UNK on_const on_op on_const on_nl on_const on_period new on_lparen env on_rparen UNK on_ignored_nl on_const on_period new on_lparen env on_comma UNK # Entry that is always expired (avoids syscall to get time)
UNK on_ignored_nl on_const on_period new on_lparen env on_comma UNK on_rparen on_nl end on_nl end on_nl on_ignored_nl def UNK on_lparen name # Entry that never expires (avoids syscall to get time)
def UNK on_lparen name on_rparen on_ignored_nl if on_lparen result on_op on_ivar on_lbracket name on_rbracket on_rparen on_op on_lparen result on_period expired? # Evicts the entry if it has expired # Also clears caches in Settings that may prevent the entry from being updated
class on_const on_nl UNK on_symbeg value on_nl on_ignored_nl def initialize on_lparen value on_rparen on_ignored_nl on_ivar on_op value on_nl end on_nl # Never evicting entry
class on_const on_op on_const on_nl def expired? on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_tstring_beg on_tstring_content on_tstring_end on_nl # Always evicting entry
class on_const on_op on_const on_nl def initialize on_lparen value on_comma UNK on_rparen on_ignored_nl UNK value on_nl on_ivar on_op on_const on_period # Time to Live eviction policy entry
