on_const on_op on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl dupes # These shouldn't be allowed to be set by clients # in the query string, for security reasons.
dupes on_op on_lbrace on_rbrace on_nl UNK on_period UNK on_lbrace on_op UNK on_op dupes on_lbracket UNK on_period UNK on_rbracket on_op on_lparen # There's got to be a simpler way to do this, right?
def UNK on_lparen request on_rparen on_ignored_nl raise on_const on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period # Retrieve all headers from the http request, as a hash with the header names # (lower-cased) as the keys
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK on_lparen on_const on_op on_const on_op on_const on_rparen on_op UNK on_period UNK # The mime type is always passed to the `set_content_type` method, so # it is no longer necessary to retrieve the Format's mime type. # # @deprecated
def UNK on_lparen request on_rparen on_ignored_nl UNK on_op UNK on_lparen request on_rparen on_nl on_ignored_nl on_const on_op on_const on_op on_const on_op # Create a generic puppet request from the implementation-specific request # created by the web server
UNK on_comma UNK on_lparen request on_rparen on_comma on_ignored_nl UNK on_lparen request on_rparen on_nl on_rparen on_nl end on_nl on_ignored_nl def UNK # path
UNK on_lparen request on_rparen on_comma on_ignored_nl UNK on_lparen request on_rparen on_nl on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen request # routing_path
def UNK on_lparen UNK on_comma response on_rparen on_ignored_nl UNK on_op on_const on_op on_const on_op on_const on_op on_const on_period UNK on_lparen # handle an HTTP request
UNK on_op on_const on_op on_const on_op on_const on_op on_const on_period UNK on_lparen UNK on_comma response on_rparen on_nl request on_op UNK # The response_wrapper stores the response and modifies it as a side effect. # The caller will use the original response
def UNK on_lparen response on_comma UNK on_comma UNK on_op UNK on_rparen on_ignored_nl raise on_const on_nl end on_nl on_ignored_nl def UNK # Set the response up, with the body and status.
def UNK on_lparen response on_comma UNK on_rparen on_ignored_nl raise on_const on_nl end on_nl on_ignored_nl def UNK on_lparen result on_rparen on_ignored_nl # Set the specified format as the content type of the response.
def UNK on_lparen result on_rparen on_ignored_nl UNK on_ignored_nl UNK on_const on_period UNK on_lparen result on_lbracket on_symbeg UNK on_rbracket on_rparen on_nl # resolve node name from peer's ip address # this is used when the request is unauthenticated
on_ignored_nl def UNK on_lparen request on_rparen on_ignored_nl raise on_const on_nl end on_nl on_ignored_nl def UNK on_lparen request on_rparen on_ignored_nl raise # methods to be overridden by the including web server class
