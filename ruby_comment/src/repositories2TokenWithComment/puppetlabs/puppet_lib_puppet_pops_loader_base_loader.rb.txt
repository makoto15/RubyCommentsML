UNK on_const on_op on_const on_nl on_ignored_nl UNK UNK UNK on_nl on_ignored_nl def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK # BaseLoader # === # An abstract implementation of Loader # # A derived class should implement `find(typed_name)` and set entries, and possible handle "miss caching". # # @api private #
UNK UNK UNK on_nl on_ignored_nl def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK on_lparen UNK on_rparen on_nl on_ivar on_op # The parent loader
on_ivar on_op UNK UNK on_ivar on_op UNK end on_nl on_ignored_nl def UNK on_lparen type on_comma UNK on_op UNK on_comma UNK # the higher priority loader to consult
on_ivar on_op UNK end on_nl on_ignored_nl def UNK on_lparen type on_comma UNK on_op UNK on_comma UNK on_op on_const on_op on_const # hash name => NamedEntry
end on_nl on_ignored_nl def UNK on_lparen type on_comma UNK on_op UNK on_comma UNK on_op on_const on_op on_const on_comma on_op UNK # the value of the last name (optimization)
def UNK on_lparen typed_name on_rparen on_ignored_nl if on_ivar on_period nil? on_op typed_name on_op on_ivar on_period typed_name on_nl on_ivar on_op UNK # @api public #
if on_ivar on_period nil? on_op typed_name on_op on_ivar on_period typed_name on_nl on_ivar on_op UNK on_lparen typed_name on_rparen on_nl UNK on_ignored_nl # The check for "last queried name" is an optimization when a module searches. First it checks up its parent # chain, then itself, and then delegates to modules it depends on. # These modules are typically parented by the same # loader as the one initiating the search. It is inefficient to again try to search the same loader for # the same name.
def UNK on_lparen typed_name on_comma UNK on_op UNK on_rparen on_ignored_nl if on_ivar on_period UNK on_lparen typed_name on_rparen on_nl on_ivar on_lbracket # @api public #
def UNK on_lparen typed_name on_rparen on_ignored_nl on_ivar on_lbracket typed_name on_rbracket on_nl end on_nl on_ignored_nl def UNK on_lparen typed_name on_comma value # This method is final (subclasses should not override it) # # @api private #
def UNK on_lparen typed_name on_comma value on_comma origin on_op UNK on_rparen on_ignored_nl entry on_op on_ivar on_lbracket typed_name on_rbracket on_nl if # @api private #
entry on_op on_ivar on_lbracket typed_name on_rbracket on_nl if entry on_nl UNK on_lparen entry on_rparen unless entry on_period value on_period nil? # It is never ok to redefine in the very same loader unless redefining a 'not found'
if typed_name on_period type on_op UNK type on_op on_op UNK on_nl entry on_op UNK on_lparen typed_name on_rparen on_nl if entry # Check if new entry shadows existing entry and fail # (unless special loader allows shadowing)
end on_nl end on_nl on_ignored_nl on_ivar on_op on_const on_op on_const on_period UNK on_lparen typed_name on_comma value on_comma origin on_rparen on_nl #|| entry.value == value
def UNK on_lparen type on_comma UNK on_comma value on_comma origin on_rparen on_ignored_nl UNK on_lparen on_const on_period UNK on_lparen type on_comma # @api private #
def UNK on_lparen typed_name on_rparen on_ignored_nl unless on_ivar on_period UNK on_lparen typed_name on_rparen on_period nil? on_nl on_ivar on_op UNK unless # @api private #
def UNK on_lparen UNK on_rparen on_ignored_nl typed_name on_op UNK on_period typed_name on_nl entry on_op on_ivar on_lbracket typed_name on_rbracket on_nl if # Promotes an already created entry (typically from another loader) to this loader # # @api private #
def UNK on_lparen origin on_rparen on_ignored_nl if origin on_op origin on_period UNK on_lparen on_const on_rparen on_nl UNK on_lparen origin on_rparen # TODO: Should not really be here?? - TODO: A Label provider ? semantics for the URI? #
def UNK on_lparen typed_name on_rparen on_ignored_nl te on_op on_ivar on_lbracket typed_name on_rbracket on_nl UNK te unless te on_period nil? on_op # loads in priority order: # 1. already loaded here # 2. load from parent # 3. find it here # 4. give up #
te on_op on_ivar on_lbracket typed_name on_rbracket on_nl UNK te unless te on_period nil? on_op te on_period value on_period nil? on_nl # avoid calling get_entry by looking it up
te on_op on_ivar on_lbracket typed_name on_rbracket on_nl te on_period nil? on_op te on_period value on_period nil? on_op UNK on_lparen typed_name # Under some circumstances, the call to the parent loader will have resulted in files being # parsed that in turn contained references to the requested entity and hence, caused a # recursive call into this loader. This means that the entry might be present now, so a new # check must be made.
