UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_op on_const on_op on_const on_nl end on_nl on_ignored_nl describe on_const on_op on_const # encoding: ASCII-8BIT
let on_lparen on_symbeg UNK on_rparen do on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl let on_lparen on_symbeg user_plist_hash on_rparen do # This is the output of doing `dscl -plist . read /Users/<username>` which # will return a hash of keys whose values are all arrays.
let on_lparen on_symbeg user_plist_hash on_rparen do on_ignored_nl on_lbrace on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op on_lbracket username on_rbracket on_comma on_ignored_nl on_tstring_beg on_tstring_content # This is the same as above, however in a native Ruby hash instead # of XML
let on_lparen on_symbeg UNK on_rparen do on_ignored_nl on_lbrace on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op UNK on_nl on_rbrace on_nl end on_nl on_ignored_nl # The below value is the result of executing # `dscl -plist . read /Users/<username> ShadowHashData` on a 10.7 # system and converting it to a native Ruby Hash with Plist.parse_xml
let on_lparen on_symbeg sha512_embedded_bplist on_rparen do on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl let on_lparen on_symbeg UNK on_rparen do # The below is a binary plist that is stored in the ShadowHashData key # on a 10.7 system.
let on_lparen on_symbeg UNK on_rparen do on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl let on_lparen on_symbeg sha512_embedded_bplist_hash on_rparen do # The below is a Base64 encoded string representing a salted-SHA512 password # hash.
let on_lparen on_symbeg sha512_embedded_bplist_hash on_rparen do on_ignored_nl on_lbrace on_tstring_beg on_tstring_content on_tstring_end on_op UNK on_rbrace on_nl end on_nl on_ignored_nl let on_lparen # The below is the result of converting sha512_embedded_bplist to XML and # parsing it with Plist.parse_xml. It is a Ruby Hash whose value is a # Base64 encoded salted-SHA512 password hash.
let on_lparen on_symbeg sha512_password_hash on_rparen do on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl let on_lparen on_symbeg UNK on_rparen do # The value below is the result of converting sha512_pw_string to Hex.
let on_lparen on_symbeg UNK on_rparen do on_ignored_nl on_lbrace on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op UNK on_nl on_rbrace on_nl end on_nl on_ignored_nl # The below value is the result of executing # `dscl -plist . read /Users/<username> ShadowHashData` on a 10.8 # system and converting it to a native Ruby Hash with Plist.parse_xml
let on_lparen on_symbeg pbkdf2_embedded_bplist_hash on_rparen do on_ignored_nl on_lbrace on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op on_lbrace on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op UNK # The below value is the result of converting pbkdf2_embedded_bplist to XML and # parsing it with Plist.parse_xml.
let on_lparen on_symbeg pbkdf2_password_hash on_rparen do on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl let on_lparen on_symbeg pbkdf2_embedded_plist on_rparen do # The value below is the result of converting pbkdf2_pw_string to Hex.
let on_lparen on_symbeg pbkdf2_embedded_plist on_rparen do on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl let on_lparen on_symbeg UNK on_rparen do # The below is a binary plist that is stored in the ShadowHashData key # of a 10.8 system.
let on_lparen on_symbeg UNK on_rparen do on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl let on_lparen on_symbeg UNK on_rparen do # The below value is a Base64 encoded string representing a PBKDF2 password # hash.
let on_lparen on_symbeg UNK on_rparen do on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl let on_lparen on_symbeg pbkdf2_salt_value on_rparen do # The below value is a Base64 encoded string representing a PBKDF2 salt # string.
let on_lparen on_symbeg pbkdf2_salt_value on_rparen do on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl let on_lparen on_symbeg pbkdf2_iterations_value on_rparen do # The below value represents the Hex value of a PBKDF2 salt string
let on_lparen on_symbeg pbkdf2_iterations_value on_rparen do on_ignored_nl on_int on_nl end on_nl on_ignored_nl let on_lparen on_symbeg UNK on_rparen do on_ignored_nl on_lbracket # The below value is an Integer iterations value used in the PBKDF2 # key stretching algorithm
let on_lparen on_symbeg UNK on_rparen do on_ignored_nl on_lbrace on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_comma on_ignored_nl # The below represents output of 'dscl -plist . readall /Users' converted to # a native Ruby hash if only one user were installed on the system. # This lets us check the behavior of all the methods necessary to return a # user's groups property by controlling the data provided by dscl
let on_lparen on_symbeg group_plist_hash_guid on_rparen do on_ignored_nl on_lbracket on_lbrace on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_comma # The below represents the result of running Plist.parse_xml on XML # data returned from the `dscl -plist . readall /Groups` command. # (AKA: What the get_list_of_groups method returns)
let on_lparen on_symbeg UNK on_rparen do on_ignored_nl on_lbrace on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_tstring_beg on_tstring_content # These are the defaults that the provider will use if a user does # not provide a value
UNK on_period each do on_op UNK on_comma UNK on_op on_ignored_nl allow on_lparen provider on_rparen on_period to receive on_lparen on_symbeg UNK # Stub out all calls to dscl with default values from above
allow on_lparen provider on_rparen on_period to receive on_lparen on_symbeg UNK on_rparen on_period with on_lparen username on_rparen on_nl allow on_lparen provider # Mock the rest of the dscl calls. We can't assume that our Linux # build system will have the dscl binary
let on_lparen on_symbeg UNK on_rparen do on_ignored_nl on_lbracket on_lbrace on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_comma # The below represents the result of running Plist.parse_xml on XML # data returned from the `dscl -plist . readall /Groups` command. # (AKA: What the get_list_of_groups method returns)
let on_lparen on_symbeg UNK on_rparen do on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl let on_lparen on_symbeg UNK on_rparen do # The below value is the result of running `dscl -plist . readall /Groups` # on an OS X system.
let on_lparen on_symbeg UNK on_rparen do on_ignored_nl on_lbracket on_lbrace on_tstring_beg on_tstring_content on_tstring_end on_op on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_comma on_ignored_nl # The below value is the result of executing Plist.parse_xml on # groups_xml
provider on_period class on_period UNK on_lparen on_symbeg on_ivar on_comma nil on_rparen UNK provider on_period class on_period UNK on_symbeg on_ivar on_nl # Ensure we don't have a value cached from another spec
let on_lparen on_symbeg UNK on_rparen do on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl let on_lparen on_symbeg UNK on_rparen do # The below value is the result of executing # `dscl -plist . read /Users/<username/ GeneratedUID` # on an OS X system.
let on_lparen on_symbeg UNK on_rparen do on_ignored_nl on_lbrace on_tstring_beg on_tstring_content on_tstring_end on_op on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_rbrace on_nl end # The below value is the result of parsing user_guid_xml with # Plist.parse_xml
it on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl expect on_lparen on_const on_op on_const on_op on_const on_rparen on_period to receive on_lparen on_symbeg UNK # This will also catch the edge-case where a 10.6-style user exists on # a 10.8 system and Puppet attempts to set a password
provider on_period class on_period UNK on_lparen on_symbeg on_ivar on_comma nil on_rparen UNK provider on_period class on_period UNK on_symbeg on_ivar on_nl # Ensure we don't have a value cached from another spec
let on_lparen on_symbeg UNK on_rparen do on_ignored_nl on_lbracket on_ignored_nl on_lbrace on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket # The below represents output of 'dscl -plist . readall /Users' # converted to a Ruby hash if only one user were installed on the system. # This lets us check the behavior of all the methods necessary to return # a user's groups property by controlling the data provided by dscl. The # differentiating aspect about this plist is that it's from a 10.6-style # user. There's an edge case whereby a user that was created in 10.6, but # who hasn't attempted to login to the system until after it's been # upgraded to 10.8, will experience errors due to assumptions in Puppet # based solely on operatingsystem.
let on_lparen on_symbeg user_plist_hash on_rparen do on_ignored_nl on_lbrace on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_comma on_ignored_nl # The below represents the result of get_users_plist on the testuser # account from the 'all_users_hash' helper method. The get_users_plist # method calls the `plutil` binary to do its work, so we want to stub # that out
