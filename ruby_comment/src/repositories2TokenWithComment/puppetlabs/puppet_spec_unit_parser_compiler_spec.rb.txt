UNK on_op on_const on_period UNK on_nl allow on_lparen on_const on_rparen on_period to receive on_lparen on_symbeg UNK on_rparen on_period and_return on_lparen # Push me faster, I wanna go back in time! (Specifically, freeze time # across the test since we have a bunch of version == timestamp code # hidden away in the implementation and we keep losing the race.) # --daniel 2011-04-21
def compile_stub on_lparen on_op UNK on_rparen on_ignored_nl on_lparen UNK on_op UNK on_rparen on_period each on_lbrace on_op UNK on_op allow on_lparen # Stub all of the main compile methods except the ones we're specifically interested in.
colls on_op double on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl colls on_op double on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl colls on_period # And when the collections fail to evaluate.
expect on_lparen resource on_rparen on_period to receive on_lparen on_symbeg evaluate on_rparen on_lbrace resource on_period UNK on_op true on_rbrace on_nl on_ignored_nl # We have to now mark the resource as evaluated
expect on_lparen resource on_rparen on_period to receive on_lparen on_symbeg evaluate on_rparen on_lbrace resource on_period UNK on_op true UNK on_ivar on_period # We have to now mark the resource as evaluated
resource on_op on_const on_op on_const on_op on_const on_period new on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg scope on_op # Add a resource that does respond to :finish
UNK on_op double on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg ref on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg type on_op on_tstring_beg on_tstring_content # And one that does not
expect on_lparen coll on_rparen on_period to receive on_lparen on_symbeg evaluate on_rparen do on_ignored_nl on_ivar on_period UNK on_lparen coll on_rparen on_nl # This is the hard part -- we have to emulate the fact that # collections delete themselves if they are done evaluating.
def UNK on_lparen name on_comma parameters on_rparen on_ignored_nl on_ivar on_period classes on_lbracket name on_rbracket on_op parameters on_nl klass on_op on_const # Define the given class with default parameters
allow on_lparen on_ivar on_rparen on_period to receive on_lparen on_symbeg UNK on_rparen on_period and_return on_lparen on_qwords_beg on_tstring_content UNK on_tstring_content UNK on_tstring_content # Set some names for our test
allow on_lparen on_ivar on_period environment on_period known_resource_types on_rparen on_period to receive on_lparen on_symbeg node on_rparen on_period with on_lparen on_tstring_beg on_tstring_content # It should check this last, of course.
on_ivar on_period UNK on_lparen on_ivar on_rparen on_nl on_ignored_nl on_ivar on_period add_resource on_lparen on_ivar on_comma on_ivar on_rparen on_nl on_ignored_nl on_ivar on_period # First store the override
on_ivar on_period add_resource on_lparen on_ivar on_comma on_ivar on_rparen on_nl on_ignored_nl on_ivar on_period compile on_nl end on_nl on_ignored_nl it on_tstring_beg on_tstring_content # Then the resource
on_ivar on_period compile on_nl end on_nl on_ignored_nl it on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl on_ivar on_period UNK on_lparen on_ivar on_rparen on_nl # And compile, so they get resolved
