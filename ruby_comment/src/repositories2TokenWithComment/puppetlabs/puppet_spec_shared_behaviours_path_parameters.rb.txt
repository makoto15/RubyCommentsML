on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end do on_op UNK on_op on_ignored_nl UNK on_op on_lbrace on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op on_tstring_beg on_tstring_content # In order to use this correctly you must define a method to get an instance # of the type being tested, so that this code can remain generic: # # it_should_behave_like "all path parameters", :path do # def instance(path) # Puppet::Type.type(:example).new( # :name => 'foo', :require => 'bar', :path_param => path # ) # end # # That method will be invoked for each test to create the instance that we # subsequently test through the system; you should ensure that the minimum of # possible attributes are set to keep the tests clean. # # You must also pass the symbolic name of the parameter being tested to the # block, and optionally can pass a hash of additional options to the block. # # The known options are: # :array :: boolean, does this support arrays of paths, default true.
options on_op on_lbrace on_rbrace on_nl UNK on_op options on_lbracket UNK UNK on_rbracket on_period UNK on_op UNK on_op options on_period UNK # Extract and process options to the block.
UNK UNK UNK do on_ignored_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_comma UNK if on_op ######################################################################## # The actual testing code...
