UNK on_const on_nl def self on_period UNK on_lparen on_rparen on_ignored_nl on_cvar on_op on_int on_nl on_ignored_nl on_ivar on_op on_const on_period UNK # This class is intended to provide an API to be used by external projects # when they are running tests that depend on puppet core. This should # allow us to vary the implementation details of managing puppet's state # for testing, from one version of puppet to the next--without forcing # the external projects to do any of that state management or be aware of # the implementation details. # # For now, this consists of a few very simple signatures. The plan is # that it should be the responsibility of the puppetlabs_spec_helper # to broker between external projects and this API; thus, if any # hacks are required (e.g. to determine whether or not a particular) # version of puppet supports this API, those hacks will be consolidated in # one place and won't need to be duplicated in every external project. # # This should also alleviate the anti-pattern that we've been following, # wherein each external project starts off with a copy of puppet core's # test_helper.rb and is exposed to risk of that code getting out of # sync with core. # # Since this class will be "library code" that ships with puppet, it does # not use API from any existing test framework such as rspec. This should # theoretically allow it to be used with other unit test frameworks in the # future, if desired. # # Note that in the future this API could potentially be expanded to handle # other features such as "around_test", but we didn't see a compelling # reason to deal with that right now.
def self on_period UNK on_lparen on_rparen on_ignored_nl on_cvar on_op on_int on_nl on_ignored_nl on_ivar on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content # Call this method once, as early as possible, such as before loading tests # that call Puppet. # @return nil
on_cvar on_op on_int on_nl on_ignored_nl on_ivar on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_period UNK on_lparen # This meta class instance variable is used as a guard to ensure that # before_each, and after_each are only called once. This problem occurs # when there are more than one puppet test infrastructure orchestrator in use. # The use of both puppetabs-spec_helper, and rodjek-rspec_puppet will cause # two resets of the puppet environment, and will cause problem rolling back to # a known point as there is no way to differentiate where the calls are coming # from. See more information in #before_each_test, and #after_each_test # Note that the variable is only initialized to 0 if nil. This is important # as more than one orchestrator will call initialize. A second call can not # simply set it to 0 since that would potentially destroy an active guard. #
def self on_period UNK on_lparen on_rparen on_ignored_nl end on_nl on_ignored_nl def self on_period UNK on_lparen on_rparen on_ignored_nl end on_nl on_ignored_nl # Call this method once, when beginning a test run--prior to running # any individual tests. # @return nil
end on_nl on_ignored_nl def self on_period UNK on_lparen on_rparen on_ignored_nl end on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl # Make sure that all of the setup is also done for any before(:all) blocks
def self on_period UNK on_lparen on_rparen on_ignored_nl end on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl def self on_period # Call this method once, at the end of a test run, when no more tests # will be run. # @return nil
on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl def self on_period UNK on_lparen on_rparen on_ignored_nl UNK UNK on_cvar on_op on_int on_nl # The name of the rollback mark used in the Puppet.context. This is what # the test infrastructure returns to for each test. #
def self on_period UNK on_lparen on_rparen on_ignored_nl UNK UNK on_cvar on_op on_int on_nl on_cvar on_op on_int on_nl on_ignored_nl on_const on_period # Call this method once per test, prior to execution of each individual test. # @return nil
UNK UNK on_cvar on_op on_int on_nl on_cvar on_op on_int on_nl on_ignored_nl on_const on_period UNK on_lparen on_const on_rparen on_nl on_ignored_nl on_gvar # When using both rspec-puppet and puppet-rspec-helper, there are two packages trying # to be helpful and orchestrate the callback sequence. We let only the first win, the # second callback results in a no-op. # Likewise when entering after_each_test(), a check is made to make tear down happen # only once. #
on_gvar on_op on_lbrace on_rbrace on_nl UNK on_op on_const on_op on_const on_op on_const on_period UNK on_lparen on_symbeg UNK on_comma on_symbeg on_cvar # We need to preserve the current state of all our indirection cache and # terminus classes. This is pretty important, because changes to these # are global and lead to order dependencies in our testing. # # We go direct to the implementation because there is no safe, sane public # API to manage restoration of these to their default values. This # should, once the value is proved, be moved to a standard API on the # indirector. # # To make things worse, a number of the tests stub parts of the # indirector. These stubs have very specific expectations that what # little of the public API we could use is, well, likely to explode # randomly in some tests. So, direct access. --daniel 2011-08-30
UNK on_lparen on_op on_op on_const on_op on_const on_rparen on_nl mode on_op on_symbeg UNK on_nl UNK on_ignored_nl mode on_op on_symbeg UNK # The process environment is a shared, persistent resource. # Can't use Puppet.features.microsoft_windows? as it may be mocked out in a test. This can cause test recurring test failures
on_gvar on_op on_gvar on_period UNK on_nl on_ignored_nl UNK on_lparen on_rparen on_nl on_ignored_nl on_const on_period UNK on_lparen on_ignored_nl on_lbrace on_ignored_nl UNK # So is the load_path
def self on_period UNK on_lparen on_rparen on_ignored_nl UNK UNK on_cvar on_op on_int on_nl on_cvar on_op on_int on_nl on_ignored_nl on_const on_period # Call this method once per test, after execution of each individual test. # @return nil
UNK UNK on_cvar on_op on_int on_nl on_cvar on_op on_int on_nl on_ignored_nl on_const on_period UNK on_period UNK on_lparen on_symbeg UNK on_rparen # Ensure that a matching tear down only happens once per completed setup # (see #before_each_test).
on_ignored_nl UNK on_op on_const on_op on_const on_op on_const on_period UNK on_lparen on_symbeg UNK on_comma on_symbeg on_cvar on_rparen on_nl UNK on_period # uncommenting and manipulating this can be useful when tracking down calls to deprecated code #Puppet.log_deprecations_to_file("deprecations.txt", /^Puppet::Util.exec/)
UNK on_op on_const on_op on_const on_op on_const on_period UNK on_lparen on_symbeg UNK on_comma on_symbeg on_cvar on_rparen on_nl UNK on_period UNK # Restore the indirector configuration. See before hook.
UNK on_lparen on_op on_op on_const on_op on_const on_rparen on_nl mode on_op on_symbeg UNK on_nl UNK on_ignored_nl mode on_op on_symbeg UNK # Can't use Puppet.features.microsoft_windows? as it may be mocked out in a test. This can cause test recurring test failures
UNK on_const on_op on_const on_period UNK on_lparen mode on_rparen on_op on_gvar on_nl on_const on_op on_const on_period UNK on_lparen mode on_rparen # Restore the global process environment. Can't just assign because this # is a magic variable, sadly, and doesn't do thatâ„¢. It is sufficiently # faster to use the compare-then-set model to avoid excessive work that it # justifies the complexity. --daniel 2012-03-15
on_const on_period UNK on_lparen on_symbeg UNK on_rparen on_period UNK on_nl on_ignored_nl on_gvar on_period UNK on_nl on_gvar on_period UNK on_lbrace on_op # Clear all environments
on_gvar on_period UNK on_nl on_gvar on_period UNK on_lbrace on_op UNK on_op on_gvar on_op UNK on_rbrace on_nl on_ignored_nl on_const on_period UNK # Restore the load_path late, to avoid messing with stubs from the test.
on_ignored_nl def self on_period UNK on_lparen on_rparen on_ignored_nl on_lbrace on_ignored_nl on_symbeg UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_symbeg UNK ######################################################################################### # PRIVATE METHODS (not part of the public TestHelper API--do not call these from outside # of this class!) #########################################################################################
on_const on_period UNK on_period UNK on_lparen UNK on_rparen on_nl on_ignored_nl on_const on_period UNK on_lbracket on_symbeg UNK on_rbracket on_op UNK on_nl # Initialize "app defaults" settings to a good set of test values
on_const on_period UNK on_lbracket on_symbeg UNK on_rbracket on_op UNK on_nl on_ignored_nl on_const on_lbracket on_symbeg UNK on_rbracket on_op on_int on_nl on_ignored_nl # We don't want to depend upon the reported domain name of the # machine running the tests, nor upon the DNS setup of that # domain.
on_const on_lbracket on_symbeg UNK on_rbracket on_op on_int on_nl on_ignored_nl on_const on_lbracket on_symbeg UNK on_rbracket on_op on_ivar on_nl on_const on_lbracket on_symbeg # Longer keys are secure, but they sure make for some slow testing - both # in terms of generating keys, and in terms of anything the next step down # the line doing validation or whatever. Most tests don't care how long # or secure it is, just that it exists, so these are better and faster # defaults, in testing only. # # I would make these even shorter, but OpenSSL doesn't support anything # below 512 bits. Sad, really, because a 0 bit key would be just fine.
on_const on_lbracket on_symbeg UNK on_rbracket on_op on_ivar on_nl on_const on_lbracket on_symbeg UNK on_rbracket on_op on_int on_nl end on_nl UNK on_symbeg # Although we setup a testing context during initialization, some tests # will end up creating their own context using the real context objects # and use the setting for the environments. In order to avoid those tests # having to deal with a missing environmentpath we can just set it right # here.
