require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl # -*- coding: utf-8 -*-
on_ignored_nl on_ignored_nl UNK on_const on_nl class on_const on_nl UNK on_const on_op on_const on_nl include on_const on_op on_const on_nl include on_const # see the bottom of the file for the rest of the inclusions
class on_const on_nl UNK on_const on_op on_const on_nl include on_const on_op on_const on_nl include on_const on_op on_const on_op on_const on_nl # The base class for all Puppet types. # # A type describes: #-- # * **Attributes** - properties, parameters, and meta-parameters are different types of attributes of a type. # * **Properties** - these are the properties of the managed resource (attributes of the entity being managed; like # a file's owner, group and mode). A property describes two states; the 'is' (current state) and the 'should' (wanted # state). # * **Ensurable** - a set of traits that control the lifecycle (create, remove, etc.) of a managed entity. # There is a default set of operations associated with being _ensurable_, but this can be changed. # * **Name/Identity** - one property is the name/identity of a resource, the _namevar_ that uniquely identifies # one instance of a type from all others. # * **Parameters** - additional attributes of the type (that does not directly related to an instance of the managed # resource; if an operation is recursive or not, where to look for things, etc.). A Parameter (in contrast to Property) # has one current value where a Property has two (current-state and wanted-state). # * **Meta-Parameters** - parameters that are available across all types. A meta-parameter typically has # additional semantics; like the `require` meta-parameter. A new type typically does not add new meta-parameters, # but you need to be aware of their existence so you do not inadvertently shadow an existing meta-parameters. # * **Parent** - a type can have a super type (that it inherits from). # * **Validation** - If not just a basic data type, or an enumeration of symbolic values, it is possible to provide # validation logic for a type, properties and parameters. # * **Munging** - munging/unmunging is the process of turning a value in external representation (as used # by a provider) into an internal representation and vice versa. A Type supports adding custom logic for these. # * **Auto Requirements** - a type can specify automatic relationships to resources to ensure that if they are being # managed, they will be processed before this type. # * **Providers** - a provider is an implementation of a type's behavior - the management of a resource in the # system being managed. A provider is often platform specific and is selected at runtime based on # criteria/predicates specified in the configured providers. See {Puppet::Provider} for details. # * **Device Support** - A type has some support for being applied to a device; i.e. something that is managed # by running logic external to the device itself. There are several methods that deals with type # applicability for these special cases such as {apply_to_device}. # # Additional Concepts: # -- # * **Resource-type** - A _resource type_ is a term used to denote the type of a resource; internally a resource # is really an instance of a Ruby class i.e. {Puppet::Resource} which defines its behavior as "resource data". # Conceptually however, a resource is an instance of a subclass of Type (e.g. File), where such a class describes # its interface (what can be said/what is known about a resource of this type), # * **Managed Entity** - This is not a term in general use, but is used here when there is a need to make # a distinction between a resource (a description of what/how something should be managed), and what it is # managing (a file in the file system). The term _managed entity_ is a reference to the "file in the file system" # * **Isomorphism** - the quality of being _isomorphic_ means that two resource instances with the same name # refers to the same managed entity. Or put differently; _an isomorphic name is the identity of a resource_. # As an example, `exec` resources (that executes some command) have the command (i.e. the command line string) as # their name, and these resources are said to be non-isomorphic. # # @note The Type class deals with multiple concerns; some methods provide an internal DSL for convenient definition # of types, other methods deal with various aspects while running; wiring up a resource (expressed in Puppet DSL) # with its _resource type_ (i.e. an instance of Type) to enable validation, transformation of values # (munge/unmunge), etc. Lastly, Type is also responsible for dealing with Providers; the concrete implementations # of the behavior that constitutes how a particular Type behaves on a particular type of system (e.g. how # commands are executed on a flavor of Linux, on Windows, etc.). This means that as you are reading through the # documentation of this class, you will be switching between these concepts, as well as switching between # the conceptual level "a resource is an instance of a resource-type" and the actual implementation classes # (Type, Resource, Provider, and various utility and helper classes). # # @api public # #
include on_const on_nl on_ignored_nl on_ivar on_op on_lbrace on_rbrace on_nl on_ivar on_op on_const on_op on_const on_op on_const on_period new on_nl UNK # Comparing type instances.
on_ivar on_op on_lbrace on_rbrace on_nl on_ivar on_op on_const on_op on_const on_op on_const on_period new on_nl UNK on_const on_op on_const on_op # These variables are used in Metatype::Manager for managing types
def on_op on_lparen other on_rparen on_ignored_nl return nil unless other on_period is_a? on_lparen on_const on_op on_const on_rparen on_op other on_period # Compares this type against the given _other_ (type) and returns -1, 0, or +1 depending on the order. # @param other [Object] the object to compare against (produces nil, if not kind of Type} # @return [-1, 0, +1, nil] produces -1 if this type is before the given _other_ type, 0 if equals, and 1 if after. # Returns nil, if the given _other_ is not a kind of Type. # @see Comparable #
return nil unless other on_period is_a? on_lparen on_const on_op on_const on_rparen on_op other on_period class on_period is_a? on_lparen on_const on_op # Order is only maintained against other types, not arbitrary objects. # The natural order is based on the reference name used when comparing
self on_period ref on_op other on_period ref on_nl end on_nl on_ignored_nl class on_op self on_nl include on_const on_op on_const on_op # against other type instances.
class on_op self on_nl include on_const on_op on_const on_op on_const on_nl include on_const on_op on_const on_op on_const on_nl on_ignored_nl UNK # Code related to resource type attributes.
UNK on_symbeg properties on_nl end on_nl on_ignored_nl class on_op self on_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl def UNK on_nl UNK # @return [Array<Puppet::Property>] The list of declared properties for the resource type. # The returned lists contains instances if Puppet::Property or its subclasses.
class on_op self on_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl def UNK on_nl UNK on_op UNK on_nl UNK on_period nil? on_op # Allow declaring that a type is actually a capability
def self on_period UNK on_nl false on_nl end on_nl on_ignored_nl def self on_period UNK on_nl key_attributes on_op on_lparen parameters on_op # Returns whether this type represents an application instance; since # only defined types, i.e., instances of Puppet::Resource::Type can # represent application instances, this implementation always returns # +false+. Having this method though makes code checking whether a # resource is an application instance simpler
def self on_period UNK on_nl key_attributes on_op on_lparen parameters on_op on_lbracket on_symbeg provider on_rbracket on_rparen on_op properties on_period collect on_lbrace # Returns all the attribute names of the type in the appropriate order. # The {key_attributes} come first, then the {provider}, then the {properties}, and finally # the {parameters} and {metaparams}, # all in the order they were specified in the respective files. # @return [Array<String>] all type attribute names in a defined order. #
def self on_period UNK on_lparen name on_rparen on_ignored_nl on_ivar on_op on_lbrace on_rbrace on_nl on_ignored_nl unless on_ivar on_period include? on_lparen name # Returns the class associated with the given attribute name. # @param name [String] the name of the attribute to obtain the class for # @return [Class, nil] the class for the given attribute, or nil if the name does not refer to an existing attribute #
unless on_ivar on_period include? on_lparen name on_rparen on_nl on_ivar on_lbracket name on_rbracket on_op UNK self on_period UNK on_lparen name on_rparen # We cache the value, since this method gets called such a huge number # of times (as in, hundreds of thousands in a given run).
def self on_period UNK on_lparen attr on_rparen on_ignored_nl on_ivar on_op on_lbrace on_rbrace on_nl unless on_ivar on_period include? on_lparen attr on_rparen # Returns the attribute type (`:property`, `;param`, `:meta`). # @comment What type of parameter are we dealing with? Cache the results, because # this method gets called so many times. # @return [Symbol] a symbol describing the type of attribute (`:property`, `;param`, `:meta`) #
def self on_period UNK on_nl on_cvar on_period each on_lbrace on_op p on_op yield p on_period name on_rbrace on_nl end on_nl # Provides iteration over meta-parameters. # @yieldparam p [Puppet::Parameter] each meta parameter # @return [void] #
def self on_period UNK on_lparen on_op block on_rparen on_ignored_nl if UNK on_nl self on_period UNK on_lparen on_symbeg ensure on_comma on_symbeg # Creates a new `ensure` property with configured default values or with configuration by an optional block. # This method is a convenience method for creating a property `ensure` with default accepted values. # If no block is specified, the new `ensure` property will accept the default symbolic # values `:present`, and `:absent` - see {Puppet::Property::Ensure}. # If something else is wanted, pass a block and make calls to {Puppet::Property.newvalue} from this block # to define each possible value. If a block is passed, the defaults are not automatically added to the set of # valid values. # # @note This method will be automatically called without a block if the type implements the methods # specified by {ensurable?}. It is recommended to always call this method and not rely on this automatic # specification to clearly state that the type is ensurable. # # @overload ensurable() # @overload ensurable({|| ... }) # @yield [ ] A block evaluated in scope of the new Parameter # @yieldreturn [void] # @return [void] # @dsl type # @api public #
def self on_period UNK on_nl on_lbracket on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_rbracket on_period UNK on_lbrace on_op UNK # Returns true if the type implements the default behavior expected by being _ensurable_ "by default". # A type is _ensurable_ by default if it responds to `:exists`, `:create`, and `:destroy`. # If a type implements these methods and have not already specified that it is _ensurable_, it will be # made so with the defaults specified in {ensurable}. # @return [Boolean] whether the type is _ensurable_ or not. #
on_lbracket on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_rbracket on_period UNK on_lbrace on_op UNK on_op on_ignored_nl self on_period UNK # If the class has all three of these methods defined, then it's # ensurable.
def self on_period UNK on_nl on_ivar on_op on_symbeg UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_nl on_ivar on_op # @comment These `apply_to` methods are horrible. They should really be implemented # as part of the usual system of constraints that apply to a type and # provider pair, but were implemented as a separate shadow system. # # @comment We should rip them out in favour of a real constraint pattern around the # target device - whatever that looks like - and not have this additional # magic here. --daniel 2012-03-08 # # Makes this type applicable to `:device`. # @return [Symbol] Returns `:device` # @api private #
def self on_period UNK on_nl on_ivar on_op on_symbeg UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_nl on_ivar on_op # Makes this type applicable to `:host`. # @return [Symbol] Returns `:host` # @api private #
def self on_period UNK on_nl on_ivar on_op on_symbeg UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_nl on_ivar on_op # Makes this type applicable to `:both` (i.e. `:host` and `:device`). # @return [Symbol] Returns `:both` # @api private #
def self on_period UNK on_nl on_ivar on_op on_symbeg UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen UNK on_rparen # Makes this type apply to `:host` if not already applied to something else. # @return [Symbol] a `:device`, `:host`, or `:both` enumeration # @api private
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl on_lbracket UNK on_op on_symbeg UNK on_op on_symbeg UNK on_op on_symbeg UNK on_comma # Returns true if this type is applicable to the given target. # @param target [Symbol] should be :device, :host or :target, if anything else, :host is enforced # @return [Boolean] true # @api private #
def self on_period UNK on_lparen name on_comma options on_rparen on_ignored_nl if options on_lbracket on_symbeg UNK on_rbracket on_nl UNK on_lparen name # Processes the options for a named parameter. # @param name [String] the name of a parameter # @param options [Hash] a hash of options # @option options [Boolean] :boolean if option set to true, an access method on the form _name_? is added for the param # @return [void] #
if options on_lbracket on_symbeg UNK on_rbracket on_nl UNK on_lparen name on_period to_s on_op on_tstring_beg on_tstring_content on_tstring_end on_rparen do on_ignored_nl val # If it's a boolean parameter, create a method to test the value easily
def self on_period UNK on_lparen param on_rparen on_ignored_nl on_cvar on_period include? on_lparen param on_period intern on_rparen on_nl end on_nl on_ignored_nl # Is the given parameter a meta-parameter? # @return [Boolean] true if the given parameter is a meta-parameter. #
def self on_period UNK on_lparen name on_rparen on_ignored_nl return nil if name on_period nil? on_nl on_cvar on_lbracket name on_period intern # Returns the meta-parameter class associated with the given meta-parameter name. # Accepts a `nil` name, and return nil. # @param name [String, nil] the name of a meta-parameter # @return [Class,nil] the class for the given meta-parameter, or `nil` if no such meta-parameter exists, (or if # the given meta-parameter name is `nil`. #
def self on_period UNK on_nl on_cvar on_period collect on_lbrace on_op param on_op param on_period name on_rbrace on_nl end on_nl on_ignored_nl # Returns all meta-parameter names. # @return [Array<String>] all meta-parameter names #
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl on_cvar on_lbracket UNK on_rbracket on_period UNK on_nl end on_nl on_ignored_nl def self # Returns the documentation for a given meta-parameter of this type. # @param metaparam [Puppet::Parameter] the meta-parameter to get documentation for. # @return [String] the documentation associated with the given meta-parameter, or nil of no such documentation # exists. # @raise if the given metaparam is not a meta-parameter in this type #
def self on_period newmetaparam on_lparen name on_comma options on_op on_lbrace on_rbrace on_comma on_op block on_rparen on_ignored_nl on_cvar on_op on_lbracket on_rbracket # Creates a new meta-parameter. # This creates a new meta-parameter that is added to this and all inheriting types. # @param name [Symbol] the name of the parameter # @param options [Hash] a hash with options. # @option options [Class<inherits Puppet::Parameter>] :parent (Puppet::Parameter) the super class of this parameter # @option options [Hash{String => Object}] :attributes a hash that is applied to the generated class # by calling setter methods corresponding to this hash's keys/value pairs. This is done before the given # block is evaluated. # @option options [Boolean] :boolean (false) specifies if this is a boolean parameter # @option options [Boolean] :namevar (false) specifies if this parameter is the namevar # @option options [Symbol, Array<Symbol>] :required_features specifies required provider features by name # @return [Class<inherits Puppet::Parameter>] the created parameter # @yield [ ] a required block that is evaluated in the scope of the new meta-parameter # @api public # @dsl type # @todo Verify that this description is ok #
param on_period required_features on_op options on_lbracket on_symbeg required_features on_rbracket if options on_lbracket on_symbeg required_features on_rbracket on_nl on_ignored_nl UNK on_lparen name # Grr.
def self on_period UNK on_nl on_ivar on_op on_lparen on_ignored_nl on_ivar on_period find_all on_lbrace on_op param on_op on_ignored_nl param on_period UNK # Returns the list of parameters that comprise the composite key / "uniqueness key". # All parameters that return true from #isnamevar? or is named `:name` are included in the returned result. # @see uniqueness_key # @return [Array<Puppet::Parameter>] WARNING: this return type is uncertain
def self on_period key_attributes on_nl on_ivar on_op UNK on_period collect on_lbrace on_op p on_op p on_period name on_rbrace on_nl end # Returns cached {key_attribute_parameters} names. # Key attributes are properties and parameters that comprise a composite key # or "uniqueness key". # @return [Array<String>] cached key_attribute names #
on_ivar on_op UNK on_period collect on_lbrace on_op p on_op p on_period name on_rbrace on_nl end on_nl on_ignored_nl def self on_period # This is a cache miss around 0.05 percent of the time. --daniel 2012-07-17
def self on_period UNK on_nl on_lbracket on_rbracket on_nl end on_nl on_ignored_nl def self on_period UNK on_nl UNK key_attributes on_period UNK # Returns any parameters that should be included by default in puppet resource's output # @return [Array<Symbol>] the parameters to include
def self on_period UNK on_nl UNK key_attributes on_period UNK on_nl when on_int on_semicolon on_lbracket on_rbracket on_nl when on_int on_semicolon on_ignored_nl # Returns a mapping from the title string to setting of attribute values. # This default implementation provides a mapping of title to the one and only _namevar_ present # in the type's definition. # @note Advanced: some logic requires this mapping to be done differently, using a different # validation/pattern, breaking up the title # into several parts assigning each to an individual attribute, or even use a composite identity where # all namevars are seen as part of the unique identity (such computation is done by the {#uniqueness} method. # These advanced options are rarely used (only one of the built in puppet types use this, and then only # a small part of the available functionality), and the support for these advanced mappings is not # implemented in a straight forward way. For these reasons, this method has been marked as private). # # @raise [Puppet::DevError] if there is no title pattern and there are two or more key attributes # @return [Array<Array<Regexp, Array<Array <Symbol, Proc>>>>, nil] a structure with a regexp and the first key_attribute ??? # @comment This wonderful piece of logic creates a structure used by Resource.parse_title which # has the capability to assign parts of the title to one or more attributes; It looks like an implementation # of a composite identity key (all parts of the key_attributes array are in the key). This can also # be seen in the method uniqueness_key. # The implementation in this method simply assigns the title to the one and only namevar (which is name # or a variable marked as namevar). # If there are multiple namevars (any in addition to :name?) then this method MUST be implemented # as it raises an exception if there is more than 1. Note that in puppet, it is only File that uses this # to create a different pattern for assigning to the :path attribute # This requires further digging. # The entire construct is somewhat strange, since resource checks if the method "title_patterns" is # implemented (it seems it always is) - why take this more expensive regexp mathching route for all # other types? # @api private #
def UNK on_nl self on_period class on_period key_attributes on_period UNK on_lbrace on_op UNK on_op UNK on_period to_s on_rbrace on_period UNK # Produces a resource's _uniqueness_key_ (or composite key). # This key is an array of all key attributes' values. Each distinct tuple must be unique for each resource type. # @see key_attributes # @return [Object] an object that is a _uniqueness_key_ for this object #
def self on_period UNK on_lparen name on_comma options on_op on_lbrace on_rbrace on_comma on_op block on_rparen on_ignored_nl options on_lbracket on_symbeg attributes # Creates a new parameter. # @param name [Symbol] the name of the parameter # @param options [Hash] a hash with options. # @option options [Class<inherits Puppet::Parameter>] :parent (Puppet::Parameter) the super class of this parameter # @option options [Hash{String => Object}] :attributes a hash that is applied to the generated class # by calling setter methods corresponding to this hash's keys/value pairs. This is done before the given # block is evaluated. # @option options [Boolean] :boolean (false) specifies if this is a boolean parameter # @option options [Boolean] :namevar (false) specifies if this parameter is the namevar # @option options [Symbol, Array<Symbol>] :required_features specifies required provider features by name # @return [Class<inherits Puppet::Parameter>] the created parameter # @yield [ ] a required block that is evaluated in the scope of the new parameter # @api public # @dsl type #
param on_period required_features on_op options on_lbracket on_symbeg required_features on_rbracket if options on_lbracket on_symbeg required_features on_rbracket on_nl on_ignored_nl param on_period UNK # Grr.
def self on_period UNK on_lparen name on_comma options on_op on_lbrace on_rbrace on_comma on_op block on_rparen on_ignored_nl name on_op name on_period # Creates a new property. # @param name [Symbol] the name of the property # @param options [Hash] a hash with options. # @option options [Symbol] :array_matching (:first) specifies how the current state is matched against # the wanted state. Use `:first` if the property is single valued, and (`:all`) otherwise. # @option options [Class<inherits Puppet::Property>] :parent (Puppet::Property) the super class of this property # @option options [Hash{String => Object}] :attributes a hash that is applied to the generated class # by calling setter methods corresponding to this hash's keys/value pairs. This is done before the given # block is evaluated. # @option options [Boolean] :boolean (false) specifies if this is a boolean parameter # @option options [Symbol] :retrieve the method to call on the provider (or `parent` if `provider` is not set) # to retrieve the current value of this property. # @option options [Symbol, Array<Symbol>] :required_features specifies required provider features by name # @return [Class<inherits Puppet::Property>] the created property # @yield [ ] a required block that is evaluated in the scope of the new property # @api public # @dsl type #
unless options on_period is_a? on_const on_nl raise on_const on_op on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label # This is here for types that might still have the old method of defining # a parent class.
prop on_op UNK on_lparen name on_comma on_symbeg parent on_op parent on_comma on_symbeg hash on_op on_ivar on_comma on_symbeg attributes on_op options # We have to create our own, new block here because we want to define # an initial :retrieve method, if told to, and then eval the passed # block if available.
if options on_lbracket on_symbeg retrieve on_rbracket on_nl UNK on_lparen on_symbeg retrieve on_rparen do on_ignored_nl provider on_period UNK on_lparen options on_lbracket # If they've passed a retrieve method, then override the retrieve # method on the class.
if name on_op on_symbeg ensure on_nl on_ivar on_period UNK prop on_nl else on_ignored_nl on_ivar on_op prop on_nl end on_nl on_ignored_nl # If it's the 'ensure' property, always put it first.
def self on_period parameters on_nl return on_lbracket on_rbracket unless defined? on_lparen on_ivar on_rparen on_nl on_ivar on_period collect on_lbrace on_op klass # @return [Array<String>] Returns the parameter names
def self on_period UNK on_lparen name on_rparen on_ignored_nl on_ivar on_lbracket name on_rbracket on_nl end on_nl on_ignored_nl def self on_period UNK # @return [Puppet::Parameter] Returns the parameter class associated with the given parameter name.
def self on_period UNK on_lparen name on_rparen on_ignored_nl on_ivar on_lbracket name on_rbracket on_nl end on_nl on_ignored_nl def self on_period validattr? # @return [Puppet::Property] Returns the property class ??? associated with the given property name
def self on_period validattr? on_lparen name on_rparen on_ignored_nl name on_op name on_period intern on_nl return true if name on_op on_symbeg # Returns whether or not the given name is the name of a property, parameter or meta-parameter # @return [Boolean] true if the given attribute name is the name of an existing property, parameter or meta-parameter #
def self on_period UNK on_lparen name on_rparen on_ignored_nl name on_op name on_period intern on_nl on_ivar on_period include? on_lparen name on_rparen # @return [Boolean] Returns true if the given name is the name of an existing property
def self on_period UNK on_nl return on_lbrace on_rbrace unless defined? on_lparen on_ivar on_rparen on_nl on_ignored_nl on_ivar on_period UNK on_nl end # @return [Array<Symbol>, {}] Returns a list of valid property names, or an empty hash if there are none. # @todo An empty hash is returned if there are no defined parameters (not an empty array). This looks like # a bug. #
def self on_period UNK on_lparen name on_rparen on_ignored_nl raise on_const on_op on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op # @return [Boolean] Returns true if the given name is the name of an existing parameter
def self on_period UNK on_lparen name on_rparen on_ignored_nl validattr? on_lparen name on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl obj # (see validattr?) # @note see comment in code - how should this be documented? Are some of the other query methods deprecated? # (or should be). # @comment This is a forward-compatibility method - it's the validity interface we'll use in Puppet::Resource.
def UNK on_nl obj on_op on_ivar on_lbracket on_symbeg ensure on_rbracket and obj on_period should on_op on_symbeg absent on_nl end on_nl # @return [Boolean] Returns true if the wanted state of the resource is that it should be absent (i.e. to be deleted).
def UNK on_lparen UNK on_rparen on_ignored_nl if self on_period class on_period UNK on_lparen UNK on_rparen on_op on_op on_ivar on_lbracket UNK # Creates a new property value holder for the resource if it is valid and does not already exist # @return [Boolean] true if a new parameter was added, false otherwise
def name_var on_nl return on_ivar unless on_ivar on_period nil? on_nl key_attributes on_op self on_period class on_period key_attributes on_nl on_ivar on_op # @return [Symbol, Boolean] Returns the name of the namevar if there is only one or false otherwise. # @comment This is really convoluted and part of the support for multiple namevars (?). # If there is only one namevar, the produced value is naturally this namevar, but if there are several? # The logic caches the name of the namevar if it is a single name, but otherwise always # calls key_attributes, and then caches the first if there was only one, otherwise it returns # false and caches this (which is then subsequently returned as a cache hit). #
def on_op on_lparen name on_rparen on_ignored_nl name on_op name on_period intern on_nl fail on_lparen on_tstring_beg on_tstring_content on_embexpr_beg name on_embexpr_end on_tstring_content # Gets the 'should' (wanted state) value of a parameter or property by name. # To explicitly get the 'is' (current state) value use `o.is(:name)`, and to explicitly get the 'should' value # use `o.should(:name)` # @param name [String] the name of the attribute to obtain the 'should' value for. # @return [Object] 'should'/wanted value of the given attribute
obj on_period value on_nl else on_ignored_nl return nil on_nl end on_nl end on_nl on_ignored_nl def on_op on_lparen name on_comma value # Note that if this is a property, then the value is the "should" value, # not the current value.
def on_op on_lparen name on_comma value on_rparen on_ignored_nl name on_op name on_period intern on_nl on_ignored_nl fail on_lparen on_tstring_beg on_tstring_content on_embexpr_beg # Sets the 'should' (wanted state) value of a property, or the value of a parameter. # @return # @raise [Puppet::Error] if the setting of the value fails, or if the given name is nil. # @raise [Puppet::ResourceError] when the parameter validation raises Puppet::Error or # ArgumentError
property on_period value on_op value on_nl UNK on_const on_op on_const on_comma on_const on_op detail on_nl error on_op on_const on_op on_const # make sure the parameter doesn't have any errors
def delete on_lparen attr on_rparen on_ignored_nl attr on_op attr on_period intern on_nl if on_ivar on_period UNK on_lparen attr on_rparen on_nl # Removes an attribute from the object; useful in testing or in cleanup # when an error has been encountered # @todo Don't know what the attr is (name or Property/Parameter?). Guessing it is a String name... # @todo Is it possible to delete a meta-parameter? # @todo What does delete mean? Is it deleted from the type or is its value state 'is'/'should' deleted? # @param attr [String] the attribute to delete from this object. WHAT IS THE TYPE? # @raise [Puppet::DecError] when an attempt is made to delete an attribute that does not exists. #
def UNK on_nl properties on_period each on_lbrace on_op property on_op on_ignored_nl yield property on_nl on_rbrace on_nl end on_nl on_ignored_nl def # Iterates over the properties that were set on this resource. # @yieldparam property [Puppet::Property] each property # @return [void]
properties on_period each on_lbrace on_op property on_op on_ignored_nl yield property on_nl on_rbrace on_nl end on_nl on_ignored_nl def UNK on_nl self # properties is a private method
def UNK on_nl self on_period class on_period UNK on_period collect on_lbrace on_op attr on_op parameter on_lparen attr on_rparen on_rbrace on_period # Return the parameters, metaparams, and properties that have a value or were set by a default. Properties are # included since they are a subclass of parameter. # @return [Array<Puppet::Parameter>] Array of parameter objects ( or subclass thereof )
def UNK on_nl UNK on_period each on_lbrace on_op parameter on_op yield parameter on_rbrace on_nl end on_nl on_ignored_nl def UNK on_lparen # Iterates over all parameters with value currently set. # @yieldparam parameter [Puppet::Parameter] or a subclass thereof # @return [void]
def UNK on_lparen options on_op on_lbrace on_rbrace on_rparen on_ignored_nl on_const on_op on_const on_op on_const on_period new on_lparen on_lbrace on_symbeg resource # Creates a transaction event. # Called by Transaction or by a property. # Merges the given options with the options `:resource`, `:file`, `:line`, and `:tags`, initialized from # values in this object. For possible options to pass (if any ????) see {Puppet::Transaction::Event}. # @todo Needs a better explanation "Why should I care who is calling this method?", What do I need to know # about events and how they work? Where can I read about them? # @param options [Hash] options merged with a fixed set of options defined by this method, passed on to {Puppet::Transaction::Event}. # @return [Puppet::Transaction::Event] the created event
def should on_lparen name on_rparen on_ignored_nl prop on_op on_ivar on_lbracket name on_period intern on_rbracket on_nl if prop on_op prop on_period # @return [Object, nil] Returns the 'should' (wanted state) value for a specified property, or nil if the # given attribute name is not a property (i.e. if it is a parameter, meta-parameter, or does not exist).
def newattr on_lparen name on_rparen on_ignored_nl if name on_period is_a? on_lparen on_const on_rparen on_nl klass on_op name on_nl name on_op # Registers an attribute to this resource type instance. # Requires either the attribute name or class as its argument. # This is a noop if the named property/parameter is not supported # by this resource. Otherwise, an attribute instance is created # and kept in this resource's parameters hash. # @overload newattr(name) # @param name [Symbol] symbolic name of the attribute # @overload newattr(klass) # @param klass [Class] a class supported as an attribute class, i.e. a subclass of # Parameter or Property # @return [Object] An instance of the named Parameter or Property class associated # to this resource type instance, or nil if the attribute is not supported #
def UNK on_nl on_ivar on_op on_tstring_beg on_tstring_content on_tstring_end on_op UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl # Returns a string representation of the resource's containment path in # the catalog. # @return [String]
def parameter on_lparen name on_rparen on_ignored_nl on_ivar on_lbracket name on_period to_sym on_rbracket on_nl end on_nl on_ignored_nl def parameters on_nl on_ivar # Returns the value of this object's parameter given by name # @param name [String] the name of the parameter # @return [Object] the value
def parameters on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen name on_rparen on_ignored_nl name on_op name on_period # Returns a shallow copy of this object's hash of attributes by name. # Note that his not only comprises parameters, but also properties and metaparameters. # Changes to the contained parameters will have an effect on the parameters of this type, but changes to # the returned hash does not. # @return [Hash{String => Object}] a new hash being a shallow copy of the parameters map name to parameter
def UNK on_lparen name on_rparen on_ignored_nl name on_op name on_period intern unless name on_period is_a? on_const on_nl on_ivar on_period include? # @return [Boolean] Returns whether the attribute given by name has been added # to this resource or not.
def property on_lparen name on_rparen on_ignored_nl obj on_op on_ivar on_lbracket name on_period intern on_rbracket on_nl if obj on_op obj on_period # Returns a {Puppet::Property} instance by name. # To return the value, use 'resource[param]' # @todo LAK:NOTE(20081028) Since the 'parameter' method is now a superset of this method, # this one should probably go away at some point. - Does this mean it should be deprecated ? # @return [Puppet::Property] the property with the given name, or nil if not a property or does not exist.
def UNK on_lparen attr on_rparen on_ignored_nl klass on_op self on_period class on_period UNK on_lparen attr on_rparen on_nl return unless klass # @todo comment says "For any parameters or properties that have defaults and have not yet been # set, set them now. This method can be handed a list of attributes, # and if so it will only set defaults for those attributes." # @todo Needs a better explanation, and investigation about the claim an array can be passed (it is passed # to self.class.attrclass to produce a class on which a check is made if it has a method class :default (does # not seem to support an array... # @return [void] #
return unless klass on_period UNK on_lparen on_symbeg UNK on_rparen on_nl return if on_ivar on_period include? on_lparen klass on_period name on_rparen # TODO this is not a necessary check, as we define a class level attr_reader
def UNK on_nl UNK on_op on_lbrace on_rbrace on_nl on_ignored_nl on_ivar on_period each do on_op name on_comma obj on_op on_ignored_nl UNK # @todo the comment says: "Convert our object to a hash. This just includes properties." # @todo this is confused, again it is the @parameters instance variable that is consulted, and # each value is copied - does it contain "properties" and "parameters" or both? Does it contain # meta-parameters? # # @return [Hash{ ??? => ??? }] a hash of WHAT?. The hash is a shallow copy, any changes to the # objects returned in this hash will be reflected in the original resource having these attributes. #
def type on_nl self on_period class on_period name on_nl end on_nl on_ignored_nl def value on_lparen name on_rparen on_ignored_nl name on_op # @return [String] the name of this object's class # @todo Would that be "file" for the "File" resource type? of "File" or something else? #
def value on_lparen name on_rparen on_ignored_nl name on_op name on_period intern on_nl on_ignored_nl obj on_op on_ivar on_lbracket name on_rbracket on_nl # @todo Comment says "Return a specific value for an attribute.", as opposed to what "An unspecific value"??? # @todo is this the 'is' or the 'should' value? # @todo why is the return restricted to things that respond to :value? (Only non structural basic data types # supported? # # @return [Object, nil] the value of the attribute having the given name, or nil if the given name is not # an attribute, or the referenced attribute does not respond to `:value`.
def UNK on_nl return on_int unless catalog on_nl catalog on_period UNK on_nl end on_nl on_ignored_nl def properties on_nl self on_period # @todo What is this used for? Needs a better explanation. # @return [???] the version of the catalog or 0 if there is no catalog.
def properties on_nl self on_period class on_period properties on_period collect on_lbrace on_op prop on_op on_ivar on_lbracket prop on_period name on_rbracket # @return [Array<Puppet::Property>] Returns all of the property objects, in the order specified in the # class. # @todo "what does the 'order specified in the class' mean? The order the properties where added in the # ruby file adding a new type with new properties? #
def self on_period UNK on_nl if defined? on_lparen on_ivar on_rparen on_nl return on_ivar on_nl else on_ignored_nl return true on_nl end # Returns true if the type's notion of name is the identity of a resource. # See the overview of this class for a longer explanation of the concept _isomorphism_. # Defaults to true. # # @return [Boolean] true, if this type's name is isomorphic with the object
def UNK on_nl self on_period class on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl if on_ivar on_nl return on_ivar # @todo check that this gets documentation (it is at the class level as well as instance). # (see isomorphic?)
def UNK on_nl if on_ivar on_nl return on_ivar on_nl else on_ignored_nl on_ivar on_op false on_nl properties on_period each on_lbrace on_op # Returns true if the instance is a managed instance. # A 'yes' here means that the instance was created from the language, vs. being created # in order resolve other questions, such as finding a package in a list. # @note An object that is managed always stays managed, but an object that is not managed # may become managed later in its lifecycle. # @return [Boolean] true if the object is managed
if on_ivar on_nl return on_ivar on_nl else on_ignored_nl on_ivar on_op false on_nl properties on_period each on_lbrace on_op property on_op on_ignored_nl # Once an object is managed, it always stays managed; but an object # that is listed as unmanaged might become managed later in the process, # so we have to check that every time
on_ignored_nl def UNK on_nl false on_nl end on_nl on_ignored_nl def UNK on_lparen on_rparen on_ignored_nl on_ivar on_period each do on_op name ############################### # Code related to the container behaviour.
def UNK on_nl false on_nl end on_nl on_ignored_nl def UNK on_lparen on_rparen on_ignored_nl on_ivar on_period each do on_op name on_comma # Returns true if the search should be done in depth-first order. # This implementation always returns false. # @todo What is this used for? # # @return [Boolean] true if the search should be done in depth first order. #
def UNK on_lparen on_rparen on_ignored_nl on_ivar on_period each do on_op name on_comma obj on_op on_ignored_nl obj on_period UNK on_nl end # Removes this object (FROM WHERE?) # @todo removes if from where? # @return [void]
on_ivar on_period each do on_op name on_comma obj on_op on_ignored_nl obj on_period UNK on_nl end on_nl on_ivar on_period UNK on_nl # This is hackish (mmm, cut and paste), but it works for now, and it's # better than warnings.
if self on_period provider on_nl on_ivar on_period UNK on_nl on_ivar on_op nil on_nl end on_nl end on_nl on_ignored_nl on_ignored_nl def # Remove the reference to the provider.
on_ignored_nl def UNK on_nl on_lbracket on_rbracket on_nl end on_nl on_ignored_nl def UNK on_nl end on_nl on_ignored_nl def UNK on_nl self ############################### # Code related to evaluating the resources.
def UNK on_nl on_lbracket on_rbracket on_nl end on_nl on_ignored_nl def UNK on_nl end on_nl on_ignored_nl def UNK on_nl self on_period # Returns the ancestors - WHAT? # This implementation always returns an empty list. # @todo WHAT IS THIS ? # @return [Array<???>] returns a list of ancestors.
def UNK on_nl end on_nl on_ignored_nl def UNK on_nl self on_period provider on_period UNK if self on_period provider and self # Lifecycle method for a resource. This is called during graph creation. # It should perform any consistency checking of the catalog and raise a # Puppet::Error if the transaction should be aborted. # # It differs from the validate method, since it is called later during # initialization and can rely on self.catalog to have references to all # resources that comprise the catalog. # # @see Puppet::Transaction#add_vertex # @raise [Puppet::Error] If the pre-run check failed. # @return [void] # @abstract a resource type may implement this method to perform # validation checks that can query the complete catalog
def UNK on_nl self on_period provider on_period UNK if self on_period provider and self on_period provider on_period UNK on_lparen on_symbeg # Flushes the provider if supported by the provider, else no action. # This is called by the transaction. # @todo What does Flushing the provider mean? Why is it interesting to know that this is # called by the transaction? (It is not explained anywhere what a transaction is). # # @return [???, nil] WHAT DOES IT RETURN? GUESS IS VOID
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op true on_nl on_ignored_nl property on_op on_ivar on_lbracket on_symbeg ensure on_rbracket on_nl if # Returns true if all contained objects are in sync. # @todo "contained in what?" in the given "in" parameter? # # @todo deal with the comment _"FIXME I don't think this is used on the type instances any more, # it's really only used for testing"_ # @return [Boolean] true if in sync, false otherwise. #
raise on_const on_op on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label property on_period name on_rbrace on_nl end #TRANSLATORS 'is' is a variable name and should not be translated
raise on_const on_op on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label prop on_period name on_rbrace on_nl end #TRANSLATORS 'is' is a variable name and should not be translated
end on_nl on_rbrace on_nl on_ignored_nl UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_nl true on_nl end on_nl on_ignored_nl #else # property.debug("In sync")
UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_nl true on_nl end on_nl on_ignored_nl def retrieve on_nl fail on_tstring_beg #self.debug("#{self} sync status is #{insync}")
def self on_period UNK on_nl true on_nl end on_nl on_ignored_nl def retrieve on_nl fail on_tstring_beg on_tstring_content on_embexpr_beg provider on_period class # Says if the ensure property should be retrieved if the resource is ensurable # Defaults to true. Some resource type classes can override it
def retrieve on_nl fail on_tstring_beg on_tstring_content on_embexpr_beg provider on_period class on_period name on_embexpr_end on_tstring_content on_tstring_end if self on_period provider on_period # Retrieves the current value of all contained properties. # Parameters and meta-parameters are not included in the result. # @todo As opposed to all non contained properties? How is this different than any of the other # methods that also "gets" properties/parameters/etc. ? # @return [Puppet::Resource] array of all property values (mix of types) # @raise [fail???] if there is a provider and it is not suitable for the host this is evaluated for.
result on_lbracket on_symbeg name on_rbracket on_op self on_lbracket on_symbeg name on_rbracket unless self on_lbracket on_symbeg name on_rbracket on_op title on_nl # Provide the name, so we know we'll always refer to a real thing
def UNK on_nl resource on_op retrieve on_nl resource on_op on_const on_period new on_lparen self on_period class on_comma title on_comma on_symbeg # Retrieve the current state of the system as a Puppet::Resource. For # the base Puppet::Type this does the same thing as #retrieve, but # specific types are free to implement #retrieve as returning a hash, # and this will call #retrieve and convert the hash to a resource. # This is used when determining when syncing a resource. # # @return [Puppet::Resource] A resource representing the current state # of the system. # # @api private
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_lbracket on_symbeg ensure on_rbracket on_op on_symbeg absent on_nl end on_nl on_ignored_nl def UNK # Given the hash of current properties, should this resource be treated as if it # currently exists on the system. May need to be overridden by types that offer up # more than just :absent and :present.
def UNK on_nl ensure_state on_op false on_nl return properties on_period UNK on_lparen on_lbrace on_rbrace on_rparen do on_op UNK on_comma property # Returns a hash of the current properties and their values. # If a resource is absent, its value is the symbol `:absent` # @return [Hash{Puppet::Property => Object}] mapping of property instance to its value #
ensure_state on_op false on_nl return properties on_period UNK on_lparen on_lbrace on_rbrace on_rparen do on_op UNK on_comma property on_op on_ignored_nl if # It's important to use the 'properties' method here, as it follows the order # in which they're defined in the class. It also guarantees that 'ensure' # is the first property, which is important for skipping 'retrieve' on # all the properties if the resource is absent.
def UNK on_nl return false if catalog and on_op catalog on_period UNK on_nl on_ignored_nl if defined? on_lparen on_ivar on_rparen on_nl # Returns the `noop` run mode status of this. # @return [Boolean] true if running in noop mode.
return false if catalog and on_op catalog on_period UNK on_nl on_ignored_nl if defined? on_lparen on_ivar on_rparen on_nl on_ivar on_nl else # If we're not a host_config, we're almost certainly part of # Settings, and we want to ignore 'noop'
def noop on_nl UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_nl raise on_const on_op on_const on_comma _ on_lparen # (see #noop?)
def self on_period UNK on_nl raise on_const on_op on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label self # Retrieves all known instances. # @todo Retrieves them from where? Known to whom? # Either requires providers or must be overridden. # @raise [Puppet::DevError] when there are no providers and the implementation has not overridden this method.
UNK on_op on_lbrace on_rbrace on_nl UNK on_period collect do on_op provider on_op on_ignored_nl provider on_period UNK on_period collect do on_op # Put the default provider first, then the rest of the suitable providers.
other on_op UNK on_lbracket instance on_period name on_rbracket on_nl if other on_nl on_const on_period UNK on_tstring_beg on_tstring_content on_tstring_end on_op on_ignored_nl # We always want to use the "first" provider instance we find, unless the resource # is already managed and has a different provider set
def self on_period UNK on_nl UNK on_op on_lbracket on_rbracket on_nl on_lbracket defaultprovider on_comma UNK on_rbracket on_period UNK on_period UNK on_period # Returns a list of one suitable provider per source, with the default provider first. # @todo Needs better explanation; what does "source" mean in this context? # @return [Array<Puppet::Provider>] list of providers #
UNK on_op on_lbracket on_rbracket on_nl on_lbracket defaultprovider on_comma UNK on_rbracket on_period UNK on_period UNK on_period collect do on_op provider on_op # Put the default provider first (can be nil), then the rest of the suitable providers.
def self on_period UNK on_lparen hash on_rparen on_ignored_nl hash on_op hash on_period UNK on_lparen on_lbrace on_rbrace on_rparen on_lbrace on_op result # Converts a simple hash into a Resource instance. # @todo as opposed to a complex hash? Other raised exceptions? # @param [Hash{Symbol, String => Object}] hash resource attribute to value map to initialize the created resource from # @return [Puppet::Resource] the resource created from the hash # @raise [Puppet::Error] if a title is missing in the given hash
resource on_op on_const on_op on_const on_period new on_lparen self on_comma title on_rparen on_nl resource on_period catalog on_op hash on_period delete # Now create our resource.
def UNK on_nl p on_op parent on_nl if p on_nl on_lbracket p on_period UNK on_comma self on_period ref on_rbracket on_period # Returns an array of strings representing the containment hierarchy # (types/classes) that make up the path to the resource from the root # of the catalog. This is mostly used for logging purposes. # # @api private
newmetaparam on_lparen on_symbeg noop on_rparen do on_ignored_nl desc on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_lparen on_symbeg true on_comma on_symbeg false ############################### # Add all of the meta-parameters.
on_ivar on_period catalog on_period UNK on_lparen on_ivar on_comma other on_rparen on_nl end on_nl end on_nl end on_nl on_ignored_nl newmetaparam on_lparen # Newschool, add it to the catalog.
class on_const on_op on_const on_op on_const on_nl class on_op self on_nl attr_accessor on_symbeg direction on_comma on_symbeg events on_comma on_symbeg UNK # RelationshipMetaparam is an implementation supporting the meta-parameters `:require`, `:subscribe`, # `:notify`, and `:before`. # #
def munge on_lparen UNK on_rparen on_ignored_nl UNK on_op on_lbracket UNK on_rbracket unless UNK on_period is_a? on_lparen on_const on_rparen on_nl UNK # @return [Array<Puppet::Resource>] turns attribute values into list of resources
def UNK on_nl on_ivar on_period each do on_op ref on_op on_ignored_nl unless on_ivar on_period catalog on_period resource on_lparen ref on_period # Checks each reference to assert that what it references exists in the catalog. # # @raise [???fail] if the referenced resource can not be found # @return [void]
def UNK on_nl on_ivar on_period collect do on_op UNK on_op on_ignored_nl UNK on_period catalog on_op resource on_period catalog on_nl on_ignored_nl # Creates edges for all relationships. # The `:in` relationships are specified by the event-receivers, and `:out` # relationships are specified by the event generator. # @todo references to "event-receivers" and "event generator" means in this context - are those just # the resources at the two ends of the relationship? # This way 'source' and 'target' are consistent terms in both edges # and events, i.e. an event targets edges whose source matches # the event's source. The direction of the relationship determines # which resource is applied first and which resource is considered # to be the event generator. # @return [Array<Puppet::Relationship>] # @raise [???fail] when a reference can not be resolved #
UNK on_op UNK on_period UNK on_nl unless UNK on_nl self on_period fail on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_content on_embexpr_beg on_ivar # Either of the two retrieval attempts could have returned # nil.
if self on_period class on_period direction on_op on_symbeg in on_nl source on_op UNK on_nl UNK on_op on_ivar on_nl else on_ignored_nl # Are we requiring them, or vice versa? See the method docs # for further info on this.
UNK on_op nil on_nl end on_nl on_ignored_nl self on_period UNK do on_ignored_nl UNK on_op UNK self on_period class on_period name # If there's no callback, there's no point in even adding # a label.
self on_period UNK do on_ignored_nl UNK on_op UNK self on_period class on_period name on_nl when on_tstring_beg on_tstring_content on_tstring_end on_nl on_tstring_beg ## Corrected syntax of debug statement to reflect the way this was called. # i.e. before, after, subscribe, notify
def self on_period UNK on_nl on_const on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl on_ignored_nl newmetaparam on_lparen on_symbeg require on_comma on_symbeg # @todo document this, have no clue what this does... it returns "RelationshipMetaparam.subclasses" #
on_ignored_nl newmetaparam on_lparen on_symbeg require on_comma on_symbeg parent on_op on_const on_comma on_symbeg attributes on_op on_lbrace on_symbeg direction on_op on_symbeg in # Note that the order in which the relationships params is defined # matters. The labeled params (notify and subscribe) must be later, # so that if both params are used, those ones win. It's a hackish # solution, but it works.
require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_op on_const on_op on_const on_nl on_ignored_nl UNK ############################### # All of the provider plumbing for the resource types.
UNK on_const on_op on_const on_op on_const on_nl on_ignored_nl UNK on_symbeg provider on_nl on_ignored_nl class on_op self on_nl attr_accessor on_symbeg UNK # Add the feature handling module.
UNK on_symbeg provider on_nl on_ignored_nl class on_op self on_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg defaultprovider on_nl end on_nl # The provider that has been selected for the instance of the resource type. # @return [Puppet::Provider,nil] the selected provider or nil, if none has been selected #
class on_op self on_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg defaultprovider on_nl end on_nl on_ignored_nl def self on_period defaultprovider # the Type class attribute accessors
attr_accessor on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg defaultprovider on_nl end on_nl on_ignored_nl def self on_period defaultprovider on_nl return on_ivar if # The loader of providers to use when loading providers from disk. # Although it looks like this attribute provides a way to operate with different loaders of # providers that is not the case; the attribute is written when a new type is created, # and should not be changed thereafter. # @api private #
UNK on_symbeg defaultprovider on_nl end on_nl on_ignored_nl def self on_period defaultprovider on_nl return on_ivar if on_ivar on_nl on_ignored_nl UNK on_op # @todo Don't know if this is a name, or a reference to a Provider instance (now marked up as an instance # of Provider. # @return [Puppet::Provider, nil] The default provider for this type, or nil if non is defines #
def self on_period defaultprovider on_nl return on_ivar if on_ivar on_nl on_ignored_nl UNK on_op UNK on_nl on_ignored_nl defaults on_op UNK on_period # The default provider, or the most suitable provider if no default provider was set. # @note a warning will be issued if no default provider has been configured and a search for the most # suitable provider returns more than one equally suitable provider. # @return [Puppet::Provider, nil] the default or most suitable provider, or nil if no provider was found #
defaults on_op UNK on_period find_all on_lbrace on_op provider on_op provider on_period UNK on_rbrace on_nl on_ignored_nl defaults on_op UNK if defaults # Find which providers are a default for this system.
defaults on_op UNK if defaults on_period UNK on_nl UNK on_op defaults on_period collect on_lbrace on_op provider on_op provider on_period UNK # If we don't have any default we use suitable providers
def self on_period UNK on_lparen type on_rparen on_ignored_nl on_ivar on_op on_lbrace on_rbrace on_nl on_ivar on_lbracket type on_rbracket on_op on_lbrace on_rbrace # @return [Hash{??? => Puppet::Provider}] Returns a hash of WHAT EXACTLY for the given type # @todo what goes into this hash?
def self on_period provider_hash on_nl on_const on_op on_const on_period UNK on_lparen self on_period name on_rparen on_nl end on_nl on_ignored_nl def # @return [Hash{ ??? => Puppet::Provider}] Returns a hash of WHAT EXACTLY for this type. # @see provider_hash_by_type method to get the same for some other type
def self on_period provider on_lparen name on_rparen on_ignored_nl name on_op name on_period intern on_nl on_ignored_nl on_ivar on_period UNK on_lparen name # Returns the provider having the given name. # This will load a provider if it is not already loaded. The returned provider is the first found provider # having the given name, where "first found" semantics is defined by the {providerloader} in use. # # @param name [String] the name of the provider to get # @return [Puppet::Provider, nil] the found provider, or nil if no provider of the given name was found #
on_ivar on_period UNK on_lparen name on_comma on_const on_period UNK on_lparen on_symbeg UNK on_rparen on_rparen unless provider_hash on_period UNK on_lparen name # If we don't have it yet, try loading it.
def self on_period UNK on_nl provider_hash on_period UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen name on_rparen on_ignored_nl # Returns a list of loaded providers by name. # This method will not load/search for available providers. # @return [Array<String>] list of loaded provider names #
def self on_period UNK on_lparen name on_rparen on_ignored_nl name on_op name on_period intern on_nl on_ignored_nl on_lparen provider_hash on_period UNK on_lparen # Returns true if the given name is a reference to a provider and if this is a suitable provider for # this type. # @todo How does the provider know if it is suitable for the type? Is it just suitable for the platform/ # environment where this method is executing? # @param name [String] the name of the provider for which validity is checked # @return [Boolean] true if the given name references a provider that is suitable #
def self on_period UNK on_lparen name on_comma options on_op on_lbrace on_rbrace on_comma on_op block on_rparen on_ignored_nl name on_op name on_period # Creates a new provider of a type. # This method must be called directly on the type that it's implementing. # @todo Fix Confusing Explanations! # Is this a new provider of a Type (metatype), or a provider of an instance of Type (a resource), or # a Provider (the implementation of a Type's behavior). CONFUSED. It calls magically named methods like # "providify" ... # @param name [String, Symbol] the name of the WHAT? provider? type? # @param options [Hash{Symbol => Object}] a hash of options, used by this method, and passed on to {#genclass}, (see # it for additional options to pass). # @option options [Puppet::Provider] :parent the parent provider (what is this?) # @option options [Puppet::Type] :resource_type the resource type, defaults to this type if unspecified # @return [Puppet::Provider] a provider ??? # @raise [Puppet::DevError] when the parent provider could not be found. #
def self on_period UNK on_nl return if on_ivar on_period UNK on_symbeg provider on_nl on_ignored_nl param on_op UNK on_lparen on_symbeg provider # Ensures there is a `:provider` parameter defined. # Should only be called if there are providers. # @return [void]
desc UNK on_nl on_tstring_content on_embexpr_beg self on_period to_s on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_lbracket on_int on_rbracket on_period UNK # We're using a hacky way to get the name of our type, since there doesn't # seem to be a correct way to introspect this at the time this code is run. # We expect that the class in which this code is executed will be something # like Puppet::Type::Ssh_authorized_key::ParameterProvider.
class on_op self on_nl attr_accessor on_symbeg UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_nl UNK on_lparen on_ivar on_rparen # This is so we can refer back to the type to get a list of # providers for documentation.
attr_accessor on_symbeg UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_nl UNK on_lparen on_ivar on_rparen on_op on_tstring_beg on_tstring_content on_tstring_end # The reference to a parent type for the parameter `:provider` used to get a list of # providers for documentation purposes. #
def self on_period UNK on_nl UNK on_lparen on_ivar on_rparen on_op on_tstring_beg on_tstring_content on_tstring_end on_op UNK on_period UNK on_period UNK on_lparen # Provides the ability to add documentation to a provider. #
UNK on_lparen on_ivar on_rparen on_op on_tstring_beg on_tstring_content on_tstring_end on_op UNK on_period UNK on_period UNK on_lparen on_op on_symbeg to_s on_rparen on_period # Since we're mixing @doc with text from other sources, we must normalize # its indentation with scrub. But we don't need to manually scrub the # provider's doc string, since markdown_definitionlist sanitizes its inputs.
UNK on_lbrace on_ignored_nl UNK on_op on_ivar on_period class on_period defaultprovider on_nl UNK on_period name if UNK on_nl on_rbrace on_nl on_ignored_nl # For each resource, the provider param defaults to # the type's default provider
def self on_period UNK on_lparen name on_rparen on_ignored_nl if on_ivar and on_ivar on_period name on_op name on_nl on_ivar on_op nil # @todo this needs a better explanation # Removes the implementation class of a given provider. # @return [Object] returns what {Puppet::Util::ClassGen#rmclass} returns
def self on_period UNK on_nl UNK on_period UNK on_lparen on_const on_period UNK on_lparen on_symbeg UNK on_rparen on_rparen if provider_hash on_period # Returns a list of suitable providers for the given type. # A call to this method will load all providers if not already loaded and ask each if it is # suitable - those that are are included in the result. # @note This method also does some special processing which rejects a provider named `:fake` (for testing purposes). # @return [Array<Puppet::Provider>] Returns an array of all suitable providers. #
end on_nl on_ignored_nl def UNK on_nl return true unless self on_period class on_period UNK on_lparen on_symbeg provider on_rparen on_nl on_ignored_nl # For testing
def UNK on_nl return true unless self on_period class on_period UNK on_lparen on_symbeg provider on_rparen on_nl on_ignored_nl return true if # @return [Boolean] Returns true if this is something else than a `:provider`, or if it # is a provider and it is suitable, or if there is a default provider. Otherwise, false is returned. #
return true unless self on_period class on_period UNK on_lparen on_symbeg provider on_rparen on_nl on_ignored_nl return true if provider on_op provider # If we don't use providers, then we consider it suitable.
return true if provider on_op provider on_period class on_period UNK on_nl on_ignored_nl if on_op provider and self on_period class on_period # We have a provider and it is suitable.
if on_op provider and self on_period class on_period defaultprovider on_nl self on_period provider on_op self on_period class on_period defaultprovider on_period # We're using the default provider and there is one.
false on_nl end on_nl on_ignored_nl def UNK on_lparen name on_rparen on_ignored_nl if name on_period is_a? on_lparen on_const on_op on_const on_rparen # We specified an unsuitable provider, or there isn't any suitable # provider.
def UNK on_lparen name on_rparen on_ignored_nl if name on_period is_a? on_lparen on_const on_op on_const on_rparen on_nl on_ivar on_op name on_nl # Sets the provider to the given provider/name. # @overload provider=(name) # Sets the provider to the result of resolving the name to an instance of Provider. # @param name [String] the name of the provider # @overload provider=(provider) # Sets the provider to the given instances of Provider. # @param provider [Puppet::Provider] the provider to set # @return [Puppet::Provider] the provider set # @raise [ArgumentError] if the provider could not be found/resolved. #
on_ignored_nl def self on_period UNK on_lparen name on_comma on_op block on_rparen on_ignored_nl on_ivar on_op on_lbrace on_rbrace on_nl on_ivar on_lbracket name ############################### # All of the relationship code.
def self on_period UNK on_lparen name on_comma on_op block on_rparen on_ignored_nl on_ivar on_op on_lbrace on_rbrace on_nl on_ivar on_lbracket name on_rbracket # Adds a block producing a single name (or list of names) of the given # resource type name to autorelate. # # The four relationship types require, before, notify, and subscribe are all # supported. # # Be *careful* with notify and subscribe as they may have unintended # consequences. # # Resources in the catalog that have the named type and a title that is # included in the result will be linked to the calling resource as a # requirement. # # @example Autorequire the files File['foo', 'bar'] # autorequire( 'file', {|| ['foo', 'bar'] }) # # @example Autobefore the files File['foo', 'bar'] # autobefore( 'file', {|| ['foo', 'bar'] }) # # @example Autosubscribe the files File['foo', 'bar'] # autosubscribe( 'file', {|| ['foo', 'bar'] }) # # @example Autonotify the files File['foo', 'bar'] # autonotify( 'file', {|| ['foo', 'bar'] }) # # @param name [String] the name of a type of which one or several resources should be autorelated e.g. "file" # @yield [ ] a block returning list of names of given type to auto require # @yieldreturn [String, Array<String>] one or several resource names for the named type # @return [void] # @dsl type # @api public #
def self on_period UNK on_nl on_ivar on_op on_lbrace on_rbrace on_nl on_ivar on_period each on_lbrace on_op type on_comma block on_op on_ignored_nl # Provides iteration over added auto-requirements (see {autorequire}). # @yieldparam type [String] the name of the type to autorequire an instance of # @yieldparam block [Proc] a block producing one or several dependencies to auto require (see {autorequire}). # @yieldreturn [void] # @return [void]
def self on_period UNK on_nl on_ivar on_op on_lbrace on_rbrace on_nl on_ivar on_period each on_lbrace on_op type on_comma block on_op on_ignored_nl # Provides iteration over added auto-requirements (see {autobefore}). # @yieldparam type [String] the name of the type to autorequire an instance of # @yieldparam block [Proc] a block producing one or several dependencies to auto require (see {autobefore}). # @yieldreturn [void] # @return [void]
def self on_period UNK on_nl on_ivar on_op on_lbrace on_rbrace on_nl on_ivar on_period each on_lbrace on_op type on_comma block on_op on_ignored_nl # Provides iteration over added auto-requirements (see {autosubscribe}). # @yieldparam type [String] the name of the type to autorequire an instance of # @yieldparam block [Proc] a block producing one or several dependencies to auto require (see {autosubscribe}). # @yieldreturn [void] # @return [void]
def self on_period UNK on_nl on_ivar on_op on_lbrace on_rbrace on_nl on_ivar on_period each on_lbrace on_op type on_comma block on_op on_ignored_nl # Provides iteration over added auto-requirements (see {autonotify}). # @yieldparam type [String] the name of the type to autorequire an instance of # @yieldparam block [Proc] a block producing one or several dependencies to auto require (see {autonotify}). # @yieldreturn [void] # @return [void]
def UNK on_lparen UNK on_comma rel_catalog on_op nil on_rparen on_ignored_nl rel_catalog on_op catalog on_nl raise on_const on_op on_const on_comma _ # Adds dependencies to the catalog from added autorelations. # See {autorequire} for how to add an auto-requirement. # @todo needs details - see the param rel_catalog, and type of this param # @param rel_catalog [Puppet::Resource::Catalog, nil] the catalog to # add dependencies to. Defaults to the current catalog (set when the # type instance was added to a catalog) # @raise [Puppet::DevError] if there is no catalog #
next unless on_const on_op on_const on_period type on_lparen type on_rparen on_nl on_ignored_nl list on_op self on_period UNK on_lparen on_op block # Ignore any types we can't find, although that would be a bit odd.
list on_op self on_period UNK on_lparen on_op block on_rparen on_nl next unless list on_nl list on_op on_lbracket list on_rbracket unless # Retrieve the list of names from the block.
list on_period each on_lbrace on_op dep on_op on_ignored_nl next if dep on_period nil? on_nl on_ignored_nl unless dep on_period is_a? on_lparen # Collect the current prereqs
unless dep on_period is_a? on_lparen on_const on_op on_const on_rparen on_nl dep on_op rel_catalog on_period resource on_lparen type on_comma dep on_rparen # Support them passing objects directly, to save some effort.
dep on_op rel_catalog on_period resource on_lparen type on_comma dep on_rparen on_nl next unless dep on_nl end on_nl on_ignored_nl if on_lbracket # Skip autorelation that we aren't managing
def UNK on_nl self on_period class on_period UNK on_period collect do on_op klass on_op on_ignored_nl param on_op on_ivar on_lbracket klass # Builds the dependencies associated with this resource. # # @return [Array<Puppet::Relationship>] list of relationships to other resources
self on_period class on_period UNK on_period collect do on_op klass on_op on_ignored_nl param on_op on_ivar on_lbracket klass on_period name on_rbracket # Handle the requires
def UNK on_lparen list on_rparen on_ignored_nl tag on_lparen self on_period class on_period name on_rparen on_nl tag on_lparen on_op list on_rparen # Sets the initial list of tags to associate to this resource. # # @return [void] ???
on_ignored_nl on_ignored_nl UNK on_symbeg title on_nl on_ignored_nl UNK on_symbeg noop on_nl on_ignored_nl include on_const on_nl on_ignored_nl on_ignored_nl class on_op self # @comment - these two comments were floating around here, and turned up as documentation # for the attribute "title", much to my surprise and amusement. Clearly these comments # are orphaned ... I think they can just be removed as what they say should be covered # by the now added yardoc. <irony>(Yo! to quote some of the other actual awesome specific comments applicable # to objects called from elsewhere, or not. ;-)</irony> # # @comment Types (which map to resources in the languages) are entirely composed of # attribute value pairs. Generally, Puppet calls any of these things an # 'attribute', but these attributes always take one of three specific # forms: parameters, metaparams, or properties.
on_ignored_nl UNK on_symbeg title on_nl on_ignored_nl UNK on_symbeg noop on_nl on_ignored_nl include on_const on_nl on_ignored_nl on_ignored_nl class on_op self on_nl # @comment In naming methods, I have tried to consistently name the method so # that it is clear whether it operates on all attributes (thus has 'attr' in # the method name, or whether it operates on a specific type of attributes.
UNK on_symbeg title on_nl on_ignored_nl UNK on_symbeg noop on_nl on_ignored_nl include on_const on_nl on_ignored_nl on_ignored_nl class on_op self on_nl UNK # The title attribute of WHAT ??? # @todo Figure out what this is the title attribute of (it appears on line 1926 currently). # @return [String] the title
UNK on_symbeg noop on_nl on_ignored_nl include on_const on_nl on_ignored_nl on_ignored_nl class on_op self on_nl UNK on_symbeg name on_nl on_ignored_nl attr_accessor # The noop attribute of WHAT ??? does WHAT??? # @todo Figure out what this is the noop attribute of (it appears on line 1931 currently). # @return [???] the noop WHAT ??? (mode? if so of what, or noop for an instance of the type, or for all # instances of a type, or for what??? #
on_ignored_nl class on_op self on_nl UNK on_symbeg name on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl include on_const on_comma on_const on_op on_const # class methods dealing with Type management
class on_op self on_nl UNK on_symbeg name on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl include on_const on_comma on_const on_op on_const on_op # The Type class attribute accessors
UNK on_symbeg name on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl include on_const on_comma on_const on_op on_const on_op on_const on_nl on_ignored_nl include # @return [String] the name of the resource type; e.g., "File" #
attr_accessor on_symbeg UNK on_nl include on_const on_comma on_const on_op on_const on_op on_const on_nl on_ignored_nl include on_const on_op on_const on_nl include # @return [Boolean] true if the type should send itself a refresh event on change. #
def self on_period UNK on_nl on_ivar on_op on_const on_period new on_nl on_ivar on_op on_const on_period new on_nl on_ignored_nl on_ivar on_op # Initializes all of the variables that must be initialized for each subclass. # @todo Does the explanation make sense? # @return [void]
on_ivar on_op on_const on_period new on_nl on_ivar on_op on_const on_period new on_nl on_ignored_nl on_ivar on_op on_lbrace on_rbrace on_nl on_ignored_nl on_ivar # all of the instances of this class
def self on_period to_s on_nl if defined? on_lparen on_ivar on_rparen on_nl on_tstring_beg on_tstring_content on_embexpr_beg on_ivar on_period to_s on_period UNK on_embexpr_end # Returns the name of this type (if specified) or the parent type #to_s. # The returned name is on the form "Puppet::Type::<name>", where the first letter of name is # capitalized. # @return [String] the fully qualified name Puppet::Type::<name> where the first letter of name is capitalized #
def self on_period validate on_lparen on_op block on_rparen on_ignored_nl UNK on_lparen on_symbeg validate on_comma on_op block on_rparen on_nl end on_nl # Creates a `validate` method that is used to validate a resource before it is operated on. # The validation should raise exceptions if the validation finds errors. (It is not recommended to # issue warnings as this typically just ends up in a logfile - you should fail if a validation fails). # The easiest way to raise an appropriate exception is to call the method {Puppet::Util::Errors.fail} with # the message as an argument. # # @yield [ ] a required block called with self set to the instance of a Type class representing a resource. # @return [void] # @dsl type # @api public #
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg catalog on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl # @return [String] The file from which this type originates from
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg catalog on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl # @return [Integer] The line in {#file} from which this type originates from
attr_accessor on_symbeg catalog on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen UNK on_rparen # @todo what does this mean "this resource" (sounds like this if for an instance of the type, not the meta Type), # but not sure if this is about the catalog where the meta Type is included) # @return [??? TODO] The catalog that this resource is stored in.
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_ignored_nl on_const on_op on_const # @return [Boolean] Flag indicating if this type is exported
attr_accessor on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_ignored_nl on_const on_op on_const on_op on_const on_period UNK on_lparen # @return [Boolean] Flag indicating if the type is virtual (it should not be).
def UNK on_lparen UNK on_rparen on_ignored_nl on_ignored_nl on_const on_op on_const on_op on_const on_period UNK on_lparen on_ignored_nl on_ignored_nl on_symbeg UNK on_op # Creates a log entry with the given message at the log level specified by the parameter `loglevel` # @return [void] #
on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen resource on_rparen on_ignored_nl resource on_op self on_period class on_period UNK on_lparen # instance methods related to instance intrinsics # e.g., initialize and name
UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen resource on_rparen on_ignored_nl resource on_op self on_period class on_period UNK on_lparen resource # @return [Hash] hash of parameters originally defined # @api private
def UNK on_lparen resource on_rparen on_ignored_nl resource on_op self on_period class on_period UNK on_lparen resource on_rparen unless resource on_period is_a? # Creates an instance of Type from a hash or a {Puppet::Resource}. # @todo Unclear if this is a new Type or a new instance of a given type (the initialization ends # with calling validate - which seems like validation of an instance of a given type, not a new # meta type. # # @todo Explain what the Hash and Resource are. There seems to be two different types of # resources; one that causes the title to be set to resource.title, and one that # causes the title to be resource.ref ("for components") - what is a component? # # @overload initialize(hash) # @param [Hash] hash # @raise [Puppet::ResourceError] when the type validation raises # Puppet::Error or ArgumentError # @overload initialize(resource) # @param resource [Puppet:Resource] # @raise [Puppet::ResourceError] when the type validation raises # Puppet::Error or ArgumentError #
on_ivar on_op on_lbrace on_rbrace on_nl on_ignored_nl if resource on_period type on_period to_s on_period UNK on_period to_sym on_op self on_period class # The list of parameter/property instances.
if resource on_period type on_period to_s on_period UNK on_period to_sym on_op self on_period class on_period name on_nl self on_period title # Set the title first, so any failures print correctly.
self on_period title on_op resource on_period ref on_nl end on_nl on_ignored_nl on_lbracket on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg catalog # This should only ever happen for components
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period each do on_op name on_op on_ignored_nl p on_op parameter on_lparen name on_rparen # Mark parameters associated with this type as sensitive, based on the associated resource. # # Currently, only instances of `Puppet::Property` can be easily marked for sensitive data handling # and information redaction is limited to redacting events generated while synchronizing # properties. While support for redaction will be broadened in the future we can't automatically # deduce how to redact arbitrary parameters, so if a parameter is marked for redaction the best # we can do is warn that we can't handle treating that parameter as sensitive and move on. # # In some unusual cases a given parameter will be marked as sensitive but that sensitive context # needs to be transferred to another parameter. In this case resource types may need to override # this method in order to copy the sensitive context from one parameter to another (and in the # process force the early generation of a parameter that might otherwise be lazily generated.) # See `Puppet::Type.type(:file)#set_sensitive_parameters` for an example of this. # # @note This method visibility is protected since it should only be called by #initialize, but is # marked as public as subclasses may need to override this method. # # @api public # # @param sensitive_parameters [Array<Symbol>] A list of parameters to mark as sensitive. # # @return [void]
def UNK on_lparen hash on_rparen on_ignored_nl self on_lbracket name_var on_rbracket on_op hash on_period delete on_lparen name_var on_rparen if name_var on_nl # Sets the name of the resource from a hash containing a mapping of `name_var` to value. # Sets the value of the property/parameter appointed by the `name_var` (if it is defined). The value set is # given by the corresponding entry in the given hash - e.g. if name_var appoints the name `:path` the value # of `:path` is set to the value at the key `:path` in the given hash. As a side effect this key/value is then # removed from the given hash. # # @note This method mutates the given hash by removing the entry with a key equal to the value # returned from name_var! # @param hash [Hash] a hash of what # @return [void]
def UNK on_lparen hash on_rparen on_ignored_nl UNK on_op on_lbracket on_rbracket on_nl on_lparen self on_period class on_period UNK on_op hash on_period # Sets parameters from the given hash. # Values are set in _attribute order_ i.e. higher priority attributes before others, otherwise in # the order they were specified (as opposed to just setting them in the order they happen to appear in # when iterating over the given hash). # # Attributes that are not included in the given hash are set to their default value. # # @todo Is this description accurate? Is "ensure" an example of such a higher priority attribute? # @return [void] # @raise [Puppet::DevError] when impossible to set the value due to some problem # @raise [ArgumentError, TypeError, Puppet::Error] when faulty arguments have been passed #
UNK on_op on_lbracket on_rbracket on_nl on_lparen self on_period class on_period UNK on_op hash on_period UNK on_rparen on_period UNK on_period each # Use the order provided by allattrs, but add in any # extra attributes from the resource so we get failures # on invalid attributes.
if hash on_period UNK on_lparen attr on_rparen on_nl self on_lbracket attr on_rbracket on_op hash on_lbracket attr on_rbracket on_nl else on_ignored_nl # Set any defaults immediately. This is mostly done so # that the default provider is available for any other # property validation.
def UNK on_nl UNK do on_op parameter on_op on_ignored_nl parameter on_period UNK if parameter on_period UNK on_symbeg UNK on_nl end # Finishes any outstanding processing. # This method should be called as a final step in setup, # to allow the parameters that have associated auto-require needs to be processed. # # @todo what is the expected sequence here - who is responsible for calling this? When? # Is the returned type correct? # @return [Array<Puppet::Parameter>] the validated list/set of attributes #
UNK do on_op parameter on_op on_ignored_nl parameter on_period UNK if parameter on_period UNK on_symbeg UNK on_nl end on_nl on_ignored_nl self # Call post_compile hook on every parameter that implements it. This includes all subclasses # of parameter including, but not limited to, regular parameters, metaparameters, relationship # parameters, and properties.
self on_period class on_period UNK on_period collect do on_op klass on_op on_ignored_nl param on_op on_ivar on_lbracket klass on_period name on_rbracket # Make sure all of our relationships are valid. Again, must be done # when the entire catalog is instantiated.
def name on_nl self on_lbracket on_symbeg name on_rbracket on_nl end on_nl on_ignored_nl def parent on_nl return nil unless catalog on_nl # @comment For now, leave the 'name' method functioning like it used to. Once 'title' # works everywhere, I'll switch it. # Returns the resource's name # @todo There is a comment in source that this is not quite the same as ':title' and that a switch should # be made... # @return [String] the name of a resource
def parent on_nl return nil unless catalog on_nl return on_ivar if on_ivar on_nl UNK on_op catalog on_period UNK on_lparen self # Returns the parent of this in the catalog. In case of an erroneous catalog # where multiple parents have been produced, the first found (non # deterministic) parent is returned. # @return [Puppet::Type, nil] the # containing resource or nil if there is no catalog or no containing # resource.
def ref on_nl on_ivar on_op on_tstring_beg on_embexpr_beg self on_period class on_period name on_period to_s on_period UNK on_embexpr_end on_tstring_content on_embexpr_beg self # Returns a reference to this as a string in "Type[name]" format. # @return [String] a reference to this object on the form 'Type[name]' #
on_ivar on_op on_tstring_beg on_embexpr_beg self on_period class on_period name on_period to_s on_period UNK on_embexpr_end on_tstring_content on_embexpr_beg self on_period title on_embexpr_end # memoizing this is worthwhile ~ 3 percent of calls are the "first time # around" in an average run of Puppet. --daniel 2012-07-17
def UNK on_nl self on_period class on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op true on_nl end # (see self_refresh) # @todo check that meaningful yardoc is produced - this method delegates to "self.class.self_refresh" # @return [Boolean] - ??? returns true when ... what? #
def UNK on_nl on_ivar on_op true on_nl end on_nl on_ignored_nl def UNK on_nl if defined? on_lparen on_ivar on_rparen on_nl on_ivar # Marks the object as "being purged". # This method is used by transactions to forbid deletion when there are dependencies. # @todo what does this mean; "mark that we are purging" (purging what from where). How to use/when? # Is this internal API in transactions? # @see purging?
def UNK on_nl if defined? on_lparen on_ivar on_rparen on_nl on_ivar on_nl else on_ignored_nl false on_nl end on_nl end on_nl on_ignored_nl # Returns whether this resource is being purged or not. # This method is used by transactions to forbid deletion when there are dependencies. # @return [Boolean] the current "purging" state #
def title on_nl unless on_ivar on_nl if self on_period class on_period UNK on_lparen name_var on_rparen on_nl on_ivar on_op self on_lbracket # Returns the title of this object, or its name if title was not explicitly set. # If the title is not already set, it will be computed by looking up the {#name_var} and using # that value as the title. # @todo it is somewhat confusing that if the name_var is a valid parameter, it is assumed to # be the name_var called :name, but if it is a property, it uses the name_var. # It is further confusing as Type in some respects supports multiple namevars. # # @return [String] Returns the title of this object, or its name if title was not explicitly set. # @raise [??? devfail] if title is not set, and name_var can not be found.
def to_s on_nl self on_period ref on_nl end on_nl on_ignored_nl def UNK on_nl resource on_op self on_period UNK on_nl resource # Produces a reference to this in reference format. # @see #ref #
def UNK on_nl resource on_op self on_period UNK on_nl resource on_period UNK on_lparen self on_rparen on_nl on_ignored_nl on_ivar on_period each # Convert this resource type instance to a Puppet::Resource. # @return [Puppet::Resource] Returns a serializable representation of this resource #
next if param on_period class on_period UNK and param on_period value on_op self on_period title on_nl on_ignored_nl next if param # Avoid adding each instance name twice
next if param on_period is_a? on_lparen on_const on_op on_const on_rparen on_nl resource on_lbracket name on_rbracket on_op param on_period value on_nl # We've already got property values
def UNK on_semicolon on_op on_op on_ivar on_semicolon end on_nl def UNK on_semicolon on_op on_op on_ivar on_semicolon end on_nl on_ignored_nl def # @return [Boolean] Returns whether the resource is virtual or not
def UNK on_semicolon on_op on_op on_ivar on_semicolon end on_nl on_ignored_nl def UNK on_nl self on_period class on_period UNK on_lparen on_symbeg # @return [Boolean] Returns whether the resource is exported or not
def UNK on_nl self on_period class on_period UNK on_lparen on_symbeg UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl self # @return [Boolean] Returns whether the resource is applicable to `:device` # Returns true if a resource of this type can be evaluated on a 'network device' kind # of hosts. # @api private
def UNK on_nl self on_period class on_period UNK on_lparen on_symbeg UNK on_rparen on_nl end on_nl end on_nl end on_nl EMP # @return [Boolean] Returns whether the resource is applicable to `:host` # Returns true if a resource of this type can be evaluated on a regular generalized computer (ie not an appliance like a network device) # @api private
