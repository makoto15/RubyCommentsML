UNK on_const on_op on_const on_nl on_ignored_nl def UNK on_nl internal_compiler on_period UNK on_nl end on_nl UNK UNK UNK on_nl on_ignored_nl # A CatalogCompiler is a compiler that builds a catalog of resources and dependencies as a side effect of # evaluating puppet language code. # When the compilation of the given input manifest(s)/code string/file is finished the catalog is complete # for encoding and use. It is also possible to evaluate more strings within the same compilation context to # add or remove things from the catalog. # # @api public
def UNK on_nl internal_compiler on_period UNK on_nl end on_nl UNK UNK UNK on_nl on_ignored_nl def UNK on_nl UNK on_nl end # @api private
def UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK UNK UNK UNK UNK on_rparen on_ignored_nl UNK on_const # Returns true if this is a compiler that compiles a catalog. # This implementation returns `true` # @return [Boolean] true # @api public
def UNK on_lparen UNK UNK UNK UNK UNK on_rparen on_ignored_nl UNK on_const on_period UNK on_lparen UNK UNK UNK UNK UNK # Calls a block of code and yields a configured `JsonCatalogEncoder` to the block. # @example Get resulting catalog as pretty printed Json # Puppet::Pal.in_environment(...) do |pal| # pal.with_catalog_compiler(...) do |compiler| # compiler.with_json_encoding { |encoder| encoder.encode } # end # end # # @api public #
def UNK on_nl UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK UNK on_period UNK # Returns a hash representation of the compiled catalog. # # @api public
def UNK on_lparen UNK on_rparen on_ignored_nl UNK UNK on_period UNK on_lparen on_const on_op on_const on_op on_const on_op on_const on_rparen on_nl # Evaluates an AST obtained from `parse_string` or `parse_file` in topscope. # If the ast is a `Puppet::Pops::Model::Program` (what is returned from the `parse` methods, any definitions # in the program (that is, any function, plan, etc. that is defined will be made available for use). # # @param ast [Puppet::Pops::Model::PopsObject] typically the returned `Program` from the parse methods, but can be any `Expression` # @returns [Object] whatever the ast evaluates to #
internal_compiler on_period UNK on_period UNK on_period UNK on_lparen UNK UNK UNK UNK on_rparen on_nl UNK on_period UNK on_lparen internal_compiler on_period # define all catalog types
def UNK on_nl internal_compiler on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl internal_compiler on_period UNK on_nl end on_nl on_ignored_nl # Compiles the result of additional evaluation taking place in a PAL catalog compilation. # This will evaluate all lazy constructs until all have been evaluated, and will the validate # the result. # # This should be called if evaluating string or files of puppet logic after the initial # compilation taking place by giving PAL a manifest or code-string. # This method should be called when a series of evaluation should have reached a # valid state (there should be no dangling relationships (to resources that does not # exist). # # As an alternative the methods `evaluate_additions` can be called without any # requirements on consistency and then calling `validate` at the end. # # Can be called multiple times. # # @return [Void]
def UNK on_nl internal_compiler on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl internal_compiler on_period UNK on_nl end on_nl on_ignored_nl # Validates the state of the catalog (without performing evaluation of any elements # requiring lazy evaluation. Can be called multiple times. #
def UNK on_nl internal_compiler on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl internal_compiler on_period UNK on_nl end on_nl end # Evaluates all lazy constructs that were produced as a side effect of evaluating puppet logic. # Can be called multiple times. #
def UNK on_nl internal_compiler on_period UNK on_nl end on_nl end on_nl on_ignored_nl end on_nl end on_nl EMP EMP EMP EMP # Attempts to evaluate AST for node defnintions https://puppet.com/docs/puppet/latest/lang_node_definitions.html # if there are any.
