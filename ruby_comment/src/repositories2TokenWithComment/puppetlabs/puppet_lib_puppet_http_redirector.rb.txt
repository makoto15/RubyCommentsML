UNK on_const on_op on_const on_op on_const on_nl UNK UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_nl end on_nl on_ignored_nl # # @api private # # Handle HTTP redirects #
UNK UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_nl end on_nl on_ignored_nl UNK UNK on_lparen request on_comma response on_rparen # # @api private # # Create a new redirect handler # # @param [Integer] redirect_limit maximum number of redirects allowed #
UNK UNK on_lparen request on_comma response on_rparen on_ignored_nl UNK response on_period UNK on_nl UNK UNK on_comma UNK on_comma UNK on_nl # # @api private # # Determine of the HTTP response code indicates a redirect # # @param [Net::HTTP] request request that received the response # @param [Puppet::HTTP::Response] response # # @return [Boolean] true if the response code is 301, 302, or 307. #
UNK response on_period UNK on_nl UNK UNK on_comma UNK on_comma UNK on_nl UNK on_nl UNK on_ignored_nl UNK on_nl end on_nl # Net::HTTPRedirection is not used because historically puppet # has only handled these, and we're not a browser
UNK UNK on_lparen request on_comma response on_comma UNK on_rparen on_ignored_nl UNK on_const on_op on_const on_op on_const on_period UNK on_lparen request # # @api private # # Implement the HTTP request redirection # # @param [Net::HTTP] request request that has been redirected # @param [Puppet::HTTP::Response] response # @param [Integer] redirects the current number of redirects # # @return [Net::HTTP] A new request based on the original request, but with # the redirected location #
