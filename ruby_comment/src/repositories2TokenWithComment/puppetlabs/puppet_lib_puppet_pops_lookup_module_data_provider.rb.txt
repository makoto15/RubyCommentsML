UNK on_const on_op on_const on_nl on_ignored_nl UNK on_symbeg module_name on_nl on_ignored_nl def UNK on_lparen module_name on_comma config on_op UNK on_rparen # @api private
def UNK on_lparen UNK on_comma lookup_invocation on_comma UNK on_rparen on_ignored_nl UNK on_op config on_lparen lookup_invocation on_rparen on_period UNK on_lparen lookup_invocation # Performs a lookup using a module default hierarchy with an endless recursion check. # # @param key [LookupKey] The key to lookup # @param lookup_invocation [Invocation] The current lookup invocation # @param merge [MergeStrategy,String,Hash{String=>Object},nil] Merge strategy or hash with strategy and options #
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_nl UNK on_op on_tstring_beg UNK module_name UNK on_tstring_content on_tstring_end on_nl UNK on_period UNK # Asserts that all keys in the given _data_hash_ are prefixed with the configured _module_name_. Removes entries # that does not follow the convention and logs a warning. # # @param data_hash [Hash] The data hash # @return [Hash] The possibly pruned hash
def UNK on_lparen lookup_invocation on_rparen on_ignored_nl UNK on_op lookup_invocation on_period UNK on_period UNK on_nl UNK on_op UNK on_period UNK on_lparen # Return the root of the module with the name equal to the configured module name # # @param lookup_invocation [Invocation] The current lookup invocation # @return [Pathname] Path to root of the module # @raise [Puppet::DataBinding::LookupError] if the module can not be found #
