UNK on_const on_nl UNK UNK UNK on_comma UNK UNK on_nl on_ignored_nl def UNK on_lparen UNK on_comma UNK on_comma UNK on_rparen # Class that keeps track of the original location (as it appears in the declaration, before interpolation), # and the fully resolved location, and whether or not the resolved location exists. # # @api private
def UNK on_lparen UNK on_comma UNK on_comma UNK on_rparen on_ignored_nl UNK on_op UNK on_nl UNK on_op UNK on_nl UNK on_op # @param original_location [String] location as found in declaration. May contain interpolation expressions # @param location [Pathname,URI] the expanded location # @param exist [Boolean] `true` if the location is assumed to exist # @api public
def UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_period UNK on_nl end on_nl end on_nl on_ignored_nl # @return [Boolean] `true` if the location is assumed to exist # @api public
def UNK on_nl UNK on_period UNK on_nl end on_nl end on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl on_ignored_nl def # @return the resolved location as a string
UNK on_const on_nl UNK on_const on_nl on_ignored_nl def UNK on_lparen datadir on_comma UNK on_comma lookup_invocation on_rparen on_ignored_nl UNK on_period UNK # Helper methods to resolve interpolated locations # # @api private
def UNK on_lparen datadir on_comma UNK on_comma lookup_invocation on_comma UNK on_comma UNK on_op UNK on_rparen on_ignored_nl UNK on_op UNK UNK # @param datadir [Pathname] The base when creating absolute paths # @param declared_paths [Array<String>] paths as found in declaration. May contain interpolation expressions # @param lookup_invocation [Puppet::Pops::Lookup::Invocation] The current lookup invocation # @param is_default_config [Boolean] `true` if this is the default config and non-existent paths should be excluded # @param extension [String] Required extension such as '.yaml' or '.json'. Use only if paths without extension can be expected # @return [Array<ResolvedLocation>] Array of resolved paths
def UNK on_lparen UNK on_comma lookup_invocation on_rparen on_ignored_nl UNK on_period UNK UNK on_op UNK on_op on_ignored_nl UNK on_op on_const on_lparen # @param declared_uris [Array<String>] paths as found in declaration. May contain interpolation expressions # @param lookup_invocation [Puppet::Pops::Lookup::Invocation] The current lookup invocation # @return [Array<ResolvedLocation>] Array of resolved paths
mapped_vars on_op UNK on_lparen UNK UNK on_rparen on_period UNK on_lparen UNK UNK UNK UNK on_comma lookup_invocation on_comma UNK UNK UNK # The scope interpolation method is used directly to avoid unnecessary parsing of the string that otherwise # would need to be generated
UNK on_const UNK mapped_vars on_period UNK on_op mapped_vars on_period UNK on_nl on_ignored_nl mapped_vars on_op UNK mapped_vars UNK UNK mapped_vars on_period # No paths here unless the scope lookup returned something
path on_op UNK on_period UNK on_lparen UNK on_op UNK on_rparen UNK datadir on_op UNK on_lparen UNK on_comma lookup_invocation on_comma UNK # Need to use parent lookup invocation to avoid adding 'var' to the set of variables to track for changes. The # variable that 'var' stems from is added above.
