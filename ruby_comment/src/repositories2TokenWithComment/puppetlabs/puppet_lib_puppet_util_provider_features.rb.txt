UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_const on_op on_const on_op on_const on_nl UNK on_const on_op # Provides feature definitions.
UNK on_const on_op on_const on_op on_const on_nl UNK on_const on_op on_const on_op on_const on_nl UNK on_const on_nl UNK on_const on_op # This module models provider features and handles checking whether the features # are present. # @todo Unclear what is api and what is private in this module. #
UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_op on_const on_op on_const on_nl UNK on_symbeg name on_comma on_symbeg # This class models provider features and handles checking whether the features # are present. # @todo Unclear what is api and what is private in this class
def UNK on_lparen obj on_rparen on_ignored_nl if UNK on_period UNK on_nl return on_op on_op UNK on_lparen obj on_rparen on_nl UNK # Are all of the requirements met? # Requirements are checked by checking if feature predicate methods have been generated - see {#methods_available?}. # @param obj [Object, Class] the object or class to check if requirements are met # @return [Boolean] whether all requirements for this feature are met or not.
return UNK on_nl end on_nl end on_nl on_ignored_nl def UNK on_lparen name on_comma docs on_comma UNK UNK on_rparen on_ignored_nl UNK # In this case, the provider has to declare support for this # feature, and that's been checked before we ever get to the # method checks.
def UNK on_lparen obj on_rparen on_ignored_nl UNK on_period each do on_op UNK on_op on_ignored_nl if obj on_period UNK on_lparen on_const # Checks whether all feature predicate methods are available. # @param obj [Object, Class] the object or class to check if feature predicates are available or not. # @return [Boolean] Returns whether all of the required methods are available or not in the given object.
def UNK on_lparen name on_comma docs on_comma UNK on_op on_lbrace on_rbrace on_rparen on_ignored_nl on_ivar on_op on_lbrace on_rbrace on_nl UNK on_const # Defines one feature. # At a minimum, a feature requires a name # and docs, and at this point they should also specify a list of methods # required to determine if the feature is present. # @todo How methods that determine if the feature is present are specified.
def UNK on_nl UNK on_op on_tstring_beg on_tstring_end on_nl on_ivar on_op on_lbrace on_rbrace on_nl return UNK if on_ivar on_period UNK on_nl # @return [String] Returns a string with documentation covering all features.
def UNK on_nl on_ivar on_op on_lbrace on_rbrace on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl unless UNK # @return [Array<String>] Returns a list of features.
def UNK on_nl unless UNK on_lparen on_ivar on_rparen on_nl on_ivar on_op on_lbrace on_rbrace on_nl on_ivar on_op on_op on_const on_period UNK # Generates a module that sets up the boolean predicate methods to test for given features. #
on_ivar on_period send on_lparen on_symbeg UNK on_comma on_symbeg UNK on_rparen do on_op name on_op on_ignored_nl UNK on_op name on_period UNK # Create a feature? method that can be passed a feature name and # determine if the feature is present.
on_ivar on_period send on_lparen on_symbeg UNK on_comma on_symbeg UNK on_rparen do on_ignored_nl return UNK unless UNK on_lparen UNK on_rparen on_nl # Create a method that will list all functional features.
on_ivar on_period send on_lparen on_symbeg UNK on_comma on_symbeg UNK on_rparen do on_op on_op UNK on_op on_ignored_nl UNK on_op UNK on_nl # Create a method that will determine if a provided list of # features are satisfied by the curred provider.
on_ivar on_period each do on_op name on_comma UNK on_op on_ignored_nl UNK on_op name on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl # Create a boolean method for each feature so you can test them # individually as you might need.
on_ivar on_period send on_lparen on_symbeg UNK on_comma on_symbeg UNK on_rparen do on_op on_op names on_op on_ignored_nl on_ivar on_op on_lbracket on_rbracket # Allow the provider to declare that it has a given feature.
on_ivar on_period send on_lparen on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_rparen on_nl end on_nl on_ivar on_nl end on_nl # Aaah, grammatical correctness
def UNK on_lparen name on_rparen on_ignored_nl return UNK unless UNK on_lparen on_ivar on_rparen on_nl on_ignored_nl on_ivar on_lbracket name on_rbracket on_nl # @return [ProviderFeature] Returns a provider feature instance by name. # @param name [String] the name of the feature to return # @note Should only be used for testing. # @api private #
