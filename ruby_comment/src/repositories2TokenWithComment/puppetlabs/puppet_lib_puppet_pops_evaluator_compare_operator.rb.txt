UNK on_const on_nl UNK on_const on_nl on_ignored_nl UNK on_const on_nl on_ignored_nl def UNK on_nl on_cvar on_op on_const on_period new on_lparen # Compares the puppet DSL way # # ==Equality # All string vs. numeric equalities check for numeric equality first, then string equality # Arrays are equal to arrays if they have the same length, and each element #equals # Hashes are equal to hashes if they have the same size and keys and values #equals. # All other objects are equal if they are ruby #== equal #
UNK on_const on_nl on_ignored_nl def UNK on_nl on_cvar on_op on_const on_period new on_lparen self on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_int # Provides access to the Puppet 3.x runtime (scope, etc.) # This separation has been made to make it easier to later migrate the evaluator to an improved runtime. #
def UNK on_lparen a on_comma b on_rparen on_ignored_nl on_cvar on_period UNK on_lparen self on_comma a on_comma b on_rparen on_nl end # Performs a comparison of a and b, and return > 0 if a is bigger, 0 if equal, and < 0 if b is bigger. # Comparison of String vs. Numeric always compares using numeric.
def match on_lparen a on_comma b on_comma scope on_op UNK on_rparen on_ignored_nl on_cvar on_period UNK on_lparen self on_comma b on_comma # Performs a match of a and b, and returns true if b matches a
def include? on_lparen a on_comma b on_comma scope on_rparen on_ignored_nl on_cvar on_period UNK on_lparen self on_comma a on_comma b on_comma # Answers is b included in a
def UNK on_lparen a on_comma b on_rparen on_ignored_nl return false unless b on_period is_a? on_lparen on_const on_rparen on_nl a on_period # Equality is case independent.
else on_ignored_nl raise on_const on_period new on_lparen _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_rparen on_nl end on_nl end on_nl on_ignored_nl # compare other way and invert result
b on_period UNK on_op b on_op UNK UNK on_nl end on_nl on_ignored_nl def UNK on_lparen a on_comma b on_rparen on_ignored_nl # :undef supported in case it is passed from a 3x data structure
a on_op b on_op a on_op UNK UNK on_op b on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen a # :undef supported in case it is passed from a 3x data structure
a on_period UNK on_period include? on_lparen b on_period UNK on_rparen on_nl when on_const on_nl matched on_op a on_period match on_lparen # substring search downcased
UNK on_lparen matched on_comma scope on_rparen on_op on_op matched when on_const on_nl equals on_lparen a on_comma b on_rparen on_nl else # nil, or MatchData
on_op on_op matched when on_const on_nl equals on_lparen a on_comma b on_rparen on_nl else on_ignored_nl false on_nl end on_nl end # creates ephemeral
when on_const on_nl equals on_lparen a on_comma b on_rparen on_nl else on_ignored_nl false on_nl end on_nl end on_nl on_ignored_nl def # match (convert to boolean)
equals on_lparen a on_comma b on_rparen on_nl else on_ignored_nl false on_nl end on_nl end on_nl on_ignored_nl def UNK on_lparen a # convert string to number, true if ==
UNK if matched on_nl end on_nl UNK on_lparen matched on_comma scope on_rparen return on_op on_op matched on_nl when on_const on_comma # nil, or MatchData
UNK on_lparen matched on_comma scope on_rparen return on_op on_op matched on_nl when on_const on_comma on_const on_op on_const on_nl a on_period # Always set match data, a "not found" should not keep old match data visible
return on_op on_op matched on_nl when on_const on_comma on_const on_op on_const on_nl a on_period UNK on_lbrace on_op element on_op match # creates ephemeral
def UNK on_lparen UNK on_comma a on_comma scope on_rparen on_ignored_nl equals on_lparen a on_comma UNK on_rparen on_nl end on_nl on_ignored_nl # Matches in general by using == operator
def UNK on_lparen UNK on_comma left on_comma scope on_rparen on_ignored_nl return false unless left on_period is_a? on_const on_nl matched on_op # Matches only against strings
on_op on_op matched end on_nl on_ignored_nl def UNK on_lparen UNK on_comma left on_comma scope on_rparen on_ignored_nl if left on_period is_a? # creates or clears ephemeral
end on_nl on_ignored_nl def UNK on_lparen UNK on_comma left on_comma scope on_rparen on_ignored_nl if left on_period is_a? on_lparen on_const on_op # convert to boolean
def UNK on_lparen UNK on_comma left on_comma scope on_rparen on_ignored_nl if left on_period is_a? on_lparen on_const on_op on_const on_rparen on_nl # Matches against semvers and strings
def UNK on_lparen UNK on_comma left on_comma scope on_rparen on_ignored_nl on_const on_op on_const on_period include? on_lparen UNK on_comma left on_rparen # Matches against semvers and strings
UNK on_period UNK on_lparen left on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_comma left on_comma scope on_rparen on_ignored_nl # right is a type and left is not - check if left is an instance of the given type # (The reverse is not terribly meaningful - computing which of the case options that first produces # an instance of a given type). #
