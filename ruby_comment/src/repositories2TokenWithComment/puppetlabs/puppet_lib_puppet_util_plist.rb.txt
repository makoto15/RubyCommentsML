UNK on_op UNK on_nl def UNK on_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl on_tstring_beg on_tstring_content on_tstring_end # So I don't have to prepend every method name with 'self.' Most of the # methods are going to be Provider methods (as opposed to methods of the # INSTANCE of the provider).
def UNK on_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl # Defines the magic number for binary plists # # @api private
def UNK on_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_lparen file_path on_rparen on_ignored_nl if UNK on_lparen file_path # Defines a default doctype string that should be at the top of most plist # files. Useful if we need to modify an invalid doctype string in memory. # In version 10.9 and lower of OS X the plist at # /System/Library/LaunchDaemons/org.ntp.ntpd.plist had an invalid doctype # string. This corrects for that.
def UNK on_lparen file_path on_rparen on_ignored_nl if UNK on_lparen file_path on_comma UNK on_period UNK on_rparen on_op UNK on_nl plist_obj on_op # Read a plist file, whether its format is XML or in Apple's "binary1" # format, using the CFPropertyList gem.
if UNK on_lparen file_path on_comma UNK on_period UNK on_rparen on_op UNK on_nl plist_obj on_op UNK on_lparen on_symbeg UNK on_op file_path # We can't really read the file until we know the source encoding in # Ruby 1.9.x, so we use the magic number to detect it. # NOTE: We used IO.read originally to be Ruby 1.8.x compatible.
def UNK on_lparen plist_data on_comma file_path on_op on_tstring_beg on_tstring_end on_rparen on_ignored_nl UNK on_op UNK on_tstring_content UNK on_nl if plist_data on_period # Read plist text using the CFPropertyList gem.
if plist_data on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op plist_data on_period UNK on_op on_const on_op on_const on_nl plist_data on_period # Depending on where parse_plist is called from, plist_data can be either XML or binary. # If we get XML, make sure ruby knows it's UTF-8 so we avoid invalid byte sequence errors.
UNK on_const on_comma on_const on_op e on_nl on_const on_period UNK on_tstring_beg on_tstring_content on_embexpr_beg e on_period UNK on_embexpr_end on_tstring_content on_embexpr_beg file_path # CFPropertyList library will raise NoMethodError for invalid data
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl on_const on_period UNK on_lparen UNK on_comma UNK on_rparen on_period UNK on_nl end # Helper method to assist in reading a file. It's its own method for # stubbing purposes # # @api private # # @param args [String] Extra file operation mode information to use # (defaults to read-only mode 'r') # This is the standard mechanism Ruby uses in the IO class, and therefore # encoding may be explicitly like fmode : encoding or fmode : "BOM|UTF-*" # for example, a:ASCII or w+:UTF-8
def UNK on_lparen UNK on_rparen on_ignored_nl on_const on_op on_const on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl def UNK # Helper method to assist in generating a new CFPropertyList Plist. It's # its own method for stubbing purposes # # @api private
def UNK on_lparen plist_obj on_rparen on_ignored_nl on_const on_period UNK on_lparen plist_obj on_period UNK on_rparen on_nl end on_nl on_ignored_nl def UNK # Helper method to assist in converting a native CFPropertyList object to a # native Ruby object (hash). It's its own method for stubbing purposes # # @api private
def UNK on_lparen UNK on_rparen on_ignored_nl on_const on_op on_const on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl def UNK # Helper method to convert a string into a CFProperty::Blob, which is # needed to properly handle binary strings # # @api private
def UNK on_lparen file_path on_comma UNK on_rparen on_ignored_nl on_const on_period UNK on_lparen file_path on_comma UNK on_rparen on_nl end on_nl on_ignored_nl # Helper method to assist in reading a file with an offset value. It's its # own method for stubbing purposes # # @api private
def UNK on_lparen plist on_comma file_path on_comma format on_op on_symbeg UNK on_rparen on_ignored_nl UNK on_ignored_nl plist_to_save on_op on_const on_op on_const # This method will write a plist file using a specified format (or XML # by default)
