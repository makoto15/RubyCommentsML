class on_const on_op on_const on_nl UNK on_const on_nl UNK on_const on_nl on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content # The class for handling configuration files.
on_const on_op on_const on_op on_const on_op on_const on_op on_const on_nl on_ignored_nl UNK on_symbeg UNK on_nl UNK on_symbeg UNK on_nl on_ignored_nl # local reference for convenience
on_const on_op on_lbracket on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_rbracket on_nl on_ignored_nl on_const on_op on_lbracket # These are the settings that every app is required to specify; there are # reasonable defaults defined in application.rb.
on_const on_op on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period # The acceptable sections of the puppet.conf configuration file.
def self on_period UNK on_lparen run_mode on_rparen on_ignored_nl on_lbrace on_ignored_nl on_symbeg name on_op run_mode on_period to_s on_comma on_ignored_nl on_symbeg run_mode # This method is intended for puppet internal use only; it is a convenience method that # returns reasonable application default settings values for a given run_mode.
values on_op values on_lparen on_const on_lbracket on_symbeg environment on_rbracket on_period to_sym on_comma section on_period to_sym on_rparen on_nl on_ignored_nl UNK on_op # And now we can lookup values that include those from environments configured from # the requested section
def UNK on_nl on_ivar on_op on_lbrace on_rbrace on_nl on_ivar on_op on_lbrace on_rbrace on_nl on_ignored_nl on_ivar on_op on_lbracket on_rbracket on_nl on_ignored_nl # Create a new collection of config settings.
on_ivar on_op on_lbrace on_ignored_nl on_symbeg cli on_op on_const on_period new on_lparen on_symbeg cli on_comma on_ivar on_rparen on_comma on_ignored_nl on_symbeg memory # Keep track of set values.
on_ivar on_op on_const on_period new on_lbrace on_op hash on_comma key on_op hash on_lbracket key on_rbracket on_op on_lbrace on_rbrace on_rbrace on_nl # And keep a per-environment cache
on_ivar on_op on_lbracket on_rbracket on_nl on_ignored_nl on_ivar on_op on_lbracket on_rbracket on_nl on_ivar on_op on_lbracket on_rbracket on_nl on_ivar on_op on_lbracket on_rbracket # The list of sections we've used.
def on_op on_lparen param on_rparen on_ignored_nl if on_ivar on_period include? on_lparen param on_rparen on_nl UNK on_lparen setting on_lparen param on_rparen # Retrieve a config value # @param param [Symbol] the name of the setting # @return [Object] the value of the setting # @api private
def on_op on_lparen param on_comma value on_rparen on_ignored_nl if on_ivar on_period include? on_lparen param on_rparen on_nl UNK on_lparen setting on_lparen # Set a config value. This doesn't set the defaults, it sets the value itself. # @param param [Symbol] the name of the setting # @param value [Object] the new value of the setting # @api private
def UNK on_lparen param on_comma value on_rparen on_ignored_nl on_ivar on_lbracket on_symbeg overridden_defaults on_rbracket on_period set on_lparen param on_comma value on_rparen # Create a new default value for the given setting. The default overrides are # higher precedence than the defaults given in defaults.rb, but lower # precedence than any other values for the setting. This allows one setting # `a` to change the default of setting `b`, but still allow a user to provide # a value for setting `b`. # # @param param [Symbol] the name of the setting # @param value [Object] the new default value for the setting # @api private
def UNK on_lparen options on_rparen on_ignored_nl self on_period each on_lbrace on_op name on_comma setting on_op on_ignored_nl setting on_period UNK on_period # Generate the list of valid arguments, in a format that GetoptLong can # understand, and add them to the passed option list.
self on_period each on_lbrace on_op name on_comma setting on_op on_ignored_nl setting on_period UNK on_period each on_lbrace on_op args on_op options # Add all of the settings as valid options.
def UNK on_lparen options on_rparen on_ignored_nl self on_period each on_lbrace on_op name on_comma setting on_op on_ignored_nl options on_op setting on_period # Generate the list of valid arguments, in a format that OptionParser can # understand, and add them to the passed option list.
self on_period each on_lbrace on_op name on_comma setting on_op on_ignored_nl options on_op setting on_period UNK on_nl on_rbrace on_nl on_ignored_nl options # Add all of the settings as valid options.
def UNK on_lparen param on_rparen on_ignored_nl param on_op param on_period to_sym on_nl on_ivar on_period include? on_lparen param on_rparen UNK on_ivar # Is our setting a boolean setting?
def clear on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_op true on_comma UNK on_op false on_rparen on_ignored_nl # Remove all set values, potentially skipping cli values.
def UNK on_lparen UNK on_op true on_comma UNK on_op false on_rparen on_ignored_nl if UNK on_nl on_ivar on_lbracket on_symbeg application_defaults on_rbracket # Remove all set values, potentially skipping cli values.
on_ivar on_op on_lbracket on_rbracket on_nl end on_nl on_ignored_nl on_ivar on_lbracket on_symbeg memory on_rbracket on_op on_const on_period new on_lparen on_symbeg memory # Only clear the 'used' values if we were explicitly asked to clear out # :cli values; otherwise, it may be just a config file reparse, # and we want to retain this cli values.
def UNK on_lparen environment on_rparen on_ignored_nl on_ignored_nl if environment on_period nil? on_nl return on_nl end on_nl on_ignored_nl on_ivar on_lbracket environment # Clears all cached settings for a particular environment to ensure # that changes to environment.conf are reflected in the settings if # the environment timeout has expired. # # param [String, Symbol] environment the name of environment to clear settings for # # @api private
def UNK on_nl unsafe_flush_cache on_nl end on_nl on_ignored_nl def unsafe_flush_cache on_nl UNK on_nl end on_nl private on_symbeg unsafe_flush_cache on_nl on_ignored_nl # Clear @cache, @used and the Environment. # # Whenever an object is returned by Settings, a copy is stored in @cache. # As long as Setting attributes that determine the content of returned # objects remain unchanged, Settings can keep returning objects from @cache # without re-fetching or re-generating them. # # Whenever a Settings attribute changes, such as @values or @preferred_run_mode, # this method must be called to clear out the caches so that updated # objects will be returned.
on_ignored_nl UNK on_lparen args on_rparen on_nl UNK on_lparen UNK on_rparen on_nl on_ignored_nl on_ivar on_op true on_nl end on_nl on_ignored_nl def # The first two phases of the lifecycle of a puppet application are: # 1) Parse the command line options and handle any of them that are # registered, defined "global" puppet settings (mostly from defaults.rb). # 2) Parse the puppet config file(s).
def UNK on_lparen args on_rparen on_ignored_nl UNK on_op on_const on_period new on_nl UNK on_period UNK on_op true on_nl on_ignored_nl self # This method is called during application bootstrapping. It is responsible for parsing all of the # command line options and initializing the settings accordingly. # # It will ignore options that are not defined in the global puppet settings list, because they may # be valid options for the specific application that we are about to launch... however, at this point # in the bootstrapping lifecycle, we don't yet know what that application is.
UNK on_op on_const on_period new on_nl UNK on_period UNK on_op true on_nl on_ignored_nl self on_period UNK on_lparen on_lbracket on_rbracket on_rparen # Create an option parser
self on_period UNK on_lparen on_lbracket on_rbracket on_rparen on_period each do on_op UNK on_op on_ignored_nl UNK on_period UNK on_lparen on_op UNK # Add all global options to it.
UNK UNK on_op args on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen do args on_period UNK UNK on_nl args on_period UNK # remove run_mode options from the arguments so that later parses don't think # it is an unknown option.
args on_period UNK UNK on_nl args on_period UNK UNK on_nl end on_nl args on_period UNK on_lbrace on_op arg on_op arg #rubocop:disable Lint/AssignmentInCondition
def self on_period UNK on_lparen opt on_comma val on_rparen on_ignored_nl if opt on_op on_regexp_beg on_tstring_content on_regexp_end UNK on_op val on_nl # A utility method (public, is used by application.rb and perhaps elsewhere) that munges a command-line # option string into the format that Puppet.settings expects. (This mostly has to deal with handling the # "no-" prefix on flag/boolean options). # # @param [String] opt the command line option that we are munging # @param [String, TrueClass, FalseClass] val the value for the setting (as determined by the OptionParser)
if opt on_op on_regexp_beg on_tstring_content on_regexp_end UNK on_op val on_nl opt on_op opt on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end on_comma # rewrite --[no-]option to --no-option if that's what was given
opt on_op opt on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end on_comma on_tstring_beg on_tstring_end on_rparen on_nl on_lbracket opt on_comma val on_rbracket on_nl # otherwise remove the [no-] prefix to not confuse everybody
on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op on_const on_period UNK on_lparen UNK on_rparen on_nl on_ignored_nl if on_op on_const # Create ancestor directories. # # @param dir [String] absolute path for a required application default directory # @api private
end on_nl end on_nl end on_nl private on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen name on_rparen on_ignored_nl obj on_op on_ivar #swallow. We're not concerned if we can't call hooks because dependencies don't exist yet #we'll get another chance after application defaults are initialized
def UNK on_lparen name on_rparen on_ignored_nl obj on_op on_ivar on_lbracket name on_period to_sym on_rbracket on_nl if obj on_nl obj on_period # Return a value's description.
def UNK on_nl UNK on_op on_lbracket on_rbracket on_nl on_ivar on_period UNK do on_op UNK on_op on_ignored_nl section on_op UNK on_period # Iterate over each section name.
def setting on_lparen param on_rparen on_ignored_nl param on_op param on_period to_sym on_nl on_ivar on_lbracket param on_rbracket on_nl end on_nl on_ignored_nl # Returns a given setting by name # @param name [Symbol] The name of the setting to fetch # @return [Puppet::Settings::BaseSetting] The setting object
def UNK on_lparen opt on_comma value on_op nil on_rparen on_ignored_nl on_ivar on_period clear on_nl on_ignored_nl if value on_period is_a? on_lparen # Handle a command-line argument.
def UNK on_nl if on_const on_op on_const on_op on_const on_period UNK on_lparen on_symbeg UNK on_rparen on_nl on_const on_op on_const on_op # Prints the contents of a config file with the available config settings, or it # prints a single value of a config setting.
if v on_op val on_nl puts value on_lparen val on_comma env on_rparen on_nl UNK on_nl end on_nl puts on_tstring_beg on_embexpr_beg #if there is only one value, just print it for back compatibility
def preferred_run_mode on_nl on_ivar on_op on_symbeg user on_nl end on_nl on_ignored_nl def UNK on_lparen mode on_rparen on_ignored_nl mode on_op mode # The currently configured run mode that is preferred for constructing the application configuration.
def UNK on_lparen mode on_rparen on_ignored_nl mode on_op mode on_period to_s on_period UNK on_period UNK on_nl raise on_const on_comma on_tstring_beg # PRIVATE! This only exists because we need a hook to validate the run mode when it's being set, and # it should never, ever, ever, ever be called from outside of this file. # This method is also called when --run_mode MODE is used on the command line to set the default # # @param mode [String|Symbol] the name of the mode to have in effect # @api private
UNK on_nl mode on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_comma file on_op on_tstring_beg on_tstring_content on_tstring_end on_rparen on_ignored_nl begin # Changing the run mode has far-reaching consequences. Flush any cached # settings so they will be re-generated.
return if UNK on_period nil? on_nl on_ignored_nl UNK on_lparen false on_comma false on_rparen on_nl on_ignored_nl UNK on_lparen UNK on_rparen on_nl # If we get here and don't have any data, we just return and don't muck with the current state of the world.
UNK on_lparen false on_comma false on_rparen on_nl on_ignored_nl UNK on_lparen UNK on_rparen on_nl on_ignored_nl UNK on_lparen UNK on_rparen on_nl on_ignored_nl # If we get here then we have some data, so we need to clear out any # previous settings that may have come from config files.
UNK on_lparen UNK on_rparen on_nl on_ignored_nl UNK on_lparen UNK on_rparen on_nl on_ignored_nl on_ivar on_op UNK on_nl on_ignored_nl if on_ivar on_lbracket # Screen settings which have been deprecated and removed from puppet.conf # but are still valid on the command line and/or in environment.conf
UNK on_lparen UNK on_rparen on_nl on_ignored_nl on_ivar on_op UNK on_nl on_ignored_nl if on_ivar on_lbracket on_symbeg environment on_rbracket on_nl env on_op # Make note of deprecated settings we will warn about later in initialization
on_ivar on_op UNK on_nl on_ignored_nl if on_ivar on_lbracket on_symbeg environment on_rbracket on_nl env on_op self on_period value on_lparen on_symbeg environment # And now we can repopulate with the values from our last parsing of the config files.
if on_ivar on_lbracket on_symbeg environment on_rbracket on_nl env on_op self on_period value on_lparen on_symbeg environment on_rparen on_period to_sym on_nl else # Determine our environment, if we have one.
UNK on_op UNK on_lparen env on_comma preferred_run_mode on_rparen on_nl on_ivar on_period values on_period UNK on_lparen on_op on_symbeg UNK on_rparen on_period # Call any hooks we should be calling.
if setting on_period UNK on_nl on_ivar on_op on_lbracket setting on_rbracket on_nl else on_ignored_nl setting on_period UNK on_lparen on_const on_period new # We still have to use value to retrieve the value, since # we want the fully interpolated value, not $vardir/lib or whatever. # This results in extra work, but so few of the settings # will have associated hooks that it ends up being less work this # way overall.
def UNK on_lparen UNK on_op true on_rparen on_ignored_nl file on_op UNK on_nl if on_const on_op on_const on_period UNK on_lparen file # Parse the configuration file. Just provides thread safety.
def config_file_name on_nl begin on_ignored_nl return self on_lbracket on_symbeg config_file_name on_rbracket if self on_lbracket on_symbeg config_file_name on_rbracket on_nl rescue on_const # This method is here to get around some life-cycle issues. We need to be # able to determine the config file name before the settings / defaults are # fully loaded. However, we also need to respect any overrides of this value # that the user may have specified on the command line. # # The easiest way to do this is to attempt to read the setting, and if we # catch an error (meaning that it hasn't been set yet), we'll fall back to # the default value.
end on_nl return self on_period class on_period UNK on_nl end on_nl private on_symbeg config_file_name on_nl on_ignored_nl def UNK on_nl if # This just means that the setting wasn't explicitly set on the command line, so we will ignore it and # fall through to the default name.
if on_ivar on_nl searchpath on_lparen nil on_comma preferred_run_mode on_rparen on_period UNK do on_op source on_op on_ignored_nl section on_op on_ivar on_period # We have to do it in the reverse of the search path, # because multiple sections could set the same value # and I'm too lazy to only set the metadata once.
def UNK on_lparen hash on_rparen on_ignored_nl UNK on_op nil on_nl hash on_lbracket on_symbeg section on_rbracket on_op hash on_lbracket on_symbeg section # Create a new setting. The value is passed in because it's used to determine # what kind of setting we're creating, but the value itself might be either # a default or a value, so we can't actually assign it. # # See #define_settings for documentation on the legal values for the ":type" option.
UNK on_op on_const on_nl end on_nl hash on_lbracket on_symbeg settings on_rbracket on_op self on_nl setting on_op UNK on_period new on_lparen # The only implicit typing we still do for settings is to fall back to "String" type if they didn't explicitly # specify a type. Personally I'd like to get rid of this too, and make the "type" option mandatory... but # there was a little resistance to taking things quite that far for now. --cprice 2012-03-19
private on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen section on_rparen on_ignored_nl section on_op section on_period to_sym on_nl self on_period each # This has to be private, because it doesn't add the settings to @config
def UNK on_lparen section on_rparen on_ignored_nl section on_op section on_period to_sym on_nl self on_period each on_lbrace on_op name on_comma obj # Iterate across all of the objects in a given section.
def UNK on_nl if UNK on_nl UNK on_op UNK on_nl if UNK on_nl on_const on_period UNK on_tstring_beg on_tstring_content on_embexpr_beg UNK # Reparse our config file, if necessary.
def UNK on_nl UNK on_period each do on_op file on_op on_ignored_nl return file on_period UNK if file on_period UNK on_nl # Checks to see if any of the config files have been modified # @return the filename of the first file that is found to have changed, or # nil if no files have changed
def UNK on_lparen environment on_op nil on_comma run_mode on_op preferred_run_mode on_rparen on_ignored_nl searchpath on_op on_lbracket on_ignored_nl on_const on_period new on_lparen # The order in which to search for values, without defaults. # # @param environment [String,Symbol] symbolic reference to an environment name # @param run_mode [Symbol] symbolic reference to a Puppet run mode # @return [Array<SearchPathElement>] # @api private
def searchpath on_lparen environment on_op nil on_comma run_mode on_op preferred_run_mode on_rparen on_ignored_nl searchpath on_op UNK on_lparen environment on_comma run_mode on_rparen # The order in which to search for values. # # @param environment [String,Symbol] symbolic reference to an environment name # @param run_mode [Symbol] symbolic reference to a Puppet run mode # @return [Array<SearchPathElement>] # @api private
def UNK on_lparen param on_rparen on_ignored_nl param on_op param on_period to_sym on_nl on_op on_ivar on_lbracket on_symbeg cli on_rbracket on_period lookup # Allow later inspection to determine if the setting was set on the # command line, or through some other code path. Used for the # `dns_alt_names` option during cert generate. --daniel 2011-10-18
def UNK on_lparen source on_rparen on_ignored_nl UNK source on_period type on_nl when on_symbeg values on_nl on_ivar on_lbracket source on_period name # Get values from a search path entry. # @api private
def UNK on_lparen param on_comma environment on_op nil on_comma run_mode on_op preferred_run_mode on_rparen on_ignored_nl param on_op param on_period to_sym on_nl # Allow later inspection to determine if the setting was set by user # config, rather than a default setting.
def UNK on_lparen param on_comma value on_comma type on_rparen on_ignored_nl if on_ivar on_lbracket type on_rbracket on_nl on_ivar on_lbracket type on_rbracket # Patches the value for a param in a section. # This method is required to support the use case of unifying --dns-alt-names and # --dns_alt_names in the certificate face. Ideally this should be cleaned up. # See PUP-3684 for more information. # For regular use of setting a value, the method `[]=` should be used. # @api private #
def UNK on_lparen section on_comma UNK on_rparen on_ignored_nl section on_op section on_period to_sym on_nl UNK on_op on_lbracket on_rbracket on_nl UNK # Define a group of settings. # # @param [Symbol] section a symbol to use for grouping multiple settings together into a conceptual unit. This value # (and the conceptual separation) is not used very often; the main place where it will have a potential impact # is when code calls Settings#use method. See docs on that method for further details, but basically that method # just attempts to do any preparation that may be necessary before code attempts to leverage the value of a particular # setting. This has the most impact for file/directory settings, where #use will attempt to "ensure" those # files / directories. # @param [Hash[Hash]] defs the settings to be defined. This argument is a hash of hashes; each key should be a symbol, # which is basically the name of the setting that you are defining. The value should be another hash that specifies # the parameters for the particular setting. Legal values include: # [:default] => not required; this is the value for the setting if no other value is specified (via cli, config file, etc.) # For string settings this may include "variables", demarcated with $ or ${} which will be interpolated with values of other settings. # The default value may also be a Proc that will be called only once to evaluate the default when the setting's value is retrieved. # [:desc] => required; a description of the setting, used in documentation / help generation # [:type] => not required, but highly encouraged! This specifies the data type that the setting represents. If # you do not specify it, it will default to "string". Legal values include: # :string - A generic string setting # :boolean - A boolean setting; values are expected to be "true" or "false" # :file - A (single) file path; puppet may attempt to create this file depending on how the settings are used. This type # also supports additional options such as "mode", "owner", "group" # :directory - A (single) directory path; puppet may attempt to create this file depending on how the settings are used. This type # also supports additional options such as "mode", "owner", "group" # :path - This is intended to be used for settings whose value can contain multiple directory paths, represented # as strings separated by the system path separator (e.g. system path, module path, etc.). # [:mode] => an (optional) octal value to be used as the permissions/mode for :file and :directory settings # [:owner] => optional owner username/uid for :file and :directory settings # [:group] => optional group name/gid for :file and :directory settings #
if tryconfig on_period UNK on_nl if tryconfig on_period UNK on_nl UNK on_op tryconfig on_nl UNK tryconfig on_period UNK on_nl on_ivar # Collect the settings that need to have their hooks called immediately. # We have to collect them so that we can be sure we're fully initialized before # the hook is called.
def UNK on_lparen on_op sections on_rparen on_ignored_nl sections on_op nil if sections on_period UNK on_nl on_ignored_nl catalog on_op on_const on_op # Convert the settings we manage into a catalog full of resources that model those settings.
def UNK on_nl str on_op on_tstring_beg on_tstring_content on_embexpr_beg on_const on_period run_mode on_period name on_embexpr_end on_tstring_content on_embexpr_beg on_const on_period UNK on_embexpr_end # Convert our list of config settings into a configuration file.
str on_op on_tstring_beg on_tstring_content on_embexpr_beg preferred_run_mode on_embexpr_end on_tstring_content on_tstring_end on_nl UNK do on_op section on_op on_ignored_nl UNK on_lparen section on_rparen # Add a section heading that matches our name.
def UNK on_nl catalog on_op UNK on_nl catalog on_period UNK on_period collect do on_op ref on_op on_ignored_nl catalog on_period resource # Convert to a parseable manifest
def UNK on_lparen on_op sections on_rparen on_ignored_nl sections on_op sections on_period collect on_lbrace on_op s on_op s on_period to_sym on_rbrace # Create the necessary objects to use a section. This is idempotent; # you can 'use' a section as many times as you want.
def values on_lparen environment on_comma section on_rparen on_ignored_nl on_ivar on_lbracket environment on_rbracket on_lbracket section on_rbracket on_op on_const on_period new on_lparen # Retrieve an object that can be used for looking up values of configuration # settings. # # @param environment [Symbol] The name of the environment in which to lookup # @param section [Symbol] The name of the configuration section in which to lookup # @return [Puppet::Settings::ChainedValues] An object to perform lookups # @api public
def value on_lparen param on_comma environment on_op nil on_comma UNK on_op false on_rparen on_ignored_nl environment on_op environment on_period to_sym on_nl # Find the correct value using our search path. # # @param param [String, Symbol] The value to look up # @param environment [String, Symbol] The environment to check for the value # @param bypass_interpolation [true, false] Whether to skip interpolation # # @return [Object] The looked up value # # @raise [InterpolationError]
def UNK on_lparen param on_comma environment on_op nil on_comma UNK on_op false on_rparen on_ignored_nl UNK on_op on_ivar on_lbracket environment on_op # Find the correct value using symbols and our search path. # # @param param [Symbol] The value to look up # @param environment [Symbol] The environment to check for the value # @param bypass_interpolation [true, false] Whether to skip interpolation # # @return [Object] The looked up value # # @raise [InterpolationError]
UNK on_op on_ivar on_lbracket environment on_op on_const on_rbracket on_nl on_ignored_nl val on_op UNK on_lbracket param on_rbracket on_nl return val if # Check the cache first. It needs to be a per-environment # cache so that we don't spread values from one env # to another.
val on_op UNK on_lbracket param on_rbracket on_nl return val if on_op val on_period nil? on_op UNK on_period include? on_lparen param # Avoid two lookups in cache_env unless val is nil. When it is, it's important # to check if the key is included so that further processing (that will result # in nil again) is avoided.
return nil unless on_ivar on_period include? on_lparen param on_rparen on_nl on_ignored_nl vals on_op values on_lparen environment on_comma preferred_run_mode on_rparen on_nl # Short circuit to nil for undefined settings.
def UNK on_nl if UNK UNK on_const on_period UNK on_period UNK UNK on_ignored_nl return UNK on_nl else on_ignored_nl return UNK ## # (#15337) All of the logic to determine the configuration file to use # should be centralized into this method. The simplified approach is: # # 1. If there is an explicit configuration file, use that. (--confdir or # --config) # 2. If we're running as a root process, use the system puppet.conf # (usually /etc/puppetlabs/puppet/puppet.conf) # 3. Otherwise, use the user puppet.conf (usually ~/.puppetlabs/etc/puppet/puppet.conf) # # @api private # @todo this code duplicates {Puppet::Util::RunMode#which_dir} as described # in {https://projects.puppetlabs.com/issues/16637 #16637}
def UNK on_lparen file on_comma UNK on_op on_lbracket on_rbracket on_rparen on_ignored_nl on_ivar on_period UNK on_lparen file on_comma UNK on_lparen file # This method just turns a file into a new ConfigFile::Conf instance # @param file [String] absolute path to the configuration file # @return [Puppet::Settings::ConfigFile::Conf] # @api private
on_rbrace on_period UNK on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period sections on_period values on_period each do on_op # intentionally empty. This could be repopulated if we deprecate more settings # and have reference links to associate with them
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period sections on_period values on_period each do on_op section on_op on_ignored_nl section on_period # Record that we want to issue a deprecation warning later in the application # initialization cycle when we have settings bootstrapped to the point where # we can read the Puppet[:disable_warnings] setting. # # We are only recording warnings applicable to settings set in puppet.conf # itself.
message on_op _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label name on_rbrace on_nl message on_op on_tstring_beg on_tstring_content on_embexpr_beg ref #TRANSLATORS 'puppet.conf' is a file name and should not be translated
if on_op on_const on_op on_const on_period UNK on_lparen UNK on_rparen on_nl parameters on_op on_lbrace on_symbeg UNK on_op on_tstring_beg on_tstring_content on_tstring_end # If configured_environment_path is a symlink, assume the source path is being managed # elsewhere, so don't do any of this configuration
def UNK on_lparen environment on_comma mode on_rparen on_ignored_nl searchpath on_lparen environment on_comma mode on_rparen on_period collect on_lbrace on_op source on_op # Yield each search source in turn.
def UNK on_lparen file on_rparen on_ignored_nl return on_const on_op on_const on_period UNK on_lparen file on_comma on_symbeg UNK on_op on_tstring_beg on_tstring_content # Read the file in. # @api private
def UNK on_lparen on_rparen on_ignored_nl UNK on_lparen true on_comma true on_rparen on_nl on_ivar on_op nil on_nl on_ivar on_op false on_nl # Private method for internal test use only; allows to do a comprehensive clear of all settings between tests. # # @return nil
begin on_ignored_nl return true if self on_lbracket on_symbeg UNK on_rbracket on_nl rescue on_const on_nl return false on_nl end on_nl end # Figure out if the user has provided an explicit configuration file. If # so, return the path to the file, if not return nil. # # The easiest way to determine whether an explicit one has been specified # is to simply attempt to evaluate the value of ":config". This will # obviously be successful if they've passed an explicit value for :config, # but it will also result in successful interpolation if they've only # passed an explicit value for :confdir. # # If they've specified neither, then the interpolation will fail and we'll # get an exception. #
return false on_nl end on_nl end on_nl private on_symbeg UNK on_nl on_ignored_nl class on_const on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end # This means we failed to interpolate, which means that they didn't # explicitly specify either :config or :confdir... so we'll fall out to # the default value.
class on_const on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period UNK on_nl on_const on_op on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period UNK # Lookup configuration setting value through a chain of different value sources. # # @api public
def UNK on_lparen mode on_comma environment on_comma UNK on_comma UNK on_rparen on_ignored_nl on_ivar on_op mode on_nl on_ivar on_op environment on_nl # @see Puppet::Settings.values # @api private
def lookup on_lparen name on_rparen on_ignored_nl set on_op on_ivar on_period UNK do on_op UNK on_op on_ignored_nl UNK on_period include? on_lparen # Lookup the uninterpolated value. # # @param name [Symbol] The configuration setting name to look up # @return [Object] The configuration setting value or nil if the setting is not known # @api public
def interpolate on_lparen name on_rparen on_ignored_nl setting on_op on_ivar on_lbracket name on_rbracket on_nl return nil unless setting on_nl on_ignored_nl UNK # Lookup the interpolated value. All instances of `$name` in the value will # be replaced by performing a lookup of `name` and substituting the text # for `$name` in the original value. This interpolation is only performed # if the looked up value is a String. # # @param name [Symbol] The configuration setting name to look up # @return [Object] The configuration setting value or nil if the setting is not known # @api public
if name on_op on_symbeg UNK on_nl val on_nl else on_ignored_nl begin on_ignored_nl val on_op UNK on_lparen val on_comma name on_rparen # if we interpolate code, all hell breaks loose.
begin on_ignored_nl val on_op UNK on_lparen val on_comma name on_rparen on_nl rescue on_const on_op err on_nl raise on_const on_comma _ # Convert it if necessary
raise on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label name on_comma on_label err on_rbrace on_comma err on_period # This happens because we don't have access to the param name when the # exception is originally raised, but we want it in the message
on_const on_period UNK on_lparen _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label setting_name on_rbrace on_op on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end #TRANSLATORS '$environment' is a Puppet specific variable and should not be translated
UNK on_op on_ivar on_lbracket name on_rbracket on_nl on_ivar on_lbracket name on_rbracket on_op value on_nl begin on_ignored_nl if UNK on_period UNK # This little exception-handling dance ensures that a hook is # able to check whether a value for itself has been explicitly # set, while still preserving the existing value if the hook # throws (as was existing behavior)
class on_const on_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def name on_nl on_ivar # @api private
