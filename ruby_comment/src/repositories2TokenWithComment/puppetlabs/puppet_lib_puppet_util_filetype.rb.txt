on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_op # Basic classes for reading, writing, and emptying files. Not much # to see here.
def self on_period newfiletype on_lparen UNK on_comma on_op UNK on_rparen on_ignored_nl on_ivar on_op on_lbrace on_rbrace on_nl on_ignored_nl UNK on_op UNK # Create a new filetype.
UNK on_period UNK do on_ignored_nl UNK on_lparen on_symbeg UNK on_comma UNK on_lparen on_symbeg read on_rparen on_rparen on_nl UNK on_lparen on_symbeg # Rename the read and write methods, so that we're sure they # maintain the stats.
UNK on_lparen on_symbeg UNK on_comma UNK on_lparen on_symbeg read on_rparen on_rparen on_nl UNK on_lparen on_symbeg read on_rparen do on_ignored_nl UNK # Rename the read method
UNK on_lparen on_symbeg UNK on_comma UNK on_lparen on_symbeg write on_rparen on_rparen on_nl UNK on_lparen on_symbeg write on_rparen do on_op text # And then the write method
def UNK on_nl on_ivar on_op on_const on_op on_const on_period UNK on_lparen on_symbeg UNK on_rparen on_period UNK on_period UNK on_nl end # Pick or create a filebucket to use.
def cronargs on_nl uid on_op on_const on_op on_const on_period uid on_lparen on_ivar on_rparen on_nl if uid on_op uid on_op on_const # Arguments that will be passed to the execute method. Will set the uid # to the target user if the target user and the current user are not # the same
newfiletype on_lparen on_symbeg UNK on_rparen do on_ignored_nl def UNK on_nl UNK on_period UNK on_lparen on_ivar on_rparen if on_const on_op on_const # Operate on plain files.
def UNK on_nl UNK on_period UNK on_lparen on_ivar on_rparen if on_const on_op on_const on_period UNK on_lparen on_ivar on_rparen on_nl end # Back the file up before replacing it.
def read on_nl if on_const on_op on_const on_period UNK on_lparen on_ivar on_rparen on_nl on_const on_op on_const on_period read on_lparen on_ivar # Read the file.
on_const on_op on_const on_period read on_lparen on_ivar on_comma on_symbeg UNK on_op on_const on_period UNK on_rparen on_nl else on_ignored_nl return UNK # this code path is used by many callers so the original default is # being explicitly preserved
def UNK on_nl on_const on_op on_const on_period UNK on_lparen on_ivar on_rparen if on_const on_op on_const on_period UNK on_lparen on_ivar on_rparen # Remove the file.
def write on_lparen text on_rparen on_ignored_nl tf on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg UNK on_op on_const # Overwrite the file.
tf on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg UNK on_op on_const on_period UNK on_rparen on_nl tf on_period # this file is managed by the OS and should be using system encoding
UNK on_lparen on_ivar on_rparen on_nl end on_nl end on_nl on_ignored_nl newfiletype on_lparen on_symbeg UNK on_rparen do on_ignored_nl on_cvar on_op on_lbrace # If SELinux is present, we need to ensure the file has its expected context
newfiletype on_lparen on_symbeg UNK on_rparen do on_ignored_nl on_cvar on_op on_lbrace on_rbrace on_nl on_ignored_nl def self on_period UNK on_nl on_cvar on_period # Operate on plain files.
UNK on_nl on_cvar on_lbracket on_ivar on_rbracket on_op on_tstring_beg on_tstring_end on_nl end on_nl on_ignored_nl def read on_nl on_const on_period UNK _ # default_mode is meaningless for this filetype, # supported only for compatibility with :flat
def read on_nl on_const on_period UNK _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label on_ivar on_rbrace on_nl on_cvar on_lbracket # Read the file.
def UNK on_nl on_const on_period UNK _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label on_ivar on_rbrace on_nl on_cvar on_lbracket # Remove the file.
def write on_lparen text on_rparen on_ignored_nl on_const on_period UNK _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label on_ivar on_rbrace # Overwrite the file.
newfiletype on_lparen on_symbeg UNK on_rparen do on_ignored_nl def UNK on_lparen user on_rparen on_ignored_nl self on_period path on_op user on_nl end # Handle Linux-style cron tabs. # # TODO: We can possibly eliminate the "-u <username>" option in cmdbase # by just running crontab under <username>'s uid (like we do for suntab # and aixtab). It may be worth investigating this alternative # implementation in the future. This way, we can refactor all three of # our cron file types into a common crontab file type.
on_ivar on_op user on_nl end on_nl on_ignored_nl def read on_nl UNK on_const on_op on_const on_period uid on_lparen on_ivar on_rparen on_nl # XXX We have to have the user name, not the uid, because some # systems *cough*linux*cough* require it that way
def read on_nl UNK on_const on_op on_const on_period uid on_lparen on_ivar on_rparen on_nl on_const on_period debug _ on_lparen on_tstring_beg on_tstring_content # Read a specific @path's cron tab.
def UNK on_nl UNK on_op on_tstring_beg UNK UNK UNK on_tstring_content on_tstring_end on_nl if UNK on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_tstring_end # Remove a specific @path's cron tab.
def write on_lparen text on_rparen on_ignored_nl UNK on_const on_op on_const on_period uid on_lparen on_ivar on_rparen on_nl raise on_const on_op on_const # Overwrite a specific @path's cron tab; must be passed the @path name # and the text with which to create the cron tab. # # TODO: We should refactor this at some point to make it identical to the # :aixtab and :suntab's write methods so that, at the very least, the pipe # is not created and the crontab command's errors are not swallowed.
on_const on_period UNK on_lparen on_tstring_beg UNK UNK on_lparen on_rparen UNK on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg UNK on_op # this file is managed by the OS and should be using system encoding
def UNK on_nl if on_ivar on_op on_const on_op on_const on_op on_const on_period uid on_op on_const on_period UNK on_lparen on_symbeg UNK # Only add the -u flag when the @path is different. Fedora apparently # does not think I should be allowed to set the @path to my own user name
newfiletype on_lparen on_symbeg UNK on_rparen do on_ignored_nl def read on_nl UNK on_const on_op on_const on_period uid on_lparen on_ivar on_rparen on_nl # SunOS has completely different cron commands; this class implements # its versions.
def read on_nl UNK on_const on_op on_const on_period uid on_lparen on_ivar on_rparen on_nl on_const on_period debug _ on_lparen on_tstring_beg on_tstring_content # Read a specific @path's cron tab.
def UNK on_nl on_const on_op on_const on_op on_const on_period execute on_lparen UNK on_tstring_content on_words_sep on_tstring_content on_tstring_end on_comma cronargs on_rparen on_nl # Remove a specific @path's cron tab.
def write on_lparen text on_rparen on_ignored_nl output_file on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg UNK on_op on_const # Overwrite a specific @path's cron tab; must be passed the @path name # and the text with which to create the cron tab.
output_file on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg UNK on_op on_const on_period UNK on_rparen on_nl UNK on_ignored_nl # this file is managed by the OS and should be using system encoding
on_const on_period UNK on_lparen on_const on_op on_const on_period uid on_lparen on_ivar on_rparen on_comma UNK on_comma output_file on_period path on_rparen on_nl # We have to chown the stupid file to the user.
newfiletype on_lparen on_symbeg UNK on_rparen do on_ignored_nl def read on_nl UNK on_const on_op on_const on_period uid on_lparen on_ivar on_rparen on_nl # Support for AIX crontab with output different than suntab's crontab command.
def read on_nl UNK on_const on_op on_const on_period uid on_lparen on_ivar on_rparen on_nl on_const on_period debug _ on_lparen on_tstring_beg on_tstring_content # Read a specific @path's cron tab.
def UNK on_nl on_const on_op on_const on_op on_const on_period execute on_lparen UNK on_tstring_content on_words_sep on_tstring_content on_tstring_end on_comma cronargs on_rparen on_nl # Remove a specific @path's cron tab.
def write on_lparen text on_rparen on_ignored_nl output_file on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg UNK on_op on_const # Overwrite a specific @path's cron tab; must be passed the @path name # and the text with which to create the cron tab.
output_file on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg UNK on_op on_const on_period UNK on_rparen on_nl on_ignored_nl UNK # this file is managed by the OS and should be using system encoding
on_const on_period UNK on_lparen on_const on_op on_const on_period uid on_lparen on_ivar on_rparen on_comma UNK on_comma output_file on_period path on_rparen on_nl # We have to chown the stupid file to the user.
