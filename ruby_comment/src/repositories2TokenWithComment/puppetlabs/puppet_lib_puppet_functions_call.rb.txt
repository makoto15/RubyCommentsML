on_const on_op on_const on_period UNK UNK on_symbeg UNK on_comma on_const on_op on_const on_op on_const UNK UNK on_ignored_nl UNK on_symbeg UNK # Calls an arbitrary Puppet function by name. # # This function takes one mandatory argument and one or more optional arguments: # # 1. A string corresponding to a function name. # 2. Any number of arguments to be passed to the called function. # 3. An optional lambda, if the function being called supports it. # # This function can also be used to resolve a `Deferred` given as # the only argument to the function (does not accept arguments nor # a block). # # @example Using the `call` function # # ```puppet # $a = 'notice' # call($a, 'message') # ``` # # @example Using the `call` function with a lambda # # ```puppet # $a = 'each' # $b = [1,2,3] # call($a, $b) |$item| { # notify { $item: } # } # ``` # # The `call` function can be used to call either Ruby functions or Puppet language # functions. # # When used with `Deferred` values, the deferred value can either describe # a function call, or a dig into a variable. # # @example Resolving a deferred function call # # ```puppet # $d = Deferred('join', [[1,2,3], ':']) # A future call to join that joins the arguments 1,2,3 with ':' # notice($d.call()) # ``` # # Would notice the string "1:2:3". # # @example Resolving a deferred variable value with optional dig into its structure # # ```puppet # $d = Deferred('$facts', ['processors', 'count']) # notice($d.call()) # ``` # # Would notice the value of `$facts['processors']['count']` at the time when the `call` is made. # # * Deferred values supported since Puppet 6.0 # # @since 5.0.0 #
on_const on_op on_const on_op on_const on_op on_const on_period UNK on_period UNK on_period UNK UNK UNK on_comma UNK on_comma UNK on_comma # The call function must be able to call functions loaded by any loader visible from the calling scope.
