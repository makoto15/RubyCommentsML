UNK on_const on_op on_const on_op on_const on_op on_const on_op on_const on_nl UNK UNK on_period UNK on_lparen UNK on_op UNK on_rparen # This specialized {Puppet::Parameter} handles validation and munging of paths. # By default, a single path is accepted, and by calling {accept_arrays} it is possible to # allow an array of paths. #
UNK UNK on_period UNK on_lparen UNK on_op UNK on_rparen on_ignored_nl UNK on_op on_op on_op UNK on_nl end on_nl UNK UNK # Specifies whether multiple paths are accepted or not. # @dsl type #
UNK UNK on_lparen paths on_rparen on_ignored_nl UNK paths on_period UNK on_lparen on_const on_rparen UNK on_op UNK on_period UNK on_period UNK # Performs validation of the given paths. # If the concrete parameter defines a validation method, it may call this method to perform # path validation. # @raise [Puppet::Error] if this property is configured for single paths and an array is given # @raise [Puppet::Error] if a path is not an absolute path # @return [Array<String>] the given paths #
UNK UNK on_lparen paths on_rparen on_ignored_nl UNK on_lparen paths on_rparen on_nl end on_nl on_ignored_nl UNK UNK on_lparen paths on_rparen on_ignored_nl # This is the default implementation of the `validate` method. # It will be overridden if the validate option is used when defining the parameter. # @return [void] #
UNK UNK on_lparen paths on_rparen on_ignored_nl UNK paths on_period UNK on_lparen on_const on_rparen UNK on_op UNK on_period UNK on_period UNK # This is the default implementation of `munge`. # If the concrete parameter defines a `munge` method, this default implementation will be overridden. # This default implementation does not perform any munging, it just checks the one/many paths # constraints. A derived implementation can perform this check as: # `paths.is_a?(Array) and ! self.class.arrays?` and raise a {Puppet::Error}. # @param paths [String, Array<String>] one of multiple paths # @return [String, Array<String>] the given paths # @raise [Puppet::Error] if the given paths does not comply with the on/many paths rule.
