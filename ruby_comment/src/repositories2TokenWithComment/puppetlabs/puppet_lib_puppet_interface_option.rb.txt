UNK on_const on_op on_const on_op on_const on_nl UNK on_const on_op on_const on_op on_const on_nl on_ignored_nl def UNK on_lparen UNK on_comma # This represents an option on an action or face (to be globally applied # to its actions). Options should be constructed by calling # {Puppet::Interface::OptionManager#option}, which is available on # {Puppet::Interface}, and then calling methods of # {Puppet::Interface::OptionBuilder} in the supplied block. # @api public
def UNK on_lparen UNK on_comma on_op declaration on_comma on_op UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl on_ivar on_op UNK UNK # @api private
UNK on_op on_lbrace on_rbrace on_nl declaration on_period UNK UNK on_op item on_op on_ignored_nl if item on_period UNK on_const UNK item # Collect and sort the arguments in the declaration.
name on_op UNK on_lparen item on_rparen on_nl if on_const on_period UNK on_period UNK name then on_ignored_nl raise on_const on_comma _ # Duplicate checking... # for our duplicate checking purpose, we don't make a check with the # translated '-' -> '_'. Right now, we do that on purpose because of # a duplicated option made publicly available on certificate and ca # faces for dns alt names. Puppet defines 'dns_alt_names', those # faces include 'dns-alt-names'. We can't get rid of 'dns-alt-names' # yet, so we need to do our duplicate checking on the untranslated # version of the option. # jeffweiss 17 april 2012
on_ivar on_op UNK on_lparen on_ivar on_period UNK UNK on_op UNK on_op UNK on_op on_regexp_beg on_tstring_content on_regexp_end end on_op on_ivar on_period # Now, infer the name from the options; we prefer the first long option as # the name, rather than just the first option.
on_ivar on_op on_ivar on_period UNK on_lbrace on_op o on_op o on_op on_regexp_beg on_tstring_content on_regexp_end on_rbrace on_nl if on_ivar UNK UNK # Do we take an argument? If so, are we consistent about it, because # incoherence here makes our life super-difficult, and we can more easily # relax this rule later if we find a valid use case for it. --daniel 2011-03-30
on_ivar on_op on_ivar on_period UNK on_lbrace on_op o on_op o on_op on_regexp_beg on_tstring_content on_regexp_end on_rbrace on_nl if on_ivar on_nl raise # Is our argument optional? The rules about consistency apply here, also, # just like they do to taking arguments at all. --daniel 2011-03-30
on_ignored_nl def UNK on_nl on_ivar on_period UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end # to_s and optparse_to_name are roughly mirrored, because they are used to # transform options to name symbols, and vice-versa. This isn't a full # bidirectional transformation though. --daniel 2011-04-07
def UNK on_lparen declaration on_rparen on_ignored_nl UNK on_op declaration on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end on_rparen on_nl unless UNK on_nl # @api private
def UNK on_lparen declaration on_rparen on_ignored_nl name on_op UNK on_lparen declaration on_rparen on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg # @api private
raise on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_ignored_nl on_lbrace on_label UNK on_comma on_label proc on_period UNK on_period #TRANSLATORS 'proc' is a Ruby block of code
raise on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_ignored_nl on_lbrace on_label UNK on_comma on_label proc on_period UNK on_period #TRANSLATORS 'proc' is a Ruby block of code
raise on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_ignored_nl on_lbrace on_label UNK on_comma on_label proc on_period UNK on_period #TRANSLATORS 'proc' is a Ruby block of code
