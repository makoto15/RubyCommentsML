UNK on_const on_op on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_symbeg issue_code on_nl on_ignored_nl UNK on_symbeg UNK on_nl # Defines classes to deal with issues, and message formatting and defines constants with Issues. # @api public #
UNK on_const on_nl UNK on_symbeg issue_code on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg # Describes an issue, and can produce a message for an occurrence of the issue. #
UNK on_symbeg issue_code on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl def # The issue code # @return [Symbol]
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl def UNK issue_code on_comma on_op args # A block producing the message # @return [Proc]
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl def UNK issue_code on_comma on_op args on_comma on_op block on_nl on_ivar # Names that must be bound in an occurrence of the issue to be able to produce a message. # These are the names in addition to requirements stipulated by the Issue formatter contract; i.e. :label`, # and `:semantic`. #
UNK on_symbeg UNK on_nl def UNK issue_code on_comma on_op args on_comma on_op block on_nl on_ivar on_op issue_code on_nl on_ivar on_op # If this issue can have its severity lowered to :warning, :deprecation, or :ignored
def UNK issue_code on_comma on_op args on_comma on_op block on_nl on_ivar on_op issue_code on_nl on_ivar on_op block on_nl on_ivar on_op # Configures the Issue with required arguments (bound by occurrence), and a block producing a message.
def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_op on_lbrace on_rbrace on_rparen on_ignored_nl UNK on_op on_const # Returns true if it is allowed to demote this issue
def UNK on_lparen UNK on_op on_lbrace on_rbrace on_rparen on_ignored_nl UNK on_op on_const on_period UNK on_lparen on_op UNK on_rparen on_nl UNK # Formats a message for an occurrence of the issue with argument bindings passed in a hash. # The hash must contain a LabelProvider bound to the key `label` and the semantic model element # bound to the key `semantic`. All required arguments as specified by `arg_names` must be bound # in the given `hash`. # @api public #
UNK on_op on_const on_period UNK on_lparen on_op UNK on_rparen on_nl UNK on_ignored_nl UNK on_period UNK on_lparen UNK on_comma on_op UNK # Create a Message Data where all hash keys become methods for convenient interpolation # in issue text.
UNK on_period UNK on_lparen UNK on_comma on_op UNK on_rparen on_nl UNK on_const on_op UNK on_nl UNK on_const on_comma _ on_lparen # Evaluate the message block in the msg data's binding
UNK on_const on_nl def UNK on_op UNK on_nl UNK on_op UNK on_op UNK UNK UNK end on_nl UNK on_period UNK # Provides a binding of arguments passed to Issue.format to method names available # in the issue's message producing block. # @api private #
def label on_lparen on_op args on_rparen on_ignored_nl args on_period UNK on_op label_provider on_op label_provider on_period label on_lparen args on_lbracket UNK # Obtains the label provider given as a key `:label` in the hash passed to #format. The label provider is # return if no arguments are given. If given an argument, returns the result of calling #label on the label # provider. # # @param args [Object] one object to obtain a label for or zero arguments to obtain the label provider # @return [LabelProvider,String] the label provider or label depending on if an argument is given or not # @raise [Puppet::Error] if no label provider is found
def label_provider on_nl label_provider on_op on_ivar on_lbracket on_symbeg label on_rbracket on_nl UNK on_const on_op on_const on_comma _ on_lparen on_tstring_beg on_tstring_content # Returns the label provider given as key `:label` in the hash passed to #format. # @return [LabelProvider] the label provider # @raise [Puppet::Error] if no label provider is found
UNK on_const on_op on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen UNK label_provider on_nl label_provider on_nl end on_nl on_ignored_nl def #TRANSLATORS ":label" is a keyword and should not be translated
def semantic on_nl UNK on_const on_op on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen UNK on_ivar on_lbracket on_symbeg semantic on_rbracket # Returns the label provider given as a key in the hash passed to #format. #
UNK on_const on_op on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen UNK on_ivar on_lbracket on_symbeg semantic on_rbracket on_nl on_ivar on_lbracket #TRANSLATORS ":semantic" is a keyword and should not be translated
def UNK on_period issue on_lparen issue_code on_comma on_op args on_comma on_op block on_rparen on_ignored_nl on_const on_period UNK on_lparen issue_code on_comma # Defines an issue with the given `issue_code`, additional required parameters, and a block producing a message. # The block is evaluated in the context of a MessageData which provides convenient access to all required arguments # via accessor methods. In addition to accessors for specified arguments, these are also available: # * `label` - a `LabelProvider` that provides human understandable names for model elements and production of article (a/an/the). # * `semantic` - the model element for which the issue is reported # # @param issue_code [Symbol] the issue code for the issue used as an identifier, should be the same as the constant # the issue is bound to. # @param args [Symbol] required arguments that must be passed when formatting the message, may be empty # @param block [Proc] a block producing the message string, evaluated in a MessageData scope. The produced string # should not end with a period as additional information may be appended. # # @see MessageData # @api public #
def UNK on_period hard_issue on_lparen issue_code on_comma on_op args on_comma on_op block on_rparen on_ignored_nl UNK on_op on_const on_period UNK on_lparen # Creates a non demotable issue. # @see Issue.issue #
on_ignored_nl on_const on_op issue on_symbeg on_const on_comma on_symbeg name do on_ignored_nl _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label # @comment Here follows definitions of issues. The intent is to provide a list from which yardoc can be generated # containing more detailed information / explanation of the issue. # These issues are set as constants, but it is unfortunately not possible for the created object to easily know which # name it is bound to. Instead the constant has to be repeated. (Alternatively, it could be done by instead calling # #const_set on the module, but the extra work required to get yardoc output vs. the extra effort to repeat the name # twice makes it not worth it (if doable at all, since there is no tag to artificially construct a constant, and # the parse tag does not produce any result for a constant assignment).
on_const on_op issue on_symbeg on_const on_comma on_symbeg name do on_ignored_nl _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label label # This is allowed (3.1) and has not yet been deprecated. # @todo configuration #
on_const on_op issue on_symbeg on_const on_comma on_symbeg name do on_ignored_nl _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label name # When a variable name contains a hyphen and these are illegal. # It is possible to control if a hyphen is legal in a name or not using the setting TODO # @todo describe the setting # @api public # @todo configuration if this is error or warning #
on_const on_op hard_issue on_symbeg on_const do on_ignored_nl _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl on_const on_op hard_issue # A class, definition, or node may only appear at top level or inside other classes # @todo Is this really true for nodes? Can they be inside classes? Isn't that too late? # @api public #
on_const on_op hard_issue on_symbeg on_const do on_ignored_nl _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label label on_period a_an on_lparen # Assignment can only be made to certain types of left hand expressions such as variables.
on_const on_op hard_issue on_symbeg on_const on_comma on_symbeg name do on_ignored_nl if on_const on_op on_const on_op on_const on_lbracket name on_rbracket on_nl # Variables are immutable, cannot reassign in the same assignment scope
on_const on_op hard_issue on_symbeg on_const on_comma on_symbeg name do on_ignored_nl _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label name # Variables facts and trusted
on_const on_op issue on_symbeg on_const on_comma on_symbeg UNK do on_ignored_nl _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label UNK # Assignment cannot be made to numeric match result variables
on_const on_op hard_issue on_symbeg on_const do on_ignored_nl _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl on_const on_op issue # Assignment can only be made to certain types of left hand expressions such as variables.
on_const on_op issue on_symbeg on_const on_comma on_symbeg name do on_ignored_nl _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label name # parameters cannot have numeric names, clashes with match result variables
on_const on_op issue on_symbeg on_const do on_ignored_nl _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl on_const on_op hard_issue # In certain versions of Puppet it may be allowed to assign to a not already assigned key # in an array or a hash. This is an optional validation that may be turned on to prevent accidental # mutation. #
on_const on_op hard_issue on_symbeg on_const do on_ignored_nl _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label label on_period a_an on_lparen # When indexed assignment ($x[]=) is allowed, the leftmost expression must be # a variable expression. #
on_const on_op hard_issue on_symbeg on_const on_comma on_symbeg operator do on_ignored_nl _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label operator # For unsupported operators (e.g. += and -= in puppet 4). #
on_const on_op hard_issue on_symbeg on_const on_comma on_symbeg operator do on_ignored_nl _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label operator # For operators that are not supported in specific contexts (e.g. '* =>' in # resource defaults) #
on_const on_op hard_issue on_symbeg on_const on_comma on_symbeg operator on_comma on_symbeg left_value do on_ignored_nl _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op # For non applicable operators (e.g. << on Hash). #
on_const on_op issue on_symbeg on_const do on_ignored_nl _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label label on_period a_an_uc on_lparen # Some expressions/statements may not produce a value (known as right-value, or rvalue). # This may vary between puppet versions. #
on_const on_op hard_issue on_symbeg on_const on_comma on_symbeg name on_comma on_symbeg UNK do on_ignored_nl _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op # Appending to attributes is only allowed in certain types of resource expressions. #
on_const on_op hard_issue on_symbeg on_const on_comma on_symbeg name do on_ignored_nl _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label name # In case a model is constructed programmatically, it must create valid type references. #
on_const on_op issue on_symbeg on_const do on_ignored_nl _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl on_const on_op issue # This is a runtime issue - storeconfigs must be on in order to collect exported. This issue should be # set to :ignore when just checking syntax. # @todo should be a :warning by default #
on_const on_op issue on_symbeg on_const do on_ignored_nl _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl on_const on_op hard_issue # This is a runtime issue - storeconfigs must be on in order to export a resource. This issue should be # set to :ignore when just checking syntax. # @todo should be a :warning by default #
on_const on_op hard_issue on_symbeg on_const on_comma on_symbeg UNK do on_ignored_nl _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label UNK # A hostname may only contain letters, digits, '_', '-', and '.'. #
on_const on_op hard_issue on_symbeg on_const do on_ignored_nl _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl on_const on_op hard_issue # A hostname may only contain letters, digits, '_', '-', and '.'. #
on_const on_op hard_issue on_symbeg on_const on_comma on_symbeg UNK on_comma on_symbeg container do on_ignored_nl _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op # Issues when an expression is used where it is not legal. # E.g. an arithmetic expression where a hostname is expected. #
on_const on_op hard_issue on_symbeg on_const do on_ignored_nl _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label label on_period a_an_uc on_lparen # Issues when a variable is not a NAME #
on_const on_op hard_issue on_symbeg on_const do on_ignored_nl _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label label on_period a_an_uc on_lparen # Issues when an expression is used illegally in a query. # query only supports == and !=, and not <, > etc. #
on_const on_op hard_issue on_symbeg on_const do on_ignored_nl _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl on_const on_op issue # If an attempt is made to make a resource default virtual or exported. #
on_const on_op issue on_symbeg on_const on_comma on_symbeg UNK do on_ignored_nl _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label label # When an attempt is made to use multiple keys (to produce a range in Ruby - e.g. $arr[2,-1]). # This is not supported in 3x, but it allowed in 4x. #
on_const on_op issue on_symbeg on_const do on_ignored_nl _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label label on_period a_an on_lparen # Issues when expressions that are not implemented or activated in the current version are used. #
on_const on_op issue on_symbeg on_const on_comma on_symbeg UNK do on_ignored_nl _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label UNK # TODO_HEREDOC
_ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl on_const on_op issue on_symbeg on_const do on_ignored_nl _ on_lparen on_tstring_beg #TRANSLATORS "import" is a function name and should not be translated
