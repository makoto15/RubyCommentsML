UNK on_const on_nl UNK UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_nl end on_nl on_ignored_nl UNK UNK on_lparen UNK # A FunctionSignature is returned from `function_signature`. Its purpose is to answer questions about the function's parameters # and if it can be called with a set of parameters. # # It is also possible to get an array of puppet Callable data type where each callable describes one possible way # the function can be called. # # @api public #
UNK UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_nl end on_nl on_ignored_nl UNK UNK on_lparen UNK UNK UNK on_op # @api private
UNK UNK on_lparen UNK UNK UNK on_op UNK on_rparen on_ignored_nl signatures on_op UNK on_period UNK on_period UNK on_nl UNK on_op # Returns true if the function can be called with the given arguments and false otherwise. # If the function is not callable, and a code block is given, it is given a formatted error message that describes # the type mismatch. That error message can be quite complex if the function has multiple dispatch depending on # given types. # # @param args [Array] The arguments as given to the function call # @param callable [Proc, nil] An optional ruby Proc or puppet lambda given to the function # @yield [String] a formatted error message describing a type mismatch if the function is not callable with given args + block # @return [Boolean] true if the function can be called with given args + block, and false otherwise # @api public #
UNK UNK on_nl signatures on_op UNK on_period UNK on_period UNK on_nl signatures on_period UNK on_lparen on_const on_op on_const on_op on_const # Returns an array of Callable puppet data type # @return [Array<Puppet::Pops::Types::PCallableType] one callable per way the function can be called # # @api public #
