UNK on_const on_nl UNK on_const on_op on_const on_nl on_ignored_nl def UNK on_period UNK on_lparen value on_comma options on_op on_const on_rparen # Class that can process an arbitrary object into a value that is assignable to `Data` # and where contents is converted from rich data to one of: # * Numeric (Integer, Float) # * Boolean # * Undef (nil) # * String # * Array # * Hash # # The conversion is lossy - the result cannot be deserialized to produce the original data types. # All rich values are transformed to strings.. # Hashes with rich keys are transformed to use string representation of such keys. # # @api public
def UNK on_period UNK on_lparen value on_comma options on_op on_const on_rparen on_ignored_nl UNK on_lparen options on_rparen on_period UNK on_lparen value # Converts the given _value_ according to the given _options_ and return the result of the conversion # # @param value [Object] the value to convert # @param options {Symbol => <Boolean,String>} options hash # @option options [String] :message_prefix String to prepend to in warnings and errors # @option options [String] :semantic object (AST) to pass to the issue reporter # @return [Data] the processed result. An object assignable to `Data` with rich data stringified. # # @api public
def UNK on_lparen options on_op on_const on_rparen on_ignored_nl on_ivar on_op options on_lbracket on_symbeg UNK on_rbracket on_nl on_ivar on_op options on_lbracket # Creates a new instance of the processor # # @param options {Symbol => Object} options hash # @option options [String] :message_prefix String to prepend to path in warnings and errors # @option semantic [Object] :semantic object to pass to the issue reporter
def UNK on_lparen value on_rparen on_ignored_nl on_ivar on_op on_lbracket on_rbracket on_nl on_ivar on_op on_lbrace on_rbrace on_nl UNK on_lparen value on_rparen # Converts the given _value_ # # @param value [Object] the value to convert # @return [Data] the processed result. An object assignable to `Data` with rich data stringified. # # @api public
def UNK on_lparen value on_rparen on_ignored_nl UNK on_op value on_period UNK on_nl if UNK on_op on_const on_op on_const on_nl on_const # Turns an ASCII-8BIT encoded string into a Binary, returns US_ASCII encoded and transforms all other strings to UTF-8 # with replacements for non Unicode characters. # If String cannot be represented as UTF-8
value on_period UNK on_lparen on_const on_op on_const on_comma UNK on_comma on_symbeg UNK on_op on_symbeg UNK on_comma on_symbeg UNK on_op on_symbeg # Transform to UTF-8 (do not assume UTF-8 is correct) with source invalid byte # sequences and UTF-8 undefined characters replaced by the default unicode uFFFD character # (black diamond with question mark).
def UNK on_lparen value on_comma on_op UNK on_rparen on_ignored_nl UNK on_lparen value on_comma on_op UNK on_rparen on_nl end on_nl on_ignored_nl # Performs a check for endless recursion before # it yields to the given block. The result of yielding is returned. # # @param value [Object] the value # @yield The block that will produce the data for the value # @return [Data] the result of yielding to the given block, or a hash denoting a reference # # @api private
def UNK on_lparen key on_rparen on_ignored_nl on_ivar on_period UNK on_lparen key on_rparen on_nl value on_op UNK on_nl on_ivar on_period UNK # Pushes `key` to the end of the path and yields to the given block. The # `key` is popped when the yield returns. # @param key [Object] the key to push on the current path # @yield The block that will produce the returned value # @return [Object] the result of yielding to the given block # # @api private
def UNK on_lparen value on_rparen on_ignored_nl UNK on_op value on_period UNK on_nl if on_ivar on_nl if on_ivar on_period UNK on_lparen # @param value [Object] the value to use when checking endless recursion # @yield The block that will produce the data # @return [Data] the result of yielding to the given block
def UNK on_lparen value on_rparen on_ignored_nl UNK on_lparen value on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen value on_rparen on_ignored_nl # A hash key that is non conforming
UNK on_tstring_beg on_tstring_content UNK value UNK on_tstring_content UNK value on_period UNK UNK on_tstring_content on_tstring_end on_nl on_ignored_nl elsif value on_period is_a? # to_s does not differentiate between instances - if they were used as keys in a hash # the stringified result would override all Sensitive keys with the last such key's value # this adds object_id. #
UNK value on_period UNK on_nl on_ignored_nl end on_nl on_ignored_nl result on_op value on_period UNK on_nl on_ignored_nl if result on_period UNK # regular to_s on an ObjectType gives the entire definition
result on_op value on_period UNK on_nl on_ignored_nl if result on_period UNK on_op on_const on_op on_const on_nl UNK on_ignored_nl result on_period # Do a to_s on anything else
if result on_period UNK on_op on_const on_op on_const on_nl UNK on_ignored_nl result on_period UNK on_lparen on_const on_op on_const on_rparen on_nl # The result may be ascii-8bit encoded without being a binary (low level object.inspect returns ascii-8bit string) # This can be the case if runtime objects have very simple implementation (no to_s or inspect method). # They are most likely not of Binary nature. Therefore the encoding is forced and only if it errors # will the result be taken as binary and encoded as base64 string.
on_const on_op on_const on_op on_const on_op on_const on_op on_const on_period UNK on_lparen result on_rparen on_period UNK on_nl end on_nl end # The result cannot be represented in UTF-8, make it a binary Base64 encoded string
