raise _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen if on_const on_period UNK on_lparen on_symbeg UNK on_rparen on_nl on_ignored_nl name on_op on_ivar # Disallow anything that invokes md5 to avoid un-friendly termination due to FIPS
def UNK on_period UNK on_nl UNK on_nl end on_nl on_ignored_nl mod on_op UNK on_period mod on_nl results on_lbracket on_symbeg installed_version # `priority` is an attribute of a `SemanticPuppet::Dependency::Source`, # which is delegated through `ModuleRelease` instances for the sake of # comparison (sorting). By default, the `InstalledModules` source has # a priority of 10 (making it the most preferable source, so that # already installed versions of modules are selected in preference to # modules from e.g. the Forge). Since we are specifically looking to # upgrade this module, we don't want the installed version of this # module to be chosen in preference to those with higher versions. # # This implementation is suboptimal, and since we can expect this sort # of behavior to be reasonably common in Semantic, we should probably # see about implementing a `ModuleRelease#override_priority` method # (or something similar).
UNK on_op module_repository on_period UNK on_lparen name on_rparen on_nl if UNK on_period UNK on_nl raise on_const on_comma results on_period UNK # Ensure that there is at least one candidate release available # for the target package.
UNK on_op on_tstring_beg on_tstring_content UNK version UNK on_tstring_content UNK version on_period UNK UNK on_tstring_content on_tstring_end on_nl graph on_period UNK on_lparen # Since upgrading already installed modules can be troublesome, # we'll place constraints on the graph for each installed # module, locking it to upgrades within the same major version.
