on_const on_op on_const on_period UNK on_lparen on_symbeg match on_rparen UNK on_ignored_nl UNK on_symbeg match UNK on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end # Matches a regular expression against a string and returns an array containing the match # and any matched capturing groups. # # The first argument is a string or array of strings. The second argument is either a # regular expression, regular expression represented as a string, or Regex or Pattern # data type that the function matches against the first argument. # # The returned array contains the entire match at index 0, and each captured group at # subsequent index values. If the value or expression being matched is an array, the # function returns an array with mapped match results. # # If the function doesn't find a match, it returns 'undef'. # # @example Matching a regular expression in a string # # ```puppet # $matches = "abc123".match(/[a-z]+[1-9]+/) # # $matches contains [abc123] # ``` # # @example Matching a regular expressions with grouping captures in a string # # ```puppet # $matches = "abc123".match(/([a-z]+)([1-9]+)/) # # $matches contains [abc123, abc, 123] # ``` # # @example Matching a regular expression with grouping captures in an array of strings # # ```puppet # $matches = ["abc123","def456"].match(/([a-z]+)([1-9]+)/) # # $matches contains [[abc123, abc, 123], [def456, def, 456]] # ``` # # @since 4.0.0 #
UNK on_op on_const on_op on_const on_op on_const on_period UNK on_lparen UNK on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma UNK on_comma UNK on_rparen # Make this visitor shared among all instantiations of this function since it is faster. # This can be used because it is not possible to replace # a puppet runtime (where this function is) without a reboot. If you model a function in a module after # this class, use a regular instance variable instead to enable reloading of the module without reboot #
def match on_lparen UNK on_comma pattern on_rparen on_ignored_nl UNK on_period UNK on_lparen UNK on_comma pattern on_comma UNK on_rparen on_nl end # Matches given string against given pattern and returns an Array with matches. # @param string [String] the string to match # @param pattern [String, Regexp, Puppet::Pops::Types::PPatternType, Puppet::Pops::PRegexpType, Array] the pattern # @return [Array<String>] matches where first match is the entire match, and index 1-n are captures from left to right #
def UNK on_lparen UNK on_comma pattern on_rparen on_ignored_nl UNK on_period UNK UNK on_op s on_op match on_lparen s on_comma pattern # Matches given Array[String] against given pattern and returns an Array with mapped match results. # # @param array [Array<String>] the array of strings to match # @param pattern [String, Regexp, Puppet::Pops::Types::PPatternType, Puppet::Pops::PRegexpType, Array] the pattern # @return [Array<Array<String, nil>>] Array with matches (see {#match}), non matching entries produce a nil entry #
result on_op UNK on_nl UNK on_period UNK on_period UNK UNK on_op UNK on_op result on_op match on_lparen s on_comma UNK # Find first matching type (or error out if one of the variants is not acceptable)
result on_op UNK on_nl UNK on_period UNK on_period UNK UNK on_op pattern on_op result on_op match on_lparen s on_comma pattern # Since we want the actual match result (not just a boolean), an iteration over # Pattern's regular expressions is needed. (They are of PRegexpType)
def UNK on_lparen UNK on_comma s on_rparen on_ignored_nl result on_op UNK on_nl UNK on_period UNK on_period UNK UNK on_op UNK # Returns the first matching entry
