UNK on_const on_op on_const on_op on_const on_nl UNK on_symbeg UNK on_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen UNK # Adds additional resources to the catalog and relationship graph that are # generated by existing resources. There are two ways that a resource can # generate additional resources, either through the #generate method or the # #eval_generate method. # # @api private
UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen UNK on_comma UNK on_comma UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl on_ivar # [boolean] true if any resource has attempted and failed to generate resources
generated on_period UNK on_nl end on_nl generated on_period UNK do on_op res on_op on_ignored_nl UNK on_lparen res on_comma resource on_rparen # This is reversed because PUP-1963 changed how generated # resources were added to the catalog. It exists for backwards # compatibility only, and can probably be removed in Puppet 5 # # Previously, resources were given sequential priorities in the # relationship graph. Post-1963, resources are added to the # catalog one by one adjacent to the parent resource. This # causes an implicit reversal of their application order from # the old code. The reverse makes it all work like it did.
resource on_period UNK on_lparen detail on_comma UNK on_lparen UNK UNK UNK on_rparen on_op on_lbrace UNK detail on_rbrace on_rparen on_nl UNK #TRANSLATORS eval_generate is a method name and should be left untranslated
sentinel on_period UNK on_lparen resource on_rparen on_nl priority on_op on_ivar on_period UNK on_lparen resource on_comma sentinel on_rparen on_nl on_ivar on_period # Tag the completed whit with all of the tags of the generating resource # except the type name to allow event propogation to succeed beyond the whit # "boundary" when filtering resources with tags. We include auto-generated # tags such as the type name to support implicit filtering as well as # explicit. Note that resource#tags returns a duplicate of the resource's # tags.
UNK on_lparen res on_comma sentinel on_comma on_const on_op on_const on_op on_const on_op on_const on_rparen on_nl end on_nl on_ignored_nl UNK on_lparen # This resource isn't 'completed' until each child has run
UNK on_lparen resource on_comma sentinel on_comma on_const on_op on_const on_op on_const on_op on_const on_rparen on_nl end on_nl on_ignored_nl def UNK # This edge allows the resource's events to propagate, though it isn't # strictly necessary for ordering purposes
UNK on_op res on_period UNK on_period UNK on_lbrace on_op UNK on_op made on_lbracket UNK on_rbracket UNK made on_lbracket UNK on_rbracket # Depend on the nearest ancestor we generated, falling back to the # resource if we have none
on_ivar on_period UNK on_lparen res on_comma priority on_rparen on_nl end on_nl res on_period UNK on_nl end on_nl end on_nl on_ignored_nl # If we have a relationship_graph we should add the resource # to it (this is an eval_generate). If we don't, then the # relationship_graph has not yet been created and we can skip # adding it.
def UNK on_lparen parent on_comma child on_comma UNK on_op UNK on_rparen on_ignored_nl if parent on_period UNK on_nl UNK on_op child # add correct edge for depth- or breadth- first traversal of # generated resource. Skip generating the edge if there is already # some sort of edge between the two resources.
UNK on_op on_const on_op on_const on_period UNK on_period UNK on_lbrace on_op UNK on_op on_ignored_nl UNK on_op UNK on_period UNK on_period # For each potential relationship metaparam, check if parent or # child references the other. If there are none, we should add our # edge.
resource on_op on_op on_const on_op on_const on_period UNK on_lparen target on_period UNK on_comma target on_period UNK on_comma on_ignored_nl on_symbeg UNK # We *cannot* use target.to_resource here! # # For reasons that are beyond my (and, perhaps, human) # comprehension, to_resource will call retrieve. This is # problematic if a generated resource needs the system to be # changed by a previous resource (think a file on a path # controlled by a mount resource). # # Instead of using to_resource, we just construct a resource as # if the arguments to the Type instance had been passed to a # Resource instead.
def UNK on_lparen parent on_comma child on_comma UNK on_op UNK on_rparen on_ignored_nl on_ivar on_period UNK on_lparen child on_rparen on_nl UNK # Copy an important relationships from the parent to the newly-generated # child resource.
