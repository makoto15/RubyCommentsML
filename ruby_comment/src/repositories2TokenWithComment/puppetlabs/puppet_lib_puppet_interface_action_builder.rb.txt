UNK on_const on_op on_const on_op on_const on_nl UNK UNK UNK on_nl on_ignored_nl def UNK on_period UNK on_lparen UNK on_comma UNK # This class is used to build {Puppet::Interface::Action actions}. # When an action is defined with # {Puppet::Interface::ActionManager#action} the block is evaluated # within the context of a new instance of this class. # @api public
UNK UNK UNK on_nl on_ignored_nl def UNK on_period UNK on_lparen UNK on_comma UNK on_comma on_op block on_rparen on_ignored_nl raise on_tstring_beg # The action under construction # @return [Puppet::Interface::Action] # @api private
def UNK on_period UNK on_lparen UNK on_comma UNK on_comma on_op block on_rparen on_ignored_nl raise on_tstring_beg on_tstring_content UNK UNK on_period UNK # Builds a new action. # @return [Puppet::Interface::Action] # @api private
def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK on_lparen on_op block on_rparen on_ignored_nl on_ivar on_period # Deprecates the action # @return [void] # @api private # @dsl Faces
on_ignored_nl def UNK on_lparen on_op block on_rparen on_ignored_nl on_ivar on_period UNK on_op block on_nl end on_nl on_ignored_nl def UNK on_lparen # Ideally the method we're defining here would be added to the action, and a # method on the face would defer to it, but we can't get scope correct, so # we stick with this. --daniel 2011-03-24
def UNK on_lparen on_op block on_rparen on_ignored_nl on_ivar on_period UNK on_op block on_nl end on_nl on_ignored_nl def UNK on_lparen UNK # Sets what the action does when it is invoked. This takes a block # which will be called when the action is invoked. The action will # accept arguments based on the arity of the block. It should always # take at least one argument for options. Options will be the last # argument. # # @overload when_invoked({|options| ... }) # An action with no arguments # @overload when_invoked({|arg1, arg2, options| ... }) # An action with two arguments # @return [void] # @api public # @dsl Faces
def UNK on_lparen UNK on_op UNK on_comma on_op block on_rparen on_ignored_nl UNK UNK on_period UNK UNK raise on_const on_comma UNK # Sets a block to be run at the rendering stage, for a specific # rendering type (eg JSON, YAML, console), after the block for # when_invoked gets run. This manipulates the value returned by the # action. It makes it possible to work around limitations in the # underlying object returned, and should be avoided in favor of # returning a more capable object. # @api private # @todo this needs more # @dsl Faces
raise on_const on_comma UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl UNK block on_period UNK UNK on_ignored_nl raise on_const # the default error message sucks --daniel 2011-04-18 #TRANSLATORS 'when_rendering' is a method name and should not be translated
raise on_const on_comma UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ivar on_period UNK on_lparen UNK on_comma block on_rparen #TRANSLATORS 'when_rendering' is a method name and should not be translated
def UNK on_lparen on_op UNK on_comma on_op block on_rparen on_ignored_nl UNK on_op on_const on_op on_const on_op on_const on_period UNK on_lparen # Declare that this action can take a specific option, and provide the # code to do so. One or more strings are given, in the style of # OptionParser (see example). These strings are parsed to derive a # name for the option. Any `-` characters within the option name (ie # excluding the initial `-` or `--` for an option) will be translated # to `_`.The first long option will be used as the name, and the rest # are retained as aliases. The original form of the option is used # when invoking the face, the translated form is used internally. # # When the action is invoked the value of the option is available in # a hash passed to the {Puppet::Interface::ActionBuilder#when_invoked # when_invoked} block, using the option name in symbol form as the # hash key. # # The block to this method is used to set attributes for the option # (see {Puppet::Interface::OptionBuilder}). # # @param declaration [String] Option declarations, as described above # and in the example. # # @example Say hi # action :say_hi do # option "-u USER", "--user-name USER" do # summary "Who to say hi to" # end # # when_invoked do |options| # "Hi, #{options[:user_name]}" # end # end # @api public # @dsl Faces
def UNK on_lparen value on_op UNK on_rparen on_ignored_nl on_ivar on_period UNK on_op on_op on_op value on_nl end on_nl on_ignored_nl def # Set this as the default action for the face. # @api public # @dsl Faces # @return [void]
def UNK on_lparen on_op UNK on_rparen on_ignored_nl on_ivar on_period UNK UNK on_nl end on_nl UNK UNK UNK UNK UNK on_nl # @api private
def UNK on_lparen value on_op UNK on_rparen on_ignored_nl UNK value on_period UNK on_nl raise on_const on_comma UNK on_lparen on_tstring_beg on_tstring_content # Sets the default rendering format # @api private
raise on_const on_comma UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl UNK on_op on_const on_op on_const on_op on_const #TRANSLATORS 'render_as' is a method name and should not be translated
on_const on_op on_const on_op on_const on_period UNK on_period UNK on_lparen UNK on_tstring_content UNK on_rparen on_period UNK UNK on_op UNK on_op # Metaprogram the simple DSL from the target class.
UNK UNK on_nl on_tstring_content UNK UNK UNK on_tstring_content UNK UNK UNK on_tstring_content UNK end on_nl end on_nl on_ignored_nl UNK on_nl # Using eval because the argument handling semantics are less awful than # when we use the define_method/block version. The later warns on older # Ruby versions if you pass the wrong number of arguments, but carries # on, which is totally not what we want. --daniel 2011-04-18
raise on_const on_comma UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl end on_nl end on_nl EMP EMP EMP EMP #TRANSLATORS 'when_invoked' is a method name and should not be translated and 'block' is a Ruby code block
