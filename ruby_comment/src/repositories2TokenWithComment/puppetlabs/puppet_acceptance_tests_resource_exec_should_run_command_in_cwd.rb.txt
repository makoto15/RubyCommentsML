UNK UNK on_lparen UNK on_rparen on_ignored_nl on_const on_period UNK on_lparen on_const on_period UNK on_lparen UNK on_rparen on_rparen on_nl end on_nl # Useful utility that converts a string literal # to a regex. We do a lot of assertions on file # paths here that we need to escape, so this is # a nice way of making the code more readable.
UNK on_op on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_content on_tstring_end if UNK on_period UNK on_lparen on_const on_rparen on_nl on_ignored_nl on_tstring_beg on_tstring_content # Single quote the strings in case our value is a Windows # path
UNK on_lparen agent on_comma on_const on_period join on_lparen testdir on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl # "onlyif" testing will require some form of runnable test in the testdir for the # onlyif clause to actually execute. The runnable test we will use is attempting to # 'cat' an unqualified file that will only exist in the testdir
step on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl agent on_period UNK on_lparen username on_rparen on_nl if agent on_period platform on_op on_regexp_beg on_tstring_content # The next two steps set up to test running with a CWD that the user does not have access to. # The setup for the test creates 1. a new user and 2. a new directory that the new user does # not have access to.
on agent on_comma UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma username on_comma on_tstring_beg on_tstring_content on_embexpr_beg username on_embexpr_end on_tstring_end on_rparen on_nl on # for some reason applications of 'user_present' on solaris 10 don't manage the homedir correctly, so just # force a puppet apply to manage the user
on on_lparen agent on_comma on_tstring_beg on_tstring_content on_embexpr_beg username on_embexpr_end on_tstring_content on_embexpr_beg username on_embexpr_end on_tstring_content on_embexpr_beg username on_embexpr_end on_tstring_end on_rparen on_nl # we need to create the user directory ourselves in order for solaris users to successfully login
on on_lparen agent on_comma on_tstring_beg on_tstring_content on_embexpr_beg username on_embexpr_end on_tstring_content on_embexpr_beg username on_embexpr_end on_tstring_content on_embexpr_beg username on_embexpr_end on_tstring_end on_rparen on_nl # we need to create the user directory ourselves in order for macos users to successfully login
on on_lparen agent on_comma on_tstring_beg on_tstring_content on_embexpr_beg username on_embexpr_end on_tstring_content on_embexpr_beg username on_embexpr_end on_tstring_content on_embexpr_beg username on_embexpr_end on_tstring_end on_rparen on_nl # we need to create the user directory ourselves in order for deb users to successfully login
on on_lparen agent on_comma on_tstring_beg on_tstring_content on_embexpr_beg username on_embexpr_end on_tstring_content on_embexpr_beg tmpdir_noaccess on_embexpr_end on_tstring_content on_embexpr_beg username on_embexpr_end on_tstring_content on_embexpr_beg username # This is a little nuts, but on MacOS the tmpdir returned from agent.tmpdir is located in # a directory that users other than root can't even access, i.e. other users won't have access # to either the noaccess dir itself (which we want) _or the tmpdir root it's located in_. This is # a problem since it will look to puppet like the noacceess dir doesn't exist at all, and so we # can't count on any reliaable failure since we want a return indicating no access, not a missing directory. # # To get around this for MacOS platforms we simply use the new user's homedir as the 'tmpdir' and # put the noaccess dir there.
on on_lparen agent on_comma on_tstring_beg on_tstring_content on_embexpr_beg tmpdir_noaccess on_embexpr_end on_tstring_end on_rparen on_nl end on_nl end on_nl on_ignored_nl step on_tstring_beg on_tstring_content # remove permissions for all other users other than root, which should force puppet to fail when running as another user
on on_lparen agent on_comma on_tstring_beg on_tstring_content on_embexpr_beg manifest_path on_embexpr_end on_tstring_content on_embexpr_beg username on_embexpr_end on_tstring_content on_embexpr_beg username on_embexpr_end on_tstring_content on_embexpr_beg username # on MacOS we need to copy the manifest to run to the user's home dir and give the user ownership. otherwise puppet won't run on it.
