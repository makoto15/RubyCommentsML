def UNK on_lparen pattern on_comma UNK on_rparen on_ignored_nl modname on_comma files on_op on_const on_op on_const on_op on_const on_period UNK on_lparen # Import manifest files that match a given file glob pattern. # # @param pattern [String] the file glob to apply when determining which files # to load # @param dir [String] base directory to use when the file is not # found in a module # @api private
def UNK on_nl environment on_period UNK on_period UNK UNK on_op UNK on_op on_ignored_nl UNK on_lparen UNK on_period name on_comma UNK # Load all of the manifest files in all known modules. # @api private
environment on_period UNK on_period UNK UNK on_op UNK on_op on_ignored_nl UNK on_lparen UNK on_period name on_comma UNK on_period UNK on_rparen # And then load all files from each module, but (relying on system # behavior) only load files from the first module of a given name. E.g., # given first/foo and second/foo, only files from first/foo will be loaded.
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK UNK if UNK on_op on_tstring_beg on_tstring_end UNK on_lparen UNK on_rparen on_period # Try to load the object with the given fully qualified name.
UNK on_lparen UNK on_rparen on_period UNK UNK on_op UNK on_op on_ignored_nl UNK on_ignored_nl UNK on_op UNK on_lparen UNK on_rparen on_nl # special-case main.
end on_nl end on_nl UNK UNK on_nl end on_nl on_ignored_nl def UNK on_lparen file on_rparen on_ignored_nl on_const on_period UNK on_lparen # I'm not convinced we should just drop these errors, but this # preserves existing behaviours.
UNK UNK on_nl end on_nl on_ignored_nl def UNK on_lparen file on_rparen on_ignored_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_embexpr_beg file # Nothing found.
if on_const on_period UNK on_lparen UNK UNK on_rparen on_lbrace on_op UNK on_rbrace on_nl UNK on_ignored_nl UNK on_op UNK on_lparen file # The squelch_parse_errors use case is for parsing for the purpose of searching # for information and it should not abort. # There is currently one user in indirector/resourcetype/parser #
on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_embexpr_beg file on_embexpr_end on_tstring_content on_embexpr_beg UNK on_period UNK on_embexpr_end on_tstring_end on_rparen on_nl end on_nl # Resume from errors so that all parseable files may # still be parsed. Mark this file as loaded so that # it would not be parsed next time (handle it as if # it was successfully parsed).
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period UNK on_lparen UNK UNK on_rparen # Return a list of all file basenames that should be tried in order # to load the object with the given fully qualified name.
