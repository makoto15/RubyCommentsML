UNK on_const on_op on_const on_op on_const on_nl UNK on_const on_op on_const on_op on_const on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl # A Script "compiler" that does not support catalog operations # # The Script compiler is "one shot" - it does not support rechecking if underlying source has changed or # deal with possible errors in a cached environment. #
UNK on_const on_op on_const on_op on_const on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg # Allows the ScriptCompiler to use the 3.x Scope class without being an actual "Compiler" #
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg environment on_nl on_ignored_nl # @api private
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg environment on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl # @api private
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg environment on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen UNK on_op # Access to the configured loaders for 4x # @return [Puppet::Pops::Loader::Loaders] the configured loaders # @api private
UNK on_symbeg environment on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen UNK on_op on_tstring_beg on_tstring_end on_comma on_op UNK # @api private
UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen UNK on_op on_tstring_beg on_tstring_end on_comma on_op UNK on_rparen on_ignored_nl on_const on_period UNK # @api private
def UNK on_nl on_const UNK on_symbeg UNK UNK on_op UNK on_nl on_const UNK on_symbeg UNK UNK on_op on_symbeg UNK on_nl # Evaluates the configured setup for a script + code in an environment with modules #
on_const on_period UNK on_lparen on_ivar on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen UNK on_ignored_nl on_ignored_nl UNK on_op on_const on_op on_const on_op on_const # TRANSLATORS, "For running script" is not user facing
UNK on_op on_const on_op on_const on_op on_const on_period UNK on_lparen UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_comma UNK on_symbeg UNK #TRANSLATORS "main" is a function name and should not be translated
def UNK on_lparen on_rparen on_ignored_nl UNK on_ignored_nl on_symbeg UNK on_op environment on_comma on_ignored_nl on_symbeg UNK on_op on_ivar on_comma on_symbeg UNK # Constructs the overrides for the context
on_symbeg UNK on_op on_ivar on_comma on_symbeg UNK on_op UNK on_comma on_ignored_nl UNK on_nl end on_nl on_ignored_nl def UNK on_lparen environment # 4x placeholder for new global scope
on_symbeg UNK on_op UNK on_comma on_ignored_nl UNK on_nl end on_nl on_ignored_nl def UNK on_lparen environment on_comma UNK on_comma UNK on_op # 4x loaders
def UNK on_lparen environment on_comma UNK on_comma UNK on_op UNK on_rparen on_ignored_nl on_ivar on_op environment on_nl on_ivar on_op UNK on_nl # Create a script compiler for the given environment where errors are logged as coming # from the given node_name #
on_ivar on_op on_const on_op on_const on_op on_const on_period UNK on_lparen UNK on_rparen on_nl on_ignored_nl UNK UNK on_nl on_ivar on_op on_const # Create the initial scope, it is needed early
UNK UNK on_nl on_ivar on_op on_const on_op on_const on_op on_const on_period UNK on_lparen environment on_comma UNK on_rparen on_nl UNK on_ignored_nl # Initialize loaders and Pcore
on_ivar on_op UNK on_lparen on_rparen on_nl on_ignored_nl on_ivar on_op UNK UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_comma # Need to compute overrides here, and remember them, because we are about to # Expensive entries in the context are bound lazily.
on_ivar on_op UNK UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_comma UNK on_op UNK UNK on_rparen on_ignored_nl UNK # Resolutions of fully qualified variable names
def UNK on_lparen UNK on_comma UNK on_op UNK UNK on_rparen on_ignored_nl UNK UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end # Having multiple named scopes hanging from top scope is not supported when scripting # in the regular compiler this is used to create one named scope per class. # When scripting, the "main class" is just a container of the top level code to evaluate # and it is not evaluated as a class added to a catalog. Since classes are not supported # there is no need to support the concept of "named scopes" as all variables are local # or in the top scope itself (notably, the $settings:: namespace is initialized # as just a set of variables in that namespace - there is no named scope for 'settings' # when scripting. # # Keeping this method here to get specific error as being unsure if there are functions/logic # that will call this. The AbstractCompiler defines this method, but maybe it does not # have to (TODO). #
def UNK on_nl on_ivar on_period UNK on_nl UNK on_op on_ivar on_period UNK on_nl UNK UNK on_period UNK on_op UNK on_op # Find and evaluate the top level code.
