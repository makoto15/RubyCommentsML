UNK on_const on_op on_const on_op on_const on_nl UNK on_const on_op on_const on_op on_const on_nl on_ignored_nl on_const on_op UNK on_tstring_content UNK # Class for loading and saving cert related objects. # # @api private
on_const on_op UNK on_tstring_content UNK on_nl on_const on_op UNK on_tstring_content UNK on_nl on_const on_op UNK on_tstring_content UNK on_nl on_const on_op # Only allow printing ascii characters, excluding /
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_lparen UNK on_period UNK on_lparen on_op on_symbeg UNK on_rparen on_period UNK on_comma on_ivar # Save `certs` to the configured `capath`. # # @param certs [Array<OpenSSL::X509::Certificate>] Array of CA certs to save # @raise [Puppet::Error] if the certs cannot be saved # @api private
def UNK on_lparen on_label UNK on_rparen on_ignored_nl pem on_op UNK on_lparen on_ivar on_rparen on_nl if on_op pem on_op UNK on_nl # Load CA certs from the configured `capath`. # # @param required [Boolean] If true, raise if they are missing # @return (see #load_cacerts_from_pem) # @raise (see #load_cacerts_from_pem) # @raise [Puppet::Error] if the certs cannot be loaded # @api private
def UNK on_lparen pem on_rparen on_ignored_nl raise on_const on_op on_const on_op on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen if # Load PEM encoded CA certificates. # # @param pem [String] PEM encoded certificate(s) # @return [Array<OpenSSL::X509::Certificate>] Array of CA certs # @raise [OpenSSL::X509::CertificateError] The `pem` text does not contain a valid cert # @api private
raise on_const on_op on_const on_op on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen if pem on_op on_const on_nl on_ignored_nl pem # TRANSLATORS 'PEM' is an acronym and shouldn't be translated
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_lparen UNK on_period UNK on_lparen on_op on_symbeg UNK on_rparen on_period UNK on_comma on_ivar # Save `crls` to the configured `crlpath`. # # @param crls [Array<OpenSSL::X509::CRL>] Array of CRLs to save # @raise [Puppet::Error] if the CRLs cannot be saved # @api private
def UNK on_lparen on_label UNK on_rparen on_ignored_nl pem on_op UNK on_lparen on_ivar on_rparen on_nl if on_op pem on_op UNK on_nl # Load CRLs from the configured `crlpath` path. # # @param required [Boolean] If true, raise if they are missing # @return (see #load_crls_from_pem) # @raise (see #load_crls_from_pem) # @raise [Puppet::Error] if the CRLs cannot be loaded # @api private
def UNK on_lparen pem on_rparen on_ignored_nl raise on_const on_op on_const on_op on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen if # Load PEM encoded CRL(s). # # @param pem [String] PEM encoded CRL(s) # @return [Array<OpenSSL::X509::CRL>] Array of CRLs # @raise [OpenSSL::X509::CRLError] The `pem` text does not contain a valid CRL # @api private
raise on_const on_op on_const on_op on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen if pem on_op on_const on_nl on_ignored_nl pem # TRANSLATORS 'PEM' is an acronym and shouldn't be translated
def UNK on_nl UNK on_op on_const on_op on_const on_period UNK on_lparen on_ivar on_rparen on_nl on_const on_period UNK on_lparen UNK on_period # Return the time when the CRL was last updated. # # @return [Time, nil] Time when the CRL was last updated, or nil if we don't # have a CRL
def UNK on_lparen UNK on_rparen on_ignored_nl on_const on_op on_const on_period UNK on_lparen on_ivar on_comma on_label UNK on_rparen on_nl end on_nl # Set the CRL last updated time. # # @param time [Time] The last updated time #
def UNK on_lparen name on_comma UNK on_comma on_label nil on_rparen on_ignored_nl pem on_op if password on_nl UNK on_op on_const on_op # Save named private key in the configured `privatekeydir`. For # historical reasons, names are case insensitive. # # @param name [String] The private key identity # @param key [OpenSSL::PKey::RSA] private key # @param password [String, nil] If non-nil, derive an encryption key # from the password, and use that to encrypt the private key. If nil, # save the private key unencrypted. # @raise [Puppet::Error] if the private key cannot be saved # @api private
def UNK on_lparen name on_comma on_label UNK on_comma on_label nil on_rparen on_ignored_nl path on_op on_ivar on_op to_path on_lparen on_ivar on_comma # Load a private key from the configured `privatekeydir`. For # historical reasons, names are case-insensitive. # # @param name [String] The private key identity # @param required [Boolean] If true, raise if it is missing # @param password [String, nil] If the private key is encrypted, decrypt # it using the password. If the key is encrypted, but a password is # not specified, then the key cannot be loaded. # @return (see #load_private_key_from_pem) # @raise (see #load_private_key_from_pem) # @raise [Puppet::Error] if the private key cannot be loaded # @api private
def UNK on_lparen pem on_comma on_label nil on_rparen on_ignored_nl password on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_ignored_nl if pem # Load a PEM encoded private key. # # @param pem [String] PEM encoded private key # @param password [String, nil] If the private key is encrypted, decrypt # it using the password. If the key is encrypted, but a password is # not specified, then the key cannot be loaded. # @return [OpenSSL::PKey::RSA, OpenSSL::PKey::EC] The private key # @raise [OpenSSL::PKey::PKeyError] The `pem` text does not contain a valid key # @api private
password on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_ignored_nl if pem on_op on_const on_nl on_const on_op on_const on_op on_const on_period # set a non-nil password to ensure openssl doesn't prompt # but ruby 2.4.0 & 2.4.1 require at least 4 bytes due to # https://github.com/ruby/openssl/commit/f38501249f33bff7ca9d208670b8cde695ea8b7b # and corrected in https://github.com/ruby/openssl/commit/a896c3d1dfa090e92dec1abf8ac12843af6af721
UNK on_ignored_nl if pem on_op on_const on_nl on_const on_op on_const on_op on_const on_period new on_lparen pem on_comma password on_rparen on_nl # Can't use OpenSSL::PKey.read, because it's broken in MRI 2.3, doesn't exist # in JRuby 9.1, and is broken in JRuby 9.2
def UNK on_nl on_const on_op on_const on_period UNK on_lparen on_const on_lbracket on_symbeg UNK on_rbracket on_comma on_symbeg UNK on_op on_const on_op # Load the private key password. # # @return [String, nil] The private key password as a binary string or nil # if there is none.
def UNK on_lparen name on_comma UNK on_rparen on_ignored_nl path on_op on_ivar on_op to_path on_lparen on_ivar on_comma name on_rparen on_nl UNK # Save a named client cert to the configured `certdir`. # # @param name [String] The client cert identity # @param cert [OpenSSL::X509::Certificate] The cert to save # @raise [Puppet::Error] if the client cert cannot be saved # @api private
def UNK on_lparen name on_comma on_label UNK on_rparen on_ignored_nl path on_op on_ivar on_op to_path on_lparen on_ivar on_comma name on_rparen on_nl # Load a named client cert from the configured `certdir`. # # @param name [String] The client cert identity # @param required [Boolean] If true, raise it is missing # @return (see #load_request_from_pem) # @raise (see #load_client_cert_from_pem) # @raise [Puppet::Error] if the client cert cannot be loaded # @api private
def UNK on_lparen pem on_rparen on_ignored_nl on_const on_op on_const on_op on_const on_period new on_lparen pem on_rparen on_nl end on_nl on_ignored_nl # Load a PEM encoded certificate. # # @param pem [String] PEM encoded cert # @return [OpenSSL::X509::Certificate] the certificate # @raise [OpenSSL::X509::CertificateError] The `pem` text does not contain a valid cert # @api private
def UNK on_lparen name on_comma UNK on_rparen on_ignored_nl UNK on_op on_lbrace on_rbrace on_nl on_ignored_nl if on_const on_lbracket on_symbeg UNK on_rbracket # Create a certificate signing request (CSR). # # @param name [String] the request identity # @param private_key [OpenSSL::PKey::RSA] private key # @return [Puppet::X509::Request] The request #
def UNK on_lparen name on_comma UNK on_rparen on_ignored_nl path on_op to_path on_lparen on_ivar on_comma name on_rparen on_nl UNK on_lparen UNK # Save a certificate signing request (CSR) to the configured `requestdir`. # # @param name [String] the request identity # @param csr [OpenSSL::X509::Request] the request # @raise [Puppet::Error] if the cert request cannot be saved # @api private
def UNK on_lparen name on_rparen on_ignored_nl path on_op to_path on_lparen on_ivar on_comma name on_rparen on_nl pem on_op UNK on_lparen path # Load a named certificate signing request (CSR) from the configured `requestdir`. # # @param name [String] The request identity # @return (see #load_request_from_pem) # @raise (see #load_request_from_pem) # @raise [Puppet::Error] if the cert request cannot be saved # @api private
def UNK on_lparen name on_rparen on_ignored_nl path on_op to_path on_lparen on_ivar on_comma name on_rparen on_nl UNK on_lparen path on_rparen on_nl # Delete a named certificate signing request (CSR) from the configured `requestdir`. # # @param name [String] The request identity # @return [Boolean] true if the CSR was deleted
def UNK on_lparen pem on_rparen on_ignored_nl on_const on_op on_const on_op on_const on_period new on_lparen pem on_rparen on_nl end on_nl on_ignored_nl # Load a PEM encoded certificate signing request (CSR). # # @param pem [String] PEM encoded request # @return [OpenSSL::X509::Request] the request # @raise [OpenSSL::X509::RequestError] The `pem` text does not contain a valid request # @api private
