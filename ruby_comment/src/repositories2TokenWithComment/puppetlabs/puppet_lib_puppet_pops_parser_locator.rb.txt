class on_const on_nl def UNK on_period UNK on_lparen string on_comma file on_comma UNK on_op nil on_comma UNK on_op UNK on_rparen # Helper class that keeps track of where line breaks are located and can answer questions about positions. #
def UNK on_period UNK on_lparen string on_comma file on_comma UNK on_op nil on_comma UNK on_op UNK on_rparen on_ignored_nl if UNK # Creates, or recreates a Locator. A Locator is created if index is not given (a scan is then # performed of the given source string. #
def file on_nl end on_nl on_ignored_nl def string on_nl end on_nl on_ignored_nl def UNK on_nl on_tstring_beg on_tstring_content UNK file UNK # Returns the file name associated with the string content
def string on_nl end on_nl on_ignored_nl def UNK on_nl on_tstring_beg on_tstring_content UNK file UNK on_tstring_end on_nl end on_nl on_ignored_nl def # Returns the string content
def UNK on_lparen offset on_rparen on_ignored_nl end on_nl on_ignored_nl def line_for_offset on_lparen offset on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK # Returns the position on line (first position on a line is 1)
def line_for_offset on_lparen offset on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK on_lparen offset on_rparen on_ignored_nl end on_nl on_ignored_nl def char_offset # Returns the line number (first line is 1) for the given offset
def UNK on_lparen offset on_rparen on_ignored_nl end on_nl on_ignored_nl def char_offset on_lparen UNK on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK # Returns the offset on line (first offset on a line is 0). #
def char_offset on_lparen UNK on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK on_lparen offset on_comma end_offset on_rparen on_ignored_nl end on_nl on_ignored_nl # Returns the character offset for a given reported offset
def UNK on_lparen offset on_comma end_offset on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK on_lparen offset on_comma length on_rparen on_ignored_nl end # Returns the length measured in number of characters from the given start and end byte offset
def UNK on_lparen offset on_comma length on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK on_lparen ast on_rparen on_ignored_nl first on_op ast # Extracts the text from offset with given length (measured in what the locator uses for offset) # @returns String - the extracted text
def line_index on_lparen on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK on_period UNK on_lparen string on_rparen on_ignored_nl UNK on_op on_const on_period # Returns the line index - an array of line offsets for the start position of each line, starting at 0 for # the first line. #
def UNK on_period UNK on_lparen string on_rparen on_ignored_nl UNK on_op on_const on_period new on_lparen string on_rparen on_nl UNK on_op on_lbracket # Common byte based impl that works for all rubies (stringscanner is byte based
UNK UNK on_period UNK on_lparen UNK on_tstring_content UNK on_rparen on_nl UNK on_op UNK on_period UNK on_nl end on_nl UNK on_period # first line starts at 0
def UNK on_lparen ast on_rparen on_ignored_nl f on_op file on_nl if f on_period UNK on_op f on_period UNK on_nl f # Produces an URI with path?line=n&pos=n. If origin is unknown the URI is string:?line=n&pos=n
def UNK on_lparen string on_comma file on_comma line_index on_op nil on_rparen on_ignored_nl on_ivar on_op string on_period UNK on_nl on_ivar on_op # Create a locator based on a content string, and a boolean indicating if ruby version support multi-byte strings # or not. #
def UNK on_lparen offset on_rparen on_ignored_nl UNK on_lparen offset on_rparen on_op on_int on_nl end on_nl on_ignored_nl def UNK on_lparen UNK # Returns the position on line (first position on a line is 1)
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl low on_op on_int on_nl UNK on_op UNK on_period length on_nl UNK on_op # Returns the index of the smallest item for which the item > the given value # This is a min binary search. Although written in Ruby it is only slightly slower than # the corresponding method in C in Ruby 2.0.0 - the main benefit to use this method over # the Ruby C version is that it returns the index (not the value) which means there is not need # to have an additional structure to get the index (or record the index in the structure). This # saves both memory and CPU. It also does not require passing a block that is called since this # method is specialized to search the line index. #
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period class on_op UNK on_period class on_op string on_op UNK on_period string on_op # Equal method needed by serializer to perform tabulation
def line_for_offset on_lparen offset on_rparen on_ignored_nl if on_ivar on_op offset on_nl return on_ivar on_nl end on_nl UNK on_op UNK on_lparen # Returns the line number (first line is 1) for the given offset
return on_ivar on_nl end on_nl UNK on_op UNK on_lparen line_index on_comma offset on_rparen on_nl if UNK on_nl on_ivar on_op offset # use cache
on_ivar on_op offset on_nl on_ivar on_op UNK on_nl return UNK on_nl end on_nl on_ivar on_op on_ivar on_op nil on_nl return # cache
on_ivar on_op on_ivar on_op nil on_nl return line_index on_period UNK on_nl end on_nl end on_nl on_ignored_nl class on_const on_op on_const # If not found it is after last # clear cache
class on_const on_op on_const on_nl attr_reader on_symbeg UNK on_nl attr_reader on_symbeg UNK on_nl attr_reader on_symbeg UNK on_nl attr_reader on_symbeg UNK # A Sublocator locates a concrete locator (subspace) in a virtual space. # The `leading_line_count` is the (virtual) number of lines preceding the first line in the concrete locator. # The `leading_offset` is the (virtual) byte offset of the first byte in the concrete locator. # The `leading_line_offset` is the (virtual) offset / margin in characters for each line. # # This illustrates characters in the sublocator (`.`) inside the subspace (`X`): # # 1:XXXXXXXX # 2:XXXX.... .. ... .. # 3:XXXX. . .... .. # 4:XXXX............ # # This sublocator would be configured with leading_line_count = 1, # leading_offset=8, and leading_line_offset=4 # # Note that leading_offset must be the same for all lines and measured in characters. # # A SubLocator is only used during parsing as the parser will translate the local offsets/lengths to # the parent locator when a sublocated expression is reduced. Do not call the methods # `char_offset` or `char_length` as those methods will raise an error. #
on_ivar on_op UNK on_period UNK on_lparen on_lbracket on_int on_rbracket on_rparen UNK on_op UNK on_comma UNK on_op UNK on_op UNK on_lbracket # Since lines can have different margin - accumulated margin per line must be computed # and since this accumulated margin adjustment is needed more than once; both for start offset, # and for end offset (to compute global length) it is computed up front here. # The accumulated_offset holds the sum of all removed margins before a position on line n (line index is 1-n, # and (unused) position 0 is always 0). # The last entry is duplicated since there will be the line "after last line" that would otherwise require # conditional logic. #
def UNK on_lparen offset on_comma length on_rparen on_ignored_nl return on_lbracket offset on_op on_ivar on_comma length on_rbracket UNK on_ivar on_nl on_ignored_nl # Returns array with transposed (local) offset and (local) length. The transposed values # take the margin into account such that it is added to the content to the right # # Using X to denote margin and where end of line is explicitly shown as \n: # ``` # XXXXabc\n # XXXXdef\n # ``` # A local offset of 0 is translated to the start of the first heredoc line, and a length of 1 is adjusted to # 5 - i.e to cover "XXXXa". A local offset of 1, with length 1 would cover "b". # A local offset of 4 and length 1 would cover "XXXXd" # # It is possible that lines have different margin and that is taken into account. #
return on_lbracket offset on_op on_ivar on_comma length on_rbracket UNK on_ivar on_nl on_ignored_nl start_line on_op line_for_offset on_lparen offset on_rparen on_nl UNK # simple case, no margin
start_line on_op line_for_offset on_lparen offset on_rparen on_nl UNK on_op line_for_offset on_lparen offset on_op length on_rparen on_nl on_ignored_nl UNK on_op offset # compute local start and end line
UNK on_op offset on_op on_int on_op on_ivar on_op offset on_op on_ivar on_op on_ivar on_lbracket start_line on_rbracket on_nl UNK on_op length # complex case when there is a margin
on_lparen UNK on_lparen offset on_rparen on_op on_int on_op UNK on_lbracket start_line on_op on_int on_rbracket on_op on_int on_rparen on_lbracket UNK on_comma # the margins between start and end (0 is line 1)
on_lbracket UNK on_comma UNK on_rbracket on_nl end on_nl on_ignored_nl def char_offset on_lparen offset on_rparen on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl # include start's margin in position 0
def char_offset on_lparen offset on_rparen on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_lparen offset on_comma end_offset # Do not call this method
def UNK on_lparen offset on_comma end_offset on_rparen on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl end on_nl on_ignored_nl class # Do not call this method
def UNK on_lparen offset on_comma length on_rparen on_ignored_nl string on_period UNK on_lparen offset on_comma length on_rparen on_nl end on_nl on_ignored_nl # Extracts the text from char offset with given byte length # @returns String - the extracted text
class on_const on_op on_const on_nl UNK on_const on_op on_const on_nl on_ignored_nl def UNK on_period UNK on_nl on_ivar on_op on_const on_op # This implementation is for Ruby19 and Ruby20. It uses byteslice to get strings from byte based offsets. # For Ruby20 this is faster than using the Stringscanner.charpos method (byteslice outperforms it, when # strings are frozen). #
def UNK on_lparen offset on_rparen on_ignored_nl UNK on_op line_index on_lbracket line_for_offset on_lparen offset on_rparen on_op on_int on_rbracket on_nl on_ivar on_period # Returns the offset on line (first offset on a line is 0). # Ruby 19 is multibyte but has no character position methods, must use byteslice
def char_offset on_lparen UNK on_rparen on_ignored_nl string on_period UNK on_lparen on_int on_comma UNK on_rparen on_period length on_nl end on_nl on_ignored_nl # Returns the character offset for a given byte offset # Ruby 19 is multibyte but has no character position methods, must use byteslice
def UNK on_lparen offset on_comma end_offset on_rparen on_ignored_nl string on_period UNK on_lparen offset on_comma end_offset on_op offset on_rparen on_period length # Returns the length measured in number of characters from the given start and end byte offset
def UNK on_lparen offset on_comma length on_rparen on_ignored_nl string on_period UNK on_lparen offset on_comma length on_rparen on_nl end on_nl end # Extracts the text from byte offset with given byte length # @returns String - the extracted text
