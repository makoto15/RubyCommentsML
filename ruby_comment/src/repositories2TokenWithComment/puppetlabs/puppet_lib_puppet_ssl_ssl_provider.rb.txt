UNK on_const on_op on_const on_op on_const on_nl def UNK on_nl store on_op UNK on_lparen on_lbracket on_rbracket on_comma on_lbracket on_rbracket on_comma # SSL Provider creates `SSLContext` objects that can be used to create # secure connections. # # @api private
def UNK on_nl store on_op UNK on_lparen on_lbracket on_rbracket on_comma on_lbracket on_rbracket on_comma UNK on_rparen on_nl on_ignored_nl on_const on_op on_const # Create an insecure `SSLContext`. Connections made from the returned context # will not authenticate the server, i.e. `VERIFY_NONE`, and are vulnerable to # MITM. Do not call this method. # # @return [Puppet::SSL::SSLContext] A context to use to create connections # @api private
def UNK on_lparen on_label on_comma on_label on_lbracket on_rbracket on_comma on_label on_const on_lbracket on_symbeg UNK on_rbracket on_rparen on_ignored_nl store on_op UNK # Create an `SSLContext` using the trusted `cacerts` and optional `crls`. # Connections made from the returned context will authenticate the server, # i.e. `VERIFY_PEER`, but will not use a client certificate. # # The `crls` parameter must contain CRLs corresponding to each CA in `cacerts` # depending on the `revocation` mode. See {#create_context}. # # @param cacerts [Array<OpenSSL::X509::Certificate>] Array of trusted CA certs # @param crls [Array<OpenSSL::X509::CRL>] Array of CRLs # @param revocation [:chain, :leaf, false] revocation mode # @return [Puppet::SSL::SSLContext] A context to use to create connections # @raise (see #create_context) # @api private
def UNK on_lparen on_label on_rparen on_ignored_nl store on_op UNK on_lparen cacerts on_comma on_lbracket on_rbracket on_comma UNK on_rparen on_nl store on_period # Create an `SSLContext` using the trusted `cacerts` and any certs in OpenSSL's # default verify path locations. When running puppet as a gem, the location is # system dependent. When running puppet from puppet-agent packages, the location # refers to the cacerts bundle in the puppet-agent package. # # Connections made from the returned context will authenticate the server, # i.e. `VERIFY_PEER`, but will not use a client certificate and will not # perform revocation checking. # # @param cacerts [Array<OpenSSL::X509::Certificate>] Array of trusted CA certs # @return [Puppet::SSL::SSLContext] A context to use to create connections # @raise (see #create_context) # @api private
def UNK on_lparen on_label on_comma on_label on_comma on_label on_comma on_label on_comma on_label on_const on_lbracket on_symbeg UNK on_rbracket on_rparen on_ignored_nl raise # Create an `SSLContext` using the trusted `cacerts`, `crls`, `private_key`, # `client_cert`, and `revocation` mode. Connections made from the returned # context will be mutually authenticated. # # The `crls` parameter must contain CRLs corresponding to each CA in `cacerts` # depending on the `revocation` mode: # # * `:chain` - `crls` must contain a CRL for every CA in `cacerts` # * `:leaf` - `crls` must contain (at least) the CRL for the leaf CA in `cacerts` # * `false` - `crls` can be empty # # The `private_key` and public key from the `client_cert` must match. # # @param cacerts [Array<OpenSSL::X509::Certificate>] Array of trusted CA certs # @param crls [Array<OpenSSL::X509::CRL>] Array of CRLs # @param private_key [OpenSSL::PKey::RSA, OpenSSL::PKey::EC] client's private key # @param client_cert [OpenSSL::X509::Certificate] client's cert whose public # key matches the `private_key` # @param revocation [:chain, :leaf, false] revocation mode # @return [Puppet::SSL::SSLContext] A context to use to create connections # @raise [Puppet::SSL::CertVerifyError] There was an issue with # one of the certs or CRLs. # @raise [Puppet::SSL::SSLError] There was an issue with the # `private_key`. # @api private
def UNK on_lparen on_label on_const on_lbracket on_symbeg UNK on_rbracket on_comma on_label on_const on_lbracket on_symbeg UNK on_rbracket on_comma on_label UNK on_rparen # Load an `SSLContext` using available certs and keys. An exception is raised # if any component is missing or is invalid, such as a mismatched client cert # and private key. Connections made from the returned context will be mutually # authenticated. # # @param certname [String] Which cert & key to load # @param revocation [:chain, :leaf, false] revocation mode # @param password [String, nil] If the private key is encrypted, decrypt # it using the password. If the key is encrypted, but a password is # not specified, then the key cannot be loaded. # @return [Puppet::SSL::SSLContext] A context to use to create connections # @raise [Puppet::SSL::CertVerifyError] There was an issue with # one of the certs or CRLs. # @raise [Puppet::Error] There was an issue with one of the required components. # @api private
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl unless UNK on_period UNK on_lparen UNK on_rparen on_nl raise on_const on_op on_const # Verify the `csr` was signed with a private key corresponding to the # `public_key`. This ensures the CSR was signed by someone in possession # of the private key, and that it hasn't been tampered with since. # # @param csr [OpenSSL::X509::Request] certificate signing request # @param public_key [OpenSSL::PKey::RSA, OpenSSL::PKey::EC] public key # @raise [Puppet::SSL:SSLError] The private_key for the given `public_key` was # not used to sign the CSR. # @api private
UNK UNK on_lparen on_const on_op on_const on_op on_const on_rparen on_nl on_const on_op on_const on_op on_const on_nl UNK on_ignored_nl UNK on_nl # checking the signature of the self-signed cert doesn't add any security, # but it's a sanity check to make sure the cert isn't corrupt. This option # is only available in openssl 1.1+
on_const on_op on_const on_op on_const on_op on_const on_op on_const on_op on_const on_nl end on_nl end on_nl on_ignored_nl def UNK on_lparen # :chain is the default
on_ignored_nl store_context on_op on_const on_op on_const on_op on_const on_period new on_lparen store on_comma cert on_comma on_lbracket on_rbracket on_rparen on_nl unless # StoreContext#initialize accepts a chain argument, but it's set to [] because # puppet requires any intermediate CA certs needed to complete the client's # chain to be in the CA bundle that we downloaded from the server, and # they've already been added to the store. See PUP-9500.
UNK store_context on_period UNK on_op on_const on_op on_const on_op on_const on_nl on_const on_period UNK _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen # If the client cert's intermediate CA is not in the CA bundle, then warn, # but don't error, because SSL allows the client to send an incomplete # chain, and have the server resolve it.
store_context on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen store_context on_comma current_cert on_rparen on_ignored_nl UNK on_op on_ignored_nl UNK store_context # resolved chain from leaf to root
UNK on_op on_const on_op on_const on_op on_const on_period UNK on_lparen store_context on_period UNK on_rparen on_nl _ on_lparen on_tstring_beg on_tstring_content on_tstring_end # error_string is labeled ASCII-8BIT, but is encoded based on Encoding.default_external
