UNK on_const on_op on_const on_op on_const on_op on_const on_op on_const on_op on_const on_op on_const on_op on_const on_nl on_ignored_nl UNK UNK # =DependencyLoader # This loader provides visibility into a set of other loaders. It is used as a child of a ModuleLoader (or other # loader) to make its direct dependencies visible for loading from contexts that have access to this dependency loader. # Access is typically given to logic that resides inside of the module, but not to those that just depend on the module. # # It is instantiated with a name, and with a set of dependency_loaders. # # @api private #
UNK UNK index on_nl on_ignored_nl def UNK on_lparen UNK on_comma UNK on_comma UNK on_rparen on_ignored_nl UNK UNK on_comma UNK on_nl # An index of module_name to module loader used to speed up lookup of qualified names
def UNK on_lparen UNK on_comma UNK on_comma UNK on_rparen on_ignored_nl UNK UNK on_comma UNK on_nl on_ivar on_op UNK on_nl end # Creates a DependencyLoader for one parent loader # # @param parent_loader [Puppet::Pops::Loader] typically a module loader for the root # @param name [String] the name of the dependency-loader (used for debugging and tracing only) # @param dependency_loaders [Array<Puppet::Pops::Loader>] array of loaders for modules this module depends on #
def UNK on_lparen typed_name on_rparen on_ignored_nl if typed_name on_period UNK on_nl l on_op index on_lparen on_rparen on_lbracket typed_name on_period UNK # Finds name in a loader this loader depends on / can see #
nil on_nl end on_nl UNK on_ignored_nl UNK on_op on_ivar on_period UNK on_lparen nil on_rparen UNK on_op previous on_comma loader on_op # no module entered as dependency with name matching first segment of wanted name
UNK on_op on_ivar on_period UNK on_lparen nil on_rparen UNK on_op previous on_comma loader on_op on_ignored_nl UNK previous if on_op previous # a non name-spaced name, have to search since it can be anywhere. # (Note: superclass caches the result in this loader as it would have to repeat this search for every # lookup otherwise).
def UNK on_lparen typed_name on_comma UNK on_op UNK on_rparen on_ignored_nl UNK on_op on_lparen UNK on_op UNK on_lparen typed_name on_comma UNK # @api public #
nil on_nl end on_nl UNK on_ignored_nl on_ivar on_period UNK on_lparen nil on_rparen UNK on_op previous on_comma loader on_op on_ignored_nl UNK # no module entered as dependency with name matching first segment of wanted name
on_ivar on_period UNK on_lparen nil on_rparen UNK on_op previous on_comma loader on_op on_ignored_nl UNK previous if on_op previous on_period UNK # a non name-spaced name, have to search since it can be anywhere. # (Note: superclass caches the result in this loader as it would have to repeat this search for every # lookup otherwise).
