class on_const on_op on_const on_nl end on_nl on_ignored_nl class on_const on_op on_const on_op on_const on_nl on_ignored_nl on_const on_op on_symbeg UNK # Just define it, so this class has fewer load dependencies.
class on_const on_op on_const on_op on_const on_nl on_ignored_nl on_const on_op on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg new on_nl on_ignored_nl def # Puppet::Node::Environment acts as a container for all configuration # that is expected to vary between environments. # # ## The root environment # # In addition to normal environments that are defined by the user,there is a # special 'root' environment. It is defined as an instance variable on the # Puppet::Node::Environment metaclass. The environment name is `*root*` and can # be accessed by looking up the `:root_environment` using {Puppet.lookup}. # # The primary purpose of the root environment is to contain parser functions # that are not bound to a specific environment. The main case for this is for # logging functions. Logging functions are attached to the 'root' environment # when {Puppet::Parser::Functions.reset} is called.
UNK on_symbeg new on_nl on_ignored_nl def self on_period UNK on_lparen name on_comma modulepath on_comma manifest on_op on_const on_comma config_version on_op # The create() factory method should be used instead.
def self on_period UNK on_lparen name on_comma modulepath on_comma manifest on_op on_const on_comma config_version on_op nil on_rparen on_ignored_nl new on_lparen # Create a new environment with the given name # # @param name [Symbol] the name of the environment # @param modulepath [Array<String>] the list of paths from which to load modules # @param manifest [String] the path to the manifest for the environment or # the constant Puppet::Node::Environment::NO_MANIFEST if there is none. # @param config_version [String] path to a script whose output will be added # to report logs (optional) # @return [Puppet::Node::Environment] # # @api public
class on_const on_op on_const on_op on_const on_op on_const UNK end on_nl on_ignored_nl def self on_period UNK on_lparen name on_rparen on_ignored_nl # A remote subclass to make it easier to trace instances when debugging. # @api private
def self on_period UNK on_lparen name on_rparen on_ignored_nl on_const on_period UNK on_lparen name on_comma on_lbracket on_rbracket on_comma on_const on_rparen on_nl # A "reference" to a remote environment. The created environment instance # isn't expected to exist on the local system, but is instead a reference to # environment information on a remote system. For instance when a catalog is # being applied, this will be used on the agent. # # @note This does not provide access to the information of the remote # environment's modules, manifest, or anything else. It is simply a value # object to pass around and use as an environment. # # @param name [Symbol] The name of the remote environment #
def UNK on_lparen name on_comma modulepath on_comma manifest on_comma config_version on_rparen on_ignored_nl on_ivar on_op on_const on_op on_const on_op on_const on_period # Instantiate a new environment # # @note {Puppet::Node::Environment.new} is private for historical reasons, as # previously it had been overridden to return memoized objects and was # replaced with {Puppet::Node::Environment.create}, so this will not be # invoked with the normal Ruby initialization semantics. # # @param name [Symbol] The environment name
def UNK on_lparen UNK on_rparen on_ignored_nl UNK self on_period class on_period UNK on_lparen name on_comma on_ignored_nl UNK on_lbracket on_symbeg modulepath # Creates a new Puppet::Node::Environment instance, overriding any of the passed # parameters. # # @param env_params [Hash<{Symbol => String,Array<String>}>] new environment # parameters (:modulepath, :manifest, :config_version) # @return [Puppet::Node::Environment]
def UNK on_lparen settings on_rparen on_ignored_nl overrides on_op on_lbrace on_rbrace on_nl on_ignored_nl if settings on_period UNK on_lparen on_symbeg modulepath on_rparen # Creates a new Puppet::Node::Environment instance, overriding :manifest, # :modulepath, or :config_version from the passed settings if they were # originally set from the commandline, or returns self if there is nothing to # override. # # @param settings [Puppet::Settings] an initialized puppet settings instance # @return [Puppet::Node::Environment] new overridden environment or self if # there are no commandline changes from settings.
def self on_period UNK on_lparen name on_rparen on_ignored_nl on_op on_op name on_period UNK on_lparen UNK on_tstring_content UNK on_rparen on_nl end # @param [String] name Environment name to check for valid syntax. # @return [Boolean] true if name is valid # @api public
UNK on_symbeg name on_nl on_ignored_nl def modulepath on_nl on_ivar on_period UNK do on_op UNK on_op on_ignored_nl on_const on_op on_const on_period # @!attribute [r] name # @api public # @return [Symbol] the human readable environment name that serves as the # environment identifier
def modulepath on_nl on_ivar on_period UNK do on_op UNK on_op on_ignored_nl on_const on_op on_const on_period UNK on_lparen UNK on_rparen on_nl # @api public # @return [Array<String>] All directories present on disk in the modulepath
def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl UNK on_symbeg manifest on_nl on_ignored_nl UNK on_symbeg config_version on_nl on_ignored_nl UNK on_symbeg # @api public # @return [Array<String>] All directories in the modulepath (even if they are not present on disk)
UNK on_symbeg manifest on_nl on_ignored_nl UNK on_symbeg config_version on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl # @!attribute [r] manifest # @api public # @return [String] path to the manifest file or directory.
UNK on_symbeg config_version on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_nl UNK UNK # @!attribute [r] config_version # @api public # @return [String] path to a script whose output will be added to report logs # (optional)
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_nl UNK UNK if on_op on_const on_lbracket on_symbeg # Cached loaders - management of value handled by Puppet::Pops::Loaders # @api private
UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_nl UNK UNK if on_op on_const on_lbracket on_symbeg UNK on_rbracket on_nl UNK on_op # Lock for compilation that needs exclusive access to the environment # @api private
def UNK on_nl UNK UNK if on_op on_const on_lbracket on_symbeg UNK on_rbracket on_nl UNK on_op UNK on_period UNK on_lparen on_symbeg # Checks to make sure that this environment did not have a manifest set in # its original environment.conf if Puppet is configured with # +disable_per_environment_manifest+ set true. If it did, the environment's # modules may not function as intended by the original authors, and we may # seek to halt a puppet compilation for a node in this environment. # # The only exception to this would be if the environment.conf manifest is an exact, # uninterpolated match for the current +default_manifest+ setting. # # @return [Boolean] true if using directory environments, and # Puppet[:disable_per_environment_manifest] is true, and this environment's # original environment.conf had a manifest setting that is not the # Puppet[:default_manifest]. # @api private
def UNK on_nl if on_ivar on_period nil? on_nl environment_conf on_op on_const on_period UNK on_lparen on_symbeg UNK on_rparen on_period UNK on_lparen # @api private
def UNK on_nl on_const on_period UNK on_lparen on_symbeg UNK on_rparen on_period UNK on_lparen name on_rparen on_nl end on_nl on_ignored_nl def # Return the environment configuration # @return [Puppet::Settings::EnvironmentConf] The configuration # # @api private
def UNK on_nl UNK on_op on_lbracket on_rbracket on_nl if UNK on_nl UNK on_op UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op # Checks the environment and settings for any conflicts # @return [Array<String>] an array of validation errors # @api public
def UNK on_nl if on_ivar on_period nil? on_nl environment_conf on_op on_const on_period UNK on_lparen on_symbeg UNK on_rparen on_period UNK on_lparen # Checks if this environment permits use of rich data types in the catalog # @return [Boolean] `true` if rich data is permitted. # @api private
def on_op on_lparen UNK on_rparen on_ignored_nl on_const on_period settings on_period UNK on_lparen UNK on_comma self on_period name on_rparen on_nl end # Return an environment-specific Puppet setting. # # @api public # # @param param [String, Symbol] The environment setting to look up # @return [Object] The resolved setting value
def UNK on_nl on_ivar on_period UNK do on_ignored_nl if on_ivar on_period nil? on_nl on_ivar on_op on_const on_op on_const on_op on_const # @api public # @return [Puppet::Resource::TypeCollection] The current global TypeCollection
def UNK on_lparen on_op UNK on_rparen on_ignored_nl UNK on_period UNK on_lparen on_op on_symbeg UNK on_rparen on_period each do on_op UNK # Yields each modules' plugin directory if the plugin directory (modulename/lib) # is present on the filesystem. # # @yield [String] Yields the plugin directory from each module to the block. # @api public
def UNK on_lparen name on_rparen on_ignored_nl UNK on_period UNK on_lbrace on_op mod on_op mod on_period name on_op name on_rbrace on_nl # Locate a module instance by the module name alone. # # @api public # # @param name [String] The module name # @return [Puppet::Module, nil] The module if found, else nil
def UNK on_lparen forge_name on_rparen on_ignored_nl UNK on_comma UNK on_op forge_name on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl UNK # Locate a module instance by the full forge name (EG authorname/module) # # @api public # # @param forge_name [String] The module name # @return [Puppet::Module, nil] The module if found, else nil
def UNK on_nl if on_ivar on_period nil? on_nl UNK on_op on_lbracket on_rbracket on_nl UNK on_op on_const on_period UNK on_lparen on_symbeg # Return all modules for this environment in the order they appear in the # modulepath. # @note If multiple modules with the same name are present they will # both be added, but methods like {#module} and {#module_by_forge_name} # will return the first matching entry in this list. # @note This value is cached so that the filesystem doesn't have to be # re-enumerated every time this method is invoked, since that # enumeration could be a costly operation and this method is called # frequently. The cache expiry is determined by `Puppet[:filetimeout]`. # @api public # @return [Array<Puppet::Module>] All modules for this environment
def UNK on_lparen path on_comma name on_rparen on_ignored_nl if name on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_period UNK on_lparen on_tstring_beg # Generate a warning if the given directory in a module path entry is named `lib`. # # @api private # # @param path [String] The module directory containing the given directory # @param name [String] The directory name
def UNK on_nl UNK on_op on_lbrace on_rbrace on_nl modulepath on_period each do on_op path on_op on_ignored_nl if on_const on_op on_const # Modules broken out by directory in the modulepath # # @note This method _changes_ the current working directory while enumerating # the modules. This seems rather dangerous. # # @api public # # @return [Hash<String, Array<Puppet::Module>>] A hash whose keys are file # paths, and whose values is an array of Puppet Modules for that path
def UNK on_nl deps on_op on_lbrace on_rbrace on_nl on_ignored_nl UNK on_period each do on_op mod on_op on_ignored_nl UNK UNK mod # All module requirements for all modules in the environment modulepath # # @api public # # @comment This has nothing to do with an environment. It seems like it was # stuffed into the first convenient class that vaguely involved modules. # # @example # environment.module_requirements # # => { # # 'username/amodule' => [ # # { # # 'name' => 'username/moduledep', # # 'version' => '1.2.3', # # 'version_requirement' => '>= 1.0.0', # # }, # # { # # 'name' => 'username/anotherdep', # # 'version' => '4.5.6', # # 'version_requirement' => '>= 3.0.0', # # } # # ] # # } # # # # @return [Hash<String, Array<Hash<String, String>>>] See the method example # for an explanation of the return value.
def UNK on_nl UNK UNK if on_const on_lbracket on_symbeg UNK on_rbracket on_nl on_ignored_nl if on_ivar on_period nil? on_nl on_ivar on_op # Loads module translations for the current environment once for # the lifetime of the environment. Execute a block in the context # of that translation domain.
on_const on_op on_const on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK do on_ignored_nl if on_lparen on_const # Is a noop if disable_i18n is true
def UNK on_nl on_ivar on_period UNK do on_ignored_nl if on_lparen on_const on_lbracket on_symbeg UNK on_rbracket on_op on_ivar on_op on_ivar on_period # Checks if a reparse is required (cache of files is stale). #
def UNK on_nl UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl name on_period UNK on_nl end on_nl on_ignored_nl # @return [String] The YAML interpretation of the object # Return the name of the environment as a string interpretation of the object
def UNK on_nl name on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_tstring_beg on_tstring_content on_embexpr_beg self on_period class on_embexpr_end # @return [String] The stringified value of the `name` instance variable # @api public
def UNK on_nl on_tstring_beg on_tstring_content on_embexpr_beg self on_period class on_embexpr_end on_tstring_content on_embexpr_beg self on_period UNK on_embexpr_end on_tstring_content on_embexpr_beg name on_embexpr_end # @api public
def UNK on_nl UNK on_period UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period # @return [Symbol] The `name` value, cast to a string, then cast to a symbol. # # @api public # # @note the `name` instance variable is a Symbol, but this casts the value # to a String and then converts it back into a Symbol which will needlessly # create an object that needs to be garbage collected
def self on_period UNK on_lparen on_rparen on_ignored_nl if on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl UNK # not private so it can be called in tests
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK do on_op UNK on_op on_ignored_nl on_const on_op on_const on_period # not private so it can be called in initialize
def UNK on_nl parser on_op on_const on_op on_const on_op on_const on_period parser on_nl on_ivar on_op on_const on_lbracket on_symbeg UNK on_rbracket # Reparse the manifests for the given environment # # There are two sources that can be used for the initial parse: # # 1. The value of `Puppet[:code]`: Puppet can take a string from # its settings and parse that as a manifest. This is used by various # Puppet applications to read in a manifest and pass it to the # environment as a side effect. This is attempted first. # 2. The contents of this environment's +manifest+ attribute: Puppet will # try to load the environment manifest. # # @return [Puppet::Parser::AST::Hostclass] The AST hostclass object # representing the 'main' hostclass
if file on_op on_const on_nl UNK on_nl UNK on_const on_period UNK on_lparen file on_rparen on_nl UNK on_op on_const on_op on_const # if the manifest file is a reference to a directory, parse and combine # all .pp files in that directory
on_const on_op on_const on_op on_const on_op on_const on_period new on_lparen on_tstring_beg on_tstring_end on_comma on_symbeg UNK on_op on_const on_op on_const on_op # Use a parser type specific merger to concatenate the results
def UNK on_nl UNK on_const on_op on_const on_op on_const on_op on_const on_period new on_lparen on_tstring_beg on_tstring_end on_rparen on_nl end on_nl # Return an empty top-level hostclass to indicate that no file was loaded # # @return [Puppet::Parser::AST::Hostclass]
class on_const on_op on_const on_op on_const on_op on_const UNK end on_nl on_ignored_nl on_const on_op on_const on_period UNK on_lparen on_symbeg UNK # A None subclass to make it easier to trace the NONE environment when debugging. # @api private
on_const on_op on_const on_period UNK on_lparen on_symbeg UNK on_comma on_lbracket on_rbracket on_rparen on_nl end on_nl EMP EMP EMP EMP EMP # A special "null" environment # # This environment should be used when there is no specific environment in # effect.
