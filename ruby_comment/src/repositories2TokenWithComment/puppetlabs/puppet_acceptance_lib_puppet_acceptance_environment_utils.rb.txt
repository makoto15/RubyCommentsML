def generate_environment on_lparen options on_rparen on_ignored_nl modulepath on_op options on_lbracket on_symbeg modulepath on_rbracket on_nl manifestpath on_op options on_lbracket on_symbeg manifestpath # Generate puppet manifest for the creation of an environment with # the given modulepath and manifest and env_name. The created environment # will have on testing_mod module, and manifest site.pp which includes it. # # @param options [Hash<Sym,String>] # @option options [String] :modulepath Modules directory # @option options [String] :manifest Manifest directory # @option options [String] :env_name Environment name # @return [String] Puppet manifest to create the environment files
def UNK on_lparen module_name on_comma env_name on_comma modulepath on_rparen on_ignored_nl UNK on_nl on_tstring_content on_embexpr_beg modulepath on_embexpr_end on_tstring_content on_embexpr_beg modulepath on_embexpr_end # Generate one module's manifest code.
def UNK on_lparen testdir on_rparen on_ignored_nl UNK on_nl on_tstring_content on_embexpr_beg master on_period puppet on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_embexpr_end on_tstring_content # Default, legacy, dynamic and directory environments # using generate_manifest(), all rooted in testdir. # # @param [String] testdir path to the temp directory which will be the confdir all # the environments live in # @return [String] Puppet manifest to generate all of the environment files.
def UNK on_lparen environment on_comma UNK on_comma UNK on_comma UNK on_comma UNK on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl UNK # Stand up a puppet master on the master node with the given master_opts # using the passed envdir as the source of the puppet environment files, # and passed confdir as the directory to use for the temporary # puppet.conf. It then runs through a series of environment tests for the # passed environment and returns a hashed structure of the results. # # @return [Hash<Beaker::Host,Hash<Sym,Beaker::Result>>] Hash of # Beaker::Hosts for each agent run keyed to a hash of Beaker::Result # objects keyed by each subtest that was performed.
on_ignored_nl UNK on_op on_lbrace on_rbrace on_nl UNK on_lparen master on_comma UNK on_lparen master on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma UNK on_tstring_beg # shallow clone
args on_op on_tstring_beg on_tstring_content on_tstring_end if UNK on_op agent on_op master on_nl on on_lparen agent on_comma puppet on_lparen on_tstring_beg on_tstring_content # Test agents configured to use directory environments (affects environment # loading on the agent, especially with regards to requests/node environment)
step on_tstring_beg on_tstring_content on_tstring_end on_nl on on_lparen master on_comma puppet on_lparen on_op on_lparen on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content # Be aware that Puppet Module Tool will create the module directory path if it # does not exist. So these tests should be run last...
def UNK on_lparen UNK on_comma expectations on_rparen on_ignored_nl failed on_op on_lbracket on_rbracket on_nl on_ignored_nl UNK on_period each do on_op agent # For each Beaker::Host in the results Hash, generates a chart, comparing # the expected exit code and regexp matches from expectations to the # Beaker::Result.output for a particular command that was executed in the # environment. Outputs either 'ok' or text highlighting the errors, and # returns false if any errors were found. # # @param [Hash<Beaker::Host,Hash<Sym,Beaker::Result>>] results # @param [Hash<Sym,Hash{Sym => Integer,Array<Regexp>}>] expectations # @return [Array] Returns an empty array of there were no failures, or an # Array of failed cases.
def UNK on_nl on_lbracket on_op on_lparen on_tstring_beg on_tstring_content on_tstring_end on_op on_tstring_beg on_tstring_content on_tstring_end on_rparen on_comma on_op on_lparen on_tstring_beg on_tstring_content on_tstring_end # generate a random string of 6 letters and numbers. NOT secure
def UNK on_nl UNK on_op master on_period puppet on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl end on_nl UNK on_symbeg UNK on_nl # if the first test to call this has changed the environmentpath, this will cause trouble # maybe not the best idea to memoize this?
def UNK on_lparen host on_comma environment on_rparen on_ignored_nl UNK on_op on_const on_period UNK on_nl UNK on_op on_int UNK UNK on_op # create a tmpdir to hold a temporary environment bound by puppet environment naming restrictions # symbolically link environment into environmentpath # we can't use the temp_file utils in our own lib because host.tmpdir violates puppet's naming requirements # in rare cases we want to do this on agents when testing things that use the default manifest
UNK on_op on_const on_period UNK on_nl UNK on_op on_int UNK UNK on_op on_int on_nl UNK UNK on_period UNK on_lparen tmp_environment # add the tmp_environment to a set to ensure no collisions
UNK do on_ignored_nl on host on_comma on_tstring_beg on_tstring_content on_embexpr_beg on_const on_period join on_lparen UNK on_comma tmp_environment on_rparen on_embexpr_end on_tstring_end on_nl # register teardown to remove the link below
on host on_comma on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_content on_embexpr_beg on_const on_period join on_lparen UNK on_comma # WARNING: this won't work with filesync (symlinked environments are not supported)
def UNK on_lparen host on_comma tmp_environment on_comma UNK on_rparen on_ignored_nl UNK on_op on_const on_period join on_lparen on_tstring_beg on_tstring_end on_comma on_tstring_beg # create sitepp in a tmp_environment as created by mk_tmp_environment_with_teardown
