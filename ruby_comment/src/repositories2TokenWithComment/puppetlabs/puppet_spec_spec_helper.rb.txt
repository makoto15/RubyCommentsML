on_ignored_nl dir on_op on_const on_period UNK on_lparen on_const on_period UNK on_lparen UNK on_rparen on_rparen on_nl UNK on_period UNK on_const on_period # NOTE: a lot of the stuff in this file is duplicated in the "puppet_spec_helper" in the project # puppetlabs_spec_helper. We should probably eat our own dog food and get rid of most of this from here, # and have the puppet core itself use puppetlabs_spec_helper
on_const on_period UNK on_nl on_ignored_nl UNK on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_const on_nl end on_nl on_ignored_nl require on_tstring_beg # Don't want puppet getting the command line arguments for rake
require on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl # Stub out gettext's `_` and `n_()` methods, which attempt to load translations. # Several of our mocks (mostly around file system interaction) are broken by # FastGettext's implementation of these methods.
UNK on_const on_nl on_const on_op on_const on_period join on_lparen on_const on_period UNK on_lparen on_const on_period UNK on_lparen UNK on_rparen on_rparen # So everyone else doesn't have to include this base constant.
end on_nl on_ignored_nl on_const on_period UNK on_nl on_ignored_nl on_const on_period UNK do on_op config on_op on_ignored_nl UNK on_const on_op on_const # Uncomment next line to debug vcr # vcr.debug_logger = $stderr
on_const on_period UNK on_nl on_ignored_nl on_const on_period UNK do on_op config on_op on_ignored_nl UNK on_const on_op on_const on_nl on_ignored_nl UNK # Disable VCR by default
UNK on_op UNK on_symbeg UNK on_op UNK UNK on_nl UNK on_lbracket on_symbeg UNK on_rbracket on_op UNK UNK on_const on_lbracket on_tstring_beg # Examples or groups can selectively tag themselves as broken. # For example; # # rbv = "#{RUBY_VERSION}-p#{RbConfig::CONFIG['PATCHLEVEL']}" # describe "mostly working", :broken => false unless rbv == "1.9.3-p327" do # it "parses a valid IP" do # IPAddr.new("::2:3:4:5:6:7:8") # end # end
UNK on_period UNK on_op UNK on_nl end on_nl on_ignored_nl UNK on_op on_const on_op on_const on_period UNK on_lparen on_const on_period UNK # We really should have this on, but it breaks a _lot_ of tests. We'll # need to go through and fix those tests first before it can be enabled # for real.
on_const on_period UNK on_nl on_ignored_nl on_ivar on_op on_lbracket on_rbracket on_nl on_const on_op on_const on_op on_const on_period UNK on_nl if on_const # Disabling garbage collection inside each test, and only running it at # the end of each block, gives us an ~ 15 percent speedup, and more on # some platforms *cough* windows *cough* that are a little slower.
on_ivar on_op on_lbracket on_rbracket on_nl on_const on_op on_const on_op on_const on_period UNK on_nl if on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket # TODO: in a more sane world, we'd move this logging redirection into our TestHelper class. # Without doing so, external projects will all have to roll their own solution for # redirecting logging, and for validating expected log messages. However, because the # current implementation of this involves creating an instance variable "@logs" on # EVERY SINGLE TEST CLASS, and because there are over 1300 tests that are written to expect # this instance variable to be available--we can't easily solve this problem right now. # # redirecting logging away from console, because otherwise the test output will be # obscured by all of the log output
on_const on_op UNK on_tstring_content UNK on_period UNK on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period UNK on_nl on_ignored_nl config on_period UNK # Facter 2 uses two versions of the GCE API, so match using regex
UNK on_lparen on_symbeg UNK on_comma on_const on_rparen on_nl UNK on_lparen on_symbeg UNK on_comma on_const on_rparen on_nl on_ignored_nl if example on_period # Ignore requests from Facter GCE fact in Travis
if example on_period UNK on_lbracket on_symbeg UNK on_rbracket on_nl on_const on_period UNK on_nl UNK on_ignored_nl example on_period UNK on_nl UNK # Enable VCR if the example is tagged with `:vcr` metadata.
UNK on_lparen on_const on_rparen on_period UNK UNK on_lparen on_symbeg UNK on_rparen on_period UNK on_nl on_const on_op on_const on_period UNK on_nl # TODO: would like to move this into puppetlabs_spec_helper, but there are namespace issues at the moment.
on_ivar on_period UNK on_nl on_const on_op on_const on_op on_const on_period UNK on_nl on_const on_op on_const on_op on_const on_period UNK on_op # TODO: this should be abstracted in the future--see comments above the '@logs' block in the # "before" code above. # # clean up after the logging changes that we made before each test.
on_const on_period UNK on_nl end on_nl on_ignored_nl config on_period UNK on_symbeg UNK do on_ignored_nl if on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end # This will perform a GC between tests, but only if actually required. We # experimented with forcing a GC run, and that was less efficient than # just letting it run all the time.
if on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen # Log the spec order to a file, but only if the LOG_SPEC_ORDER environment variable is # set. This should be enabled on Jenkins runs, as it can be used with Nick L.'s bisect # script to help identify and debug order-dependent spec failures.
on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op UNK on_nl on_const on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl if # return to original tmpdir
