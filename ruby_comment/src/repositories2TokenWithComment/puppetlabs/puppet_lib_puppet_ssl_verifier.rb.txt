UNK on_const on_op on_const on_op on_const on_nl on_ignored_nl on_const on_op UNK on_op UNK on_nl on_ignored_nl UNK UNK UNK on_nl on_ignored_nl # Verify an SSL connection. # # @api private
UNK UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl UNK # Create a verifier using an `ssl_context`. # # @param hostname [String] FQDN of the server we're attempting to connect to # @param ssl_context [Puppet::SSL::SSLContext] ssl_context containing CA certs, # CRLs, etc needed to verify the server's certificate chain
UNK UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK on_lparen UNK on_period UNK on_rparen on_op on_ignored_nl UNK on_period UNK on_period # Return true if `self` is reusable with `verifier` meaning they # are using the same `ssl_context`, so there's no loss of security # when using a cached connection. # # @param verifier [Puppet::SSL::Verifier] the verifier to compare against # @return [Boolean] return true if a cached connection can be used, false otherwise
UNK UNK on_lparen http on_rparen on_ignored_nl http on_period UNK on_op on_ivar UNK UNK UNK UNK on_nl http on_period UNK on_op # Configure the `http` connection based on the current `ssl_context`. # # @param http [Net::HTTP] connection # @api private
http on_period UNK on_op if on_op on_ivar UNK UNK UNK UNK on_nl on_const on_op on_const on_op on_const on_nl UNK on_ignored_nl # default to VERIFY_PEER
UNK UNK on_lparen http on_comma UNK on_rparen on_ignored_nl UNK on_ivar if on_ivar on_nl on_ignored_nl peer_cert on_op http on_period peer_cert on_nl # This method is called if `Net::HTTP#start` raises an exception, which # could be a result of an openssl error during cert verification, due # to ruby's `Socket#post_connection_check`, or general SSL connection # error. # # @param http [Net::HTTP] connection # @param error [OpenSSL::SSL::SSLError] connection error # @raise [Puppet::SSL::CertVerifyError] SSL connection failed due to a # verification error with the server's certificate or chain # @raise [Puppet::Error] server hostname does not match certificate # @raise [OpenSSL::SSL::SSLError] low-level SSL connection failure # @api private
peer_cert on_op http on_period peer_cert on_nl if peer_cert on_op on_op on_const on_op on_const on_period UNK on_lparen peer_cert on_comma on_ivar on_rparen # ruby can pass SSL validation but fail post_connection_check
UNK UNK on_lparen UNK on_comma store_context on_rparen on_ignored_nl UNK UNK if UNK on_nl on_ignored_nl peer_cert on_op store_context on_period UNK on_nl # OpenSSL will call this method with the verification result for each cert in # the server's chain, working from the root CA to the server's cert. If # preverify_ok is `true`, then that cert passed verification. If it's `false` # then the current verification error is contained in `store_context.error`. # and the current cert is in `store_context.current_cert`. # # If this method returns `false`, then verification stops and ruby will raise # an `OpenSSL::SSL::Error` with "certificate verification failed". If this # method returns `true`, then verification continues. # # If this method ignores a verification error, such as the cert's CRL will be # valid within the next 5 minutes, then this method may be called with a # different verification error for the same cert. # # WARNING: If `store_context.error` returns `OpenSSL::X509::V_OK`, don't # assume verification passed. Ruby 2.4+ implements certificate hostname # checking by default, and if the cert doesn't match the hostname, then the # error will be V_OK. Always use `preverify_ok` to determine if verification # succeeded or not. # # @param preverify_ok [Boolean] if `true` the current certificate in `store_context` # was verified. Otherwise, check for the current error in `store_context.error` # @param store_context [OpenSSL::X509::StoreContext] The context holding the # verification result for one certificate # @return [Boolean] If `true`, continue verifying the chain, even if that means # ignoring the current verification error. If `false`, abort the connection. # # @api private
UNK on_op store_context on_period UNK on_period UNK on_nl on_ignored_nl if peer_cert on_op UNK on_op peer_cert on_period UNK on_op UNK on_period # chain is from leaf to root, opposite of the order that `call` is invoked
if peer_cert on_op UNK on_op peer_cert on_period UNK on_op UNK on_period UNK on_op on_op on_const on_op on_const on_period UNK on_lparen # ruby 2.4 doesn't compare certs based on value, so force to DER byte array
on_ivar on_op on_const on_op on_const on_op on_const on_period UNK on_lparen on_ignored_nl UNK on_lparen UNK UNK UNK on_rparen on_op on_ignored_nl UNK # TRANSLATORS: `error` is an untranslated message from openssl describing why a certificate in the server's chain is invalid, and `subject` is the identity/name of the failed certificate
