on_const on_op on_const on_period UNK on_lparen UNK UNK on_comma on_const on_op on_const on_op on_const on_rparen UNK on_ignored_nl UNK UNK UNK # Makes one or more classes be contained inside the current class. # If any of these classes are undeclared, they will be declared as if # there were declared with the `include` function. # Accepts a class name, an array of class names, or a comma-separated # list of class names. # # A contained class will not be applied before the containing class is # begun, and will be finished before the containing class is finished. # # You must use the class's full name; # relative names are not allowed. In addition to names in string form, # you may also directly use `Class` and `Resource` `Type`-values that are produced by # evaluating resource and relationship expressions. # # The function returns an array of references to the classes that were contained thus # allowing the function call to `contain` to directly continue. # # - Since 4.0.0 support for `Class` and `Resource` `Type`-values, absolute names # - Since 4.7.0 a value of type `Array[Type[Class[n]]]` is returned with all the contained classes #
UNK UNK UNK UNK on_comma UNK UNK on_nl end on_nl on_ignored_nl UNK UNK on_lparen scope on_comma on_op UNK on_rparen on_ignored_nl # The function supports what the type system sees as Ruby runtime objects, and # they cannot be parameterized to find what is actually valid instances. # The validation is instead done in the function body itself via a call to # `transform_and_assert_classnames` on the calling scope.
UNK on_op scope on_period UNK on_lparen UNK on_period UNK on_rparen on_nl on_ignored_nl UNK on_op UNK on_period UNK UNK on_op UNK # Make call patterns uniform and protected against nested arrays, also make # names absolute if so desired.
on_lparen scope on_period UNK on_period UNK on_lparen UNK on_comma scope on_comma UNK on_rparen on_op UNK UNK on_rparen on_period UNK UNK # This is the same as calling the include function but faster and does not rely on the include # function.
UNK on_nl end on_nl end EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP # Result is an Array[Class, 1, n] which allows chaining other operations
