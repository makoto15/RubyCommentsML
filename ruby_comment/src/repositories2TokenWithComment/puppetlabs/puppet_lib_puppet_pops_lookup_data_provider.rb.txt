UNK on_const on_nl def UNK on_period UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_period UNK on_nl UNK on_nl # @api private
def UNK on_lparen key on_comma lookup_invocation on_comma merge on_rparen on_ignored_nl lookup_invocation on_period UNK on_lparen key on_period UNK on_rparen UNK UNK # Performs a lookup with an endless recursion check. # # @param key [LookupKey] The key to lookup # @param lookup_invocation [Invocation] The current lookup invocation # @param merge [MergeStrategy,String,Hash{String=>Object},nil] Merge strategy or hash with strategy and options #
def UNK on_lparen key on_comma lookup_invocation on_comma merge on_rparen on_ignored_nl UNK UNK UNK on_nl end on_nl on_ignored_nl def UNK on_lparen # Performs a lookup using a module default hierarchy with an endless recursion check. All providers except # the `ModuleDataProvider` will throw `:no_such_key` if this method is called. # # @param key [LookupKey] The key to lookup # @param lookup_invocation [Invocation] The current lookup invocation # @param merge [MergeStrategy,String,Hash{String=>Object},nil] Merge strategy or hash with strategy and options #
def UNK on_lparen key on_comma lookup_invocation on_comma merge on_rparen on_ignored_nl UNK on_const on_comma UNK on_tstring_content UNK on_const on_period UNK UNK # Performs a lookup with the assumption that a recursive check has been made. # # @param key [LookupKey] The key to lookup # @param lookup_invocation [Invocation] The current lookup invocation # @param merge [MergeStrategy,String,Hash{String => Object},nil] Merge strategy, merge strategy name, strategy and options hash, or nil (implies "first found") # @return [Object] the found object # @throw :no_such_key when the object is not found
def UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_const on_comma UNK on_tstring_content UNK on_const on_period UNK # @return [String,nil] the name of the module that this provider belongs to nor `nil` if it doesn't belong to a module
def UNK on_nl UNK on_const on_comma UNK on_tstring_content UNK on_const on_period UNK UNK on_tstring_content UNK on_nl end on_nl on_ignored_nl def # @return [String] the name of the this data provider
def UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_comma on_op UNK on_rparen on_ignored_nl on_const on_op on_const # @returns `true` if the value provided by this instance can always be trusted, `false` otherwise
def UNK on_lparen UNK on_comma on_op UNK on_rparen on_ignored_nl on_const on_op on_const on_period UNK on_lparen UNK on_comma on_const on_op on_const # Asserts that _data_hash_ is a hash. Will yield to obtain origin of value in case an error is produced # # @param data_hash [Hash{String=>Object}] The data hash # @return [Hash{String=>Object}] The data hash
def UNK on_lparen UNK on_comma on_op UNK on_rparen on_ignored_nl UNK UNK on_op on_const on_period UNK on_period UNK on_lparen UNK on_rparen # Asserts that _data_value_ is of valid type. Will yield to obtain origin of value in case an error is produced # # @param data_provider [DataProvider] The data provider that produced the hash # @return [Object] The data value
UNK UNK on_op on_const on_period UNK on_period UNK on_lparen UNK on_rparen on_nl UNK on_op on_const on_op on_const on_period UNK on_period # The DataProvider.value_type is self recursive so further recursive check of collections is needed here
