UNK on_const on_op on_const on_op on_const on_nl on_ignored_nl UNK on_symbeg transaction on_nl on_ignored_nl UNK on_symbeg events on_nl on_ignored_nl def UNK # This class stores, routes, and responds to events generated while evaluating # a transaction. # # @api private
UNK on_symbeg transaction on_nl on_ignored_nl UNK on_symbeg events on_nl on_ignored_nl def UNK on_lparen transaction on_rparen on_ignored_nl on_ivar on_op transaction on_nl # @!attribute [r] transaction # @return [Puppet::Transaction] The transaction associated with this event manager.
UNK on_symbeg events on_nl on_ignored_nl def UNK on_lparen transaction on_rparen on_ignored_nl on_ivar on_op transaction on_nl on_ivar on_op on_lbrace on_rbrace on_nl # @!attribute [r] events # @todo Determine if this instance variable is used for anything aside from testing. # @return [Array<Puppet::Transaction::Events>] A list of events that can be # handled by the target resource. Events that cannot be handled by the # target resource will be discarded.
def UNK on_lparen resource on_rparen on_ignored_nl restarted on_op UNK on_nl UNK on_lparen resource on_rparen UNK on_op callback on_comma events on_op # Respond to any queued events for this resource.
def UNK on_lparen resource on_comma events on_rparen on_ignored_nl on_ignored_nl events on_period UNK on_lparen on_lbrace on_rbrace on_rparen UNK on_op UNK on_comma # Queues events for other resources to respond to. All of these events have # to be from the same resource. # # @param resource [Puppet::Type] The resource generating the given events # @param events [Array<Puppet::Transaction::Event>] All events generated by this resource # @return [void]
on_ignored_nl events on_period UNK on_lparen on_lbrace on_rbrace on_rparen UNK on_op UNK on_comma event on_op on_ignored_nl UNK on_lbracket event on_period name #@events += events
events on_period UNK on_lparen on_lbrace on_rbrace on_rparen UNK on_op UNK on_comma event on_op on_ignored_nl UNK on_lbracket event on_period name on_rbracket # Do some basic normalization so we're not doing so many # graph queries for large sets of events.
event on_op UNK on_lbracket UNK on_rbracket on_nl on_ignored_nl UNK on_op on_lparen event on_period name on_op on_symbeg restarted on_rparen on_nl UNK # It doesn't matter which event we use - they all have the same source # and name here.
UNK on_op on_lparen event on_period name on_op on_symbeg restarted on_rparen on_nl UNK on_period UNK on_lparen event on_comma resource on_rparen on_period # Collect the targets of any subscriptions to those events. We pass # the parent resource in so it will override the source in the events, # since eval_generated children can't have direct relationships.
UNK on_op target on_period UNK on_lparen UNK on_rparen on_op target on_period name on_op UNK on_tstring_content UNK on_nl on_ignored_nl if UNK # The message that a resource is refreshing the completed-whit for its own class # is extremely counter-intuitive. Basically everything else is easy to understand, # if you suppress the whit-lookingness of the whit resources
def UNK on_lparen resource on_comma events on_rparen on_ignored_nl on_op on_lparen events on_period UNK on_lbrace on_op UNK on_op UNK on_period UNK # Should the callback for this resource be invoked? # @param resource [Puppet::Type] The resource to be refreshed # @param events [Array<Puppet::Transaction::Event>] A list of events # associated with this callback and resource. # @return [true, false] Whether the callback should be run.
def UNK on_lparen resource on_comma callback on_comma events on_rparen on_ignored_nl if on_op UNK on_lparen resource on_comma events on_rparen on_nl UNK # Processes callbacks for a given resource. # # @param resource [Puppet::Type] The resource receiving the callback. # @param callback [Symbol] The name of the callback method that will be invoked. # @param events [Array<Puppet::Transaction::Event>] A list of events # associated with this callback and resource. # @return [true, false] Whether the callback was successfully run.
UNK on_lparen resource on_comma on_lbracket resource on_period event on_lparen on_symbeg UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg name on_op on_symbeg # And then add an event for it.
