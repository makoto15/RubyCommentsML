UNK on_op UNK on_period UNK on_lparen on_symbeg UNK on_rparen UNK on_ignored_nl on_ignored_nl UNK on_symbeg UNK UNK on_ignored_nl UNK UNK UNK # Creates a Camel Case version of a String # # This function is compatible with the stdlib function with the same name. # # The function does the following: # * For a `String` the conversion replaces all combinations of *_<char>* with an upcased version of the # character following the _. This is done using Ruby system locale which handles some, but not all # special international up-casing rules (for example German double-s ÃŸ is upcased to "Ss"). # * For an `Iterable[Variant[String, Numeric]]` (for example an `Array`) each value is capitalized and the conversion is not recursive. # * If the value is `Numeric` it is simply returned (this is for backwards compatibility). # * An error is raised for all other data types. # * The result will not contain any underscore characters. # # Please note: This function relies directly on Ruby's String implementation and as such may not be entirely UTF8 compatible. # To ensure best compatibility please use this function with Ruby 2.4.0 or greater - https://bugs.ruby-lang.org/issues/10085. # # @example Camelcase a String # ```puppet # 'hello_friend'.camelcase() # camelcase('hello_friend') # ``` # Would both result in `"HelloFriend"` # # @example Camelcase of strings in an Array # ```puppet # ['abc_def', 'bcd_xyz'].camelcase() # camelcase(['abc_def', 'bcd_xyz']) # ``` # Would both result in `['AbcDef', 'BcdXyz']` #
UNK UNK on_lparen UNK on_rparen on_ignored_nl UNK on_nl end on_nl on_ignored_nl UNK UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK # unit function - since the old implementation skipped Numeric values
x on_period UNK on_lparen UNK on_rparen on_op UNK on_lparen x on_rparen on_op x on_nl end on_nl end on_nl EMP EMP # x can only be a String or Numeric because type constraints have been automatically applied
