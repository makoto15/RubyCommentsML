on_const on_op on_const on_period UNK on_lparen on_symbeg UNK on_rparen do on_ignored_nl dispatch on_symbeg UNK do on_ignored_nl param on_tstring_beg on_tstring_content on_tstring_end # Returns the index (or key in a hash) to a first-found value in an `Iterable` value. # # When called with a [lambda](https://puppet.com/docs/puppet/latest/lang_lambdas.html) # the lambda is called repeatedly using each value in a data structure until the lambda returns a "truthy" value which # makes the function return the index or key, or if the end of the iteration is reached, undef is returned. # # This function can be called in two different ways; with a value to be searched for, or with # a lambda that determines if an entry in the iterable matches. # # When called with a lambda the function takes two mandatory arguments, in this order: # # 1. An array, hash, string, or other iterable object that the function will iterate over. # 2. A lambda, which the function calls for each element in the first argument. It can request one (value) or two (index/key, value) parameters. # # @example Using the `index` function # # `$data.index |$parameter| { <PUPPET CODE BLOCK> }` # # or # # `index($data) |$parameter| { <PUPPET CODE BLOCK> }` # # @example Using the `index` function with an Array and a one-parameter lambda # # ```puppet # $data = ["routers", "servers", "workstations"] # notice $data.index |$value| { $value == 'servers' } # notices 1 # notice $data.index |$value| { $value == 'hosts' } # notices undef # ``` # # @example Using the `index` function with a Hash and a one-parameter lambda # # ```puppet # $data = {types => ["routers", "servers", "workstations"], colors => ['red', 'blue', 'green']} # notice $data.index |$value| { 'servers' in $value } # notices 'types' # notice $data.index |$value| { 'red' in $value } # notices 'colors' # ``` # Note that the lambda gets the value and not an array with `[key, value]` as in other # iterative functions. # # Using a lambda that accepts two values works the same way, it simply gets the index/key # as the first parameter, and the value as the second. # # @example Using the `index` function with an Array and a two-parameter lambda # # ```puppet # # Find the first even numbered index that has a non String value # $data = [key1, 1, 3, 5] # notice $data.index |$idx, $value| { $idx % 2 == 0 and $value !~ String } # notices 2 # ``` # # When called on a `String`, the lambda is given each character as a value. What is typically wanted is to # find a sequence of characters which is achieved by calling the function with a value to search for instead # of giving a lambda. # # # @example Using the `index` function with a String, search for first occurrence of a sequence of characters # # ```puppet # # Find first occurrence of 'ah' # $data = "blablahbleh" # notice $data.index('ah') # notices 5 # ``` # # @example Using the `index` function with a String, search for first occurrence of a regular expression # # ```puppet # # Find first occurrence of 'la' or 'le' # $data = "blablahbleh" # notice $data.index(/l(a|e)/ # notices 1 # ``` # # When searching in a `String` with a given value that is neither `String` nor `Regexp` the answer is always `undef`. # When searching in any other iterable, the value is matched against each value in the iteration using strict # Ruby `==` semantics. If Puppet Language semantics are wanted (where string compare is case insensitive) use a # lambda and the `==` operator in Puppet. # # @example Using the `index` function to search for a given value in an Array # # ```puppet # $data = ['routers', 'servers', 'WORKstations'] # notice $data.index('servers') # notices 1 # notice $data.index('workstations') # notices undef (not matching case) # ``` # # For an general examples that demonstrates iteration, see the Puppet # [iteration](https://puppet.com/docs/puppet/latest/lang_iteration.html) # documentation. # # @since 6.3.0 #
