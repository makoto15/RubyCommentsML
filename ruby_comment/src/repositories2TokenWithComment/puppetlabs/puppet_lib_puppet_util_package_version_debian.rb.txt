on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl on_const # Version string matching regexes
on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl on_const on_op on_const on_op on_const on_op on_const # alphanumerics and the characters . + - ~ , starts with a digit, ~ only of debian_revision is present
on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl on_const on_op on_const on_op on_const on_op on_const on_period UNK on_nl on_const on_op UNK #alphanumerics and the characters + . ~
on_ignored_nl mine_index on_op on_int on_nl yours_index on_op on_int on_nl cmp on_op on_int on_nl mine on_op on_tstring_beg on_tstring_end on_nl yours on_op # First the initial part of each string consisting entirely of non-digit characters is determined. # These two parts (one of which may be empty) are compared lexically. If a difference is found it is # returned. The lexical comparison is a comparison of ASCII values modified so that all the letters # sort earlier than all the non-letters and so that a tilde sorts before anything, even the end of a # part. For example, the following parts are in sorted order from earliest to latest: ~~, ~~a, ~, the # empty part, a. # # Then the initial part of the remainder of each string which consists entirely of digit characters # is determined. The numerical values of these two parts are compared, and any difference found is # returned as the result of the comparison. For these purposes an empty string (which can only occur # at the end of one or both version strings being compared) counts as zero. # # These two steps (comparing and removing initial non-digit strings and initial digit strings) are # repeated until a difference is found or both strings are exhausted.
UNK on_comma UNK on_op on_op UNK on_lparen mine on_period slice on_lparen mine_index on_op on_op on_int on_rparen on_rparen on_nl UNK on_op #handle ~
on_ignored_nl UNK on_comma UNK on_op on_op UNK on_lparen mine on_period slice on_lparen mine_index on_op on_op on_int on_rparen on_rparen on_nl UNK # handle letters
UNK on_comma UNK on_op on_op UNK on_lparen mine on_period slice on_lparen mine_index on_op on_op on_int on_rparen on_rparen on_nl UNK on_op # handle nonletters except tilde
UNK on_comma UNK on_op on_op UNK on_lparen mine on_period slice on_lparen mine_index on_op on_op on_int on_rparen on_rparen on_nl UNK on_op # handle digits
