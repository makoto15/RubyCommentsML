class on_const on_op on_const on_op on_const on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_const on_op on_const on_op on_const on_nl on_ignored_nl # A simple class that can function as the base class for indirected types.
def UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK on_lparen on_regexp_beg on_tstring_content # Are we an abstract terminus type, rather than an instance with an # associated indirection?
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end on_rparen on_lbrace on_op i on_op i on_period # Convert a constant to a short name.
def UNK on_lparen name on_rparen on_ignored_nl if name on_period UNK on_lparen on_const on_op on_const on_op on_const on_rparen on_nl UNK on_op # Look up the indirection if we were only provided a name.
def UNK on_lparen subclass on_rparen on_ignored_nl UNK on_op subclass on_period UNK on_nl if UNK on_op on_regexp_beg on_tstring_content on_regexp_end on_nl raise # Register our subclass with the appropriate indirection. # This follows the convention that our terminus is named after the # indirection.
name on_op UNK on_period UNK on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end on_rparen on_lbrace on_op i on_op i on_period downcase on_rbrace # Convert everything to a lower-case symbol, converting camelcase to underscore word separation.
if self on_op on_const on_op on_const on_op on_const on_nl subclass on_period UNK on_nl UNK on_nl end on_nl on_ignored_nl subclass on_period # Short-circuit the abstract types, which are those that directly subclass # the Terminus class.
subclass on_period terminus_type on_op self on_period name on_nl on_ignored_nl raise on_lparen on_tstring_beg on_tstring_content UNK UNK UNK on_tstring_end on_rparen UNK UNK # Set the terminus type to be the name of the abstract terminus type. # Yay, class/instance confusion.
raise on_lparen on_tstring_beg on_tstring_content UNK UNK UNK on_tstring_end on_rparen UNK UNK on_period UNK on_op UNK on_nl UNK on_op UNK on_period # This subclass is specifically associated with an indirection.
subclass on_period UNK on_op UNK on_period UNK on_nl on_ignored_nl on_const on_op on_const on_op on_const on_period UNK on_lparen subclass on_rparen on_nl # This will throw an exception if the indirection instance cannot be found. # Do this last, because it also registers the terminus type with the indirection, # which needs the above information.
on_const on_op on_const on_op on_const on_period UNK on_lparen subclass on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op UNK # And add this instance to the instance hash.
def UNK on_nl UNK on_op UNK on_nl end on_nl on_ignored_nl def model on_nl UNK on_period model on_nl end on_nl on_ignored_nl # Mark that this instance is abstract.
def UNK on_lparen name on_rparen on_ignored_nl name on_period UNK on_period UNK on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end on_rparen on_lbrace on_op # Convert a short name to a constant.
def UNK on_lparen UNK on_rparen on_ignored_nl UNK UNK on_period indirection_name on_nl UNK on_lparen UNK on_period indirection_name on_rparen UNK UNK on_period # Register a class, probably autoloaded.
def UNK on_lparen indirection_name on_comma terminus_type on_rparen on_ignored_nl UNK indirection_name on_nl UNK on_lparen indirection_name on_comma terminus_type on_rparen on_nl end on_nl # Return a terminus by name, using the autoloader.
def UNK on_lparen indirection_name on_rparen on_ignored_nl UNK indirection_name on_nl UNK on_lparen indirection_name on_rparen on_period UNK on_lparen on_const on_period UNK on_lparen # Return all terminus classes for a given indirection.
