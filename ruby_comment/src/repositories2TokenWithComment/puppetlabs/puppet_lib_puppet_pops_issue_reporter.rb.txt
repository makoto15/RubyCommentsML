def self on_period UNK on_lparen UNK on_comma options on_rparen on_ignored_nl UNK UNK UNK on_nl on_ignored_nl UNK on_op options on_lbracket on_symbeg # @param acceptor [Validation::Acceptor] the acceptor containing reported issues # @option options [String] :message (nil) A message text to use as prefix in # a single Error message # @option options [Boolean] :emit_warnings (false) whether warnings should be emitted # @option options [Boolean] :emit_errors (true) whether errors should be # emitted or only the given message # @option options [Exception] :exception_class (Puppet::ParseError) The exception to raise #
warnings on_op UNK on_period warnings on_nl if UNK on_op warnings on_period size on_op on_int on_nl formatter on_op on_const on_op on_const # If there are warnings output them
UNK on_lparen on_symbeg UNK on_comma formatter on_comma UNK on_rparen if UNK on_op UNK on_nl UNK on_op on_int on_nl UNK on_ignored_nl # Do *not* call Puppet.deprecation_warning it is for internal deprecation, not # deprecation of constructs in manifests! (It is not designed for that purpose even if # used throughout the code base). #
end on_nl end on_nl on_ignored_nl errors on_op UNK on_period errors on_nl if errors on_period size on_op on_int on_nl UNK UNK # but only then
errors on_op UNK on_period errors on_nl if errors on_period size on_op on_int on_nl UNK UNK on_nl UNK UNK on_period new # If there were errors, report the first found. Use a puppet style formatter.
exception on_op UNK on_lparen UNK on_comma emit_message on_comma formatter on_comma errors on_lbracket on_int on_rbracket on_rparen on_nl if errors on_lbracket on_int # raise immediately
if errors on_lbracket on_int on_rbracket on_period exception on_nl exception on_period UNK on_lparen errors on_lbracket on_int on_rbracket on_period exception on_period UNK # if an exception was given as cause, use it's backtrace instead of the one indicating "here"
