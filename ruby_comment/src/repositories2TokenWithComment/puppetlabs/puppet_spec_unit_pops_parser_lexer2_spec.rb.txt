on_symbeg on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_symbeg on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_symbeg on_const on_op on_tstring_beg # since it is first on a line it is special (LPAREN handled separately)
on_tstring_beg on_tstring_content on_tstring_end on_op on_symbeg on_const on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op on_symbeg on_const on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op # "import" => :IMPORT, # done as a function in egrammar
on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_rbracket on_period each # TODO: Complete with all edge cases
on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_rbracket on_period each # TODO: Complete with all edge cases
on_ignored_nl it on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl expect on_lparen tokens_scanned_from on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_rparen on_period to match_tokens2 on_lparen # TODO: Tricky, and heredoc not supported yet # it "should not lex regexp after heredoc" do # tokens_scanned_from("1 / /./").should match_tokens2(:NUMBER, :DIV, :REGEX) # end
expect on_lparen scanned on_lbracket on_int on_rbracket on_lbracket on_int on_rbracket on_lbracket on_symbeg value on_rbracket on_rparen on_period to UNK on_lparen UNK on_tstring_content # Note that strange formatting here is important
code on_op on_tstring_beg on_tstring_content on_tstring_end on_nl expect on_lparen tokens_scanned_from on_lparen code on_rparen on_rparen on_period to match_tokens2 on_lparen on_ignored_nl on_symbeg on_const # This test is sensitive to the number of multibyte characters and position of the expressions # within the string - it is designed to fail if the position is calculated on the byte offset of the '[' # instead of the char offset. #
code on_op on_heredoc_beg on_period unindent on_nl on_tstring_content on_heredoc_end expect on_lparen epp_tokens_scanned_from on_lparen code on_rparen on_rparen on_period to match_tokens2 on_lparen on_ignored_nl # note that trailing whitespace is significant on one of the lines
code on_op on_heredoc_beg on_period unindent on_nl on_tstring_content on_heredoc_end expect on_lparen epp_tokens_scanned_from on_lparen code on_rparen on_rparen on_period to match_tokens2 on_lparen on_ignored_nl # test has 4 space before comment and 3 after it # check that there is 3 spaces before the 'and' #
code on_op on_heredoc_beg on_period unindent on_nl on_tstring_content on_heredoc_end expect on_lparen epp_tokens_scanned_from on_lparen code on_rparen on_rparen on_period to match_tokens2 on_lparen on_ignored_nl # test has 4 space before comment and 3 after it # check that there is 3 spaces before the 'and' #
UNK on_lparen on_symbeg UNK on_rparen on_lbrace on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end # First line of Rune version of Rune poem at http://www.columbia.edu/~fdc/utf8/ # characters chosen since they will not parse on Windows with codepage 437 or 1252 # Section 3.2.1.3 of Ruby spec guarantees that \u strings are encoded as UTF-8 # Runes (may show up as garbage if font is not available): ᚠᛇᚻ᛫ᛒᛦᚦ᛫ᚠᚱᚩᚠᚢᚱ᛫ᚠᛁᚱᚪ᛫ᚷᛖᚻᚹᛦᛚᚳᚢᛗ
