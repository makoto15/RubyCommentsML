def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_lbracket UNK on_rbracket on_nl end on_nl end on_nl end on_nl on_ignored_nl UNK on_tstring_beg # override StaticLoader
expect on_lparen f on_period class on_rparen on_period to be on_lparen on_const on_rparen on_nl expect on_lparen f on_period UNK on_rparen on_period # the produced result is a Class inheriting from Function
expect on_lparen f on_period name on_rparen on_period to eql on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl it on_tstring_beg # and this class had the given name (not a real Ruby class name)
func on_op f on_period new on_lparen on_symbeg closure_scope on_comma on_symbeg loader on_rparen on_nl expect on_lparen func on_period is_a? on_lparen on_const # TODO: Bogus parameters, not yet used
func on_op f on_period new on_lparen on_symbeg closure_scope on_comma on_symbeg loader on_rparen on_nl expect on_lparen func on_period is_a? on_lparen on_const # TODO: Bogus parameters, not yet used
func on_op f on_period new on_lparen on_symbeg closure_scope on_comma on_symbeg loader on_rparen on_nl expect on_lparen func on_period is_a? on_lparen on_const # TODO: Bogus parameters, not yet used
UNK on_op create_min_function_class on_lparen on_rparen on_nl UNK on_op UNK on_lparen on_rparen on_nl on_ignored_nl UNK on_op UNK on_period UNK on_nl UNK # this tests that meta programming / construction puts class attributes in the correct class
func on_op f on_period new on_lparen on_symbeg closure_scope on_comma on_symbeg loader on_rparen on_nl expect on_lparen func on_period is_a? on_lparen on_const # TODO: Bogus parameters, not yet used
func on_op f on_period new on_lparen on_symbeg closure_scope on_comma on_symbeg loader on_rparen on_nl expect on_lparen func on_period is_a? on_lparen on_const # TODO: Bogus parameters, not yet used
func on_op f on_period new on_lparen on_symbeg closure_scope on_comma on_symbeg loader on_rparen on_nl expect on_lparen func on_period is_a? on_lparen on_const # TODO: Bogus parameters, not yet used
fc on_op UNK on_nl signature on_op fc on_period signatures on_lbracket on_int on_rbracket on_nl expect on_lparen signature on_period UNK on_rparen on_period # neither type, nor name
fc on_op UNK on_nl signature on_op fc on_period signatures on_lbracket on_int on_rbracket on_nl expect on_lparen signature on_period UNK on_rparen on_period # no name given, only type
fc on_op UNK on_nl signature on_op fc on_period signatures on_lbracket on_int on_rbracket on_nl expect on_lparen signature on_period UNK on_rparen on_period # neither type, nor name
fc on_op UNK on_nl signature on_op fc on_period signatures on_lbracket on_int on_rbracket on_nl expect on_lparen signature on_period UNK on_rparen on_period # no name given, only type
UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_int on_rparen on_nl end on_nl end on_nl f on_op fc # Call a function available in the puppet system
f on_op fc on_period new on_lparen on_symbeg closure_scope on_comma on_const on_period UNK on_lparen on_symbeg UNK on_rparen on_period UNK on_rparen on_nl # initiate the function the same way the loader initiates it
UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl end on_nl f # Call a function not available in the puppet system
f on_op fc on_period new on_lparen on_symbeg closure_scope on_comma on_const on_period UNK on_lparen on_symbeg UNK on_rparen on_period UNK on_rparen on_nl # initiate the function the same way the loader initiates it
fc on_op on_const on_op on_const on_period create_function on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen do on_ignored_nl dispatch on_symbeg test do on_ignored_nl param # construct ruby function to call
UNK end on_nl def test on_lparen x on_rparen on_ignored_nl yield on_lparen x on_rparen on_nl end on_nl end on_nl the_loader on_op # block called 'the_block', and using "all_callables"
end on_nl def test on_lparen x on_rparen on_ignored_nl yield on_lparen x on_rparen on_nl end on_nl end on_nl the_loader on_op loader #(all_callables(), 'the_block')
yield on_lparen x on_rparen on_nl end on_nl end on_nl the_loader on_op loader on_nl f on_op fc on_period new on_lparen on_lbrace # call the block with x
the_loader on_op loader on_nl f on_op fc on_period new on_lparen on_lbrace on_rbrace on_comma the_loader on_rparen on_nl loader on_period UNK on_lparen # add the function to the loader (as if it had been loaded from somewhere)
UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl program on_op parser on_period parse_string on_lparen UNK on_comma __file__ on_rparen on_nl expect on_lparen on_const # evaluate a puppet call
end on_nl on_ignored_nl it on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl the_loader on_op loader on_lparen on_rparen on_nl here on_op get_binding on_lparen the_loader # Note that raised error reports this spec file as the function source since the function is defined here
on_ignored_nl def UNK on_nl on_const on_op on_const on_period create_function on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen do on_ignored_nl dispatch on_symbeg test do # DEAD TODO REMOVE # def create_function_with_param_injection_regular # Puppet::Functions.create_function('test', Puppet::Functions::InternalFunction) do # attr_injected Puppet::Pops::Types::TypeFactory.type_of(FunctionAPISpecModule::TestDuck), :test_attr # attr_injected Puppet::Pops::Types::TypeFactory.string(), :test_attr2, "a_string" # attr_injected_producer Puppet::Pops::Types::TypeFactory.integer(), :serial, "an_int" # # dispatch :test do # injected_param Puppet::Pops::Types::TypeFactory.string, :x, 'a_string' # injected_producer_param Puppet::Pops::Types::TypeFactory.integer, :y, 'an_int' # param 'Scalar', :a # param 'Scalar', :b # end # # def test(x,y,a,b) # y_produced = y.produce(nil) # "#{x}! #{a}, and #{b} < #{y_produced} = #{ !!(a < y_produced && b < y_produced)}" # end # end # end
UNK on_nl end on_nl def test on_lparen x on_rparen on_ignored_nl yield on_lparen on_int on_comma x on_rparen on_nl end on_nl end # use defaults, any callable, name is 'block'
UNK on_nl end on_nl def test on_lparen scope on_comma x on_rparen on_ignored_nl yield on_lparen on_int on_comma x on_rparen on_nl end # use defaults, any callable, name is 'block'
UNK on_symbeg UNK on_nl end on_nl def test on_lparen x on_rparen on_ignored_nl yield on_nl end on_nl end on_nl end on_nl # use defaults, any callable, name is 'block'
UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg UNK on_rparen on_nl end on_nl def test on_lparen x on_rparen on_ignored_nl yield on_nl # use defaults, any callable, name is 'block'
UNK on_nl end on_nl def test on_lparen x on_rparen on_ignored_nl yield on_lparen on_int on_comma x on_rparen UNK UNK on_nl end # use defaults, any callable, name is 'block'
