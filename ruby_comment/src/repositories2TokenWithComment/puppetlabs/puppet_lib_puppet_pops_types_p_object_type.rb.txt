class on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_const on_op on_tstring_beg # @api public
on_ignored_nl on_const on_op on_const on_period UNK on_lparen on_lbrace on_ignored_nl on_const on_period optional on_lparen on_const on_rparen on_op on_const on_comma on_ignored_nl on_const # TBD
annotations on_op on_const on_period optional on_lparen on_const on_period new on_lparen on_const on_period new on_lparen on_const on_period UNK on_rparen on_comma on_const # Now, when the Object type exists, add annotations with keys derived from Annotation and freeze the types.
class on_const on_nl UNK on_const on_nl UNK on_const on_nl on_ignored_nl attr_reader on_symbeg container on_nl on_ignored_nl attr_reader on_symbeg name on_nl on_ignored_nl # @abstract Encapsulates behavior common to {PAttribute} and {PFunction} # @api public
attr_reader on_symbeg container on_nl on_ignored_nl attr_reader on_symbeg name on_nl on_ignored_nl attr_reader on_symbeg type on_nl on_ignored_nl def UNK on_lparen name on_comma # @return [PObjectType] the object type containing this member # @api public
attr_reader on_symbeg name on_nl on_ignored_nl attr_reader on_symbeg type on_nl on_ignored_nl def UNK on_lparen name on_comma container on_comma init_hash on_rparen on_ignored_nl # @return [String] the name of this member # @api public
attr_reader on_symbeg type on_nl on_ignored_nl def UNK on_lparen name on_comma container on_comma init_hash on_rparen on_ignored_nl on_ivar on_op name on_nl on_ivar # @return [PAnyType] the type of this member # @api public
def UNK on_lparen name on_comma container on_comma init_hash on_rparen on_ignored_nl on_ivar on_op name on_nl on_ivar on_op container on_nl on_ivar on_op # @param name [String] The name of the member # @param container [PObjectType] The containing object type # @param init_hash [Hash{String=>Object}] Hash containing feature options # @option init_hash [PAnyType] 'type' The member type (required) # @option init_hash [Boolean] 'override' `true` if this feature must override an inherited feature. Default is `false`. # @option init_hash [Boolean] 'final' `true` if this feature cannot be overridden. Default is `false`. # @option init_hash [Hash{PTypeType => Hash}] 'annotations' Annotations hash. Default is `nil`. # @api public
def accept on_lparen visitor on_comma guard on_rparen on_ignored_nl UNK on_lparen visitor on_comma guard on_rparen on_nl on_ivar on_period accept on_lparen visitor # Delegates to the contained type # @param visitor [TypeAcceptor] the visitor # @param guard [RecursionGuard] guard against recursion. Only used by internal calls # @api public
def UNK on_lparen parent_members on_rparen on_ignored_nl UNK on_op parent_members on_lbracket on_ivar on_rbracket on_nl if UNK on_period nil? on_nl if on_ivar # Checks if the this _member_ overrides an inherited member, and if so, that this member is declared with override = true and that # the inherited member accepts to be overridden by this member. # # @param parent_members [Hash{String=>PAnnotatedMember}] the hash of inherited members # @return [PAnnotatedMember] this instance # @raises [Puppet::ParseError] if the assertion fails # @api private
def UNK on_lparen member on_rparen on_ignored_nl unless self on_period class on_op member on_period class on_nl raise on_const on_op on_const on_comma # Checks if the given _member_ can override this member. # # @param member [PAnnotatedMember] the overriding member # @return [PAnnotatedMember] its argument # @raises [Puppet::ParseError] if the assertion fails # @api private
raise on_const on_op on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label member on_period label on_comma on_label label #TRANSLATOR 'override => true' is a puppet syntax and should not be translated
def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def hash on_nl on_ivar # @return [Boolean] `true` if this feature cannot be overridden # @api public
def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def hash on_nl on_ivar on_period hash on_op on_ivar on_period hash on_nl end # @return [Boolean] `true` if this feature must override an inherited feature # @api public
def hash on_nl on_ivar on_period hash on_op on_ivar on_period hash on_nl end on_nl on_ignored_nl def UNK on_lparen o on_rparen on_ignored_nl # @api public
def UNK on_lparen o on_rparen on_ignored_nl self on_period class on_op o on_period class on_op on_ivar on_op o on_period name on_op # @api public
def on_op on_lparen o on_rparen on_ignored_nl UNK on_lparen o on_rparen on_nl end on_nl on_ignored_nl def _pcore_init_hash on_nl hash on_op on_lbrace # @api public
def _pcore_init_hash on_nl hash on_op on_lbrace on_const on_op on_ivar on_rbrace on_nl hash on_lbracket on_const on_rbracket on_op true if on_ivar on_nl # Returns the member as a hash suitable as an argument for constructor. Name is excluded # @return [Hash{String=>Object}] the initialization hash # @api private
def feature_type on_nl self on_period class on_period feature_type on_nl end on_nl on_ignored_nl def label on_nl self on_period class on_period label # @api private
def label on_nl self on_period class on_period label on_lparen on_ivar on_comma on_ivar on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen # @api private
def UNK on_lparen UNK on_comma UNK on_comma args on_comma on_op UNK on_rparen on_ignored_nl on_ivar on_op UNK on_lparen UNK on_rparen on_nl # Performs type checking of arguments and invokes the method that corresponds to this # method. The result of the invocation is returned # # @param receiver [Object] The receiver of the call # @param scope [Puppet::Parser::Scope] The caller scope # @param args [Array] Array of arguments. # @return [Object] The result returned by the member function or attribute # # @api private
def UNK on_lparen UNK on_rparen on_ignored_nl if on_lparen callable_type on_period is_a? on_lparen on_const on_rparen on_rparen on_nl callable_type on_period UNK on_period # @api private
if on_lparen callable_type on_period is_a? on_lparen on_const on_rparen on_rparen on_nl callable_type on_period UNK on_period map do on_op UNK on_op on_ignored_nl # TODO: Assumes Ruby implementation for now
def self on_period feature_type on_nl raise on_const on_comma on_tstring_beg on_tstring_content on_embexpr_beg self on_period class on_period name on_embexpr_end on_tstring_content on_tstring_end on_nl # @api private
class on_const on_op on_const on_nl on_ignored_nl attr_reader on_symbeg kind on_nl on_ignored_nl def UNK on_lparen name on_comma container on_comma init_hash on_rparen # Describes a named Attribute in an Object type # @api public
attr_reader on_symbeg kind on_nl on_ignored_nl def UNK on_lparen name on_comma container on_comma init_hash on_rparen on_ignored_nl super on_lparen name on_comma container # @return [String,nil] The attribute kind as defined by #TYPE_ATTRIBUTE_KIND, or `nil`
def UNK on_lparen name on_comma container on_comma init_hash on_rparen on_ignored_nl super on_lparen name on_comma container on_comma on_const on_period assert_instance_of on_lparen # @param name [String] The name of the attribute # @param container [PObjectType] The containing object type # @param init_hash [Hash{String=>Object}] Hash containing attribute options # @option init_hash [PAnyType] 'type' The attribute type (required) # @option init_hash [Object] 'value' The default value, must be an instanceof the given `type` (optional) # @option init_hash [String] 'kind' The attribute kind, matching #TYPE_ATTRIBUTE_KIND # @api public
if init_hash on_period include? on_lparen on_const on_rparen on_op on_op on_ivar on_nl raise on_const on_op on_const on_comma _ on_lparen on_tstring_beg on_tstring_content # final is implied
raise on_const on_op on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label label on_rbrace on_nl end on_nl on_ivar #TRANSLATOR 'final => false' is puppet syntax and should not be translated
end on_nl end on_nl on_ignored_nl def callable_type on_nl on_const on_nl end on_nl on_ignored_nl def UNK on_lparen o on_rparen on_ignored_nl super # Not to be confused with nil or :default
def UNK on_lparen o on_rparen on_ignored_nl super on_op on_ivar on_op o on_period kind on_op on_ivar on_op on_lparen o on_period UNK # @api public
def _pcore_init_hash on_nl hash on_op super on_nl unless on_ivar on_period nil? on_nl hash on_lbracket on_const on_rbracket on_op on_ivar on_nl hash # Returns the member as a hash suitable as an argument for constructor. Name is excluded # @return [Hash{String=>Object}] the hash # @api private
end on_nl hash on_lbracket on_const on_rbracket on_op on_ivar unless on_ivar on_op on_symbeg undef on_nl hash on_nl end on_nl on_ignored_nl def # final is implied
def UNK on_lparen value on_rparen on_ignored_nl on_ivar on_op value on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op on_symbeg undef # @return [Booelan] true if the given value equals the default value for this attribute
def UNK on_nl on_ivar on_op on_symbeg undef on_nl end on_nl on_ignored_nl def value on_nl raise on_const on_op on_const on_comma on_tstring_beg # @return [Boolean] `true` if a value has been defined for this attribute.
def value on_nl raise on_const on_op on_const on_comma on_tstring_beg on_embexpr_beg label on_embexpr_end on_tstring_content on_tstring_end if on_ivar on_op on_symbeg undef on_nl # Returns the value of this attribute, or raises an error if no value has been defined. Raising an error # is necessary since a defined value may be `nil`. # # @return [Object] the value that has been defined for this attribute. # @raise [Puppet::Error] if no value has been defined # @api public
raise on_const on_op on_const on_comma on_tstring_beg on_embexpr_beg label on_embexpr_end on_tstring_content on_tstring_end if on_ivar on_op on_symbeg undef on_nl on_ivar on_nl end # An error must be raised here since `nil` is a valid value and it would be bad to leak the :undef symbol
def self on_period feature_type on_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl end on_nl on_ignored_nl class on_const on_op on_const on_nl def # @api private
def _pcore_init_hash on_nl hash on_op super on_nl hash on_lbracket on_const on_rbracket on_op hash on_lbracket on_const on_rbracket on_period type on_nl hash # @return [Hash{String=>Object}] the hash # @api private
def self on_period feature_type on_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl end on_nl on_ignored_nl class on_const on_op on_const on_nl on_ignored_nl # @api private
class on_const on_op on_const on_nl on_ignored_nl def UNK on_lparen name on_comma container on_comma init_hash on_rparen on_ignored_nl super on_lparen name on_comma # Describes a named Function in an Object type # @api public
def UNK on_lparen name on_comma container on_comma init_hash on_rparen on_ignored_nl super on_lparen name on_comma container on_comma on_const on_period assert_instance_of on_lparen # @param name [String] The name of the attribute # @param container [PObjectType] The containing object type # @param init_hash [Hash{String=>Object}] Hash containing function options # @api public
def self on_period feature_type on_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl end on_nl on_ignored_nl attr_reader on_symbeg name on_nl attr_reader on_symbeg # @api private
def UNK on_lparen _pcore_init_hash on_comma UNK on_op nil on_rparen on_ignored_nl if _pcore_init_hash on_period is_a? on_lparen on_const on_rparen on_nl UNK on_lparen # Initialize an Object Type instance. The initialization will use either a name and an initialization # hash expression, or a fully resolved initialization hash. # # @overload initialize(name, init_hash_expression) # Used when the Object type is loaded using a type alias expression. When that happens, it is important that # the actual resolution of the expression is deferred until all definitions have been made known to the current # loader. The object will then be resolved when it is loaded by the {TypeParser}. "resolved" here, means that # the hash expression is fully resolved, and then passed to the {#_pcore_init_from_hash} method. # @param name [String] The name of the object # @param init_hash_expression [Model::LiteralHash] The hash describing the Object features # # @overload initialize(init_hash) # Used when the object is created by the {TypeFactory}. The init_hash must be fully resolved. # @param _pcore_init_hash [Hash{String=>Object}] The hash describing the Object features # @param loader [Loaders::Loader,nil] the loader that loaded the type # # @api private
ir on_op on_const on_period UNK on_nl type on_op ir on_period nil? on_op nil on_op ir on_period UNK on_lparen name on_rparen # anonymous class that doesn't implement PuppetObject is not an instance
def UNK on_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl # @api private
def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar # Assign a new instance reader to this type # @param [Serialization::InstanceReader] reader the reader to assign # @api private
def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_comma UNK on_rparen # Assign a new instance write to this type # @param [Serialization::InstanceWriter] the writer to assign # @api private
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK on_period UNK on_lparen self on_comma implementation_class on_comma UNK on_comma UNK on_rparen # Read an instance of this type from a deserializer # @param [Integer] value_count the number attributes needed to create the instance # @param [Serialization::Deserializer] deserializer the deserializer to read from # @return [Object] the created instance # @api private
def UNK on_lparen value on_comma UNK on_rparen on_ignored_nl UNK on_period UNK on_lparen self on_comma value on_comma UNK on_rparen on_nl end # Write an instance of this type using a serializer # @param [Object] value the instance to write # @param [Serialization::Serializer] the serializer to write to # @api private
def UNK on_nl impl_class on_op implementation_class on_nl return impl_class on_period UNK on_lparen self on_rparen if impl_class on_period respond_to? on_lparen on_symbeg # @api private
UNK on_op on_const on_period UNK on_lparen on_op param_types on_comma UNK on_comma param_names on_period size on_rparen on_nl UNK on_op on_const on_period # Create the callable with a size that reflects the required and optional parameters
on_const on_op on_const on_period UNK on_lparen on_symbeg on_tstring_content on_embexpr_beg name on_embexpr_end on_tstring_end on_comma UNK on_rparen do on_ignored_nl on_ignored_nl on_ivar on_op # Create and return a #new_XXX function where the dispatchers are added programmatically.
on_ivar on_op impl_class on_nl on_ignored_nl def self on_period impl_class on_nl on_ivar on_nl end on_nl on_ignored_nl if impl_class on_period respond_to? on_lparen # The class that creates new instances must be available to the constructor methods # and is therefore declared as a variable and accessor on the class that represents # this added function.
if impl_class on_period respond_to? on_lparen on_symbeg UNK on_rparen on_nl UNK on_period UNK on_lparen on_const on_op on_const on_period new on_lparen UNK # It's recommended that an implementor of an Object type provides the method #from_asserted_hash. # This method should accept a hash and assume that type assertion has been made already (it is made # by the dispatch added here).
UNK on_period UNK on_lparen on_const on_op on_const on_period new on_lparen UNK on_comma on_symbeg create on_comma param_names on_rparen on_rparen on_nl if # Add the dispatch that uses the standard #from_asserted_args or #new method on the class. It's assumed that the # method performs no assertions.
def implementation_class on_lparen create on_op true on_rparen on_ignored_nl if on_ivar on_period nil? on_op create on_nl ir on_op on_const on_period UNK # @api private
on_ivar on_op on_const on_period new on_period UNK on_lparen self on_rparen on_nl on_ivar on_period UNK on_lparen on_op on_ivar on_rparen if UNK # Use generator to create a default implementation
on_ivar on_op on_const on_period UNK on_lparen UNK on_rparen on_nl on_ignored_nl raise on_const on_op on_const on_comma on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end # Can the mapping be loaded?
def UNK on_lparen UNK on_rparen on_ignored_nl raise on_const on_comma on_tstring_beg on_tstring_content on_embexpr_beg label on_embexpr_end on_tstring_end unless on_ivar on_period nil? on_nl # @api private
def UNK on_lparen UNK on_rparen on_ignored_nl if on_op on_ivar on_period nil? on_op UNK on_lparen on_symbeg on_ivar on_rparen on_nl raise on_const # The block passed to this method will be passed in a call to `#class_eval` on the dynamically generated # class for this data type. It's indended use is to complement or redefine the generated methods and # attribute readers. # # The method is normally called with the block passed to `#implementation` when a data type is defined using # {Puppet::DataTypes::create_type}. # # @api private
def UNK on_lparen impl_class on_rparen on_ignored_nl on_ivar on_op on_lbrace on_rbrace on_nl pic on_op on_ivar on_lbracket impl_class on_rbracket on_nl return pic # @api private # @return [(Array<String>, Array<PAnyType>, Integer)] array of parameter names, array of parameter types, and a count reflecting the required number of parameters
on_ivar on_op on_lbrace on_rbrace on_nl pic on_op on_ivar on_lbracket impl_class on_rbracket on_nl return pic if pic on_nl on_ignored_nl UNK on_op # Create a types and a names array where optional entries ends up last
UNK on_op UNK unless param_names on_period UNK on_lparen UNK on_rparen on_period nil? on_nl end on_nl UNK on_nl end on_nl on_ignored_nl # assert that the protected name wasn't a real name (names can start with underscore)
UNK on_op on_lbracket on_rbracket on_nl init_param_names on_period each do on_op UNK on_op on_ignored_nl UNK on_op param_names on_period UNK on_lparen UNK # Reorder needed to match initialize method arguments
def UNK on_lparen se on_rparen on_ignored_nl if se on_period UNK on_period is_a? on_lparen on_const on_rparen on_op se on_period UNK on_period # @api private
def UNK on_lparen init_hash on_rparen on_ignored_nl on_const on_period assert_instance_of on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_const on_comma init_hash on_rparen on_nl on_ivar # @api private
on_ivar on_op init_hash on_lbracket on_const on_rbracket on_nl on_ivar on_period freeze unless on_ivar on_period nil? on_nl on_ignored_nl on_ivar on_op init_hash on_lbracket # Name given to the loader have higher precedence than a name declared in the type
attr_specs on_op on_const on_lbracket attr_specs on_rbracket on_nl end on_nl unless constants on_period nil? on_op constants on_period empty? on_nl constants on_period # attr_specs might be frozen
on_const on_op on_const on_period UNK on_lparen value on_rparen on_period UNK on_comma on_ignored_nl on_const on_op value on_comma on_ignored_nl on_const on_op on_const # Type must be generic here, or overrides would become impossible
attr_spec on_lbracket on_const on_rbracket on_op parent_members on_period include? on_lparen key on_rparen on_nl attr_specs on_lbracket key on_rbracket on_op attr_spec on_nl end # Indicate override if parent member exists. Type check etc. will take place later on.
raise on_const on_op on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen unless on_ivar on_nl UNK on_op nil on_nl equality on_period #TRANSLATORS equality_include_type = false should not be translated
UNK on_op UNK on_period UNK on_nl if UNK on_period include? on_lparen attr_name on_rparen on_nl UNK on_op UNK on_lparen attr on_rparen # Assert that attribute is not already include by parent equality
def UNK on_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl implementation_class on_period UNK on_nl end on_nl on_ignored_nl # Returns the type that a initialization hash used for creating instances of this type must conform to. # # @return [PStructType] the initialization hash type # @api public
def UNK on_nl UNK on_op on_lbrace on_rbrace on_nl attributes on_lparen true on_rparen on_period UNK on_period each do on_op attr on_op # Creates the type that a initialization hash used for creating instances of this type must conform to. # # @return [PStructType] the initialization hash type # @api private
def _pcore_init_hash on_lparen UNK on_op true on_rparen on_ignored_nl result on_op super on_lparen on_rparen on_nl result on_lbracket on_const on_rbracket on_op on_ivar # The init_hash is primarily intended for serialization and string representation purposes. It creates a hash # suitable for passing to {PObjectType#new(init_hash)} # # @return [Hash{String=>Object}] the features hash # @api public
UNK on_op on_const on_period UNK on_nl constants on_comma UNK on_op on_ivar on_period UNK do on_op _ on_comma a on_op on_ignored_nl # Divide attributes into constants and others
constants on_period UNK on_lbrace on_op key on_comma a on_op constants on_lbracket key on_rbracket on_op a on_period value on_rbrace on_nl result # { kind => 'constant', type => <type of value>, value => <value> } becomes just <value>
def UNK on_lparen include_parent on_op false on_rparen on_ignored_nl UNK on_lparen include_parent on_comma on_symbeg UNK on_rparen on_nl end on_nl on_ignored_nl def # Returns the members (attributes and functions) of this `Object` type. If _include_parent_ is `true`, then all # inherited members will be included in the returned `Hash`. # # @param include_parent [Boolean] `true` if inherited members should be included # @return [Hash{String=>PAnnotatedMember}] a hash with the members # @api public
def attributes on_lparen include_parent on_op false on_rparen on_ignored_nl UNK on_lparen include_parent on_comma on_symbeg attributes on_rparen on_nl end on_nl on_ignored_nl def # Returns the attributes of this `Object` type. If _include_parent_ is `true`, then all # inherited attributes will be included in the returned `Hash`. # # @param include_parent [Boolean] `true` if inherited attributes should be included # @return [Hash{String=>PAttribute}] a hash with the attributes # @api public
def UNK on_nl all on_op on_lbrace on_rbrace on_nl UNK on_lparen all on_rparen on_nl all on_nl end on_nl on_ignored_nl def UNK # Returns the attributes that participate in equality comparison. Inherited equality attributes # are included. # @return [Hash{String=>PAttribute}] a hash of attributes # @api public
def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_lparen include_parent on_op false on_rparen on_ignored_nl UNK on_lparen include_parent on_comma # @return [Boolean] `true` if this type is included when comparing instances # @api public
def UNK on_lparen include_parent on_op false on_rparen on_ignored_nl UNK on_lparen include_parent on_comma on_symbeg UNK on_rparen on_nl end on_nl on_ignored_nl on_const # Returns the functions of this `Object` type. If _include_parent_ is `true`, then all # inherited functions will be included in the returned `Hash`. # # @param include_parent [Boolean] `true` if inherited functions should be included # @return [Hash{String=>PFunction}] a hash with the functions # @api public
def UNK on_lparen UNK on_rparen on_ignored_nl unless on_ivar on_period nil? on_nl raise on_const on_op on_const on_comma on_tstring_beg on_tstring_content on_embexpr_beg UNK # Assert that this type does not inherit from itself # @api private
def label on_nl on_ivar on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def resolved_parent on_nl parent on_op on_ivar on_nl UNK # @api private
def resolved_parent on_nl parent on_op on_ivar on_nl UNK parent on_period is_a? on_lparen on_const on_rparen on_nl parent on_op parent on_period UNK # @api private
def type_parameters on_lparen include_parent on_op false on_rparen on_ignored_nl all on_op on_lbrace on_rbrace on_nl UNK on_lparen all on_comma include_parent on_rparen on_nl # Returns the type_parameters of this `Object` type. If _include_parent_ is `true`, then all # inherited type_parameters will be included in the returned `Hash`. # # @param include_parent [Boolean] `true` if inherited type_parameters should be included # @return [Hash{String=>PTypeParameter}] a hash with the type_parameters # @api public
def UNK on_lparen o on_comma guard on_rparen on_ignored_nl if o on_period is_a? on_lparen on_const on_rparen on_nl if on_const on_op self # An Object type is only assignable from another Object type. The other type # or one of its parents must be equal to this type.
collector on_period UNK on_lparen on_ivar on_period UNK on_lbrace on_op _ on_comma attr on_op attr on_period kind on_op on_const on_rbrace on_rparen # All attributes except constants participate
def UNK on_lparen attr on_rparen on_ignored_nl type on_op self on_nl UNK on_op type on_period nil? do on_ignored_nl p on_op type # @return [PObjectType] the topmost parent who's #equality_attributes include the given _attr_
