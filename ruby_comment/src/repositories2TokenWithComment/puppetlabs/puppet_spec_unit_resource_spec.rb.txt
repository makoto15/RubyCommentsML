it on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl UNK on_op on_const on_op on_const on_period new on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content # Life's easier with nodes, because they can't be qualified.
it on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl on_ivar on_op on_const on_op on_const on_op on_const on_period new on_lparen on_symbeg UNK on_comma on_tstring_beg # this was a bit tough to track down
it on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl on_ivar on_op on_const on_op on_const on_op on_const on_period new on_lparen on_symbeg UNK on_comma on_tstring_beg # this was a bit tough to track down
it on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl text on_op on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ignored_nl newresource on_op # PUP-3272, needs to work becuse serialization is not only to network #
it on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl text on_op on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ignored_nl newresource on_op # PUP-3272, since serialization to network is done in json, not yaml
on_ignored_nl it on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl expect on_lparen on_const on_op on_const on_period from_data_hash on_lparen on_const on_period parse on_lparen on_const # LAK:NOTE For all of these tests, we convert back to the resource so we can # trap the actual data structure then.
end on_nl on_ignored_nl describe on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl before do on_ignored_nl on_ivar on_op on_lbrace on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op # Note: to_stringified_spec.rb has tests for all other data types
UNK UNK on_period UNK on_nl UNK on_op UNK on_lbrace on_op x on_op x on_rbrace on_nl UNK on_op UNK on_lbrace on_op # Configure two title patterns to match a title that is either # separated with a colon or exclamation point. The first capture # will be used for the :name param, and the second capture will be # used for the :value param.
