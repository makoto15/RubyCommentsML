on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl class on_const on_nl UNK on_const on_nl on_ignored_nl ## lib/trollop.rb -- trollop command-line processing library ## Author:: William Morgan (mailto: wmorgan-trollop@masanjin.net) ## Copyright:: Copyright 2007 William Morgan ## License:: the same terms as ruby itself ## ## 2012-03: small changes made by cprice (chris@puppetlabs.com); ## patch submitted for upstream consideration: ## https://gitorious.org/trollop/mainline/merge_requests/9 ## 2012-08: namespace changes made by Jeff McCune (jeff@puppetlabs.com) ## moved Trollop into Puppet::Util::CommandLine to prevent monkey ## patching the upstream trollop library if also loaded.
class on_const on_op on_const on_semicolon end on_nl on_ignored_nl class on_const on_op on_const on_semicolon end on_nl on_ignored_nl class on_const on_op on_const ## Thrown by Parser in the event of a commandline error. Not needed if ## you're using the Trollop::options entry.
class on_const on_op on_const on_semicolon end on_nl on_ignored_nl class on_const on_op on_const on_semicolon end on_nl on_ignored_nl on_const on_op on_regexp_beg on_tstring_content ## Thrown by Parser if the user passes in '-h' or '--help'. Handled ## automatically by Trollop#options.
class on_const on_op on_const on_semicolon end on_nl on_ignored_nl on_const on_op on_regexp_beg on_tstring_content on_regexp_end on_nl on_ignored_nl on_const on_op on_regexp_beg on_tstring_content on_regexp_end ## Thrown by Parser if the user passes in '-h' or '--version'. Handled ## automatically by Trollop#options.
on_const on_op on_regexp_beg on_tstring_content on_regexp_end on_nl on_ignored_nl on_const on_op on_regexp_beg on_tstring_content on_regexp_end on_nl on_ignored_nl class on_const on_nl on_ignored_nl on_const on_op ## Regex for floating point numbers
on_const on_op on_regexp_beg on_tstring_content on_regexp_end on_nl on_ignored_nl class on_const on_nl on_ignored_nl on_const on_op on_lbracket on_symbeg flag on_comma on_symbeg UNK on_comma ## Regex for parameters
class on_const on_nl on_ignored_nl on_const on_op on_lbracket on_symbeg flag on_comma on_symbeg UNK on_comma on_symbeg UNK on_rbracket on_nl on_ignored_nl on_const on_op ## The commandline parser. In typical usage, the methods in this class ## will be handled internally by Trollop::options. In this case, only the ## #opt, #banner and #version, #depends, and #conflicts methods will ## typically be called. ## ## If you want to instantiate this class yourself (for more complicated ## argument-parsing logic), call #parse to actually produce the output hash, ## and consider calling it from within ## Trollop::with_standard_exception_handling.
on_const on_op on_lbracket on_symbeg flag on_comma on_symbeg UNK on_comma on_symbeg UNK on_rbracket on_nl on_ignored_nl on_const on_op on_lbracket on_symbeg int on_comma ## The set of values that indicate a flag option when passed as the ## +:type+ parameter of #opt.
on_const on_op on_lbracket on_symbeg int on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg float on_comma on_symbeg UNK ## The set of values that indicate a single-parameter (normal) option when ## passed as the +:type+ parameter of #opt. ## ## A value of +io+ corresponds to a readable IO resource, including ## a filename, URI, or the strings 'stdin' or '-'.
on_const on_op on_lbracket on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK ## The set of values that indicate a multiple-parameter option (i.e., that ## takes multiple space-separated values on the commandline) when passed as ## the +:type+ parameter of #opt.
on_const on_op on_const on_op on_const on_op on_const on_nl on_ignored_nl on_const on_op on_regexp_beg on_tstring_content on_regexp_end on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl ## The complete set of legal values for the +:type+ parameter of #opt.
on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl #:nodoc:
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl ## The values from the commandline that were not interpreted by #parse.
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl ## The complete configuration hashes for each option. (Mainly useful ## for testing.)
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_op a on_comma ## A flag that determines whether or not to attempt to automatically generate "short" options if they are not ## explicitly specified.
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_op a on_comma on_op b on_nl on_ivar on_op ## A flag that determines whether or not to raise an error if the parser is passed one or more ## options that were not registered ahead of time. If 'true', then the parser will simply ## ignore options that it does not recognize.
UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_op a on_comma on_op b on_nl on_ivar on_op nil on_nl on_ivar on_op on_lbracket ## A flag indicating whether or not the parser should attempt to handle "--help" and ## "--version" specially. If 'false', it will treat them just like any other option.
def UNK on_op a on_comma on_op b on_nl on_ivar on_op nil on_nl on_ivar on_op on_lbracket on_rbracket on_nl on_ivar on_op on_lbrace ## Initializes the parser, and instance-evaluates any block given.
UNK on_lparen on_op b on_rparen on_period UNK on_lparen self on_rparen on_period UNK on_lparen on_op a on_rparen if b on_nl end #instance_eval(&b) if b # can't take arguments
on_ignored_nl def opt name on_comma desc on_op on_tstring_beg on_tstring_end on_comma opts on_op on_lbrace on_rbrace on_nl raise on_const on_comma _ on_lparen ## Define an option. +name+ is the option name, a unique identifier ## for the option that you will use internally, which should be a ## symbol or a string. +desc+ is a string description which will be ## displayed in help messages. ## ## Takes the following optional arguments: ## ## [+:long+] Specify the long form of the argument, i.e. the form with two dashes. If unspecified, will be automatically derived based on the argument name by turning the +name+ option into a string, and replacing any _'s by -'s. ## [+:short+] Specify the short form of the argument, i.e. the form with one dash. If unspecified, will be automatically derived from +name+. ## [+:type+] Require that the argument take a parameter or parameters of type +type+. For a single parameter, the value can be a member of +SINGLE_ARG_TYPES+, or a corresponding Ruby class (e.g. +Integer+ for +:int+). For multiple-argument parameters, the value can be any member of +MULTI_ARG_TYPES+ constant. If unset, the default argument type is +:flag+, meaning that the argument does not take a parameter. The specification of +:type+ is not necessary if a +:default+ is given. ## [+:default+] Set the default value for an argument. Without a default value, the hash returned by #parse (and thus Trollop::options) will have a +nil+ value for this key unless the argument is given on the commandline. The argument type is derived automatically from the class of the default value given, so specifying a +:type+ is not necessary if a +:default+ is given. (But see below for an important caveat when +:multi+: is specified too.) If the argument is a flag, and the default is set to +true+, then if it is specified on the commandline the value will be +false+. ## [+:required+] If set to +true+, the argument must be provided on the commandline. ## [+:multi+] If set to +true+, allows multiple occurrences of the option on the commandline. Otherwise, only a single instance of the option is allowed. (Note that this is different from taking multiple parameters. See below.) ## ## Note that there are two types of argument multiplicity: an argument ## can take multiple values, e.g. "--arg 1 2 3". An argument can also ## be allowed to occur multiple times, e.g. "--arg 1 --arg 2". ## ## Arguments that take multiple values should have a +:type+ parameter ## drawn from +MULTI_ARG_TYPES+ (e.g. +:strings+), or a +:default:+ ## value of an array of the correct type (e.g. [String]). The ## value of this argument will be an array of the parameters on the ## commandline. ## ## Arguments that can occur multiple times should be marked with ## +:multi+ => +true+. The value of this argument will also be an array. ## In contrast with regular non-multi options, if not specified on ## the commandline, the default value will be [], not nil. ## ## These two attributes can be combined (e.g. +:type+ => +:strings+, ## +:multi+ => +true+), in which case the value of the argument will be ## an array of arrays. ## ## There's one ambiguous case to be aware of: when +:multi+: is true and a ## +:default+ is set to an array (of something), it's ambiguous whether this ## is a multi-value argument as well as a multi-occurrence argument. ## In this case, Trollop assumes that it's not a multi-value argument. ## If you want a multi-value, multi-occurrence argument with a default ## value, you must specify +:type+ as well.
opts on_lbracket on_symbeg type on_rbracket on_op case opts on_lbracket on_symbeg type on_rbracket on_nl when on_symbeg UNK on_comma on_symbeg UNK on_semicolon ## fill in :type
case opts on_lbracket on_symbeg type on_rbracket on_nl when on_symbeg UNK on_comma on_symbeg UNK on_semicolon on_symbeg flag on_nl when on_symbeg UNK # normalize
UNK on_op on_ignored_nl if opts on_lbracket on_symbeg multi on_rbracket on_op opts on_lbracket on_symbeg default on_rbracket on_period UNK on_lparen on_const on_rparen ## for options with :multi => true, an array default doesn't imply ## a multi-valued argument. for that you have to specify a :type ## as well. (this is how we disambiguate an ambiguous situation; ## see the docs for Parser#opt for details.)
when on_const on_semicolon on_symbeg UNK on_nl when on_const on_semicolon on_symbeg UNK on_nl when on_const on_semicolon on_symbeg UNK on_nl when on_const # the first element determines the types
opts on_lbracket on_symbeg long on_rbracket on_op opts on_lbracket on_symbeg long on_rbracket on_op opts on_lbracket on_symbeg long on_rbracket on_period to_s on_op ## fill in :long
opts on_lbracket on_symbeg short on_rbracket on_op opts on_lbracket on_symbeg short on_rbracket on_period to_s if opts on_lbracket on_symbeg short on_rbracket unless ## fill in :short
opts on_lbracket on_symbeg default on_rbracket on_op UNK if opts on_lbracket on_symbeg type on_rbracket on_op on_symbeg flag on_op opts on_lbracket on_symbeg ## fill in :default for flags
opts on_lbracket on_symbeg default on_rbracket on_op on_lbracket opts on_lbracket on_symbeg default on_rbracket on_rbracket if opts on_lbracket on_symbeg default on_rbracket on_op ## autobox :default for :multi (multi-occurrence) arguments
opts on_lbracket on_symbeg multi on_rbracket on_op UNK on_nl on_ignored_nl opts on_lbracket on_symbeg desc on_rbracket on_op desc on_nl on_ivar on_lbracket opts ## fill in :multi
def UNK s on_op nil on_semicolon on_ivar on_op s if s on_semicolon on_ivar end on_nl on_ignored_nl def UNK s on_semicolon ## Sets the version string. If set, the user can request the version ## on the commandline. Should probably be of the form "<program name> ## <version number>".
def UNK s on_semicolon on_ivar on_op on_lbracket on_symbeg UNK on_comma s on_rbracket end on_nl UNK on_symbeg UNK on_symbeg UNK on_nl ## Adds text to the help display. Can be interspersed with calls to ## #opt to build a multi-section help page.
def UNK on_op syms on_nl syms on_period each on_lbrace on_op sym on_op raise on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end ## Marks two (or more!) options as requiring each other. Only handles ## undirected (i.e., mutual) dependencies. Directed dependencies are ## better modeled with Trollop::die.
def UNK on_op syms on_nl syms on_period each on_lbrace on_op sym on_op raise on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end ## Marks two (or more!) options as conflicting.
def UNK on_op UNK on_nl on_ivar on_op on_lbracket on_op UNK on_rbracket on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl ## Defines a set of words which cause parsing to terminate when ## encountered, such that any options to the left of the word are ## parsed as usual, and options to the right of the word are left ## intact. ## ## A typical use case would be for subcommand support, where these ## would be set to the list of subcommands. A subsequent Trollop ## invocation would then be used to parse subcommand options, after ## shifting the subcommand off of ARGV.
def UNK on_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def UNK UNK on_op on_const on_nl vals on_op on_lbrace on_rbrace ## Similar to #stop_on, but stops on any unknown word when encountered ## (unless it is a parameter for an argument). This is useful for ## cases where you don't know the set of subcommands ahead of time, ## i.e., without first parsing the global options.
def UNK UNK on_op on_const on_nl vals on_op on_lbrace on_rbrace on_nl UNK on_op on_lbrace on_rbrace on_nl on_ignored_nl if UNK on_nl ## Parses the commandline. Typically called by Trollop::options, ## but you can call it directly if you need more control. ## ## throws CommandlineError, HelpNeeded, and VersionNeeded exceptions.
end on_nl on_ignored_nl UNK if UNK on_nl on_ignored_nl given_args on_op on_lbrace on_rbrace on_nl on_ivar on_op UNK UNK do on_op arg # multi arguments default to [], not nil
given_args on_op on_lbrace on_rbrace on_nl on_ivar on_op UNK UNK do on_op arg on_comma params on_op on_ignored_nl sym on_op case arg ## resolve symbols
num_params_taken on_op on_int on_nl on_ignored_nl unless params on_period UNK on_nl if on_const on_period include? on_lparen on_ivar on_lbracket sym on_rbracket on_lbracket # The block returns the number of parameters taken.
num_params_taken on_op on_int on_nl UNK on_const on_period include? on_lparen on_ivar on_lbracket sym on_rbracket on_lbracket on_symbeg type on_rbracket on_rparen on_nl given_args # take the first parameter
num_params_taken on_op params on_period UNK on_nl end on_nl end on_nl on_ignored_nl num_params_taken on_nl end on_nl on_ignored_nl if UNK on_nl raise # take all the parameters
raise on_const if given_args on_period include? on_symbeg UNK on_nl raise on_const if given_args on_period include? on_symbeg UNK on_nl end on_nl ## check for version and help args
on_ivar on_period each do on_op type on_comma syms on_op on_ignored_nl UNK on_op syms on_period UNK on_lbrace on_op sym on_op given_args ## check constraint satisfaction
given_args on_period each do on_op sym on_comma UNK on_op on_ignored_nl arg on_op UNK on_lbracket on_symbeg arg on_rbracket on_nl params on_op ## parse parameters
on_ignored_nl case opts on_lbracket on_symbeg type on_rbracket on_nl when on_symbeg flag on_nl if arg on_op on_regexp_beg on_tstring_content on_regexp_end UNK sym # mark argument as specified on the commandline
vals on_lbracket sym on_rbracket on_op vals on_lbracket sym on_rbracket on_lbracket on_int on_rbracket on_lbracket on_int on_rbracket on_nl else vals on_lbracket sym # single parameter
vals on_lbracket sym on_rbracket on_op vals on_lbracket sym on_rbracket on_period map on_lbrace on_op p on_op p on_lbracket on_int on_rbracket on_rbrace # multiple options, each with a single parameter
end on_nl on_ignored_nl opts on_lbracket on_symbeg UNK on_rbracket on_period UNK on_lparen vals on_lbracket sym on_rbracket on_rparen if opts on_period UNK # single option, with multiple parameters
on_ignored_nl opts on_lbracket on_symbeg UNK on_rbracket on_period UNK on_lparen vals on_lbracket sym on_rbracket on_rparen if opts on_period UNK on_lparen on_symbeg # else: multiple options, with multiple parameters
UNK on_period UNK on_nl on_ivar on_period each on_lbrace on_op UNK on_op UNK on_op UNK on_rbrace on_nl on_ignored_nl class on_op vals ## modify input in place with only those ## arguments we didn't process
class on_op vals on_nl def UNK on_lparen UNK on_comma on_op args on_rparen on_ignored_nl self on_lbracket UNK on_rbracket on_op self on_lbracket ## allow openstruct-style accessors
begin on_ignored_nl begin on_ignored_nl UNK on_op on_const on_period UNK on_lparen param on_rparen on_nl rescue on_const on_nl end on_nl UNK on_op #:nodoc:
end on_nl UNK on_op on_const on_period UNK on_lparen UNK on_period UNK on_comma UNK on_period UNK on_comma UNK on_period UNK on_rparen # chronic is not available
def UNK stream on_op on_gvar on_nl width on_ignored_nl UNK on_op on_lbrace on_rbrace on_nl on_ivar on_period each do on_op name on_comma ## Print the help message to +stream+.
on_ignored_nl UNK on_op on_lbrace on_rbrace on_nl on_ivar on_period each do on_op name on_comma spec on_op on_ignored_nl UNK on_lbracket name on_rbracket # just calculate it now; otherwise we have to be careful not to # call this unless the cursor's at the beginning of a line.
on_ignored_nl unless on_ivar on_period UNK on_op on_int on_op on_ivar on_period UNK on_period UNK on_op on_symbeg UNK on_nl stream on_period puts # spaces
on_ivar on_op if on_gvar on_period UNK on_nl begin on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_op UNK on_nl x on_op #:nodoc:
if str on_op on_tstring_beg on_tstring_end on_nl on_lbracket on_tstring_beg on_tstring_end on_rbracket on_nl else on_ignored_nl str on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end # :nodoc:
def UNK arg on_comma UNK on_nl if UNK on_nl on_gvar on_period puts _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace ## The per-parser version of Trollop::die (see that for documentation).
def UNK args on_nl remains on_op on_lbracket on_rbracket on_nl i on_op on_int on_nl on_ignored_nl UNK i on_op args on_period length ## yield successive arg, parameter pairs
remains on_op args on_lbracket on_lparen i on_op on_int on_rparen on_op on_op on_int on_rbracket on_nl UNK remains on_nl when on_regexp_beg on_tstring_content # arg terminator
yield on_tstring_beg on_tstring_content on_embexpr_beg on_backref on_embexpr_end on_tstring_end on_comma on_lbracket on_backref on_rbracket on_nl i on_op on_int on_nl when on_regexp_beg on_tstring_content on_regexp_end # long argument with equals
params on_op UNK on_lparen args on_comma i on_op on_int on_rparen on_nl unless params on_period UNK on_nl num_params_taken on_op yield args # long argument
yield args on_lbracket i on_rbracket on_comma nil on_nl i on_op on_int on_nl end on_nl when on_regexp_beg on_tstring_content on_regexp_end UNK on_op # long argument no parameter
UNK on_op on_backref on_period UNK on_lparen on_regexp_beg on_regexp_end on_rparen on_nl UNK on_period UNK do on_op a on_comma UNK on_op on_ignored_nl # one or more short arguments
yield on_tstring_beg on_tstring_content on_embexpr_beg a on_embexpr_end on_tstring_end on_comma nil on_nl i on_op on_int on_nl end on_nl else on_ignored_nl yield on_tstring_beg # argument no parameter
opts on_lbracket on_symbeg short on_rbracket on_op UNK on_nl on_ivar on_lbracket UNK on_rbracket on_op name on_nl end on_nl end on_nl end # found a character to use
def UNK on_op b on_nl on_lparen class on_op self on_semicolon self on_semicolon end on_rparen on_period UNK do on_ignored_nl UNK on_symbeg ## instance_eval but with ability to handle block arguments ## thanks to why: http://redhanded.hobix.com/inspect/aBlockCostume.html
def UNK args on_op on_const on_comma on_op a on_comma on_op b on_nl on_ivar on_op on_const on_period UNK on_lparen on_op a ## The easy, syntactic-sugary entry method into Trollop. Creates a Parser, ## passes the block to it, then parses +args+ with it, handling any errors or ## requests for help or version information appropriately (and then exiting). ## Modifies +args+ in place. Returns a hash of option values. ## ## The block passed in should contain zero or more calls to +opt+ ## (Parser#opt), zero or more calls to +text+ (Parser#text), and ## probably a call to +version+ (Parser#version). ## ## The returned block contains a value for every option specified with ## +opt+. The value will be the value given on the commandline, or the ## default value if the option was not specified on the commandline. For ## every option specified on the commandline, a key "<option ## name>_given" will also be set in the hash. ## ## Example: ## ## require 'trollop' ## opts = Trollop::options do ## opt :monkey, "Use monkey mode" # a flag --monkey, defaulting to false ## opt :goat, "Use goat mode", :default => true # a flag --goat, defaulting to true ## opt :num_limbs, "Number of limbs", :default => 4 # an integer --num-limbs <i>, defaulting to 4 ## opt :num_thumbs, "Number of thumbs", :type => :int # an integer --num-thumbs <i>, defaulting to nil ## end ## ## ## if called with no arguments ## p opts # => { :monkey => false, :goat => true, :num_limbs => 4, :num_thumbs => nil } ## ## ## if called with --monkey ## p opts # => {:monkey_given=>true, :monkey=>true, :goat=>true, :num_limbs=>4, :help=>false, :num_thumbs=>nil} ## ## See more examples at http://trollop.rubyforge.org.
on_ignored_nl def UNK UNK on_nl begin on_ignored_nl yield on_nl rescue on_const on_op UNK on_nl on_gvar on_period puts _ on_lparen on_tstring_beg ## If Trollop::options doesn't do quite what you want, you can create a Parser ## object and call Parser#parse on it. That method will throw CommandlineError, ## HelpNeeded and VersionNeeded exceptions when necessary; if you want to ## have these handled for you in the standard manner (e.g. show the help ## and then exit upon an HelpNeeded exception), call your code from within ## a block passed to this method. ## ## Note that this method will call System#exit after handling an exception! ## ## Usage example: ## ## require 'trollop' ## p = Trollop::Parser.new do ## opt :monkey, "Use monkey mode" # a flag --monkey, defaulting to false ## opt :goat, "Use goat mode", :default => true # a flag --goat, defaulting to true ## end ## ## opts = Trollop::with_standard_exception_handling p do ## o = p.parse ARGV ## raise Trollop::HelpNeeded if ARGV.empty? # show help screen ## o ## end ## ## Requires passing in the parser object.
def UNK arg on_comma UNK on_op nil on_nl if on_ivar on_nl on_ivar on_period UNK arg on_comma UNK on_nl else on_ignored_nl ## Informs the user that their usage of 'arg' was wrong, as detailed by ## 'msg', and dies. Example: ## ## options do ## opt :volume, :default => 0.0 ## end ## ## die :volume, "too loud" if opts[:volume] > 10.0 ## die :volume, "too soft" if opts[:volume] < 0.1 ## ## In the one-argument case, simply print that message, a notice ## about -h, and die. Example: ## ## options do ## opt :whatever # ... ## end ## ## Trollop::die "need at least one filename" if ARGV.empty?
raise on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl end on_nl on_ignored_nl UNK on_symbeg UNK on_comma on_symbeg #TRANSLATORS 'Trollop' is the name of a module and 'die' and 'options' are methods in it and should not be translated.
end on_nl end on_nl end on_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP # module
