class on_const on_op on_const on_nl class on_const on_op on_const on_op on_const on_semicolon end on_nl class on_const on_op on_const on_semicolon end # Support for modules
def self on_period UNK on_lparen UNK on_comma environment on_op nil on_rparen on_ignored_nl return nil unless UNK on_nl UNK on_op environment # Find and return the +module+ that +path+ belongs to. If +path+ is # absolute, or if there is no module whose name is the first component # of +path+, return +nil+
UNK on_op environment on_op on_const on_period UNK on_lparen on_symbeg UNK on_rparen on_period UNK on_lparen environment on_rparen on_op on_const on_period UNK # Unless a specific environment is given, use the current environment
UNK on_op on_const on_period join on_lparen path on_comma name on_rparen on_nl return false unless on_const on_op on_const on_period UNK on_lparen # it must be a directory
return UNK if name on_op UNK on_tstring_content UNK on_nl return false on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen # it must match an installed module name according to forge validator
return UNK if name on_op UNK on_tstring_content UNK on_nl return false on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen # it must match the full module name according to forge validator
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl on_const on_op on_const on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl # @api private
def UNK on_nl nil on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK on_nl # @deprecated The puppetversion module metadata field is no longer used.
def UNK on_lparen UNK on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK on_nl return on_nl end on_nl on_ignored_nl def UNK on_nl # @deprecated The puppetversion module metadata field is no longer used.
def UNK on_nl return on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_ignored_nl UNK on_nl on_ivar on_period UNK on_lparen on_const # @deprecated The puppetversion module metadata field is no longer used.
UNK on_lparen type on_op on_tstring_beg on_tstring_content on_tstring_end on_rparen do on_ignored_nl UNK on_op subpath on_lparen UNK on_rparen on_nl unless on_const on_op # A boolean method to let external callers determine if # we have files of a given type.
UNK on_lparen type on_period UNK on_lparen UNK on_tstring_content UNK on_comma on_tstring_beg on_tstring_end on_rparen on_rparen do on_op UNK on_op on_ignored_nl if # A method for returning a given file of a given type. # e.g., file = mod.manifest("my/manifest.pp") # # If the file name is nil, then the base directory for the # file type is passed; this is used for fileserving.
if UNK on_nl full_path on_op on_const on_period join on_lparen subpath on_lparen UNK on_rparen on_comma UNK on_rparen on_nl else on_ignored_nl full_path # If 'file' is nil then they're asking for the base path. # This is used for things like fileserving.
UNK on_lparen type on_rparen do on_ignored_nl subpath on_lparen UNK on_rparen on_nl end on_nl end on_nl on_ignored_nl def UNK on_nl subpath # Return the base directory for the given type
def UNK on_lparen name on_rparen on_ignored_nl if name on_nl full_path on_op on_const on_period join on_lparen UNK on_comma name on_rparen on_nl # This is a re-implementation of the Filetypes singular type method (e.g. # `manifest('my/manifest.pp')`. We don't implement the full filetype "API" for # tasks since tasks don't map 1:1 onto files.
if name on_nl full_path on_op on_const on_period join on_lparen UNK on_comma name on_rparen on_nl else on_ignored_nl full_path on_op UNK on_nl # If 'file' is nil then they're asking for the base path. # This is used for things like fileserving.
def UNK on_lparen name on_rparen on_ignored_nl if name on_nl full_path on_op on_const on_period join on_lparen UNK on_comma name on_rparen on_nl # This is a re-implementation of the Filetypes singular type method (e.g. # `manifest('my/manifest.pp')`. We don't implement the full filetype "API" for # plans.
if name on_nl full_path on_op on_const on_period join on_lparen UNK on_comma name on_rparen on_nl else on_ignored_nl full_path on_op UNK on_nl # If 'file' is nil then they're asking for the base path. # This is used for things like fileserving.
UNK on_op UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace UNK name on_comma UNK UNK on_period UNK on_rbrace on_nl UNK #TRANSLATORS 'metadata.json' is a specific file name and should not be translated.
def UNK on_lparen UNK on_rparen on_ignored_nl if UNK on_nl UNK on_op UNK on_lparen UNK on_rparen on_nl UNK on_op UNK on_period # Return the list of manifests matching the given glob pattern, # defaulting to 'init.pp' for empty modules.
UNK on_op UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl if on_op UNK on_period nil? on_op on_op UNK on_period UNK on_lparen # (#4220) Always ensure init.pp in case class is defined there.
def UNK on_nl subpath on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl subpath on_lparen on_tstring_beg on_tstring_content # Find all plugin directories. This is used by the Plugins fileserving mount.
def UNK on_nl subpath on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl return #@return [String]
def UNK on_lparen UNK on_rparen on_ignored_nl return on_const on_op on_const on_period exist? on_lparen on_const on_period join on_lparen UNK on_comma UNK # Returns true if the module has translation files for the # given locale. # @param [String] locale the two-letter language code to check # for translations # @return true if the module has a directory for the locale, false # false otherwise
def unmet_dependencies on_nl unmet_dependencies on_op on_lbracket on_rbracket on_nl return unmet_dependencies unless dependencies on_nl on_ignored_nl dependencies on_period UNK do on_op UNK # Identify and mark unmet dependencies. A dependency will be marked unmet # for the following reasons: # # * not installed and is thus considered missing # * installed and does not meet the version requirements for this module # * installed and doesn't use semantic versioning # # Returns a list of hashes representing the details of an unmet dependency. # # Example: # # [ # { # :reason => :missing, # :name => 'puppetlabs-mysql', # :version_constraint => 'v0.0.1', # :mod_details => { # :installed_version => '0.0.1' # } # :parent => { # :name => 'puppetlabs-bacula', # :version => 'v1.0.0' # } # } # ] #
