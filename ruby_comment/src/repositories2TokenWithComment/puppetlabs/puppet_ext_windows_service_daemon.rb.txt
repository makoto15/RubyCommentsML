on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end #!/usr/bin/env ruby
UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_op on_const on_op on_const on_nl on_const on_op UNK on_nl on_ignored_nl on_ivar on_op # This file defines utilities for logging to eventlog. While it lives inside # Puppet, it is completely independent and loads no other parts of Puppet, so we # can safely require *just* it.
on_ignored_nl UNK on_op on_const on_period join on_lparen base_dir on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end # The puppet installer registers a 'Puppet' event source. For the moment events will be logged with this key, but # it may be a good idea to split the Service and Puppet events later so it's easier to read in the windows Event Log. # # Example code to register an event source; # eventlogdll = File.expand_path(File.join(basedir, 'puppet', 'ext', 'windows', 'eventlog', 'puppetres.dll')) # if (File.exists?(eventlogdll)) # Win32::EventLog.add_event_source( # 'source' => "Application", # 'key_name' => "Puppet Agent", # 'category_count' => 3, # 'event_message_file' => eventlogdll, # 'category_message_file' => eventlogdll # ) # end
on_ignored_nl def log_exception on_lparen e on_rparen on_ignored_nl UNK on_lparen e on_period UNK on_rparen on_nl UNK on_lparen e on_period UNK on_period # Interrogation handler is just for debug. Can be commented out or removed entirely. # def service_interrogate # log_debug('Service is being interrogated') # end
on_const on_period UNK on_lparen on_const on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen UNK on_op UNK on_op UNK on_period UNK on_lparen on_tstring_beg on_embexpr_beg # without this change its possible that we get Encoding errors trying to write UTF-8 messages in current codepage
on_symbeg UNK on_op UNK on_comma on_symbeg UNK on_op UNK on_rparen on_nl rescue on_const on_nl UNK on_ignored_nl if on_lparen on_op UNK # EVENTLOG_ERROR_TYPE, etc
on_symbeg UNK on_op UNK on_rparen on_nl rescue on_const on_nl UNK on_ignored_nl if on_lparen on_op UNK on_period UNK on_rparen on_nl UNK # 0x01 or 0x02, 0x03 etc.
on_rparen on_nl rescue on_const on_nl UNK on_ignored_nl if on_lparen on_op UNK on_period UNK on_rparen on_nl UNK on_period UNK on_nl end # "the message"
UNK on_ignored_nl if on_lparen on_op UNK on_period UNK on_rparen on_nl UNK on_period UNK on_nl end on_nl end on_nl end on_nl # Ignore all errors
on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op base_dir on_period tr on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl # ENV that uses backward slashes
on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op on_tstring_beg on_embexpr_beg on_const on_period join on_lparen base_dir on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg # ENV that uses forward slashes
