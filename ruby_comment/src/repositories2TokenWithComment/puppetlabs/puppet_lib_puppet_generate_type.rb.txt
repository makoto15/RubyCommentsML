UNK on_const on_nl UNK on_const on_nl UNK on_symbeg path on_nl on_ignored_nl UNK on_symbeg format on_nl on_ignored_nl def UNK on_lparen UNK # Responsible for generating type definitions in Puppet
UNK on_const on_nl UNK on_symbeg path on_nl on_ignored_nl UNK on_symbeg format on_nl on_ignored_nl def UNK on_lparen UNK on_comma path on_comma # Represents an input to the type generator
UNK on_symbeg path on_nl on_ignored_nl UNK on_symbeg format on_nl on_ignored_nl def UNK on_lparen UNK on_comma path on_comma format on_rparen on_ignored_nl # Gets the path to the input.
UNK on_symbeg format on_nl on_ignored_nl def UNK on_lparen UNK on_comma path on_comma format on_rparen on_ignored_nl on_ivar on_op UNK on_nl on_ivar # Gets the format to use for generating the output file.
def UNK on_lparen UNK on_comma path on_comma format on_rparen on_ignored_nl on_ivar on_op UNK on_nl on_ivar on_op path on_nl UNK on_period # Initializes an input. # @param base [String] The base path where the input is located. # @param path [String] The path to the input file. # @param format [Symbol] The format to use for generation. # @return [void]
def type_name on_nl on_const on_period UNK on_lparen on_ivar on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period UNK on_nl end on_nl on_ignored_nl def # Gets the expected resource type name for the input. # @return [Symbol] Returns the expected resource type name for the input.
def UNK on_lparen format on_rparen on_ignored_nl format on_op format on_period UNK on_nl raise _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op # Sets the format to use for this input. # @param format [Symbol] The format to use for generation. # @return [Symbol] Returns the new format.
def UNK on_lparen outputdir on_rparen on_ignored_nl f on_op effective_output_path on_lparen outputdir on_rparen on_nl on_const on_op on_const on_op UNK on_lparen f # Determines if the output file is up-to-date with respect to the input file. # @param [String, nil] The path to output to, or nil if determined by input # @return [Boolean] Returns true if the output is up-to-date or false if not.
def UNK on_nl on_ivar on_op on_ignored_nl UNK on_ivar on_nl UNK on_symbeg UNK on_nl on_tstring_beg on_embexpr_beg on_const on_period UNK on_lparen on_ivar # Gets the filename of the output file. # @return [String] Returns the name to the output file.
def UNK on_nl on_ivar on_op on_ignored_nl UNK on_ivar on_nl UNK on_symbeg UNK on_nl on_const on_period UNK on_lparen on_ivar on_comma on_tstring_beg # Gets the path to the output file. # @return [String] Returns the path to the output file.
def UNK on_lparen path on_rparen on_ignored_nl on_ivar on_op path on_nl end on_nl on_ignored_nl def effective_output_path on_lparen outputdir on_rparen on_ignored_nl outputdir # Sets the path to the output file. # @param path [String] The new path to the output file. # @return [String] Returns the new path to the output file.
def effective_output_path on_lparen outputdir on_rparen on_ignored_nl outputdir on_op on_const on_period UNK on_lparen outputdir on_comma UNK on_rparen on_op UNK on_nl end # Returns the outputpath to use given an outputdir that may be nil # If outputdir is not nil, the returned path is relative to that outpudir # otherwise determined by this input. # @param [String, nil] The outputdirectory to use, or nil if to be determined by this Input
def UNK on_nl on_const on_period UNK on_lparen on_const on_period UNK on_lparen UNK on_rparen on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content # Gets the path to the template to use for this input. # @return [String] Returns the path to the template.
def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_period UNK on_lparen format on_rparen on_ignored_nl UNK on_symbeg UNK UNK # Gets the string representation of the input. # @return [String] Returns the string representation of the input.
def UNK on_period UNK on_lparen format on_rparen on_ignored_nl UNK on_symbeg UNK UNK on_period UNK on_lparen format on_rparen on_nl end on_nl # Determines if the given format is supported # @param format [Symbol] The format to use for generation. # @return [Boolean] Returns true if the format is supported or false if not.
def UNK on_period UNK on_lparen format on_op on_symbeg UNK on_comma UNK on_op on_const on_period UNK on_lparen on_symbeg UNK on_rparen on_rparen # Finds the inputs for the generator. # @param format [Symbol] The format to use. # @param environment [Puppet::Node::Environment] The environment to search for inputs. Defaults to the current environment. # @return [Array<Input>] Returns the array of inputs.
inputs on_period UNK on_lbrace on_op input on_op input on_period path on_rbrace on_nl end on_nl on_ignored_nl def UNK on_period UNK on_lparen # Sort the inputs by path
def UNK on_period UNK on_lparen inputs on_comma outputdir on_op UNK on_comma UNK on_op UNK on_rparen on_ignored_nl unless outputdir on_period UNK # Generates files for the given inputs. # If a file is up to date (newer than input) it is kept. # If a file is out of date it is regenerated. # If there is a file for a non existing output in a given output directory it is removed. # If using input specific output removal must be made by hand if input is removed. # # @param inputs [Array<Input>] The inputs to generate files for. # @param outputdir [String, nil] the outputdir where all output should be generated, or nil if next to input # @param force [Boolean] True to force the generation of the output files (skip up-to-date checks) or false if not. # @return [void]
unless outputdir on_period UNK on_nl UNK on_op inputs on_period UNK on_lbrace on_op UNK on_op UNK on_period UNK on_rbrace on_nl UNK # remove files for non existing inputs
on_const on_period UNK on_lparen e on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label type_name on_comma on_label input on_comma # Log the exception and move on to the next input
UNK on_op on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ignored_nl UNK on_op UNK UNK type_name UNK # HACK: there's no way to get a type without loading it (sigh); for now, just get the types hash directly
UNK on_op UNK UNK type_name UNK on_nl unless UNK on_nl on_const on_period UNK _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op # Assume the type follows the naming convention
UNK on_ignored_nl UNK on_op on_const on_op on_const on_op on_const on_period UNK on_lparen UNK on_rparen on_nl UNK on_const on_op e on_nl # Create the model
on_const on_period UNK on_lparen e on_comma on_tstring_beg on_embexpr_beg input on_embexpr_end on_tstring_content on_embexpr_beg e on_period UNK on_embexpr_end on_tstring_end on_rparen on_nl next # Move on to the next input
UNK on_ignored_nl UNK on_op UNK on_period UNK on_lparen UNK UNK input on_period UNK UNK on_rparen on_nl UNK on_const on_op e # Render the template
UNK on_ignored_nl effective_output_path on_op input on_period effective_output_path on_lparen outputdir on_rparen on_nl on_const on_period UNK _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen # Write the output file
next on_nl end on_nl end on_nl on_ignored_nl on_const on_period UNK _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen UNK UNK on_nl end # Move on to the next input
