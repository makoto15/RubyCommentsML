require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl # The client for interacting with the puppetmaster config server.
require on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_op on_const on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end #require 'puppet/parser/script_compiler'
UNK on_const on_op on_const on_nl on_ignored_nl UNK on_symbeg environment on_nl on_ignored_nl def UNK on_period UNK on_nl _ on_lparen on_tstring_beg on_tstring_content # For benchmarking
def UNK on_period UNK on_nl _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl def UNK on_period UNK on_nl # Provide more helpful strings to the logging that the Agent does
def UNK on_nl on_const on_op on_const on_op on_const on_period UNK on_nl rescue on_op detail on_nl on_const on_period log_exception on_lparen detail # Initialize and load storage
def UNK on_lparen facts on_comma query_options on_rparen on_ignored_nl query_options on_op on_lbrace on_rbrace on_nl result on_op UNK on_lparen query_options on_rparen if # Get the remote catalog, yo. Returns nil if no catalog can be found.
if on_ivar on_op result on_period environment on_op on_ivar on_nl on_const on_period UNK _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace # don't use use cached catalog if it doesn't match server specified environment
def UNK on_lparen result on_comma UNK on_comma facts on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl catalog on_op nil on_nl on_ignored_nl # Convert a plain resource catalog into our full host catalog.
if facts on_nl on_const on_op on_const on_op on_const on_op on_const on_period UNK on_lparen facts on_comma result on_rparen on_nl end on_nl # Will mutate the result and replace all Deferred values with resolved values
UNK on_op thinmark do on_ignored_nl facts on_op UNK on_nl UNK on_op UNK on_lparen facts on_rparen end on_nl options on_lbracket on_symbeg # This is a bit complicated. We need the serialized and escaped facts, # and we need to know which format they're encoded in. Thus, we # get a hash with both of these pieces of information. # # facts_for_uploading may set Puppet[:node_name_value] as a side effect
end on_nl options on_lbracket on_symbeg report on_rbracket on_period add_times on_lparen on_symbeg UNK on_comma UNK on_rparen if options on_lbracket on_symbeg report # encode for uploading # was: facts_for_uploading
options on_lbracket on_symbeg report on_rbracket on_period UNK on_op on_const on_lbracket on_symbeg UNK on_rbracket on_nl on_ignored_nl query_options on_lbracket on_symbeg UNK on_rbracket # set report host name now that we have the fact
query_options on_lbracket on_symbeg UNK on_rbracket on_op on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ignored_nl catalog on_op cached_catalog on_op # Query params don't enforce ordered evaluation, so munge this list into a # dot-separated string.
catalog on_op cached_catalog on_op options on_lbracket on_symbeg catalog on_rbracket on_nl unless catalog on_nl catalog on_op UNK on_lparen facts on_comma query_options # apply passes in ral catalog
catalog on_op UNK on_lparen facts on_comma query_options on_rparen on_nl on_const on_period UNK _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen unless catalog # retrieve_catalog returns resource catalog
def UNK on_lparen catalog on_comma options on_rparen on_ignored_nl report on_op options on_lbracket on_symbeg report on_rbracket on_nl report on_period UNK on_op # Apply supplied catalog and return associated application report
def UNK on_lparen options on_op on_lbrace on_rbrace on_rparen on_ignored_nl UNK on_op on_const on_period UNK on_lbracket on_symbeg UNK on_rbracket on_period UNK # The code that actually runs the catalog. # This just passes any options on to the catalog, # which accepts :tags and :ignoreschedules.
options on_lbracket on_symbeg report on_rbracket on_op on_const on_op on_const on_op on_const on_period UNK on_lparen nil on_comma on_ivar on_comma on_ivar on_comma # We create the report pre-populated with default settings for # environment and transaction_uuid very early, this is to ensure # they are sent regardless of any catalog compilation failures or # exceptions.
UNK on_op on_const on_period UNK on_lbracket on_symbeg UNK on_rbracket on_op on_op on_const on_period UNK on_lbracket on_symbeg UNK on_rbracket on_period UNK # Skip failover logic if the server_list setting is empty
if options on_lbracket on_symbeg catalog on_rbracket on_period UNK on_op UNK on_nl UNK on_comma UNK on_op UNK on_nl if UNK on_period # When we are passed a catalog, that means we're in apply # mode. We shouldn't try to do any failover in that case.
if on_const on_lbracket on_symbeg UNK on_rbracket on_nl on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_op # If a cached catalog is explicitly requested, attempt to retrieve it. Skip the node request, # don't pluginsync and switch to the catalog's environment if we successfully retrieve it.
on_const on_lbracket on_symbeg UNK on_rbracket on_op false on_nl on_const on_lbracket on_symbeg UNK on_rbracket on_op false on_nl options on_lbracket on_symbeg UNK # Don't try to retrieve a catalog from the cache again after we've already # failed to do so the first time.
unless on_lparen cached_catalog on_op options on_lbracket on_symbeg catalog on_rbracket on_op on_const on_lbracket on_symbeg UNK on_rbracket on_rparen on_nl begin on_ignored_nl node # We only need to find out the environment to run in if we don't already have a catalog
if on_op node on_period UNK on_op node on_period UNK on_nl node on_period environment on_op on_const on_op on_const on_op on_const on_period # If we have deserialized a node from a rest call, we want to set # an environment instance as a simple 'remote' environment reference.
UNK on_op UNK on_nl UNK catalog on_period environment UNK UNK catalog on_period environment on_period UNK UNK catalog on_period environment on_op # Here we set the local environment based on what we get from the # catalog. Since a change in environment means a change in facts, and # facts may be used to determine which catalog we get, we need to # rerun the process if the environment is changed.
catalog on_op UNK on_lparen nil on_comma facts on_comma options on_comma query_options on_rparen on_nl return nil unless catalog on_nl UNK on_op # if we get here, ignore the cached catalog
if on_op cached_catalog on_op options on_lbracket on_symbeg catalog on_rbracket on_nl UNK on_op options on_lbracket on_symbeg catalog on_rbracket on_nl else on_ignored_nl # now that environment has converged, convert resource catalog into ral catalog # unless we were given a RAL catalog
UNK on_op UNK on_lparen catalog on_comma on_ivar on_comma facts on_comma options on_rparen on_nl on_ignored_nl indirection on_op on_const on_op on_const on_op # REMIND @duration is the time spent loading the last catalog, and doesn't # account for things like we failed to download and fell back to the cache
indirection on_op on_const on_op on_const on_op on_const on_period indirection on_nl if on_op on_const on_lbracket on_symbeg UNK on_rbracket on_op indirection on_period # If not noop, commit the cached resource catalog (not ral catalog). Ideally # we'd just copy the downloaded response body, instead of serializing the # in-memory catalog, but that's hard due to the indirector.
UNK on_op thinmark on_lbrace UNK on_rbrace on_nl on_ignored_nl report on_period add_times on_lparen on_symbeg UNK on_comma UNK on_rparen on_nl end on_nl # TODO: Should mark the report as "failed" if an error occurs and # resubmit_facts returns false. There is currently no API for this.
on_const on_period UNK _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label detail on_rbrace on_nl end on_nl on_lbracket nil on_comma #TRANSLATORS 'server_list' is the name of a setting and should not be translated
def UNK on_nl on_op on_const on_period UNK on_nl facts on_op UNK on_nl on_ignored_nl UNK on_op on_const on_period UNK on_lbracket on_symbeg # Submit updated facts to the Puppet Server # # This method will clear all current fact values, load a fresh set of # fact data, and then submit it to the Puppet Server. # # @return [true] If fact submission succeeds. # @return [false] If an exception is raised during fact generation or # submission.
on_symbeg UNK on_op true on_comma on_ignored_nl on_symbeg environment on_op on_const on_op on_const on_op on_const on_period remote on_lparen on_ivar on_rparen on_comma # don't update cache until after environment converges
