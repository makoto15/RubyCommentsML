UNK on_const on_op on_const on_op on_const on_op on_const on_nl on_ignored_nl UNK on_const on_op on_const on_nl on_ignored_nl def UNK on_period UNK # Make instances of this class directly creatable from the Puppet Language # as object. #
UNK on_const on_op on_const on_nl on_ignored_nl def UNK on_period UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_period UNK # Instances of ResourceTypeImpl can be used as the type of a Puppet::Parser::Resource/Puppet::Resource when compiling #
def UNK on_period UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_period UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl # Returns the Puppet Type for this instance.
def on_op on_lparen other on_rparen on_ignored_nl UNK UNK UNK other on_period UNK on_lparen on_const on_op on_const on_rparen on_nl UNK on_period # Compares this type against the given _other_ (type) and returns -1, 0, or +1 depending on the order. # @param other [Object] the object to compare against (produces nil, if not kind of Type} # @return [-1, 0, +1, nil] produces -1 if this type is before the given _other_ type, 0 if equals, and 1 if after. # Returns nil, if the given _other_ is not a kind of Type. # @see Comparable #
UNK UNK UNK other on_period UNK on_lparen on_const on_op on_const on_rparen on_nl UNK on_period UNK on_op other on_period UNK on_nl # Order is only maintained against other types, not arbitrary objects. # The natural order is based on the reference name used when comparing
UNK on_period UNK on_op other on_period UNK on_nl end on_nl on_ignored_nl on_const on_op on_lbracket on_ignored_nl on_symbeg UNK on_comma on_ignored_nl on_symbeg # against other type instances.
on_const on_op on_const on_period new on_lparen on_const on_rparen on_period UNK on_nl on_ignored_nl UNK on_symbeg name on_nl UNK on_symbeg UNK on_nl # Speed up lookup
on_ivar on_op on_lbrace on_rbrace on_nl on_ivar on_op on_lbracket on_rbracket on_nl on_ignored_nl on_ivar on_op on_lbrace on_rbrace on_nl on_ignored_nl on_const on_period UNK # Compute attributes hash # Compute key_names (possibly compound key if there are multiple name vars).
on_ivar on_op on_lbrace on_rbrace on_nl on_ignored_nl on_const on_period UNK on_lbrace on_op p on_op on_ivar on_lbracket p on_rbracket on_op on_symbeg UNK # Name to kind of attribute
on_const on_period UNK on_lbrace on_op p on_op on_ivar on_lbracket p on_rbracket on_op on_symbeg UNK on_rbrace on_nl on_ignored_nl on_ivar on_op on_const # Add all meta params
on_ivar on_op on_ignored_nl UNK on_ivar on_period UNK on_nl UNK UNK on_nl UNK on_nl UNK UNK on_nl UNK on_ivar on_period UNK # API for title patterns is [ [regexp, [ [ [sym, <lambda>], [sym, <lambda>] ] ] ] ] # Where lambdas are optional. This resource type impl does not support lambdas # Note that the pcore file has a simpler hashmap that is post processed here # since the structure must have Symbol instances for names which the .pp representation # does not deliver. #
UNK on_nl UNK UNK on_nl UNK on_ivar on_period UNK on_nl on_lbracket on_lbracket UNK on_tstring_content UNK on_comma on_lbracket on_lbracket on_ivar on_period # TechDebt: The case of specifying title patterns when having no name vars is unspecified behavior in puppet # Here it is silently ignored.
on_ivar on_period map on_lbrace on_op UNK on_comma UNK on_op on_lbracket UNK on_comma UNK on_period map on_lbrace on_op UNK on_op on_lbracket # TechDebt: The case of having one namevar and an empty title patterns is unspecified behavior in puppet. # Here, it may lead to an empty map which may or may not trigger the wanted/expected behavior. #
raise on_const on_op on_const on_comma UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ivar on_period UNK on_op on_lbracket on_rbracket # TechDebt: While title patterns must be specified when more than one is used, they do not have # to match/set them all since some namevars can be omitted (to support the use case in # the 'package' type where 'provider' attribute is handled as part of the key without being # set from the title. #
def UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_lparen name # Override CompilableResource inclusion
def UNK on_lparen name on_rparen on_ignored_nl on_ivar on_period UNK on_lparen name on_rparen on_op on_const on_period UNK on_lparen name on_rparen on_nl # Answers if the parameter name is a parameter/attribute of this type # This is part of the Puppet::Type API # Check if used when compiling (it is triggered in an apply) #
def UNK on_lparen on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl # The type implementation of finish does a lot of things # * iterates over all parameters and calls post_compile on them if the parameter impl responds to post_compile # * validates the relationship parameters # # This implementation does nothing - it is assumed that the catalog is already validated # via the relationship validator (done late in the game).
end on_nl on_ignored_nl def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl end on_nl on_ignored_nl def UNK # Do nothing.
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_nl # This is called on a resource type # it performs tagging if it is a Class or Node. # It also ensure the parent type is in the catalog, but that is weird since # resource types cannot really inherit
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_nl # Do nothing because nothing is needed when compiling.
on_ignored_nl on_ignored_nl on_ignored_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_nl end # This is what the Puppet::Type implementation does # None of this should be needed
on_ignored_nl on_ignored_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_nl end on_nl # # Make sure our parent class has been evaluated, if we have one. # if parent && !scope.catalog.resource(resource.type, parent) # parent_type(scope).ensure_in_catalog(scope) # end
on_ignored_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl # This will never happen
end on_nl on_ignored_nl def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def # if ['Class', 'Node'].include? resource.type # scope.catalog.tag(*resource.tags) # end
def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_lparen UNK # Being isomorphic in puppet means that the resource is managing a state # (as opposed to a resource like Exec that is a function, possibly with side effect. # In a Ruby implementation of a resource type, @isomorphic = false is used to turn # off isomorphism, it is true by default. # This is part of the Puppet::Type API. #
def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl end on_nl on_ignored_nl on_ignored_nl # Produces the names of the attributes that make out the unique id of a resource #
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl end on_nl on_ignored_nl on_ignored_nl def UNK on_nl UNK on_nl end on_nl on_ignored_nl # Gives a type a chance to issue deprecations for parameters. # @param title [String] the title of the resource of this type # @param attributes [Array<Param>] the set parameters in the resource instance
end on_nl on_ignored_nl on_ignored_nl def UNK on_nl UNK on_nl end on_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl def UNK on_lparen name on_rparen # TODO: Current API somewhat unclear, if done at type level, or per # Param.
on_ignored_nl def UNK on_nl UNK on_nl end on_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl def UNK on_lparen name on_rparen on_ignored_nl raise on_const ####################### # UNSUPPORTED STUFF #######################
def UNK on_nl UNK on_nl end on_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl def UNK on_lparen name on_rparen on_ignored_nl raise on_const on_comma # Applications are not supported
on_ignored_nl on_ignored_nl on_ignored_nl def UNK on_lparen name on_rparen on_ignored_nl raise on_const on_comma on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def ############################ # DON'T KNOW YET ############################
on_ignored_nl def UNK on_lparen name on_rparen on_ignored_nl raise on_const on_comma on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_lparen ################################################## # NEVER CALLED COMPILE SIDE FOR A COMPILATION ##################################################
def UNK on_lparen name on_rparen on_ignored_nl raise on_const on_comma on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_lparen name # Answers :property, :param or :meta depending on the type of the attribute # According to original version, this is called millions of times # and a cache is required. # @param name [Symbol]
end on_nl on_ignored_nl def UNK on_lparen name on_rparen on_ignored_nl raise on_const on_comma on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def # @attr_types[name]
def UNK on_lparen name on_rparen on_ignored_nl raise on_const on_comma on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl raise # Returns the implementation of a param/property/attribute - i.e. a Param class
def UNK on_nl raise on_const on_comma on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl raise on_const on_comma on_tstring_beg # PROBABLY NOT USED WHEN COMPILING # Returns the names of all attributes in a defined order: # * all key attributes (the composite id) # * :provider if it is specified # * all properties # * all parameters # * meta parameters #
end on_nl on_ignored_nl def UNK on_nl raise on_const on_comma on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl raise # key_attributes | (parameters & [:provider]) | properties.collect { |property| property.name } | parameters | metaparams
def UNK on_nl raise on_const on_comma on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl raise on_const on_comma on_tstring_beg # Sets "applies to host"
