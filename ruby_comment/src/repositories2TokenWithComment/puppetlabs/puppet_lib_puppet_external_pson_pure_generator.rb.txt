on_ignored_nl if on_const on_period UNK on_lparen on_symbeg UNK on_rparen on_nl def UNK on_lparen string on_rparen string on_op string on_period UNK # :nodoc:
if on_const on_period UNK on_lparen on_symbeg UNK on_rparen on_nl def UNK on_lparen string on_rparen string on_op string on_period UNK on_nl # Convert a UTF8 encoded Ruby string _string_ to a PSON string, encoded with # UTF16 big endian characters as \u????, and return it.
string on_op string on_period UNK on_nl string on_op on_tstring_beg on_tstring_end string on_period UNK on_lparen on_const on_op on_const on_rparen on_nl string # :nodoc:
string on_period UNK on_lparen on_const on_op on_const on_rparen on_nl string on_period UNK on_lparen UNK on_tstring_content UNK on_rparen on_lbrace on_const on_lbracket # XXX workaround: avoid buffer sharing
string on_period UNK on_lparen UNK on_tstring_content UNK on_rparen on_lbrace on_const on_lbracket UNK on_rbracket on_rbrace on_nl end on_nl end on_nl UNK # :nodoc:
UNK on_const on_nl def self on_period UNK on_lparen opts on_rparen on_ignored_nl UNK opts on_nl UNK self on_nl opts on_nl UNK # This class is used to create State instances, that are use to hold data # while generating a PSON text from a Ruby data structure.
def self on_period UNK on_lparen opts on_rparen on_ignored_nl UNK opts on_nl UNK self on_nl opts on_nl UNK on_const on_nl UNK # Creates a State object from _opts_, which ought to be Hash to create # a new State instance configured by _opts_, something else to create # an unconfigured instance. If _opts_ is a State object, it is just # returned.
def UNK on_lparen opts on_op on_lbrace on_rbrace on_rparen on_ignored_nl on_ivar on_op on_lbrace on_rbrace on_nl on_ivar on_op on_tstring_beg on_tstring_end on_nl on_ivar # Instantiates a new State object, configured by _opts_. # # _opts_ can have the following keys: # # * *indent*: a string used to indent levels (default: ''), # * *space*: a string that is put after, a : or , delimiter (default: ''), # * *space_before*: a string that is put before a : pair delimiter (default: ''), # * *object_nl*: a string that is put at the end of a PSON object (default: ''), # * *array_nl*: a string that is put at the end of a PSON array (default: ''), # * *check_circular*: true if checking for circular data structures # should be done (the default), false otherwise. # * *check_circular*: true if checking for circular data structures # should be done, false (the default) otherwise. # * *allow_nan*: true if NaN, Infinity, and -Infinity should be # generated, otherwise an exception is thrown, if these values are # encountered. This options defaults to false.
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg object_nl on_nl on_ignored_nl # This string is used to indent levels in the PSON text.
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg object_nl on_nl on_ignored_nl attr_accessor on_symbeg array_nl on_nl on_ignored_nl # This string is used to insert a space between the tokens in a PSON # string.
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg object_nl on_nl on_ignored_nl attr_accessor on_symbeg array_nl on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl # This string is used to insert a space before the ':' in PSON objects.
attr_accessor on_symbeg object_nl on_nl on_ignored_nl attr_accessor on_symbeg array_nl on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen depth on_rparen # This string is put at the end of a line that holds a PSON object (or # Hash).
attr_accessor on_symbeg array_nl on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen depth on_rparen UNK if on_ivar on_period UNK # This string is put at the end of a line that holds a PSON array.
attr_accessor on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen depth on_rparen UNK if on_ivar on_period UNK on_nl UNK on_op depth on_op # This integer returns the maximum level of data structure nesting in # the generated PSON, max_nesting = 0 if no maximum is checked.
UNK if on_ivar on_period UNK on_nl UNK on_op depth on_op on_int on_nl UNK on_op on_ivar and on_ignored_nl UNK on_const on_comma # :nodoc:
def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_lparen object # Returns true, if circular data structures should be checked, # otherwise returns false.
def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_lparen object on_rparen on_ignored_nl on_ivar on_period key? on_lparen object on_period # Returns true if NaN, Infinity, and -Infinity should be considered as # valid PSON and output.
def UNK on_lparen object on_rparen on_ignored_nl on_ivar on_period key? on_lparen object on_period UNK on_rparen on_nl end on_nl on_ignored_nl def UNK # Returns _true_, if _object_ was already seen during this generating # run.
def UNK on_lparen object on_rparen on_ignored_nl on_ivar on_lbracket object on_period UNK on_rbracket on_op UNK on_nl end on_nl on_ignored_nl def UNK # Remember _object_, to find out if it was already encountered (if a # cyclic data structure is if a cyclic data structure is rendered).
def UNK on_lparen object on_rparen on_ignored_nl on_ivar on_period UNK object on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen opts # Forget _object_ for this generating run.
def UNK on_lparen opts on_rparen on_ignored_nl on_ivar on_op opts on_lbracket on_symbeg UNK on_rbracket if opts on_period key? on_lparen on_symbeg UNK # Configure this State instance with the Hash _opts_, and return # itself.
on_ivar on_op on_int on_nl UNK opts on_lbracket on_symbeg UNK on_rbracket on_nl on_ivar on_op opts on_lbracket on_symbeg UNK on_rbracket on_nl else # defaults to 19
def UNK on_nl result on_op on_lbrace on_rbrace on_nl UNK UNK UNK UNK on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep # Returns the configuration instance variables as a hash, that can be # passed to the configure method.
def to_pson on_lparen on_op on_rparen to_s on_period to_pson end on_nl end on_nl on_ignored_nl module on_const on_nl def to_pson on_lparen state # Converts this object to a string (calling #to_s), converts # it to a PSON string, and returns the result. This is a fallback, if no # special method #to_pson was defined for some object.
def to_pson on_lparen state on_op UNK on_comma depth on_op on_int on_comma on_op on_rparen on_ignored_nl if state on_nl state on_op on_const # Returns a PSON string containing a PSON object, that is unparsed from # this Hash instance. # _state_ is a PSON::State object, that can also be used to configure the # produced PSON string output further. # _depth_ is used to find out nesting depth, to indent accordingly.
def to_pson on_lparen state on_op UNK on_comma depth on_op on_int on_comma on_op on_rparen on_ignored_nl if state on_nl state on_op on_const # Returns a PSON string containing a PSON array, that is unparsed from # this Array instance. # _state_ is a PSON::State object, that can also be used to configure the # produced PSON string output further. # _depth_ is used to find out nesting depth, to indent accordingly.
def to_pson on_lparen on_op on_rparen to_s end on_nl end on_nl on_ignored_nl module on_const on_nl def to_pson on_lparen state on_op UNK # Returns a PSON string representation for this Integer number.
def to_pson on_lparen state on_op UNK on_comma on_op on_rparen on_ignored_nl if UNK on_op UNK on_nl if on_op state on_op state # Returns a PSON string representation for this Float number.
def to_pson on_lparen on_op on_rparen on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op on_const on_period UNK on_lparen self on_rparen on_op on_tstring_beg on_tstring_content on_tstring_end # This string should be encoded with UTF-8 A call to this method # returns a PSON string encoded with UTF16 big endian characters as # \u????.
module on_const on_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period UNK on_lparen on_tstring_beg on_tstring_content # Module that holds the extending methods if, the String module is # included.
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl # Raw Strings are PSON Objects (the raw bytes are stored in an array for the # key "raw"). The Ruby String can be created by this module method.
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK on_const on_nl end on_nl on_ignored_nl def UNK on_nl on_lbrace # Extends _modul_ with the String::Extend module.
def UNK on_nl on_lbrace on_ignored_nl on_const on_period UNK on_op self on_period UNK on_period UNK on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op # This method creates a raw object hash, that can be nested into # other data structures and will be unparsed as a raw string. This # method should be used, if you want to convert raw strings to PSON # instead of UTF-8 strings, e.g. binary data.
on_lbrace on_ignored_nl on_const on_period UNK on_op self on_period UNK on_period UNK on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op self on_period UNK # create_id will be ignored during deserialization
def UNK on_lparen on_op UNK on_rparen on_ignored_nl UNK on_period to_pson on_lparen on_op UNK on_rparen on_nl end on_nl end on_nl on_ignored_nl # This method creates a PSON text from the result of # a call to to_pson_raw_object of this String.
def to_pson on_lparen on_op on_rparen on_tstring_beg on_tstring_content on_tstring_end end on_nl end on_nl on_ignored_nl module on_const on_nl def to_pson on_lparen on_op # Returns a PSON string for true: 'true'.
def to_pson on_lparen on_op on_rparen on_tstring_beg on_tstring_content on_tstring_end end on_nl end on_nl on_ignored_nl module on_const on_nl def to_pson on_lparen on_op # Returns a PSON string for false: 'false'.
def to_pson on_lparen on_op on_rparen on_tstring_beg on_tstring_content on_tstring_end end on_nl end on_nl end on_nl end on_nl end on_nl end on_nl # Returns a PSON string for nil: 'null'.
