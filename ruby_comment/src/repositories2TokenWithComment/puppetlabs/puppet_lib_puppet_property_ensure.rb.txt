UNK on_const on_op on_const on_op on_const on_op on_const on_op on_const on_nl on_ivar on_op on_symbeg UNK on_nl on_ignored_nl UNK UNK on_period # This property is automatically added to any {Puppet::Type} that responds # to the methods 'exists?', 'create', and 'destroy'. # # Ensure defaults to having the wanted _(should)_ value `:present`. # # @api public #
end on_nl on_ignored_nl UNK on_lparen on_symbeg UNK on_rparen UNK on_ignored_nl if on_ivar on_period provider UNK on_ivar on_period provider on_period UNK # return nil so the event is autogenerated
end on_nl on_ignored_nl UNK UNK on_ignored_nl if on_ivar on_period UNK on_nl on_symbeg UNK on_nl else on_ignored_nl UNK on_nl end on_nl # return nil so the event is autogenerated
on_ivar on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl UNK UNK on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK # This doc will probably get overridden
UNK on_period UNK UNK on_ignored_nl end on_nl end on_nl on_ignored_nl UNK UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK on_ignored_nl # Add in the two properties that everyone will have.
UNK UNK on_nl UNK on_op on_ivar on_period provider on_nl if UNK on_op UNK on_period UNK on_lparen on_symbeg UNK on_rparen on_nl # Retrieves the _is_ value for the ensure property. # The existence of the resource is checked by first consulting the provider (if it responds to # `:exists`), and secondly the resource. A a value of `:present` or `:absent` is returned # depending on if the managed entity exists or not. # # @return [Symbol] a value of `:present` or `:absent` depending on if it exists or not # @raise [Puppet::DevError] if neither the provider nor the resource responds to `:exists` #
UNK on_op on_ivar on_period provider on_nl if UNK on_op UNK on_period UNK on_lparen on_symbeg UNK on_rparen on_nl UNK on_op UNK # XXX This is a problem -- whether the object exists or not often # depends on the results of other properties, yet we're the first property # to get checked, which means that those other properties do not have # @is values set. This seems to be the source of quite a few bugs, # although they're mostly logging bugs, not functional ones.
UNK UNK on_ignored_nl if on_ivar on_period UNK on_nl on_symbeg UNK on_nl else on_ignored_nl UNK on_nl end on_nl end on_nl end # If they're talking about the thing at all, they generally want to # say it should exist. #defaultto :present
