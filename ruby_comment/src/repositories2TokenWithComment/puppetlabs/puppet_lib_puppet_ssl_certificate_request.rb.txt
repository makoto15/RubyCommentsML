class on_const on_op on_const on_op on_const on_op on_const on_op on_const on_op on_const on_nl UNK on_const on_op on_const on_op on_const on_nl # This class creates and manages X509 certificate signing requests. # # ## CSR attributes # # CSRs may contain a set of attributes that includes supplementary information # about the CSR or information for the signed certificate. # # PKCS#9/RFC 2985 section 5.4 formally defines the "Challenge password", # "Extension request", and "Extended-certificate attributes", but this # implementation only handles the "Extension request" attribute. Other # attributes may be defined on a CSR, but the RFC doesn't define behavior for # any other attributes so we treat them as only informational. # # ## CSR Extension request attribute # # CSRs may contain an optional set of extension requests, which allow CSRs to # include additional information that may be included in the signed # certificate. Any additional information that should be copied from the CSR # to the signed certificate MUST be included in this attribute. # # This behavior is dictated by PKCS#9/RFC 2985 section 5.4.2. # # @see https://tools.ietf.org/html/rfc2985 "RFC 2985 Section 5.4.2 Extension request" #
def UNK on_period UNK on_nl on_lbracket on_symbeg UNK on_rbracket on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op on_const on_op # Because of how the format handler class is included, this # can't be in the base class.
def UNK on_lparen key on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl on_const on_period UNK _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen # Create a certificate request with our system settings. # # @param key [OpenSSL::X509::Key, Puppet::SSL::Key] The key pair associated # with this CSR. # @param options [Hash] # @option options [String] :dns_alt_names A comma separated list of # Subject Alternative Names to include in the CSR extension request. # @option options [Hash<String, String, Array<String>>] :csr_attributes A hash # of OIDs and values that are either a string or array of strings. # @option options [Array<String, String>] :extension_requests A hash of # certificate extensions to add to the CSR extReq attribute, excluding # the Subject Alternative Names extension. # # @raise [Puppet::Error] If the generated CSR signature couldn't be verified # # @return [OpenSSL::X509::Request] The generated CSR
key on_op key on_period UNK if key on_period is_a? on_lparen on_const on_op on_const on_op on_const on_rparen on_nl on_ignored_nl UNK on_op # Support either an actual SSL key, or a Puppet key.
UNK on_op name on_op on_const on_op on_const on_op on_const on_op on_const on_period UNK on_lbracket on_symbeg UNK on_rbracket on_op name on_nl # If we're a CSR for the CA, then use the real ca_name, rather than the # fake 'ca' name. This is mostly for backward compatibility with 0.24.x, # but it's also just a good idea.
UNK on_op key on_period UNK on_nl UNK on_op on_const on_op on_const on_op on_const on_period new on_lparen UNK on_period UNK on_rparen # EC#public_key doesn't follow the PKey API, # see https://github.com/ruby/openssl/issues/29
if on_ivar on_period UNK on_nl on_const on_period UNK _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label UNK on_period name # we won't be able to get the digest on jruby
on_ivar on_op on_lbracket on_const on_op on_const on_op on_const on_comma on_ignored_nl on_const on_op on_const on_op on_const on_comma on_ignored_nl on_const on_op on_const # A list of ASN1 types than can't be directly converted to a Ruby type
UNK on_op on_const on_op on_const on_period UNK on_lparen UNK on_period UNK on_period value on_rparen on_nl UNK on_const on_op on_const on_op # Attempt to decode the extension's DER data located in the original OctetString
UNK UNK on_period UNK on_period value on_nl end on_nl on_ignored_nl if on_ivar on_period UNK on_lparen UNK on_period class on_rparen UNK # This is to allow supporting the old-style of not DER encoding trusted facts
if on_ivar on_period UNK on_lparen UNK on_period class on_rparen UNK on_ignored_nl on_const on_op on_const on_op on_const on_period new on_lparen UNK # If the extension value can not be directly converted to an atomic Ruby # type, use the original ASN1 value. This is needed to work around a bug # in Ruby's OpenSSL library which doesn't convert the value of unknown # extension OIDs properly. See PUP-3560
on_const on_op on_const on_op on_const on_period new on_lparen UNK on_period UNK on_period value on_comma UNK on_period UNK on_rparen on_period value # Allows OpenSSL to take the ASN1 value and turn it into something Ruby understands
def UNK on_nl raise on_const on_op on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen unless on_ivar on_nl on_ignored_nl attribute on_op # Return the set of extensions requested on this CSR, in a form designed to # be useful to Ruby: an array of hashes. Which, not coincidentally, you can pass # successfully to the OpenSSL constructor later, if you want. # # @return [Array<Hash{String => String}>] An array of two or three element # hashes, with key/value pairs for the extension's oid, its value, and # optionally its critical state.
attribute on_op on_ivar on_period UNK on_period UNK on_lbrace on_op x on_op x on_period oid on_op on_tstring_beg on_tstring_content on_tstring_end on_rbrace on_nl # Prefer the standard extReq, but accept the Microsoft specific version as # a fallback, if the standard version isn't found.
UNK ext_values on_period UNK on_nl UNK on_int on_nl on_lbrace on_tstring_beg on_tstring_content on_tstring_end on_op ext_values on_lbracket on_int on_rbracket on_period value on_comma # OK, turn that into an extension, to unpack the content. Lovely that # we have to swap the order of arguments to the underlying method, or # perhaps that the ASN.1 representation chose to pack them in a # strange order where the optional component comes *earlier* than the # fixed component in the sequence.
def UNK on_nl UNK on_op on_ivar on_period UNK on_period UNK do on_op UNK on_op on_ignored_nl on_const on_period UNK UNK on_period # Return all user specified attributes attached to this CSR as a hash. IF an # OID has a single value it is returned as a string, otherwise all values are # returned as an array. # # The format of CSR attributes is specified in PKCS#10/RFC 2986 # # @see https://tools.ietf.org/html/rfc2986 "RFC 2986 Certification Request Syntax Specification" # # @api public # # @return [Hash<String, String>]
on_const on_op on_lbracket on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end # Exclude OIDs that may conflict with how Puppet creates CSRs. # # We only have nominal support for Microsoft extension requests, but since we # ultimately respect that field when looking for extension requests in a CSR # we need to prevent that field from being written to directly.
def UNK on_lparen options on_rparen on_ignored_nl extensions on_op on_lbracket on_rbracket on_nl on_ignored_nl if options on_lbracket on_symbeg UNK on_rbracket on_nl options # @api private
def UNK on_lparen attribute on_rparen on_ignored_nl on_ignored_nl unless attribute on_period value on_period is_a? on_const on_op on_const on_op on_const on_nl raise # Unpack the extReq attribute into an array of Extensions. # # The extension request attribute is structured like # `Set[Sequence[Extensions]]` where the outer Set only contains a single # sequence. # # In addition the Ruby implementation of ASN1 requires that all ASN1 values # contain a single value, so Sets and Sequence have to contain an array # that in turn holds the elements. This is why we have to unpack an array # every time we unpack a Set/Seq. # # @see https://tools.ietf.org/html/rfc2985#ref-10 5.4.2 CSR Extension Request structure # @see https://tools.ietf.org/html/rfc5280 4.1 Certificate Extension structure # # @api private # # @param attribute [OpenSSL::X509::Attribute] The X509 extension request # # @return [Array<Array<Object>>] A array of arrays containing the extension # OID the critical state if present, and the extension value.
