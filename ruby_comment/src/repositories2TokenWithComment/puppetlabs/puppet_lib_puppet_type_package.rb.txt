on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl on_const on_period UNK on_lparen on_symbeg # coding: utf-8 # Define the different packaging systems. Each package system is implemented # in a module, which then gets used to individually extend each package object. # This allows packages to exist on the same machine using different packaging # systems.
UNK on_lparen on_symbeg UNK on_comma on_symbeg UNK on_rparen on_nl on_ignored_nl newvalue on_lparen on_symbeg latest on_comma on_symbeg required_features on_op on_symbeg UNK # Alias the 'present' value.
UNK on_op self on_period UNK on_nl UNK on_ignored_nl provider on_period UNK on_nl UNK on_op detail on_nl self on_period UNK on_const # Because yum always exits with a 0 exit code, there's a retrieve # in the "install" method. So, check the current state now, # to compare against later.
def UNK on_lparen is on_rparen on_ignored_nl on_ivar on_op on_lparen on_const on_period UNK on_period UNK on_op on_int on_rparen on_nl on_ignored_nl on_ivar # Override the parent method, because we've got all kinds of # funky definitions of 'in sync'.
on_ignored_nl on_ivar on_period UNK on_lbrace on_op should on_op on_ignored_nl UNK should on_nl when on_symbeg UNK on_nl return true UNK on_lbracket # Iterate across all of the should values, and see how they # turn out.
return false if is on_op on_symbeg absent on_op is on_op on_symbeg purged on_nl on_ignored_nl if on_ivar UNK on_lparen on_lparen on_const # Short-circuit packages that are not present
if on_ivar UNK on_lparen on_lparen on_const on_period UNK on_period UNK on_op on_ivar on_rparen on_op on_int on_rparen on_op on_int on_nl else # Don't run 'latest' more than about every 5 minutes
else on_ignored_nl UNK on_ignored_nl on_ivar on_op provider on_period latest on_nl on_ivar on_op on_const on_period UNK on_period UNK on_nl UNK on_op #self.debug "Skipping latest check"
return true on_nl else on_ignored_nl self on_period UNK on_tstring_beg UNK on_ivar on_period UNK UNK on_tstring_content UNK is on_period UNK UNK # This will only happen on packaging systems # that can't query versions.
when on_op on_const on_lparen is on_rparen on_nl return true on_nl else on_ignored_nl return provider on_period UNK on_lparen is on_rparen if # this handles version number matches and # supports providers that can have multiple versions installed
return provider on_period UNK on_lparen is on_rparen if provider on_period respond_to? on_lparen on_symbeg UNK on_rparen on_nl end on_nl on_rbrace on_nl # We have version numbers, and no match. If the provider has # additional logic, run it here.
def UNK on_nl provider on_period UNK on_lbracket on_symbeg ensure on_rbracket on_nl end on_nl on_ignored_nl def UNK on_lparen newvalue on_op on_ivar # This retrieves the current state. LAK: I think this method is unused.
def UNK on_lparen newvalue on_op on_ivar on_rparen on_ignored_nl if on_ivar on_nl super on_lparen on_ivar on_rparen on_nl else on_ignored_nl super on_lparen # Provide a bit more information when logging upgrades.
return on_tstring_beg on_tstring_content on_tstring_end if newvalue on_op on_symbeg purged on_nl on_ignored_nl return on_tstring_beg on_tstring_content on_tstring_end if on_lparen currentvalue on_period UNK # Handle transitioning from any previous state to 'purged'
return on_tstring_beg on_tstring_content on_tstring_end if on_lparen currentvalue on_period UNK on_op currentvalue on_op on_symbeg absent on_op currentvalue on_op on_symbeg purged on_rparen # Check for transitions from nil/purged/absent to 'created' (any state that is not absent and not purged)
super on_lparen currentvalue on_comma newvalue on_rparen on_nl end on_nl end on_nl on_ignored_nl newparam on_lparen on_symbeg UNK on_rparen do on_ignored_nl desc # The base should handle the normal property transitions
UNK on_nl UNK on_lparen on_symbeg provider on_rparen on_period UNK on_nl on_ignored_nl def self on_period UNK on_nl on_lbracket on_symbeg provider on_rbracket # We call providify here so that we can set provider as a namevar. # Normally this method is called after newtype finishes constructing this # Type class.
newparam on_lparen on_symbeg UNK on_comma on_symbeg required_features on_op on_symbeg UNK on_rparen do on_ignored_nl desc on_heredoc_beg on_nl on_tstring_content on_heredoc_end on_ignored_nl UNK # Specify a targeted package management command.
def self on_period UNK on_nl on_lbracket on_lbracket UNK on_tstring_content UNK on_comma on_lbracket on_lbracket on_symbeg UNK on_rbracket on_rbracket on_rbracket on_rbracket on_nl # We have more than one namevar, so we need title_patterns. # However, we cheat and set the patterns to map to name only # and completely ignore provider (and command, for targetable providers). # So far, the logic that determines uniqueness appears to just # "Do The Right Thingâ„¢" when provider (and command) are explicitly set. # # The following resources will be seen as unique by puppet: # # # Uniqueness Key: ['mysql', nil] # package {'mysql': } # # # Uniqueness Key: ['mysql', 'gem', nil] # package {'gem-mysql': # name => 'mysql, # provider => gem, # } # # # Uniqueness Key: ['mysql', 'gem', '/opt/ruby/bin/gem'] # package {'gem-mysql-opt': # name => 'mysql, # provider => gem # command => '/opt/ruby/bin/gem', # } # # This does not handle the case where providers like 'yum' and 'rpm' should # clash. Also, declarations that implicitly use the default provider will # clash with those that explicitly use the default.
on_lbracket on_lbracket UNK on_tstring_content UNK on_comma on_lbracket on_lbracket on_symbeg UNK on_rbracket on_rbracket on_rbracket on_rbracket on_nl end on_nl on_ignored_nl UNK on_lparen # This is the default title pattern for all types, except hard-wired to # set only name.
def UNK on_nl UNK on_op on_ivar on_lbracket on_symbeg ensure on_rbracket on_nl if UNK on_nl UNK on_period latest on_op UNK on_nl # This only exists for testing.
def UNK on_nl on_ivar on_period UNK on_lparen on_symbeg ensure on_rparen on_op on_symbeg absent on_nl end on_nl on_ignored_nl def UNK on_lparen # The 'query' method returns a hash of info if the package # exists and returns nil if it does not.
newparam on_lparen on_symbeg UNK on_rparen do on_ignored_nl desc on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_lparen on_symbeg true on_comma on_symbeg false on_rparen # This parameter exists to ensure backwards compatibility is preserved. # See https://github.com/puppetlabs/puppet/pull/2614 for discussion. # If/when a metaparameter for controlling how arbitrary resources respond # to refreshing is created, that will supersede this, and this will be # deprecated.
def UNK on_nl if provider on_period UNK on_op on_ignored_nl on_ivar on_lbracket on_symbeg UNK on_rbracket on_period value on_op on_symbeg true on_op # When a refresh event is triggered, calls reinstall on providers # that support the reinstall_on_refresh parameter.
