defaultto do on_ignored_nl if on_ivar on_period UNK on_nl on_symbeg UNK on_nl else on_ignored_nl UNK on_nl end on_nl end on_nl on_ignored_nl # If they're talking about the thing at all, they generally want to # say it should exist.
on_ivar on_period each do on_op value on_op on_ignored_nl return true if UNK on_op on_const on_op on_const on_period gid on_lparen value # We know the 'is' is a number, so we need to convert the 'should' to a number, # too.
end on_nl end on_nl on_ignored_nl newproperty on_lparen on_symbeg UNK on_rparen do on_ignored_nl desc on_tstring_beg on_tstring_content on_tstring_end on_nl def UNK on_lparen # Use the default event.
if on_op on_ivar on_period UNK on_op provider on_period UNK on_lparen on_symbeg UNK on_rparen on_nl return provider on_period UNK on_lparen UNK # nameservice provider requires special attention to encoding # Overrides Puppet::Property#insync?
def UNK on_lparen currentvalue on_comma newvalue on_rparen on_ignored_nl if newvalue on_period is_a? on_lparen on_const on_rparen on_op on_op on_const on_period UNK # In the case that our comments have incompatible encodings, set external # encoding to support concatenation for display. # overrides Puppet::Property#change_to_s
newvalue on_op provider on_period UNK on_lparen newvalue on_rparen on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period UNK on_nl end on_nl # for Windows ADSI # de-dupe the "newvalue" when the sync event message is generated, # due to final retrieve called after the resource has been modified
def UNK on_nl if provider on_period UNK on_lparen on_symbeg UNK on_rparen on_nl return provider on_period UNK on_lparen provider on_period groups # override Puppet::Property::List#retrieve
return provider on_period UNK on_lparen provider on_period groups on_rparen on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl # Windows ADSI groups returns SIDs, but retrieve needs names # must return qualified names for SIDs for "is" value and puppet resource
raise on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl end on_nl end on_nl on_ignored_nl UNK on_lparen on_symbeg #TRANSLATORS YYYY-MM-DD represents a date with a four-digit year, a two-digit month, and a two-digit day, #TRANSLATORS separated by dashes.
UNK on_lparen on_symbeg group on_rparen do on_ignored_nl UNK on_op on_lbracket on_rbracket on_nl on_ignored_nl obj on_op on_ivar on_lbracket on_symbeg gid on_rbracket # Autorequire the group, if it's around
obj on_op on_ivar on_lbracket on_symbeg gid on_rbracket on_nl groups on_op obj on_period UNK if obj on_nl if groups on_nl groups # autorequire primary group, if managed
obj on_op on_ivar on_lbracket on_symbeg groups on_rbracket on_nl if obj on_nl groups on_op obj on_period UNK on_nl if groups on_nl # autorequire groups, excluding primary group, if managed
def UNK on_nl provider on_period UNK on_nl end on_nl on_ignored_nl newproperty on_lparen on_symbeg UNK on_comma on_symbeg parent on_op on_const on_op # This method has been exposed for puppet to manage users and groups of # files in its settings and should not be considered available outside of # puppet. # # (see Puppet::Settings#service_user_available?) # # @return [Boolean] if the user exists on the system # @api private
UNK on_lparen on_symbeg UNK on_rparen do on_ignored_nl UNK on_op on_lbracket on_rbracket on_nl on_ignored_nl UNK on_op on_ivar on_lbracket on_symbeg UNK on_rbracket #autorequire the roles that the user has
newvalues on_lparen on_symbeg true on_comma on_symbeg false on_rparen on_nl on_ignored_nl validate do on_op value on_op on_ignored_nl if on_lbracket on_symbeg true # Use Symbols instead of booleans until PUP-1967 is resolved.
UNK on_op value on_period UNK on_period UNK on_nl value on_op UNK if on_lbracket on_symbeg true on_comma on_symbeg false on_rbracket on_period # Resolve string, boolean and symbol forms of true and false to a # single representation.
on_lbracket value on_rbracket on_period UNK on_period UNK do on_op entry on_op on_ignored_nl if entry on_op on_regexp_beg on_tstring_content on_regexp_end and UNK # value is an array - munge each value
entry on_op entry on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end on_comma on_tstring_beg on_embexpr_beg home on_embexpr_end on_tstring_content on_tstring_end on_rparen on_nl entry on_period # make sure frozen value is duplicated by using a gsub, second mutating gsub! is then ok
def UNK on_nl UNK on_lbracket on_symbeg UNK on_rbracket on_period on_ignored_nl UNK on_lbrace on_op UNK on_op on_const on_period UNK on_lparen UNK # Generate ssh_authorized_keys resources for purging. The key files are # taken from the purge_ssh_keys parameter. The generated resources inherit # all metaparameters from the parent user resource. # # @return [Array<Puppet::Type::Ssh_authorized_key] a list of resources # representing the found keys # @see generate # @api private
def UNK on_lparen UNK on_rparen on_ignored_nl return on_lbracket on_rbracket UNK on_const on_op on_const on_period UNK on_lparen on_symbeg UNK on_rparen on_nl # Parse an ssh authorized keys file superficially, extract the comments # on the keys. These are considered names of possible ssh_authorized_keys # resources. Keys that are managed by the present catalog are ignored. # # @see generate # @api private # @return [Array<Puppet::Type::Ssh_authorized_key] a list of resources # representing the found keys
return on_lbracket on_rbracket UNK on_const on_op on_const on_period UNK on_lparen on_symbeg UNK on_rparen on_nl on_ignored_nl UNK on_op on_lbracket on_rbracket on_nl # The ssh_authorized_key type is distributed as a module on the Forge, # so we shouldn't rely on it being available.
on_const on_op on_const on_period UNK on_lparen UNK on_comma UNK on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period each do on_op UNK on_op # RFC 4716 specifies UTF-8 allowed in public key files per https://www.ietf.org/rfc/rfc4716.txt # the authorized_keys file may contain UTF-8 comments
name on_op UNK on_nl if name on_period UNK on_nl UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl name on_op # the name is stored in the 4th capture of the regex
name on_op on_tstring_beg on_embexpr_beg UNK on_embexpr_end on_tstring_content on_embexpr_beg UNK on_op UNK on_embexpr_end on_tstring_end on_nl end on_nl UNK on_op name on_nl # If no comment is specified for this key, generate a unique internal # name. This uses the same rules as # provider/ssh_authorized_key/parsed (PUP-3357)
