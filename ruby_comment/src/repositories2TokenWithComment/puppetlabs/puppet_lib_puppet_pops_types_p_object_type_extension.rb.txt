UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl def UNK on_period UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK # Base class for Parameterized Object implementations. The wrapper impersonates the base # object and extends it with methods to filter assignable types and instances based on parameter # values. # # @api public
def UNK on_period create on_lparen base_type on_comma init_parameters on_rparen on_ignored_nl UNK on_op on_const on_period UNK on_period UNK on_lparen on_tstring_beg UNK # @api private
def UNK on_period UNK on_lparen base_type on_comma UNK on_rparen on_ignored_nl UNK on_op base_type on_period UNK on_lparen UNK on_rparen on_nl UNK # Creates an array of type parameters from the attributes of the given instance that matches the # type parameters by name. Type parameters for which there is no matching attribute # will have `nil` in their corresponding position on the array. The array is then passed # as the `init_parameters` argument in a call to `create` # # @return [PObjectTypeExtension] the created extension # @api private
def UNK on_lparen base_type on_comma init_parameters on_rparen on_ignored_nl pts on_op base_type on_period UNK on_lparen UNK on_rparen on_nl UNK on_const on_op # @api private
UNK on_op pts on_period UNK on_op on_int on_op on_op pts on_period UNK on_lbracket on_int on_rbracket on_period UNK on_period UNK on_lparen # Catch case when first parameter is an assignable Hash
def init_parameters on_nl pts on_op on_ivar on_period UNK on_lparen UNK on_rparen on_nl if pts on_period UNK on_op on_int on_nl on_ivar # Return the parameter values as positional arguments with unset values as :default. The # array is stripped from trailing :default values # @return [Array] the parameter values # @api private
UNK on_period UNK UNK UNK on_period UNK on_op on_symbeg UNK on_nl UNK on_nl end on_nl end on_nl on_ignored_nl def UNK # Remove trailing defaults
def UNK on_lparen o on_rparen on_ignored_nl UNK on_lparen o on_rparen on_op on_ivar on_period UNK on_lparen o on_period base_type on_rparen on_op # @api private
def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK on_op on_ivar on_period UNK on_nl end # @api private
def UNK on_nl on_ivar on_period UNK on_op on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK # @api private
def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_period UNK on_lparen # @api private
def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl def create on_lparen on_op # @api private
def create on_lparen on_op UNK on_rparen on_ignored_nl on_ivar on_period create on_lparen on_op UNK on_rparen on_nl end on_nl on_ignored_nl def UNK # @api private
def UNK on_lparen o on_comma guard on_op UNK on_rparen on_ignored_nl on_ivar on_period UNK on_lparen o on_comma guard on_rparen on_op UNK # @api private
def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl # @api private
def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen create on_op UNK on_rparen on_ignored_nl on_ivar on_period # @api private
def UNK on_lparen create on_op UNK on_rparen on_ignored_nl on_ivar on_period UNK on_lparen create on_rparen on_nl end on_nl on_ignored_nl def UNK # @api private
def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl def # @api private
def UNK on_lparen UNK on_comma guard on_rparen on_ignored_nl UNK on_op on_const on_op on_const on_period UNK on_period UNK on_nl on_ivar on_period # Checks that the given `param_values` hash contains all keys present in the `parameters` of # this instance and that each keyed value is a match for the given parameter. The match is done # using case expression semantics. # # This method is only called when a given type is found to be assignable to the base type of # this extension. # # @param param_values[Hash] the parameter values of the assignable type # @param guard[RecursionGuard] guard against endless recursion # @return [Boolean] true or false to indicate assignability # @api public
UNK on_op on_const on_op on_const on_period UNK on_period UNK on_nl on_ivar on_period UNK on_period UNK do on_op pn on_op on_ignored_nl # Default implementation performs case expression style matching of all parameter values # provided that the value exist (this should always be the case, since all defaults have # been assigned at this point)
def UNK on_lparen o on_comma guard on_rparen on_ignored_nl UNK on_op on_const on_op on_const on_period UNK on_period UNK on_nl on_ivar on_period # Checks that the given instance `o` has one attribute for each key present in the `parameters` of # this instance and that each attribute value is a match for the given parameter. The match is done # using case expression semantics. # # This method is only called when the given value is found to be an instance of the base type of # this extension. # # @param o [Object] the instance to test # @param guard[RecursionGuard] guard against endless recursion # @return [Boolean] true or false to indicate if the value is an instance or not # @api public
def UNK on_lparen o on_comma guard on_op UNK on_rparen on_ignored_nl if o on_period UNK on_lparen on_const on_rparen on_nl on_ivar on_period # @api private
