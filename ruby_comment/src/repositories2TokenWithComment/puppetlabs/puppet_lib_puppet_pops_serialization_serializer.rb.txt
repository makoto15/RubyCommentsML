UNK on_const on_nl UNK UNK UNK on_nl on_ignored_nl def UNK on_lparen UNK on_comma UNK on_op on_const on_rparen on_ignored_nl on_ivar on_op # The serializer is capable of writing, arrays, maps, and complex objects using an underlying protocol writer. It takes care of # tabulating and disassembling complex objects. # @api public
UNK UNK UNK on_nl on_ignored_nl def UNK on_lparen UNK on_comma UNK on_op on_const on_rparen on_ignored_nl on_ivar on_op UNK UNK on_nl # Provides access to the writer. # @api private
def UNK on_lparen UNK on_comma UNK on_op on_const on_rparen on_ignored_nl on_ivar on_op UNK UNK on_nl on_ivar on_op UNK on_nl on_ivar # @param writer [AbstractWriter] the writer that is used for writing primitive values # @param options [{String, Object}] serialization options # @option options [Boolean] :type_by_reference `true` if Object types are serialized by name only. # @api public
def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def write on_lparen value on_rparen on_ignored_nl UNK value on_nl when # Tell the underlying writer to finish # @api public
def write on_lparen value on_rparen on_ignored_nl UNK value on_nl when on_const on_comma on_const on_comma on_const on_comma UNK on_comma UNK on_comma # Write an object # @param [Object] value the object to write # @api public
def UNK on_lparen size on_rparen on_ignored_nl on_ivar on_period write on_lparen on_const on_op on_const on_period UNK on_lparen size on_rparen on_rparen on_nl # Write the start of an array. # @param [Integer] size the size of the array # @api private
def UNK on_lparen size on_rparen on_ignored_nl on_ivar on_period write on_lparen on_const on_op on_const on_period UNK on_lparen size on_rparen on_rparen on_nl # Write the start of a map (hash). # @param [Integer] size the number of entries in the map # @api private
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl on_ivar on_period write on_lparen on_const on_op on_const on_period UNK on_lparen UNK on_comma # Write the start of a complex pcore object # @param [String] type_ref the name of the type # @param [Integer] attr_count the number of attributes in the object # @api private
def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_period write on_lparen on_const on_op on_const on_period UNK on_lparen UNK on_rparen on_rparen on_nl # Write the start of a complex object # @param [Integer] attr_count the number of attributes in the object # @api private
def UNK on_nl on_ivar on_period write on_lparen on_const on_op on_const on_op on_const on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl # Write the start of a sensitive object # @api private
def UNK on_lparen value on_rparen on_ignored_nl UNK on_ignored_nl when value on_period instance_of? on_lparen on_const on_rparen on_comma on_ignored_nl value on_period instance_of? # First time write of a tabulated object. This means that the object is written and then remembered. Subsequent writes # of the same object will yield a write of a tabulation index instead. # @param [Object] value the value to write # @api private
