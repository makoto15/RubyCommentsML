on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl # Puppet as a Library "PAL"
UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK # Yes, this requires all of puppet for now because 'settings' and many other things...
UNK on_const on_nl UNK on_const on_nl on_ignored_nl def self on_period UNK on_lparen on_ignored_nl on_label false on_comma on_ignored_nl on_label nil on_comma # This is the main entry point for "Puppet As a Library" PAL. # This file should be required instead of "puppet" # Initially, this will require ALL of puppet - over time this will change as the monolithical "puppet" is broken up # into smaller components. # # @example Running a snippet of Puppet Language code # require 'puppet_pal' # result = Puppet::Pal.in_tmp_environment('pal_env', modulepath: ['/tmp/testmodules']) do |pal| # pal.evaluate_script_string('1+2+3') # end # # The result is the value 6 # # @example Calling a function # require 'puppet_pal' # result = Puppet::Pal.in_tmp_environment('pal_env', modulepath: ['/tmp/testmodules']) do |pal| # pal.call_function('mymodule::myfunction', 10, 20) # end # # The result is what 'mymodule::myfunction' returns #
def self on_period UNK on_lparen on_ignored_nl on_label false on_comma on_ignored_nl on_label nil on_comma on_ignored_nl on_label nil on_comma on_ignored_nl on_label nil # Defines a context in which multiple operations in an env with a script compiler can be performed in a given block. # The calls that takes place to PAL inside of the given block are all with the same instance of the compiler. # The parameter `configured_by_env` makes it possible to either use the configuration in the environment, or specify # `manifest_file` or `code_string` manually. If neither is given, an empty `code_string` is used. # # @example define a script compiler without any initial logic # pal.with_script_compiler do | compiler | # # do things with compiler # end # # @example define a script compiler with a code_string containing initial logic # pal.with_script_compiler(code_string: '$myglobal_var = 42') do | compiler | # # do things with compiler # end # # @param configured_by_env [Boolean] when true the environment's settings are used, otherwise the given `manifest_file` or `code_string` # @param manifest_file [String] a Puppet Language file to load and evaluate before calling the given block, mutually exclusive with `code_string` # @param code_string [String] a Puppet Language source string to load and evaluate before calling the given block, mutually exclusive with `manifest_file` # @param facts [Hash] optional map of fact name to fact value - if not given will initialize the facts (which is a slow operation) # If given at the environment level, the facts given here are merged with higher priority. # @param variables [Hash] optional map of fully qualified variable name to value. If given at the environment level, the variables # given here are merged with higher priority. # @param block [Proc] the block performing operations on compiler # @return [Object] what the block returns # @yieldparam [Puppet::Pal::ScriptCompiler] compiler, a ScriptCompiler to perform operations on. #
UNK on_lparen manifest_file on_comma code_string on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl assert_non_empty_string on_lparen manifest_file on_comma on_tstring_beg # TRANSLATORS: do not translate variable name strings in these assertions
raise on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl manifest_file on_op on_const on_lbracket on_symbeg manifest on_rbracket on_nl # TRANSLATORS: do not translate the variable names in this error message
manifest_file on_op on_const on_lbracket on_symbeg manifest on_rbracket on_nl UNK on_ignored_nl if manifest_file on_period nil? on_op code_string on_period nil? on_nl code_string # Use the manifest setting
if manifest_file on_period nil? on_op code_string on_period nil? on_nl code_string on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl end on_nl on_ignored_nl # An "undef" code_string is the only way to override Puppet[:manifest] & Puppet[:code] settings since an # empty string is taken as Puppet[:code] not being set. #
on_const on_lbracket on_symbeg code on_rbracket on_op code_string unless code_string on_period nil? on_nl on_ignored_nl UNK on_lparen manifest_file on_comma facts on_comma variables # After the assertions, if code_string is non nil - it has the highest precedence
UNK on_lparen manifest_file on_comma facts on_comma variables on_comma on_symbeg UNK on_comma on_op block on_rparen on_nl UNK on_ignored_nl on_const on_lbracket on_symbeg # If manifest_file is nil, the #main method will use the env configured manifest # to do things in the block while a Script Compiler is in effect
def self on_period UNK on_lparen code_string on_rparen on_ignored_nl UNK do on_op compiler on_op on_ignored_nl compiler on_period UNK on_lparen code_string on_rparen # Evaluates a Puppet Language script string. # @param code_string [String] a snippet of Puppet Language source code # @return [Object] what the Puppet Language code_string evaluates to # @deprecated Use {#with_script_compiler} and then evaluate_string on the given compiler - to be removed in 1.0 version #
UNK do on_op compiler on_op on_ignored_nl compiler on_period UNK on_lparen code_string on_rparen on_nl end on_nl end on_nl on_ignored_nl def self # prevent the default loading of Puppet[:manifest] which is the environment's manifest-dir by default settings # by setting code_string to 'undef'
def self on_period UNK on_lparen manifest_file on_rparen on_ignored_nl UNK do on_op compiler on_op on_ignored_nl compiler on_period UNK on_lparen manifest_file on_rparen # Evaluates a Puppet Language script (.pp) file. # @param manifest_file [String] a file with Puppet Language source code # @return [Object] what the Puppet Language manifest_file contents evaluates to # @deprecated Use {#with_script_compiler} and then evaluate_file on the given compiler - to be removed in 1.0 version #
def self on_period UNK on_lparen on_ignored_nl on_label false on_comma on_ignored_nl on_label nil on_comma on_ignored_nl on_label nil on_comma on_ignored_nl on_label nil # Defines a context in which multiple operations in an env with a catalog producing compiler can be performed # in a given block. # The calls that takes place to PAL inside of the given block are all with the same instance of the compiler. # The parameter `configured_by_env` makes it possible to either use the configuration in the environment, or specify # `manifest_file` or `code_string` manually. If neither is given, an empty `code_string` is used. # # @example define a catalog compiler without any initial logic # pal.with_catalog_compiler do | compiler | # # do things with compiler # end # # @example define a catalog compiler with a code_string containing initial logic # pal.with_catalog_compiler(code_string: '$myglobal_var = 42') do | compiler | # # do things with compiler # end # # @param configured_by_env [Boolean] when true the environment's settings are used, otherwise the # given `manifest_file` or `code_string` # @param manifest_file [String] a Puppet Language file to load and evaluate before calling the given block, mutually exclusive # with `code_string` # @param code_string [String] a Puppet Language source string to load and evaluate before calling the given block, mutually # exclusive with `manifest_file` # @param facts [Hash] optional map of fact name to fact value - if not given will initialize the facts (which is a slow operation) # If given at the environment level, the facts given here are merged with higher priority. # @param variables [Hash] optional map of fully qualified variable name to value. If given at the environment level, the variables # given here are merged with higher priority. # @param block [Proc] the block performing operations on compiler # @return [Object] what the block returns # @yieldparam [Puppet::Pal::CatalogCompiler] compiler, a CatalogCompiler to perform operations on. #
UNK on_lparen manifest_file on_comma code_string on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl assert_non_empty_string on_lparen manifest_file on_comma on_tstring_beg # TRANSLATORS: do not translate variable name strings in these assertions
raise on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl manifest_file on_op on_const on_lbracket on_symbeg manifest on_rbracket on_nl # TRANSLATORS: do not translate the variable names in this error message
manifest_file on_op on_const on_lbracket on_symbeg manifest on_rbracket on_nl UNK on_ignored_nl if manifest_file on_period nil? on_op code_string on_period nil? on_nl code_string # Use the manifest setting
if manifest_file on_period nil? on_op code_string on_period nil? on_nl code_string on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl end on_nl on_ignored_nl # An "undef" code_string is the only way to override Puppet[:manifest] & Puppet[:code] settings since an # empty string is taken as Puppet[:code] not being set. #
UNK on_op on_const on_lbracket on_symbeg tasks on_rbracket on_nl UNK on_op on_const on_lbracket on_symbeg code on_rbracket on_nl on_ignored_nl on_const on_lbracket on_symbeg # We need to make sure to set these back when we're done
on_const on_lbracket on_symbeg code on_rbracket on_op code_string unless code_string on_period nil? on_nl on_ignored_nl UNK on_lparen manifest_file on_comma facts on_comma variables # After the assertions, if code_string is non nil - it has the highest precedence
UNK on_lparen manifest_file on_comma facts on_comma variables on_comma on_symbeg UNK on_comma on_op block on_rparen on_nl UNK on_ignored_nl on_const on_lbracket on_symbeg # If manifest_file is nil, the #main method will use the env configured manifest # to do things in the block while a Script Compiler is in effect
on_const on_lbracket on_symbeg tasks on_rbracket on_op UNK on_nl on_const on_lbracket on_symbeg code on_rbracket on_op UNK on_nl end on_nl on_ignored_nl def # Clean up after ourselves
def self on_period UNK on_lparen env_name on_comma on_ignored_nl on_label on_lbracket on_rbracket on_comma on_ignored_nl on_label on_lbrace on_rbrace on_comma on_ignored_nl on_label nil # Defines the context in which to perform puppet operations (evaluation, etc) # The code to evaluate in this context is given in a block. # # @param env_name [String] a name to use for the temporary environment - this only shows up in errors # @param modulepath [Array<String>] an array of directory paths containing Puppet modules, may be empty, defaults to empty array # @param settings_hash [Hash] a hash of settings - currently not used for anything, defaults to empty hash # @param facts [Hash] optional map of fact name to fact value - if not given will initialize the facts (which is a slow operation) # @param variables [Hash] optional map of fully qualified variable name to value # @return [Object] returns what the given block returns # @yieldparam [Puppet::Pal] context, a context that responds to Puppet::Pal methods #
assert_optionally_empty_array on_lparen modulepath on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ignored_nl unless UNK on_nl raise on_const on_comma _ on_lparen on_tstring_beg on_tstring_content # TRANSLATORS: do not translate variable name string in these assertions
end on_nl on_ignored_nl env on_op on_const on_op on_const on_op on_const on_period UNK on_lparen env_name on_comma modulepath on_rparen on_nl on_ignored_nl UNK # TRANSLATORS 'in_tmp_environment' is a name, do not translate
env on_comma facts on_comma variables on_comma on_op block on_nl on_rparen on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen env_name # The tmp env is the only known env
def self on_period UNK on_lparen env_name on_comma on_ignored_nl on_label nil on_comma on_ignored_nl on_label on_lbracket on_rbracket on_comma on_ignored_nl on_label on_lbracket on_rbracket # Defines the context in which to perform puppet operations (evaluation, etc) # The code to evaluate in this context is given in a block. # # The name of an environment (env_name) is always given. The location of that environment on disk # is then either constructed by: # * searching a given envpath where name is a child of a directory on that path, or # * it is the directory given in env_dir (which must exist). # # The env_dir and envpath options are mutually exclusive. # # @param env_name [String] the name of an existing environment # @param modulepath [Array<String>] an array of directory paths containing Puppet modules, overrides the modulepath of an existing env. # Defaults to `{env_dir}/modules` if `env_dir` is given, # @param pre_modulepath [Array<String>] like modulepath, but is prepended to the modulepath # @param post_modulepath [Array<String>] like modulepath, but is appended to the modulepath # @param settings_hash [Hash] a hash of settings - currently not used for anything, defaults to empty hash # @param env_dir [String] a reference to a directory being the named environment (mutually exclusive with `envpath`) # @param envpath [String] a path of directories in which there are environments to search for `env_name` (mutually exclusive with `env_dir`). # Should be a single directory, or several directories separated with platform specific `File::PATH_SEPARATOR` character. # @param facts [Hash] optional map of fact name to fact value - if not given will initialize the facts (which is a slow operation) # @param variables [Hash] optional map of fully qualified variable name to value # @return [Object] returns what the given block returns # @yieldparam [Puppet::Pal] context, a context that responds to Puppet::Pal methods #
assert_non_empty_string on_lparen env_name on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl assert_optionally_empty_array on_lparen modulepath on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma true on_rparen on_nl # TRANSLATORS terms in the assertions below are names of terms in code
end on_nl on_ignored_nl if env_dir on_nl unless on_const on_op on_const on_period UNK on_lparen env_dir on_rparen on_nl raise on_const on_comma _ # TRANSLATORS 'in_environment' is a name, do not translate
UNK on_op modulepath on_period nil? on_op on_lbracket on_const on_op on_const on_period UNK on_lparen on_const on_period UNK on_lparen env_dir on_comma on_tstring_beg # a nil modulepath for env_dir means it should use its ./modules directory
UNK on_ignored_nl assert_non_empty_string on_lparen envpath on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ignored_nl if envpath on_period UNK on_lparen on_const on_rparen on_op # The env being used is the only one...
if envpath on_period UNK on_lparen on_const on_rparen on_op envpath on_period UNK on_lparen on_const on_op on_const on_rparen on_nl UNK on_op on_const # The environment is resolved against the envpath. This is setup without a basemodulepath # The modulepath defaults to the 'modulepath' in the found env when "Directories" is used #
UNK on_op on_const on_op on_const on_op on_const on_period UNK on_lparen envpath on_comma on_lbracket on_rbracket on_rparen on_nl environments on_op on_const on_op # potentially more than one directory to search
UNK on_op modulepath on_period nil? on_op env on_period modulepath on_op modulepath on_nl UNK on_op env on_period UNK on_period UNK on_nl # A given modulepath should override the default
environments on_op on_const on_op on_const on_op on_const on_period new on_lparen env_name on_comma UNK on_comma env on_rparen end on_nl UNK on_lparen # must configure this in case logic looks up the env by name again (otherwise the looked up env does # not have the same effective modulepath).
end on_nl UNK on_lparen environments on_comma env on_comma facts on_comma variables on_comma on_op block on_rparen on_nl end on_nl on_ignored_nl def # The env being used is the only one...
def self on_period UNK on_lparen environments on_comma env on_comma facts on_comma variables on_comma on_op block on_rparen on_ignored_nl node on_op on_const # Prepares the puppet context with pal information - and delegates to the block # No set up is performed at this step - it is delayed until it is known what the # operation is going to be (for example - using a ScriptCompiler). #
node on_op on_const on_op on_const on_period new on_lparen on_const on_lbracket on_symbeg UNK on_rbracket on_comma on_symbeg UNK on_op env on_rparen on_nl # Create a default node to use (may be overridden later)
on_label env on_comma on_label node on_comma on_label variables on_comma on_label facts on_rparen do on_ignored_nl UNK block on_period UNK on_lparen self # The env being used is the only one...
on_label node on_comma on_label variables on_comma on_label facts on_rparen do on_ignored_nl UNK block on_period UNK on_lparen self on_rparen on_nl end # provide as convenience
on_label variables on_comma on_label facts on_rparen do on_ignored_nl UNK block on_period UNK on_lparen self on_rparen on_nl end on_nl end on_nl # to allow it to be picked up instead of created
on_label facts on_rparen do on_ignored_nl UNK block on_period UNK on_lparen self on_rparen on_nl end on_nl end on_nl private_class_method on_symbeg UNK # common set of variables across several inner contexts
on_rparen do on_ignored_nl UNK block on_period UNK on_lparen self on_rparen on_nl end on_nl end on_nl private_class_method on_symbeg UNK on_nl on_ignored_nl # common set of facts across several inner contexts (or nil)
UNK block on_period UNK on_lparen self on_rparen on_nl end on_nl end on_nl private_class_method on_symbeg UNK on_nl on_ignored_nl def self on_period # DELAY: prepare_node_facts(node, facts)
def self on_period UNK on_lparen node on_comma facts on_rparen on_ignored_nl if node on_period facts on_period nil? on_nl UNK on_op facts # Prepares the node for use by giving it node_facts (if given) # If a hash of facts values is given, then the operation of creating a node with facts is much # speeded up (as getting a fresh set of facts is avoided in a later step). #
if node on_period facts on_period nil? on_nl UNK on_op facts on_period nil? on_op nil on_op on_const on_op on_const on_op on_const # Prepare the node with facts if it does not already have them
node on_period UNK on_lparen on_lbrace on_rbrace on_rparen on_nl end on_nl end on_nl private_class_method on_symbeg UNK on_nl on_ignored_nl def self on_period # Add server facts so $server_facts[environment] exists when doing a puppet script # SCRIPT TODO: May be needed when running scripts under orchestrator. Leave it for now. #
def self on_period UNK on_lparen manifest on_comma facts on_comma variables on_comma UNK on_rparen on_ignored_nl env on_op on_const on_period UNK on_lparen # The main routine for script compiler # Picks up information from the puppet context and configures a script compiler which is given to # the provided block #
env on_op on_const on_period UNK on_lparen on_symbeg UNK on_rparen on_nl env on_period UNK do on_op UNK on_op on_ignored_nl UNK on_op # Configure the load path
on_const on_period UNK on_nl on_ignored_nl node on_op on_const on_period UNK on_lparen on_symbeg UNK on_rparen on_nl pal_facts on_op on_const on_period UNK # Puppet requires Facter, which initializes its lookup paths. Reset Facter to # pickup the new $LOAD_PATH.
node on_period UNK on_op UNK on_nl on_ignored_nl on_const on_period UNK on_lparen on_lbrace on_symbeg UNK on_op UNK on_rbrace on_comma on_tstring_beg on_tstring_content # Modify the node descriptor to use the special apply_environment. # It is based on the actual environment from the node, or the locally # configured environment if the node does not specify one. # If a manifest file is passed on the command line, it overrides # the :manifest setting of the apply_environment.
on_const on_period UNK on_lparen on_lbrace on_symbeg UNK on_op UNK on_rbrace on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen do on_ignored_nl UNK on_ignored_nl node # TRANSLATORS, the string "For puppet PAL" is not user facing
on_const on_period UNK on_lparen overrides on_comma on_tstring_beg on_tstring_content UNK UNK UNK on_tstring_content on_tstring_end on_rparen do on_ignored_nl compiler on_period UNK do # Make compiler available to Puppet#lookup and injection in functions # TODO: The compiler instances should be available under non PAL use as well! # TRANSLATORS: Do not translate, symbolic name
UNK on_lparen compiler on_period UNK on_comma on_const on_op on_const on_op on_const on_op on_const on_period UNK on_lparen pal_variables on_rparen on_rparen on_nl # In case the varaibles passed to the compiler are PCore types defined in modules, they # need to be deserialized and added from within the this scope, so that loaders are # available during deserizlization.
if UNK on_nl UNK on_lparen pal_compiler on_rparen on_nl end on_nl end on_nl end on_nl on_ignored_nl UNK on_const on_op on_const on_nl # wrap the internal compiler to prevent it from leaking in the PAL API
raise on_nl on_ignored_nl UNK on_op UNK on_nl on_const on_period UNK on_lparen UNK on_rparen on_nl raise on_nl end on_nl end on_nl # already logged and handled by the compiler, including Puppet::ParseErrorWithIssue
