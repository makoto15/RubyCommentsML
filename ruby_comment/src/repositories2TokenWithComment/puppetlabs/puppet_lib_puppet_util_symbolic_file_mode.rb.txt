if value on_period UNK on_const then on_ignored_nl return value on_period UNK on_lparen on_int on_rparen on_nl UNK value on_op on_regexp_beg on_tstring_content # We need to treat integers as octal numbers.
on_tstring_beg on_tstring_content on_tstring_end on_op on_lparen to_mode on_op on_int on_rparen on_op on_int on_nl on_rbrace on_nl final_mode on_op on_lbrace on_ignored_nl on_tstring_beg on_tstring_content # Are there any execute bits set in the original mode?
UNK on_op on_lbrace on_rbrace on_nl final_mode on_period UNK on_lbrace on_op UNK on_comma v on_op UNK on_lbracket UNK on_rbracket on_op v # We want a snapshot of the mode before we start messing with it to # make actions like 'a-g' atomic. Various parts of the DSL refer to # the original mode, the final mode, or the current snapshot of the # mode, for added fun.
value on_op on_int if op on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_regexp_beg on_tstring_content on_regexp_end then on_ignored_nl value on_op UNK # Clear all bits, if this is assignment
if action on_op on_tstring_beg on_tstring_content on_tstring_end then on_ignored_nl raise on_const on_op on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl # Only meaningful in combination with "set" actions.
if UNK UNK original_mode on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket then on_ignored_nl value on_op UNK on_lbracket action on_rbracket on_period UNK on_lparen # As per the BSD manual page, set if this is a directory, or if # any execute bit is set on the original (unmodified) mode. # Ignored otherwise; it is "add if", not "add or clear".
final_mode on_lbracket UNK on_rbracket on_op value on_nl end on_nl on_ignored_nl UNK on_const on_op on_const on_op UNK on_nl if UNK on_period # Now, assign back the value.
