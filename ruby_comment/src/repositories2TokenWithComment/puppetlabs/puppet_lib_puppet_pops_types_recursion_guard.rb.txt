UNK on_const on_nl UNK UNK UNK on_nl on_ignored_nl on_const on_op on_int on_nl on_const on_op on_int on_nl on_const on_op on_int on_nl # Keeps track of self recursion of conceptual 'this' and 'that' instances using two separate maps and # a state. The class is used when tracking self recursion in two objects ('this' and 'that') simultaneously. # A typical example of when this is needed is when testing if 'that' Puppet Type is assignable to 'this' # Puppet Type since both types may contain self references. # # All comparisons are made using the `object_id` of the instance rather than the instance itself. # # @api private
def UNK on_lparen instance on_rparen on_ignored_nl UNK on_lparen UNK on_ivar on_rparen on_op on_ivar on_period UNK on_lparen instance on_period object_id on_rparen # Checks if recursion was detected for the given argument in the 'this' context # @param instance [Object] the instance to check # @return [Integer] the resulting state
def UNK on_lparen instance on_rparen on_ignored_nl UNK on_lparen UNK on_ivar on_rparen on_op on_ivar on_period UNK on_lparen instance on_period object_id on_rparen # Checks if recursion was detected for the given argument in the 'that' context # @param instance [Object] the instance to check # @return [Integer] the resulting state
def UNK on_lparen instance on_rparen on_ignored_nl if on_lparen on_ivar on_op on_const on_rparen on_op on_int on_nl UNK on_op UNK on_nl on_ivar # Add the given argument as 'this' invoke the given block with the resulting state # @param instance [Object] the instance to add # @return [Object] the result of yielding
UNK on_op UNK on_lparen on_ivar on_rparen on_nl on_ignored_nl on_ivar on_op on_op on_const on_nl on_ivar on_period UNK on_lparen instance on_period object_id # recursive state detected
on_ivar on_op on_op on_const on_nl on_ivar on_period UNK on_lparen instance on_period object_id on_rparen on_nl UNK UNK on_nl end on_nl end # pop state
def UNK on_lparen instance on_rparen on_ignored_nl if on_lparen on_ivar on_op on_const on_rparen on_op on_int on_nl UNK on_op UNK on_nl on_ivar # Add the given argument as 'that' invoke the given block with the resulting state # @param instance [Object] the instance to add # @return [Object] the result of yielding
UNK on_op UNK on_lparen on_ivar on_rparen on_nl on_ignored_nl on_ivar on_op on_op on_const on_nl on_ivar on_period UNK on_lparen instance on_period object_id # recursive state detected
on_ivar on_op on_op on_const on_nl on_ivar on_period UNK on_lparen instance on_period object_id on_rparen on_nl UNK UNK on_nl end on_nl end # pop state
def UNK on_lparen instance on_rparen on_ignored_nl if on_lparen on_ivar on_op on_const on_rparen on_op on_int on_nl on_ivar on_op on_ivar on_op on_const # Add the given argument as 'this' and return the resulting state # @param instance [Object] the instance to add # @return [Integer] the resulting state
def UNK on_lparen instance on_rparen on_ignored_nl if on_lparen on_ivar on_op on_const on_rparen on_op on_int on_nl on_ivar on_op on_ivar on_op on_const # Add the given argument as 'that' and return the resulting state # @param instance [Object] the instance to add # @return [Integer] the resulting state
def UNK on_nl UNK on_lparen UNK on_ivar on_rparen on_op on_ivar on_period UNK on_op on_int on_nl end on_nl on_ignored_nl def UNK # @return the number of objects added to the `this` map
def UNK on_nl UNK on_lparen UNK on_ivar on_rparen on_op on_ivar on_period UNK on_op on_int on_nl end on_nl on_ignored_nl UNK on_nl # @return the number of objects added to the `that` map
