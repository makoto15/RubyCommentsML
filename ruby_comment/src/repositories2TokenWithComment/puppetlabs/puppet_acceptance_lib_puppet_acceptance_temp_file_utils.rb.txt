def UNK on_lparen host on_rparen on_ignored_nl UNK host on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl UNK UNK on_tstring_content UNK on_nl on_tstring_beg # Return the name of the root user, as appropriate for the platform.
def UNK on_lparen host on_rparen on_ignored_nl UNK host on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl UNK UNK on_tstring_content UNK on_nl on_tstring_beg # Return the name of the root group, as appropriate for the platform.
def UNK on_lparen host on_comma file_rel_path on_comma UNK on_comma options on_op UNK UNK on_rparen on_ignored_nl on_ignored_nl options on_lbracket on_symbeg UNK # Create a file on the host. # Parameters: # [host] the host to create the file on # [file_path] the path to the file to be created # [file_content] a string containing the contents to be written to the file # [options] a hash containing additional behavior options. Currently supported: # * :mkdirs (default false) if true, attempt to create the parent directories on the remote host before writing # the file # * :owner (default 'root') the username of the user that the file should be owned by # * :group (default 'puppet') the name of the group that the file should be owned by # * :mode (default '644') the mode (file permissions) that the file should be created with
options on_lbracket on_symbeg UNK on_rbracket on_op UNK on_nl options on_lbracket on_symbeg mode on_rbracket on_op on_tstring_beg on_tstring_content on_tstring_end on_nl UNK options # set default options
on_ignored_nl UNK on_lparen host on_comma options on_lbracket on_symbeg owner on_rbracket on_comma options on_lbracket on_symbeg group on_rbracket on_comma file_path on_rparen on_nl # # NOTE: we need these chown/chmod calls because the acceptance framework connects to the nodes as "root", but # puppet 'master' runs as user 'puppet'. Therefore, in order for puppet master to be able to read any files # that we've created, we have to carefully set their permissions #
def UNK on_lparen host on_comma file_rel_path on_rparen on_ignored_nl UNK UNK on_ivar on_nl on_ignored_nl on_const on_period UNK on_lparen on_ivar on_lbracket host # Given a relative path, returns an absolute path for a test file. Basically, this just prepends the # a unique temp dir path (specific to the current test execution) to your relative path.
def UNK on_lparen host on_comma file_rel_path on_rparen on_ignored_nl UNK on_lparen host on_comma UNK on_lparen host on_comma file_rel_path on_rparen on_rparen on_nl # Check for the existence of a temp file for the current test; basically, this just calls file_exists?(), # but prepends the path to the current test's temp dir onto the file_rel_path parameter. This allows # tests to be written using only a relative path to specify file locations, while still taking advantage # of automatic temp file cleanup at test completion.
UNK on_lparen host on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma UNK on_rparen on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_lparen host # we need to make sure that the puppet user can traverse this directory...
def UNK on_lparen host on_comma path on_rparen on_ignored_nl UNK on_const on_period UNK on_lparen on_const on_period UNK on_lparen UNK on_rparen on_comma # Returns an array containing the owner, group and mode of # the file specified by path. The returned mode is an integer # value containing only the file mode, excluding the type, e.g # S_IFDIR 0040000
on_ivar on_op on_ivar on_nl on_ivar on_op on_const on_period UNK on_lparen on_ivar on_comma on_const on_period UNK on_lparen on_ivar on_rparen on_rparen on_nl # pluck this out of the test case environment; not sure if there is a better way
on_ivar on_op on_const on_lbracket UNK on_comma on_op UNK on_rbracket on_nl on_ignored_nl on_ivar on_op on_const on_lbracket on_ivar on_period UNK do on_op # we need one list of all of the hosts, to assist in managing temp dirs. It's possible # that the master is also an agent, so this will consolidate them into a unique set
on_ivar on_op on_const on_lbracket on_ivar on_period UNK do on_op host on_op on_lbracket host on_period UNK on_comma UNK on_lparen host on_comma # now we can create a hash of temp dirs--one per host, and unique to this test--without worrying about # doing it twice on any individual host
on_ivar on_op UNK on_nl end on_nl end on_nl end on_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP # a silly variable for keeping track of whether or not all of the tests passed...
