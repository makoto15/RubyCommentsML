UNK on_const on_op on_const on_op on_const on_nl UNK on_const on_op on_const on_nl on_ignored_nl on_const on_op UNK on_tstring_content UNK on_period UNK # Pcore variant of the Adaptable::Adapter. Uses a Pcore Object type instead of a Class
UNK self on_period UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK on_op on_const on_op UNK on_lparen UNK on_comma UNK on_comma # Register the Annotation type. This is the type that all custom Annotations will inherit from.
UNK self on_period UNK on_lparen o on_rparen on_ignored_nl UNK on_op UNK on_lparen o on_rparen on_nl if UNK on_period UNK on_nl # Finds an existing annotation for the given object and returns it. # If no annotation was found, and a block is given, a new annotation is created from the # initializer hash that must be returned from the block. # If no annotation was found and no block is given, this method returns `nil` # # @param o [Object] object to annotate # @param block [Proc] optional, evaluated when a new annotation must be created. Should return the init hash # @return [Annotation<self>] an annotation of the same class as the receiver of the call #
UNK self on_period UNK on_lparen o on_comma init_hash on_rparen on_ignored_nl if o on_period UNK on_lparen on_const on_rparen on_op o on_period # Forces the creation or removal of an annotation of this type. # If `init_hash` is a hash, a new annotation is created and returned # If `init_hash` is `nil`, then the annotation is cleared and the previous annotation is returned. # # @param o [Object] object to annotate # @param init_hash [Hash{String,Object},nil] the initializer for the annotation or `nil` to clear the annotation # @return [Annotation<self>] an annotation of the same class as the receiver of the call #
UNK on_op init_hash on_op on_const on_op UNK on_tstring_content UNK on_op UNK on_tstring_content UNK on_nl UNK on_const on_comma UNK on_tstring_content UNK # Prevent clear or redefine of annotations declared on type
UNK self on_period UNK on_nl _pcore_type on_period UNK on_nl end on_nl end on_nl end on_nl end on_nl EMP EMP EMP # Uses name of type instead of name of the class (the class is likely dynamically generated and as such, # has no name) # @return [String] the name of the type
