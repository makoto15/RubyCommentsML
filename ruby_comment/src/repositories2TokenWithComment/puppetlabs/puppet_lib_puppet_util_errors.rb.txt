UNK on_const on_op on_const on_op on_const on_nl def UNK on_lparen UNK on_rparen on_ignored_nl self on_period UNK on_lparen on_const on_op on_const # Some helper methods for throwing and populating errors. # # @api public
def UNK on_lparen UNK on_rparen on_ignored_nl self on_period UNK on_lparen on_const on_op on_const on_comma UNK on_rparen on_nl end on_nl on_ignored_nl # Throw a Puppet::DevError with the specified message. Used for unknown or # internal application failures. # # @param msg [String] message used in raised error # @raise [Puppet::DevError] always raised with the supplied message
def UNK on_lparen error on_comma other on_op nil on_rparen on_ignored_nl error on_period line on_op self on_period line if error on_period # Add line and file info to the supplied exception if info is available from # this object, is appropriately populated and the supplied exception supports # it. When other is supplied, the backtrace will be copied to the error # object and the 'original' will be dropped from the error. # # @param error [Exception] exception that is populated with info # @param other [Exception] original exception, source of backtrace info # @return [Exception] error parameter
error on_period UNK on_lparen on_symbeg UNK on_comma nil on_rparen on_nl error on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen # It is not meaningful to keep the wrapped exception since its backtrace has already # been adopted by the error. (The instance variable is private for good reasons).
def self on_period UNK on_lparen file on_comma line on_op nil on_comma column on_op nil on_rparen on_ignored_nl file on_op nil if # Return a human-readable string of this object's file, line, and pos attributes, # if set. # # @param file [String] the file path for the error (nil or "", for not known) # @param line [String] the line number for the error (nil or "", for not known) # @param column [String] the column number for the error (nil or "", for not known) # @return [String] description of file, line, and column #
def self on_period UNK on_lparen file on_comma line on_op nil on_comma column on_op nil on_rparen on_ignored_nl UNK on_op UNK on_lparen # Return a human-readable string of this object's file, line, and pos attributes, # with a proceeding space in the output # if set. # # @param file [String] the file path for the error (nil or "", for not known) # @param line [String] the line number for the error (nil or "", for not known) # @param column [String] the column number for the error (nil or "", for not known) # @return [String] description of file, line, and column #
def self on_period UNK on_lparen file on_comma line on_rparen on_ignored_nl file on_op nil if on_lparen file on_period is_a? on_lparen on_const # Return a human-readable string of this object's file and line # where unknown entries are listed as 'unknown' # # @param file [String] the file path for the error (nil or "", for not known) # @param line [String] the line number for the error (nil or "", for not known) # @return [String] description of file, and line
def UNK on_nl on_const on_op on_const on_op on_const on_period UNK on_lparen file on_comma line on_rparen on_nl end on_nl on_ignored_nl def # Return a human-readable string of this object's file and line attributes, # if set. # # @return [String] description of file and line with a leading space
def UNK on_lparen UNK on_op on_lbrace on_rbrace on_rparen on_ignored_nl UNK UNK on_symbeg UNK UNK on_op on_const on_op on_const on_nl UNK # Wrap a call in such a way that we always throw the right exception and keep # as much context as possible. # # @param options [Hash<Symbol,Object>] options used to create error # @option options [Class] :type error type to raise, defaults to # Puppet::DevError # @option options [String] :message message to use in error, default mentions # the name of this class # @raise [Puppet::Error] re-raised with extra context if the block raises it # @raise [Error] of type options[:type], when the block raises other # exceptions
UNK UNK on_lparen error on_comma detail on_rparen on_nl end on_nl on_ignored_nl UNK on_nl end on_nl on_ignored_nl def UNK on_lparen on_op # We can't use self.fail here because it always expects strings, # not exceptions.
def UNK on_lparen on_op args on_rparen on_ignored_nl if args UNK UNK UNK on_period is_a? on_lparen on_const on_rparen on_nl UNK on_op # Throw an error, defaulting to a Puppet::Error. # # @overload fail(message, ..) # Throw a Puppet::Error with a message concatenated from the given # arguments. # @param [String] message error message(s) # @overload fail(error_klass, message, ..) # Throw an exception of type error_klass with a message concatenated from # the given arguments. # @param [Class] type of error # @param [String] message error message(s) # @overload fail(error_klass, message, ..) # Throw an exception of type error_klass with a message concatenated from # the given arguments. # @param [Class] type of error # @param [String] message error message(s) # @param [Exception] original exception, source of backtrace info
