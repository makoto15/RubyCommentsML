a on_op on_const on_period new on_lparen on_const on_op on_const on_rparen on_period new on_lparen UNK on_rparen on_nl allow on_lparen a on_period # Normally I wouldn't like the stubs, but the only way to name a class # otherwise is to assign it to a constant, and that hurts more here in # testing world. --daniel 2012-01-29
on_ignored_nl context on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl on_lbracket on_ignored_nl on_qwords_beg on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_tstring_end # Key: spec has 4 required and 1 optional part: # one-defaultfor, one-notdefaultfor, two-defaultfor, two-notdefaultfor # d = defaultfor, n = notdefaultfor, # d2 - two clauses in defaultfor constraint, # ! = constraint exists but doesn't match # none = no constraint # d+/!d+/none+ - provider class has deeper inheritence
on_qwords_beg on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_tstring_end on_comma on_ignored_nl on_qwords_beg on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep # Two default? group - ties go to first to register
on_qwords_beg on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_end on_comma on_ignored_nl on_qwords_beg on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content # Two default? group - second is selected for specificity
on_qwords_beg on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_end on_comma on_ignored_nl on_qwords_beg on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content # Two default? group - second is selected for inheritence
on_qwords_beg on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_end on_comma on_ignored_nl on_qwords_beg on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content # One default? group - second (only default?) always is selected
on_qwords_beg on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_tstring_end on_comma on_ignored_nl on_qwords_beg on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep # No default? group:
on_qwords_beg on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_end on_comma on_ignored_nl on_qwords_beg on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content # No default? but deeper class inheritence group:
on_rbrace on_nl on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end if thisspec on_lbracket on_int on_rbracket on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl #Default expectation is to expect provider two for these tests
when on_tstring_beg on_tstring_content on_tstring_end on_nl defaultforspec on_lbracket on_symbeg one on_rbracket on_lbracket on_symbeg defaultfor on_rbracket on_op true on_nl when on_tstring_beg on_tstring_content # First provider defaultfor spec
else on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_op on_lbrace UNK thisspec on_lbracket on_int on_rbracket on_rbrace on_nl end on_nl on_ignored_nl UNK thisspec # Do not include a defaultfor constraint
when on_tstring_beg on_tstring_content on_tstring_end on_nl defaultforspec on_lbracket on_symbeg one on_rbracket on_lbracket on_symbeg notdefaultfor on_rbracket on_op true on_nl when on_tstring_beg on_tstring_content # First provider notdefaultfor spec
else on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_op on_lbrace UNK thisspec on_lbracket on_int on_rbracket on_rbrace on_nl end on_nl on_ignored_nl if thisspec # Do not include a notdefaultfor constraint
defaultforspec on_lbracket on_symbeg two on_rbracket on_lbracket on_symbeg UNK on_rbracket on_op true on_nl thisspec on_lbracket on_int on_rbracket on_op thisspec on_lbracket on_int # d+ !d+ none+
else on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_op on_lbrace UNK thisspec on_lbracket on_int on_rbracket on_rbrace on_nl end on_nl on_ignored_nl UNK thisspec # Do not include a defaultfor constraint
when on_tstring_beg on_tstring_content on_tstring_end on_nl defaultforspec on_lbracket on_symbeg two on_rbracket on_lbracket on_symbeg notdefaultfor on_rbracket on_op true on_nl when on_tstring_beg on_tstring_content # Second provider notdefaultfor spec
else on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_op on_lbrace UNK thisspec on_lbracket on_int on_rbracket on_rbrace on_nl end on_nl on_ignored_nl if thisspec # Do not include a notdefaultfor constraint
two on_op type on_period provide on_lparen on_symbeg two on_comma UNK on_rparen do on_ignored_nl if defaultforspec on_lbracket on_symbeg two on_rbracket on_period # :two inherits from one, if spec'd
on_symbeg operatingsystem on_op on_tstring_beg on_tstring_content on_tstring_end if defaultforspec on_lbracket on_symbeg two on_rbracket on_lbracket on_symbeg UNK on_rbracket on_nl defaultfor on_symbeg osfamily # defaultforspec[:two][:extradefaultfor] has two parts
end on_nl on_ignored_nl context on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl before on_symbeg each do on_ignored_nl subject on_period UNK on_symbeg UNK on_op # Ideally, we would also test that `suitable?` returned the right thing # here, but it is impossible to get access to the methods that do that # without digging way down into the implementation. --daniel 2012-03-20
