UNK on_const on_op on_const on_op on_const on_nl UNK on_symbeg name on_comma on_symbeg UNK on_comma on_symbeg UNK on_nl UNK on_symbeg UNK # Describes an acceptable value for a parameter or property. # An acceptable value is either specified as a literal value or a regular expression. # @note this class should be used via the api methods in {Puppet::Parameter} and {Puppet::Property} # @api private #
def UNK on_lparen name on_rparen on_ignored_nl on_ivar on_op convert on_lparen name on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar # Adds an alias for this value. # Makes the given _name_ be an alias for this acceptable value. # @param name [Symbol] the additional alias this value should be known as # @api private #
def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen value on_rparen on_ignored_nl on_ivar on_op convert on_lparen # @return [Array<Symbol>] Returns all aliases (or an empty array). # @api private #
def UNK on_lparen value on_rparen on_ignored_nl on_ivar on_op convert on_lparen value on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen name # Stores the event that our value generates, if it does so. # @api private #
def UNK on_lparen name on_rparen on_ignored_nl UNK name on_period UNK on_lparen on_const on_rparen on_nl on_ivar on_op name on_nl UNK on_ignored_nl # Initializes the instance with a literal accepted value, or a regular expression. # If anything else is passed, it is turned into a String, and then made into a Symbol. # @param name [Symbol, Regexp, Object] the value to accept, Symbol, a regular expression, or object to convert. # @api private #
on_ivar on_op convert on_lparen name on_rparen on_nl end on_nl on_ignored_nl on_ivar on_op UNK UNK on_nl end on_nl on_ignored_nl def UNK # Convert to a string and then a symbol, so things like true/false # still show up as symbols.
def UNK on_lparen value on_rparen on_ignored_nl UNK UNK on_nl UNK UNK UNK name on_op value on_period UNK on_nl UNK on_ignored_nl # Checks if the given value matches the acceptance rules (literal value, regular expression, or one # of the aliases. # @api private #
def UNK on_nl on_ivar on_period UNK on_lparen on_const on_rparen on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl def convert on_lparen value # @return [Boolean] whether the accepted value is a regular expression or not. # @api private #
def convert on_lparen value on_rparen on_ignored_nl UNK value on_nl UNK on_const on_comma UNK UNK value on_nl UNK on_const on_nl value # A standard way of converting all of our values, so we're always # comparing apples to apples. # @api private #
value on_nl UNK on_const on_nl value on_period UNK on_nl UNK UNK on_nl on_symbeg UNK on_nl UNK UNK on_nl on_symbeg UNK # can't intern an empty string
