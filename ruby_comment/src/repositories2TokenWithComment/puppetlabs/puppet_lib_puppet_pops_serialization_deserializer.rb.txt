UNK on_const on_nl UNK UNK UNK on_comma UNK UNK on_nl on_ignored_nl UNK UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl on_ivar # The deserializer is capable of reading, arrays, maps, and complex objects using an underlying protocol reader. It takes care of # resolving tabulations and assembling complex objects. The type of the complex objects are resolved using a loader. # @api public
UNK UNK UNK on_comma UNK UNK on_nl on_ignored_nl UNK UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl on_ivar on_op UNK UNK # Provides access to the reader. # @api private
UNK UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl on_ivar on_op UNK UNK on_nl on_ivar on_op UNK on_nl on_ivar on_op UNK # @param [AbstractReader] reader the reader used when reading primitive objects from a stream # @param [Loader::Loader] loader the loader used when resolving names of types # @api public
UNK read on_nl val on_op on_ivar on_period read on_nl UNK val on_nl when on_const on_op on_const on_nl on_ivar UNK val # Read the next value from the reader. # # @return [Object] the value that was read # @api public
UNK on_period UNK on_lparen UNK type on_comma result on_period UNK on_comma result on_comma UNK on_rparen on_nl end on_nl end on_nl # Add result to the loader unless it is equal to the existing_type. The add # will only succeed when the existing_type is nil.
UNK UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl UNK on_nl end on_nl end on_nl end on_nl end on_nl # Remember that a value has been read. This means that the value is given an index # and that subsequent reads of a tabulation with that index should return the value. # @param [Object] value The value to remember # @return [Object] the argument # @api private
