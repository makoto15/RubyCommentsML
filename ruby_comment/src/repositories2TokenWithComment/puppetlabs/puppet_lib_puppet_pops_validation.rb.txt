UNK on_const on_nl on_ignored_nl class on_const on_nl on_ignored_nl def UNK on_lparen acceptor on_rparen on_ignored_nl UNK on_lparen UNK on_lparen acceptor on_rparen # A module with base functionality for validation of a model. # # * **Factory** - an abstract factory implementation that makes it easier to create a new validation factory. # * **SeverityProducer** - produces a severity (:error, :warning, :ignore) for a given Issue # * **DiagnosticProducer** - produces a Diagnostic which binds an Issue to an occurrence of that issue # * **Acceptor** - the receiver/sink/collector of computed diagnostics # * **DiagnosticFormatter** - produces human readable output for a Diagnostic #
class on_const on_nl on_ignored_nl def UNK on_lparen acceptor on_rparen on_ignored_nl UNK on_lparen UNK on_lparen acceptor on_rparen on_rparen on_nl end on_nl # This class is an abstract base implementation of a _model validation factory_ that creates a validator instance # and associates it with a fully configured DiagnosticProducer. # # A _validator_ is responsible for validating a model. There may be different versions of validation available # for one and the same model; e.g. different semantics for different puppet versions, or different types of # validation configuration depending on the context/type of validation that should be performed (static, vs. runtime, etc.). # # This class is abstract and must be subclassed. The subclass must implement the methods # {#label_provider} and {#checker}. It is also expected that the subclass will override # the severity_producer and configure the issues that should be reported as errors (i.e. if they should be ignored, produce # a warning, or a deprecation warning). # # @abstract Subclass must implement {#checker}, and {#label_provider} # @api public #
def UNK on_lparen acceptor on_rparen on_ignored_nl UNK on_lparen UNK on_lparen acceptor on_rparen on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen # Produces a validator with the given acceptor as the recipient of produced diagnostics. # The acceptor is where detected issues are received (and typically collected). # # @param acceptor [Acceptor] the acceptor is the receiver of all detected issues # @return [#validate] a validator responding to `validate(model)` # # @api public #
def UNK on_lparen acceptor on_rparen on_ignored_nl on_const on_period new on_lparen acceptor on_comma UNK on_lparen on_rparen on_comma UNK on_lparen on_rparen on_rparen # Produces the diagnostics producer to use given an acceptor of issues. # # @param acceptor [Acceptor] the acceptor is the receiver of all detected issues # @return [DiagnosticProducer] a detector of issues # # @api public #
def UNK on_nl on_const on_period new on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl raise on_const on_comma on_tstring_beg # Produces the SeverityProducer to use # Subclasses should implement and add specific overrides # # @return [SeverityProducer] a severity producer producing error, warning or ignore per issue # # @api public #
def UNK on_lparen UNK on_rparen on_ignored_nl raise on_const on_comma on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl raise # Produces the checker to use. # # @abstract # # @api public #
def UNK on_nl raise on_const on_comma on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl end on_nl on_ignored_nl class on_const on_nl on_const on_op # Produces the label provider to use. # # @abstract # # @api public #
class on_const on_nl on_const on_op on_lbrace on_label UNK on_comma on_label UNK on_comma on_label UNK on_comma on_label UNK on_rbrace on_period UNK # Decides on the severity of a given issue. # The produced severity is one of `:error`, `:warning`, or `:ignore`. # By default, a severity of `:error` is produced for all issues. To configure the severity # of an issue call `#severity=(issue, level)`. # # @return [Symbol] a symbol representing the severity `:error`, `:warning`, or `:ignore` # # @api public #
def UNK on_lparen UNK on_op on_symbeg error on_rparen on_ignored_nl on_ivar on_op on_const on_period new UNK on_nl end on_nl on_ignored_nl def # Creates a new instance where all issues are diagnosed as :error unless overridden. # @param [Symbol] specifies default severity if :error is not wanted as the default # @api public #
on_ivar on_op on_const on_period new UNK on_nl end on_nl on_ignored_nl def severity on_lparen issue on_rparen on_ignored_nl UNK on_lparen issue on_rparen # If diagnose is not set, the default is returned by the block
def severity on_lparen issue on_rparen on_ignored_nl UNK on_lparen issue on_rparen on_nl on_ivar on_lbracket issue on_rbracket on_nl end on_nl on_ignored_nl def # Returns the severity of the given issue. # @return [Symbol] severity level :error, :warning, or :ignore # @api public #
def on_op issue on_nl severity issue on_nl end on_nl on_ignored_nl def on_op on_lparen issue on_comma level on_rparen on_ignored_nl unless issue # @see {#severity} # @api public #
def on_op on_lparen issue on_comma level on_rparen on_ignored_nl unless issue on_period is_a? on_const on_op on_const on_nl raise on_const on_op on_const # Override a default severity with the given severity level. # # @param issue [Issues::Issue] the issue for which to set severity # @param level [Symbol] the severity level (:error, :warning, or :ignore). # @api public #
def UNK issue on_nl UNK on_op on_ivar on_lbracket issue on_rbracket on_nl UNK on_op on_symbeg error on_op UNK on_op on_symbeg UNK # Returns `true` if the issue should be reported or not. # @return [Boolean] this implementation returns true for errors and warnings # # @api public #
def UNK issue on_nl unless issue on_period is_a? on_const on_op on_const on_nl raise on_const on_op on_const on_period new on_lparen UNK # Checks if the given issue is valid. # @api private #
class on_const on_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl attr_reader on_symbeg UNK on_nl def UNK on_lparen acceptor on_comma UNK on_comma # A producer of diagnostics. # An producer of diagnostics is given each issue occurrence as they are found by a diagnostician/validator. It then produces # a Diagnostic, which it passes on to a configured Acceptor. # # This class exists to aid a diagnostician/validator which will typically first check if a particular issue # will be accepted at all (before checking for an occurrence of the issue; i.e. to perform check avoidance for expensive checks). # A validator passes an instance of Issue, the semantic object (the "culprit"), a hash with arguments, and an optional # exception. The semantic object is used to determine the location of the occurrence of the issue (file/line), and it # sets keys in the given argument hash that may be used in the formatting of the issue message. #
attr_reader on_symbeg UNK on_nl on_ignored_nl attr_reader on_symbeg UNK on_nl def UNK on_lparen acceptor on_comma UNK on_comma UNK on_rparen on_ignored_nl on_ivar # A producer of severity for a given issue # @return [SeverityProducer] #
attr_reader on_symbeg UNK on_nl def UNK on_lparen acceptor on_comma UNK on_comma UNK on_rparen on_ignored_nl on_ivar on_op acceptor on_nl on_ivar on_op # A producer of labels for objects involved in the issue # @return [LabelProvider] #
def UNK on_lparen acceptor on_comma UNK on_comma UNK on_rparen on_ignored_nl on_ivar on_op acceptor on_nl on_ivar on_op UNK on_nl on_ivar on_op # Initializes this producer. # # @param acceptor [Acceptor] a sink/collector of diagnostic results # @param severity_producer [SeverityProducer] the severity producer to use to determine severity of a given issue # @param label_provider [LabelProvider] a provider of model element type to human readable label #
arguments on_lbracket on_symbeg UNK on_rbracket on_op on_ivar on_nl arguments on_lbracket on_symbeg semantic on_rbracket on_op semantic on_nl on_ignored_nl arguments on_lbracket on_symbeg # Set label provider unless caller provided a special label provider
arguments on_lbracket on_symbeg UNK on_rbracket on_op on_tstring_beg on_tstring_end on_nl on_ignored_nl if semantic on_period is_a? on_lparen on_const on_rparen on_nl unless semantic # A detail message is always provided, but is blank by default. # TODO: this support is questionable, it requires knowledge that :detail is special
if semantic on_period is_a? on_lparen on_const on_rparen on_nl unless semantic on_period UNK on_lparen on_symbeg file on_rparen on_op semantic on_period UNK # Accept an Error as semantic if it supports methods #file(), #line(), and #pos()
on_ivar on_op UNK on_nl end on_nl on_ignored_nl def on_op on_lparen o on_rparen on_ignored_nl UNK on_period class on_op o on_period class # TODO: Currently unused, the intention is to provide more information (stack backtrace, etc.) when # debugging or similar - this to catch internal problems reported as higher level issues.
def on_op on_lparen o on_rparen on_ignored_nl UNK on_period class on_op o on_period class on_op on_ignored_nl UNK on_lparen o on_rparen on_op # Two diagnostics are considered equal if the have the same issue, location and severity # (arguments and exception are ignored) #
def UNK on_lparen o on_rparen on_ignored_nl source_pos on_period UNK on_op o on_period source_pos on_period UNK on_op source_pos on_period UNK on_op # Position is equal if the diagnostic is not located or if referring to the same offset
class on_const on_nl def UNK diagnostic on_nl on_tstring_beg on_embexpr_beg UNK on_lparen diagnostic on_rparen on_embexpr_end on_tstring_content on_embexpr_beg UNK on_lparen diagnostic on_rparen # Formats a diagnostic for output. # Produces a diagnostic output typical for a compiler (suitable for interpretation by tools) # The format is: # `file:line:pos: Message`, where pos, line and file are included if available. #
def UNK diagnostic on_nl diagnostic on_period severity on_op on_symbeg UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_op on_tstring_beg on_tstring_end on_nl end on_nl # This produces "Deprecation notice: " prefix if the diagnostic has :deprecation severity, otherwise "". # The idea is that all other diagnostics are emitted with the methods Puppet.err (or an exception), and # Puppet.warning. # @note Note that it is not a good idea to use Puppet.deprecation_warning as it is for internal deprecation. #
class on_const on_op on_const on_nl def UNK diagnostic on_nl if on_lparen UNK on_op UNK diagnostic on_rparen on_op on_tstring_beg on_tstring_end on_nl # Produces a diagnostic output in the "puppet style", where the location is appended with an "at ..." if the # location is known. #
def UNK diagnostic on_nl file on_op diagnostic on_period file on_nl file on_op on_lparen file on_period is_a? on_lparen on_const on_rparen on_op # The somewhat (machine) unusable format in current use by puppet. # have to be used here for backwards compatibility.
class on_const on_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl attr_reader on_symbeg UNK on_nl def UNK # An acceptor of diagnostics. # An acceptor of diagnostics is given each issue as they are found by a diagnostician/validator. An # acceptor can collect all found issues, or decide to collect a few and then report, or give up as the first issue # if found. # This default implementation collects all diagnostics in the order they are produced, and can then # answer questions about what was diagnosed. #
attr_reader on_symbeg UNK on_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl attr_reader on_symbeg UNK on_nl def UNK on_lparen on_rparen on_ignored_nl on_ivar # All diagnostic in the order they were issued
attr_reader on_symbeg UNK on_nl on_ignored_nl attr_reader on_symbeg UNK on_nl def UNK on_lparen on_rparen on_ignored_nl on_ivar on_op on_lbracket on_rbracket on_nl on_ivar # The number of :warning severity issues + number of :deprecation severity issues
attr_reader on_symbeg UNK on_nl def UNK on_lparen on_rparen on_ignored_nl on_ivar on_op on_lbracket on_rbracket on_nl on_ivar on_op on_int on_nl on_ivar on_op # The number of :error severity issues
def UNK on_lparen on_rparen on_ignored_nl on_ivar on_op on_lbracket on_rbracket on_nl on_ivar on_op on_int on_nl on_ivar on_op on_int on_nl end on_nl # Initializes this diagnostics acceptor. # By default, the acceptor is configured with a default severity producer. # @param severity_producer [SeverityProducer] the severity producer to use to determine severity of an issue # # TODO add semantic_label_provider #
def UNK on_nl on_ivar on_op on_int on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op on_int on_nl end on_nl on_ignored_nl # Returns true when errors have been diagnosed.
def UNK on_nl on_ivar on_op on_int on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op UNK on_nl end on_nl on_ignored_nl # Returns true when warnings have been diagnosed.
def UNK on_nl UNK on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK on_lbrace on_op d on_op # Returns true when errors and/or warnings have been diagnosed.
def UNK on_nl on_ivar on_period UNK on_lbrace on_op d on_op d on_period severity on_op on_symbeg error on_rbrace on_nl end on_nl # Returns the diagnosed errors in the order they were reported.
def UNK on_nl on_ivar on_period UNK on_lbrace on_op d on_op d on_period severity on_op on_symbeg UNK on_op d on_period severity # Returns the diagnosed warnings in the order they were reported. # (This includes :warning and :deprecation severity)
def UNK on_nl on_ivar on_period UNK on_lbrace on_op d on_op d on_period severity on_op on_symbeg UNK on_rbrace on_nl end on_nl # Returns the ignored diagnostics in the order they were reported (if reported at all)
def UNK on_lparen diagnostic on_rparen on_ignored_nl if diagnostic on_period is_a? on_lparen on_const on_rparen on_nl diagnostic on_period UNK on_period UNK on_lbrace # Add a diagnostic, or all diagnostics from another acceptor to the set of diagnostics # @param diagnostic [Diagnostic, Acceptor] diagnostic(s) that should be accepted
def UNK on_lparen on_op UNK on_rparen on_ignored_nl UNK on_op on_lbracket on_rbracket on_nl on_ivar on_period UNK UNK on_op d on_op on_ignored_nl # Prunes the contain diagnostics by removing those for which the given block returns true. # The internal statistics is updated as a consequence of removing. # @return [Array<Diagnostic, nil] the removed set of diagnostics or nil if nothing was removed #
end on_nl end on_nl UNK on_period UNK on_op nil on_op UNK on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl def UNK # there is not ignore_count
