UNK on_const on_op on_const on_op on_const on_op on_const on_op on_const on_op on_const on_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK # The relationship graph is the final form of a puppet catalog in # which all dependency edges are explicitly in the graph. This form of the # catalog is used to traverse the graph in the order in which resources are # managed. # # @api private
def UNK on_nl UNK on_period each do on_op v on_op on_ignored_nl on_ivar on_lbracket v on_rbracket on_op UNK on_lparen v on_rparen # Enqueue the initial set of resources, those with no dependencies.
def UNK on_lparen resource on_rparen on_ignored_nl on_ivar on_lbracket resource on_rbracket on_op UNK on_lparen resource on_rparen on_period UNK on_lbrace on_op UNK # Decrement the blocker count for the resource by 1. If the number of # blockers is unknown, count them and THEN decrement by 1.
UNK if UNK on_lparen edge on_period source on_comma edge on_period target on_rparen on_nl on_ignored_nl if UNK on_lparen edge on_period target # don't let automatic relationships conflict with manual ones.
UNK if UNK on_lparen edge on_period target on_comma edge on_period source on_rparen on_nl on_ignored_nl if UNK on_lparen edge on_period source # don't let automatic relationships conflict with manual ones.
on_const on_op on_lbrace on_symbeg UNK on_op on_symbeg UNK on_comma on_symbeg UNK on_op on_symbeg on_const on_rbrace on_nl def UNK on_lparen catalog # Impose our container information on another graph by using it # to replace any container vertices X with a pair of vertices # { admissible_X and completed_X } such that # # 0) completed_X depends on admissible_X # 1) contents of X each depend on admissible_X # 2) completed_X depends on each on the contents of X # 3) everything which depended on X depends on completed_X # 4) admissible_X depends on everything X depended on # 5) the containers and their edges must be removed # # Note that this requires attention to the possible case of containers # which contain or depend on other containers, but has the advantage # that the number of new edges created scales linearly with the number # of contained vertices regardless of how containers are related; # alternatives such as replacing container-edges with content-edges # scale as the product of the number of external dependencies, which is # to say geometrically in the case of nested / chained containers. #
admissible on_op on_const on_period UNK on_lbrace on_op UNK on_comma UNK on_op UNK on_rbrace on_nl completed on_op on_const on_period UNK on_lbrace # # These two hashes comprise the aforementioned attention to the possible # case of containers that contain / depend on other containers; they map # containers to their sentinels but pass other vertices through. Thus we # can "do the right thing" for references to other vertices that may or # may not be containers. #
admissible on_lbracket x on_rbracket on_period UNK on_lparen x on_rparen on_nl completed on_lbracket x on_rbracket on_period UNK on_lparen x on_rparen on_nl # This copies the original container's tags over to the two anchor whits. # Without this, tags are not propagated to the container's resources.
UNK on_period each on_lbrace on_op x on_op on_ignored_nl UNK on_op catalog on_period UNK on_lparen x on_comma on_symbeg UNK on_op on_symbeg # # Implement the six requirements listed above #
UNK on_period each on_lbrace on_op v on_op on_ignored_nl add_edge on_lparen admissible on_lbracket x on_rbracket on_comma admissible on_lbracket v on_rbracket on_comma # (0)
add_edge on_lparen completed on_lbracket v on_rbracket on_comma completed on_lbracket x on_rbracket on_comma on_const on_rparen on_rbrace on_nl UNK on_lparen x on_comma # (1)
on_rbrace on_nl UNK on_lparen x on_comma on_symbeg UNK on_op on_symbeg UNK on_comma on_symbeg UNK on_op on_symbeg UNK on_rparen on_period each # (2)
UNK on_lparen x on_comma on_symbeg UNK on_op on_symbeg UNK on_comma on_symbeg UNK on_op on_symbeg UNK on_rparen on_period each on_lbrace on_op # (3) & (5)
UNK on_lparen x on_comma on_symbeg UNK on_op on_symbeg UNK on_comma on_symbeg UNK on_op on_symbeg UNK on_rparen on_period each on_lbrace on_op # (4) & (5)
end on_nl end on_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP # (5)
