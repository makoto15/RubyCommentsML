UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_op on_const on_op on_const on_nl UNK on_const on_op on_const on_op on_const on_nl # coding: utf-8
UNK on_const on_op on_const on_op on_const on_nl UNK on_const on_op on_const on_op on_const on_nl UNK on_const on_op on_const on_op on_const # This represents an action that is attached to a face. Actions should # be constructed by calling {Puppet::Interface::ActionManager#action}, # which is available on {Puppet::Interface}, and then calling methods of # {Puppet::Interface::ActionBuilder} in the supplied block. # @api private
def UNK on_lparen UNK on_comma name on_rparen on_ignored_nl raise on_tstring_beg on_embexpr_beg name on_period UNK on_embexpr_end on_tstring_content on_tstring_end unless name on_period # @api private
on_ivar on_op on_lbracket on_rbracket on_nl on_ivar on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl on_ivar on_op on_lbracket on_rbracket on_nl on_ivar on_op on_lbracket # The few bits of documentation we actually demand. The default license # is a favour to our end users; if you happen to get that in a core face # report it as a bug, please. --daniel 2011-04-26
on_ivar on_op on_lbracket on_rbracket on_nl on_ivar on_op on_lbracket on_rbracket on_nl on_ivar on_op on_lbrace on_rbrace on_nl on_ivar on_op on_lbrace on_rbrace on_nl # @options collects the added options in the order they're declared. # @options_hash collects the options keyed by alias for quick lookups.
on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_nl UNK on_period UNK on_lparen on_symbeg on_ivar on_comma # This is not nice, but it is the easiest way to make us behave like the # Ruby Method object rather than UnboundMethod. Duplication is vaguely # annoying, but at least we are a shallow clone. --daniel 2011-04-12
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_nl UNK on_period UNK on_lparen on_symbeg on_ivar on_comma UNK # @return [void] # @api private
UNK on_symbeg name on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl def UNK on_nl on_op on_op on_ivar # The name of this action # @return [Symbol]
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl def UNK on_nl on_op on_op on_ivar on_nl end on_nl on_ignored_nl UNK # The face this action is attached to # @return [Puppet::Interface]
UNK on_symbeg UNK on_nl def UNK on_nl on_op on_op on_ivar on_nl end on_nl on_ignored_nl UNK on_symbeg UNK on_nl UNK on_symbeg # Whether this is the default action for the face # @return [Boolean] # @api private
UNK on_symbeg UNK on_nl UNK on_symbeg UNK on_nl def UNK on_nl UNK on_lparen on_ivar on_period name on_comma UNK on_op UNK ######################################################################## # Documentation...
on_ignored_nl on_ignored_nl def UNK on_lparen type on_rparen on_ignored_nl unless type on_period UNK on_const on_nl raise on_const on_comma _ on_lparen on_tstring_beg ######################################################################## # Support for rendering formats and all.
def UNK on_lparen type on_rparen on_ignored_nl unless type on_period UNK on_const on_nl raise on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end # @api private
UNK on_ivar on_lbracket type on_rbracket on_period UNK on_lparen on_ivar on_rparen if on_ivar on_period UNK type on_nl on_ignored_nl UNK on_op type # Do we have a rendering hook for this name?
UNK on_op type on_period UNK on_period UNK on_lparen UNK on_tstring_content UNK on_comma on_tstring_beg on_tstring_end on_rparen on_period to_sym on_nl UNK on_ivar # How about by another name?
UNK UNK on_nl end on_nl on_ignored_nl def UNK on_lparen type on_comma proc on_rparen on_ignored_nl unless proc on_period UNK on_const on_nl # Guess not, nothing to run.
def UNK on_lparen type on_comma proc on_rparen on_ignored_nl unless proc on_period UNK on_const on_nl UNK on_op if proc on_period UNK # @api private
_ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl else on_ignored_nl _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_ignored_nl on_lbrace on_label proc #TRANSLATORS 'set_rendering_method_for' and 'Proc' should not be translated
_ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_ignored_nl on_lbrace on_label proc on_period UNK on_period name on_rbrace on_nl end on_nl raise #TRANSLATORS 'set_rendering_method_for' and 'Proc' should not be translated
_ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_tstring_beg on_tstring_content on_tstring_end on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_ignored_nl on_lbrace on_label on_ivar on_period name on_comma #TRANSLATORS 'when_rendering', 'when_invoked' are method names and should not be translated
_ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_tstring_beg on_tstring_content on_tstring_end on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_ignored_nl on_lbrace on_label on_ivar on_period name on_comma #TRANSLATORS 'when_rendering', 'when_invoked' are method names and should not be translated
on_ivar on_lbracket type on_rbracket on_op on_ignored_nl on_ivar on_period UNK on_lparen on_symbeg UNK on_comma UNK on_lparen type on_rparen on_comma proc on_rparen # Now, the ugly bit. We add the method to our interface object, and # retrieve it, to rotate through the dance of getting a suitable method # object out of the whole process. --daniel 2011-04-18
def UNK on_lparen type on_rparen on_ignored_nl on_symbeg on_embexpr_beg name on_embexpr_end on_tstring_content on_embexpr_beg type on_embexpr_end on_tstring_end on_nl end on_nl UNK on_symbeg # @return [void] # @api private
UNK on_symbeg UNK on_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op UNK on_period to_sym on_nl end on_nl on_ignored_nl def # @api private # @return [Symbol]
def UNK on_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl on_ignored_nl on_ignored_nl # @api private # @return [void]
def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK # @api private # @return [Boolean]
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_ignored_nl ######################################################################## # Initially, this was defined to allow the @action.invoke pattern, which is # a very natural way to invoke behaviour given our introspection # capabilities. Heck, our initial plan was to have the faces delegate to # the action object for invocation and all. # # It turns out that we have a binding problem to solve: @face was bound to # the parent class, not the subclass instance, and we don't pass the # appropriate context or change the binding enough to make this work. # # We could hack around it, by either mandating that you pass the context in # to invoke, or try to get the binding right, but that has probably got # subtleties that we don't instantly think of â€“ especially around threads. # # So, we are pulling this method for now, and will return it to life when we # have the time to resolve the problem. For now, you should replace... # # @action = @face.get_action(name) # @action.invoke(arg1, arg2, arg3) # # ...with... # # @action = @face.get_action(name) # @face.send(@action.name, arg1, arg2, arg3) # # I understand that is somewhat cumbersome, but it functions as desired. # --daniel 2011-03-31 # # PS: This code is left present, but commented, to support this chunk of # documentation, for the benefit of the reader. # # def invoke(*args, &block) # @face.send(name, *args, &block) # end
on_ignored_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_ignored_nl UNK on_op # We need to build an instance method as a wrapper, using normal code, to be # able to expose argument defaulting between the caller and definer in the # Ruby API. An extra method is, sadly, required for Ruby 1.8 to work since # it doesn't expose bind on a block. # # Hopefully we can improve this when we finally shuffle off the last of Ruby # 1.8 support, but that looks to be a few "enterprise" release eras away, so # we are pretty stuck with this for now. # # Patches to make this work more nicely with Ruby 1.9 using runtime version # checking and all are welcome, provided that they don't change anything # outside this little ol' bit of code and all. # # Incidentally, we though about vendoring evil-ruby and actually adjusting # the internal C structure implementation details under the hood to make # this stuff work, because it would have been cleaner. Which gives you an # idea how motivated we were to make this cleaner. Sorry. # --daniel 2011-03-31
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_ignored_nl UNK on_op on_tstring_beg on_embexpr_beg # The arity of the action # @return [Integer]
UNK on_symbeg UNK on_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_ignored_nl UNK on_op on_tstring_beg on_embexpr_beg on_ivar on_embexpr_end on_tstring_content on_tstring_end on_period # The block that is executed when the action is invoked # @return [block]
raise on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label on_ivar on_rbrace on_nl UNK arity on_op on_int UNK # This will never fire on 1.8.7, which treats no arguments as "*args", # but will on 1.9.2, which treats it as "no arguments". Which bites, # because this just begs for us to wind up in the horrible situation # where a 1.8 vs 1.9 error bites our end users. --daniel 2011-04-19 #TRANSLATORS 'when_invoked' should not be translated
UNK on_op UNK on_nl on_tstring_content on_embexpr_beg on_ivar on_embexpr_end on_tstring_content on_embexpr_beg UNK on_period join on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_embexpr_end on_tstring_content # <== points to the same line as 'def' in the wrapper.
raise on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label UNK on_rbrace on_nl end on_nl on_ivar on_op UNK #TRANSLATORS 'Puppet.settings' should not be translated
result on_op on_lbrace on_rbrace on_nl on_ignored_nl UNK on_op on_const on_period UNK do on_op UNK on_comma UNK on_op UNK on_lbracket UNK # The final set of arguments; effectively a hand-rolled shallow copy of # the original, which protects the caller from the surprises they might # get if they passed us a hash and we mutated it...
UNK on_op on_const on_period UNK do on_op UNK on_comma UNK on_op UNK on_lbracket UNK on_rbracket on_op on_lbracket on_rbracket end on_nl # Check for multiple aliases for the same option, and canonicalize the # name of the argument while we are about it.
UNK on_op on_lbracket on_rbracket on_nl UNK on_period map on_lbrace on_op x on_op get_option on_lparen x on_rparen on_rbrace on_period UNK do # Inject default arguments and check for missing mandating options.
UNK result on_nl end on_nl on_ignored_nl UNK on_nl def UNK on_lparen name on_comma proc on_rparen on_ignored_nl on_ivar on_period UNK on_symbeg # All done.
UNK on_nl def UNK on_lparen name on_comma proc on_rparen on_ignored_nl on_ivar on_period UNK on_symbeg UNK on_comma name on_comma proc on_nl ######################################################################## # Support code for action decoration; see puppet/interface.rb for the gory # details of why this is hidden away behind private. --daniel 2011-04-15
def UNK on_lparen name on_comma proc on_rparen on_ignored_nl on_ivar on_period UNK on_symbeg UNK on_comma name on_comma proc on_nl end on_nl # @return [void] # @api private
