UNK on_const on_op on_const on_op on_const on_nl on_const on_op UNK on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep # Provides a label for an object. # This simple implementation calls #to_s on the given object, and handles articles 'a/an/the'. #
def UNK o on_nl o on_period UNK on_nl end on_nl on_ignored_nl def UNK o on_nl text on_op UNK on_lparen o # Provides a label for the given object by calling `to_s` on the object. # The intent is for this method to be overridden in concrete label providers.
def UNK o on_nl text on_op UNK on_lparen o on_rparen on_nl on_tstring_beg on_embexpr_beg UNK on_lparen text on_rparen on_embexpr_end on_tstring_content on_embexpr_beg # Produces a label for the given text with indefinite article (a/an)
def UNK o on_nl text on_op UNK on_lparen o on_rparen on_nl on_tstring_beg on_embexpr_beg UNK on_lparen text on_rparen on_period UNK on_embexpr_end # Produces a label for the given text with indefinite article (A/An)
def UNK o on_nl on_tstring_beg on_tstring_content on_embexpr_beg UNK on_lparen o on_rparen on_embexpr_end on_tstring_end on_nl end on_nl on_ignored_nl def UNK o # Produces a label for the given text with *definite article* (the).
def UNK o on_nl on_tstring_beg on_tstring_content on_embexpr_beg UNK on_lparen o on_rparen on_embexpr_end on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_lparen # Produces a label for the given text with *definite article* (The).
def UNK on_lparen UNK UNK text on_op on_tstring_beg on_tstring_end on_rparen on_ignored_nl UNK on_op on_int on_op text on_op on_tstring_beg on_embexpr_beg text # Appends 's' to (optional) text if count != 1 else an empty string
def UNK on_lparen strings UNK UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_rparen on_ignored_nl UNK strings on_period UNK on_nl UNK on_int on_nl # Combines several strings using commas and a final conjunction
def UNK UNK on_nl UNK on_lparen UNK on_lparen UNK on_rparen on_rparen on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl def UNK # Produces an *indefinite article* (a/an) for the given text ('a' if # it starts with a vowel) This is obviously flawed in the general # sense as may labels have punctuation at the start and this method # does not translate punctuation to English words. Also, if a vowel is # pronounced as a consonant, the article should not be "an". #
