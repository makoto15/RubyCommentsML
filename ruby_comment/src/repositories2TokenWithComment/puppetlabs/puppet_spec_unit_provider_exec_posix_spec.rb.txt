UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_op on_lbrace on_rbrace on_nl on_const on_op on_const on_op on_const on_op on_const on_period each # a sentinel value that we can use to emulate what locale environment variables might be set to on an international # system.
UNK on_op on_lbrace on_rbrace on_nl on_const on_op on_const on_op on_const on_op on_const on_period each on_lbrace on_op var on_op UNK on_lbracket # a temporary hash that contains sentinel values for each of the locale environment variables that we override in # "exec"
UNK on_op on_lbrace on_rbrace on_nl on_const on_op on_const on_op on_const on_op on_const on_period each on_lbrace on_op var on_op UNK on_lbracket # we'll do this once without any sentinel values, to give us a little more test coverage
on_const on_op on_const on_period UNK on_lparen UNK on_rparen do on_ignored_nl on_const on_op on_const on_op on_const on_op on_const on_period each do # now, once more... but with our sentinel values
UNK on_op on_lbrace on_rbrace on_nl on_const on_op on_const on_op on_const on_op on_const on_period each on_lbrace on_op var on_op UNK on_lbracket # a temporary hash that contains sentinel values for each of the user-related environment variables that we # are expected to unset during an "exec"
on_const on_op on_const on_period UNK on_lparen UNK on_rparen do on_ignored_nl on_const on_op on_const on_op on_const on_op on_const on_period each do # first we set up a temporary execution environment with sentinel values for the user-related environment vars # that we care about.
on_const on_op on_const on_op on_const on_op on_const on_period each do on_op var on_op on_ignored_nl expect on_lparen on_const on_lbracket var on_rbracket # with this environment, we loop over the vars in question
expect on_lparen on_const on_lbracket var on_rbracket on_rparen on_period to eq on_lparen UNK on_lbracket var on_rbracket on_rparen on_nl on_ignored_nl output on_comma # ensure that our temporary environment is set up as we expect
output on_comma _ on_op provider on_period run on_lparen command on_op var on_rparen on_nl expect on_lparen output on_period strip on_rparen on_period # run an "exec" via the provider and ensure that it unsets the vars
expect on_lparen on_const on_lbracket var on_rbracket on_rparen on_period to eq on_lparen UNK on_lbracket var on_rbracket on_rparen on_nl end on_nl on_ignored_nl # ensure that after the exec, our temporary env is still intact
provider on_period resource on_lbracket on_symbeg UNK on_rbracket on_op on_const on_op on_const on_op on_const on_op on_const on_period UNK on_lbrace on_op var # set the "environment" property of the resource, populating it with a hash containing sentinel values for # each of the user-related posix environment variables
on_const on_op on_const on_op on_const on_op on_const on_period each do on_op var on_op on_ignored_nl output on_comma _ on_op provider on_period # loop over the posix user-related environment variables
output on_comma _ on_op provider on_period run on_lparen command on_op var on_rparen on_nl expect on_lparen output on_period strip on_rparen on_period # run an 'exec' to get the value of each variable
expect on_lparen output on_period strip on_rparen on_period to eq on_lparen UNK on_rparen on_nl end on_nl end on_nl end on_nl end # ensure that it matches our expected sentinel value
