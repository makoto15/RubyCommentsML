class on_const on_op on_const on_op on_const on_op on_const on_op on_const on_nl class on_op self on_nl def UNK on_lparen param on_rparen # This is the parent class of all NSS classes. They're very different in # their backend, but they're pretty similar on the front-end. This class # provides a way for them all to be as similar as possible.
UNK on_op UNK on_lparen on_symbeg name on_op ent on_period name on_comma on_symbeg UNK on_op ent on_period UNK on_comma on_symbeg UNK #rubocop:disable Lint/AssignmentInCondition
hash on_period UNK UNK on_op param on_comma value on_op on_ignored_nl on_ivar on_lbracket name on_rbracket on_lbracket param on_rbracket on_op value on_nl # Set options individually, so we can call the options method # multiple times.
def UNK on_nl on_const on_period UNK on_lparen _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_rparen on_nl UNK on_op on_lbracket on_rbracket on_nl # List everything out by name. Abstracted a bit so that it works # for both users and groups.
UNK on_op ent on_period name on_nl UNK ent on_period name if UNK on_nl end on_nl UNK on_ignored_nl on_const on_op on_const #rubocop:disable Lint/AssignmentInCondition
def section on_nl unless resource_type on_nl raise on_const on_op on_const on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl if # This is annoying, but there really aren't that many options, # and this *is* built into Ruby.
def UNK on_lparen field on_rparen on_ignored_nl field on_op field on_period intern on_nl UNK on_op on_lbrace on_symbeg UNK on_op on_symbeg UNK # Autogenerate a value. Mostly used for uid/gid, but also used heavily # with DirectoryServices
def self on_period UNK on_lparen field on_comma resource_type on_rparen on_ignored_nl UNK resource_type on_nl UNK on_symbeg UNK UNK UNK on_op on_symbeg # Autogenerate either a uid or a gid. This is not very flexible: we can # only generate one field type per class, and get kind of confused if asked # for both.
UNK resource_type on_nl UNK on_symbeg UNK UNK UNK on_op on_symbeg UNK UNK method on_op on_symbeg UNK on_nl UNK on_symbeg UNK # Figure out what sort of value we want to generate.
raise on_const on_op on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label resource_type on_rbrace on_nl end on_nl on_ignored_nl #TRANSLATORS "autogen_id()" is a method name and should not be translated
unless on_ivar on_nl UNK on_op on_lbracket on_rbracket on_nl on_const on_op on_const on_period send on_lparen UNK on_rparen on_lbrace on_op UNK on_op # Initialize from the data set, if needed.
UNK on_op on_lbracket on_rbracket on_nl on_const on_op on_const on_period send on_lparen UNK on_rparen on_lbrace on_op UNK on_op UNK on_op UNK # Sadly, Etc doesn't return an enumerator, it just invokes the block # given, or returns the first record from the database. There is no # other, more convenient enumerator for these, so we fake one with this # loop. Thanks, Ruby, for your awesome abstractions. --daniel 2012-03-23
on_ivar on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl if UNK on_nl UNK _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen # ...and finally increment and return the next value.
return nil on_nl end on_nl on_ignored_nl begin on_ignored_nl sensitive on_op UNK on_nl UNK on_lparen self on_period UNK on_comma on_lbrace on_symbeg # The object already exists
return nil on_nl end on_nl on_ignored_nl begin on_ignored_nl UNK on_lparen self on_period UNK on_comma on_lbrace on_symbeg UNK on_op true on_comma # the object already doesn't exist
def UNK on_nl on_op on_op UNK on_lparen true on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen param on_rparen on_ignored_nl on_lparen # Does our object exist?
def UNK on_lparen param on_rparen on_ignored_nl on_lparen hash on_op UNK on_lparen UNK on_rparen on_rparen on_op UNK on_lparen param on_comma hash # Retrieve a specific value by name.
def UNK on_lparen UNK on_rparen on_ignored_nl if on_ivar on_period UNK UNK UNK on_op true on_nl on_ivar on_op on_lparen on_tstring_beg on_tstring_content # Retrieve what we can about our object
on_ivar on_op UNK on_lparen on_ivar on_rparen on_op nil on_nl end on_nl on_ignored_nl def UNK on_nl on_const on_op on_const on_op on_const # Now convert our Etc struct into a hash.
def UNK on_nl on_const on_op on_const on_op on_const on_period UNK on_lparen on_ivar on_lbracket on_symbeg name on_rbracket on_rparen on_period UNK on_lparen # The list of all groups the user is a member of. Different # user mgmt systems will need to override this method.
def UNK on_lparen UNK on_rparen on_ignored_nl hash on_op on_lbrace on_rbrace on_nl self on_period class on_period resource_type on_period UNK on_period UNK # Convert the Etc struct into a hash.
def UNK on_lparen UNK on_op nil on_rparen on_ignored_nl UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_comma UNK on_rparen #Derived classes can override to declare sensitive data so a flag can be passed to execute
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK on_op UNK on_lbracket UNK on_rbracket on_period UNK on_period UNK on_nl UNK # From overriding Puppet::Property#insync? Ruby Etc::getpwnam < 2.1.0 always # returns a struct with binary encoded string values, and >= 2.1.0 will return # binary encoded strings for values incompatible with current locale charset, # or Encoding.default_external if compatible. Compare a "should" value with # encoding of "current" value, to avoid unnecessary property syncs and # comparison of strings with different encodings. (PUP-6777) # # return basic string comparison after re-encoding (same as # Puppet::Property#property_matches)
UNK on_op UNK on_lbracket UNK on_rbracket on_period UNK on_period UNK on_nl UNK on_op UNK on_period UNK on_lparen UNK on_period UNK # we're only doing comparison here so don't mutate the string
