class on_const on_op on_const on_nl include on_const on_op on_const on_nl include on_const on_op on_const on_op on_const on_nl include on_const on_op # A Provider is an implementation of the actions that manage resources (of some type) on a system. # This class is the base class for all implementation of a Puppet Provider. # # Concepts: #-- # * **Confinement** - confinement restricts providers to only be applicable under certain conditions. # It is possible to confine a provider several different ways: # * the included {#confine} method which provides filtering on fact, feature, existence of files, or a free form # predicate. # * the {commands} method that filters on the availability of given system commands. # * **Property hash** - the important instance variable `@property_hash` contains all current state values # for properties (it is lazily built). It is important that these values are managed appropriately in the # methods {instances}, {prefetch}, and in methods that alters the current state (those that change the # lifecycle (creates, destroys), or alters some value reflected backed by a property). # * **Flush** - is a hook that is called once per resource when everything has been applied. The intent is # that an implementation may defer modification of the current state typically done in property setters # and instead record information that allows flush to perform the changes more efficiently. # * **Execution Methods** - The execution methods provides access to execution of arbitrary commands. # As a convenience execution methods are available on both the instance and the class of a provider since a # lot of provider logic switch between these contexts fairly freely. # * **System Entity/Resource** - this documentation uses the term "system entity" for system resources to make # it clear if talking about a resource on the system being managed (e.g. a file in the file system) # or about a description of such a resource (e.g. a Puppet Resource). # * **Resource Type** - this is an instance of Type that describes a classification of instances of Resource (e.g. # the `File` resource type describes all instances of `file` resources). # (The term is used to contrast with "type" in general, and specifically to contrast with the implementation # class of Resource or a specific Type). # # @note An instance of a Provider is associated with one resource. # # @note Class level methods are only called once to configure the provider (when the type is created), and not # for each resource the provider is operating on. # The instance methods are however called for each resource. # # @api public #
include on_const on_op on_const on_comma on_const on_op on_const on_op on_const on_nl include on_const on_op on_const on_op on_const on_nl on_ignored_nl UNK # Include the util module so we have access to things like 'which'
UNK on_symbeg name on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl end # @return [String] The name of the provider
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl end on_nl on_ignored_nl UNK on_symbeg resource # # @todo Original = _"The source parameter exists so that providers using the same # source can specify this, so reading doesn't attempt to read the # same package multiple times."_ This seems to be a package type specific attribute. Is this really # used? # # @return [???] The source is WHAT?
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl end on_nl on_ignored_nl UNK on_symbeg resource on_nl on_ignored_nl def UNK on_lparen # @todo What is this type? A reference to a Puppet::Type ? # @return [Puppet::Type] the resource type (that this provider is ... WHAT?) #
UNK on_symbeg UNK on_nl end on_nl on_ignored_nl UNK on_symbeg resource on_nl on_ignored_nl def UNK on_lparen on_op args on_rparen on_ignored_nl on_const # @!attribute [r] doc # The (full) documentation for this provider class. The documentation for the provider class itself # should be set with the DSL method {desc=}. Setting the documentation with with {doc=} has the same effect # as setting it with {desc=} (only the class documentation part is set). In essence this means that # there is no getter for the class documentation part (since the getter returns the full # documentation when there are additional contributors). # # @return [String] Returns the full documentation for the provider. # @see Puppet::Utils::Docs # @comment This is puzzling ... a write only doc attribute??? The generated setter never seems to be # used, instead the instance variable @doc is set in the `desc` method. This seems wrong. It is instead # documented as a read only attribute (to get the full documentation). Also see doc below for # desc. # @!attribute [w] desc # Sets the documentation of this provider class. (The full documentation is read via the # {doc} attribute). # # @dsl type #
UNK on_symbeg resource on_nl on_ignored_nl def UNK on_lparen on_op args on_rparen on_ignored_nl on_const on_op on_const on_op on_const on_period UNK on_lparen # @return [???] This resource is what? Is an instance of a provider attached to one particular Puppet::Resource? #
def UNK on_lparen on_op args on_rparen on_ignored_nl on_const on_op on_const on_op on_const on_period UNK on_lparen on_op args on_rparen on_nl end # Convenience methods - see class method with the same name. # @return (see self.execute)
def self on_period UNK on_lparen on_op args on_rparen on_ignored_nl on_const on_op on_const on_op on_const on_period UNK on_lparen on_op args on_rparen # (see Puppet::Util::Execution.execute)
def UNK on_lparen on_op args on_comma on_op block on_rparen on_ignored_nl on_const on_op on_const on_op on_const on_period UNK on_lparen on_op args # Convenience methods - see class method with the same name. # @return (see self.execpipe)
def self on_period UNK on_lparen on_op args on_comma on_op block on_rparen on_ignored_nl on_const on_op on_const on_op on_const on_period UNK on_lparen # (see Puppet::Util::Execution.execpipe)
def UNK on_lparen on_op args on_rparen on_ignored_nl on_const on_op on_const on_op on_const on_period UNK on_lparen on_op args on_rparen on_nl end # Convenience methods - see class method with the same name. # @return (see self.execfail) # @deprecated
def self on_period UNK on_lparen on_op args on_rparen on_ignored_nl on_const on_op on_const on_op on_const on_period UNK on_lparen on_op args on_rparen # (see Puppet::Util::Execution.execfail) # @deprecated
def self on_period command on_lparen name on_rparen on_ignored_nl name on_op name on_period intern on_nl on_ignored_nl command on_op on_ivar on_lbracket name # Returns the absolute path to the executable for the command referenced by the given name. # @raise [Puppet::DevError] if the name does not reference an existing command. # @return [String] the absolute path to the found executable for the command # @see which # @api public
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK do on_op name on_comma path on_op on_ignored_nl UNK on_lparen # Confines this provider to be suitable only on hosts where the given commands are present. # Also see {Puppet::Confiner#confine} for other types of confinement of a provider by use of other types of # predicates. # # @note It is preferred if the commands are not entered with absolute paths as this allows puppet # to search for them using the PATH variable. # # @param command_specs [Hash{String => String}] Map of name to command that the provider will # be executing on the system. Each command is specified with a name and the path of the executable. # @return [void] # @see optional_commands # @api public #
def self on_period UNK on_lparen hash on_rparen on_ignored_nl hash on_period UNK do on_op name on_comma UNK on_op on_ignored_nl UNK on_lparen # Defines optional commands. # Since Puppet 2.7.8 this is typically not needed as evaluation of provider suitability # is lazy (when a resource is evaluated) and the absence of commands # that will be present after other resources have been applied no longer needs to be specified as # optional. # @param [Hash{String => String}] hash Named commands that the provider will # be executing on the system. Each command is specified with a name and the path of the executable. # (@see #has_command) # @see commands # @api public
def self on_period UNK on_lparen name on_comma path on_comma on_op block on_rparen on_ignored_nl name on_op name on_period intern on_nl command # Creates a convenience method for invocation of a command. # # This generates a Provider method that allows easy execution of the command. The generated # method may take arguments that will be passed through to the executable as the command line arguments # when it is invoked. # # @example Use it like this: # has_command(:echo, "/bin/echo") # def some_method # echo("arg 1", "arg 2") # end # @comment the . . . below is intentional to avoid the three dots to become an illegible ellipsis char. # @example . . . or like this # has_command(:echo, "/bin/echo") do # is_optional # environment :HOME => "/var/tmp", :PWD => "/tmp" # end # # @param name [Symbol] The name of the command (will become the name of the generated method that executes the command) # @param path [String] The path to the executable for the command # @yield [ ] A block that configures the command (see {Puppet::Provider::Command}) # @comment a yield [ ] produces {|| ...} in the signature, do not remove the space. # @note the name ´has_command´ looks odd in an API context, but makes more sense when seen in the internal # DSL context where a Provider is declaratively defined. # @api public #
UNK on_lparen name on_rparen do on_op on_op args on_op on_ignored_nl return command on_period UNK on_lparen on_op args on_rparen on_nl end # Now define the class and instance methods.
class on_const on_nl UNK on_symbeg UNK on_nl on_ignored_nl def self on_period UNK on_lparen name on_comma path on_comma UNK on_comma on_op # Internal helper class when creating commands - undocumented. # @api private
def self on_period UNK on_lparen name on_rparen on_ignored_nl UNK on_lparen on_ivar on_rparen UNK on_ivar on_period UNK on_lparen name on_rparen on_nl # @return [Boolean] Return whether the given feature has been declared or not.
def self on_period UNK on_nl UNK on_op true on_op UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_nl return # @return [Boolean] Returns whether this implementation satisfies all of the default requirements or not. # Returns false if there is no matching defaultfor # @see Provider.defaultfor #
def self on_period UNK on_nl return UNK if UNK on_lparen on_ivar on_rparen UNK on_lparen on_ivar on_rparen on_nl end on_nl on_ignored_nl # Look through the array of defaultfor hashes and return the first match. # @return [Hash<{String => Object}>] the matching hash specified by a defaultfor # @see Provider.defaultfor # @api private
UNK on_lparen on_ivar on_rparen on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK do # Blacklist means this provider cannot be a default
def self on_period UNK on_lparen UNK on_comma values on_rparen on_ignored_nl UNK on_op on_const on_period value on_lparen UNK on_rparen on_period to_s # Compare a fact value against one or more supplied value # @param [Symbol] fact a fact to query to match against one of the given values # @param [Array, Regexp, String] values one or more values to compare to the # value of the given fact # @return [Boolean] whether or not the fact value matches one of the supplied # values. Given one or more Regexp instances, fact is compared via the basic # pattern-matching operator.
def self on_period UNK on_lparen hash on_rparen on_ignored_nl on_ivar on_op hash on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen # Sets a facts filter that determine which of several suitable providers should be picked by default. # This selection only kicks in if there is more than one suitable provider. # To filter on multiple facts the given hash may contain more than one fact name/value entry. # The filter picks the provider if all the fact/value entries match the current set of facts. (In case # there are still more than one provider after this filtering, the first found is picked). # @param hash [Hash<{String => Object}>] hash of fact name to fact value. # @return [void] #
def self on_period UNK on_nl UNK on_op UNK on_nl length on_op UNK on_op UNK on_period length on_op UNK on_nl on_ignored_nl # @return [Integer] Returns a numeric specificity for this provider based on how many requirements it has # and number of _ancestors_. The higher the number the more specific the provider. # The number of requirements is based on the hash size of the matching {Provider.defaultfor}. # # The _ancestors_ is the Ruby Module::ancestors method and the number of classes returned is used # to boost the score. The intent is that if two providers are equal, but one is more "derived" than the other # (i.e. includes more classes), it should win because it is more specific). # @note Because of how this value is # calculated there could be surprising side effects if a provider included an excessive amount of classes. #
UNK on_op UNK on_nl length on_op UNK on_op UNK on_period length on_op UNK on_nl on_ignored_nl on_lparen length on_op UNK on_rparen # This strange piece of logic attempts to figure out how many parent providers there # are to increase the score. What is will actually do is count all classes that Ruby Module::ancestors # returns (which can be other classes than those the parent chain) - in a way, an odd measure of the # complexity of a provider).
def self on_period UNK on_nl on_ivar on_op on_lbracket on_rbracket on_nl on_ivar on_op on_lbracket on_rbracket on_nl on_ivar on_op on_lbrace on_rbrace on_nl # Initializes defaults and commands (i.e. clears them). # @return [void]
def self on_period UNK on_nl UNK on_const on_op on_const on_comma UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label self # Returns a list of system resources (entities) this provider may/can manage. # This is a query mechanism that lists entities that the provider may manage on a given system. It is # is directly used in query services, but is also the foundation for other services; prefetching, and # purging. # # As an example, a package provider lists all installed packages. (In contrast, the File provider does # not list all files on the file-system as that would make execution incredibly slow). An implementation # of this method should be made if it is possible to quickly (with a single system call) provide all # instances. # # An implementation of this method should only cache the values of properties # if they are discovered as part of the process for finding existing resources. # Resource properties that require additional commands (than those used to determine existence/identity) # should be implemented in their respective getter method. (This is important from a performance perspective; # it may be expensive to compute, as well as wasteful as all discovered resources may perhaps not be managed). # # An implementation may return an empty list (naturally with the effect that it is not possible to query # for manageable entities). # # By implementing this method, it is possible to use the `resources´ resource type to specify purging # of all non managed entities. # # @note The returned instances are instance of some subclass of Provider, not resources. # @return [Array<Puppet::Provider>] a list of providers referencing the system entities # @abstract this method must be implemented by a subclass and this super method should never be called as it raises an exception. # @raise [Puppet::DevError] Error indicating that the method should have been implemented by subclass. # @see prefetch
def self on_period UNK on_nl on_lbracket UNK on_period UNK on_comma UNK on_period UNK on_rbracket on_period UNK on_period UNK do on_op # Creates getter- and setter- methods for each property supported by the resource type. # Call this method to generate simple accessors for all properties supported by the # resource type. These simple accessors lookup and sets values in the property hash. # The generated methods may be overridden by more advanced implementations if something # else than a straight forward getter/setter pair of methods is required. # (i.e. define such overriding methods after this method has been called) # # An implementor of a provider that makes use of `prefetch` and `flush` can use this method since it uses # the internal `@property_hash` variable to store values. An implementation would then update the system # state on a call to `flush` based on the current values in the `@property_hash`. # # @return [void] #
def self on_period UNK on_lparen name on_comma on_op block on_rparen on_ignored_nl unless UNK on_period UNK on_lparen name on_rparen on_nl UNK # This method is used to generate a method for a command. # @return [void] # @api private #
def self on_period UNK on_nl on_ivar on_op self on_period name on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen param # @return [String] Returns the data source, which is the provider name if no other source has been set. # @todo Unclear what "the source" is used for?
def self on_period UNK on_lparen param on_rparen on_ignored_nl if param on_period is_a? on_lparen on_const on_rparen on_nl UNK on_op param on_nl # Returns true if the given attribute/parameter is supported by the provider. # The check is made that the parameter is a valid parameter for the resource type, and then # if all its required features (if any) are supported by the provider. # # @param param [Class, Puppet::Parameter] the parameter class, or a parameter instance # @return [Boolean] Returns whether this provider supports the given parameter or not. # @raise [Puppet::DevError] if the given parameter is not valid for the resource type #
def UNK on_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def command on_lparen name on_rparen on_ignored_nl self on_period class on_period # Clears this provider instance to allow GC to clean up.
def command on_lparen name on_rparen on_ignored_nl self on_period class on_period command on_lparen name on_rparen on_nl end on_nl on_ignored_nl def UNK # (see command)
def UNK on_lparen param on_rparen on_ignored_nl on_ivar on_lbracket param on_period intern on_rbracket on_op on_symbeg UNK on_nl end on_nl on_ignored_nl def # Returns the value of a parameter value, or `:absent` if it is not defined. # @param param [Puppet::Parameter] the parameter to obtain the value of # @return [Object] the value of the parameter or `:absent` if not defined. #
def UNK on_lparen resource on_op UNK on_rparen on_ignored_nl if resource on_period is_a? on_lparen on_const on_rparen on_nl on_ivar on_op resource on_nl # Creates a new provider that is optionally initialized from a resource or a hash of properties. # If no argument is specified, a new non specific provider is initialized. If a resource is given # it is remembered for further operations. If a hash is used it becomes the internal `@property_hash` # structure of the provider - this hash holds the current state property values of system entities # as they are being discovered by querying or other operations (typically getters). # # @todo The use of a hash as a parameter needs a better explanation; why is this done? What is the intent? # @param resource [Puppet::Resource, Hash] optional resource or hash #
on_ivar on_op resource on_nl UNK resource on_nl on_ivar on_op resource on_nl on_ivar on_op on_lbrace on_rbrace on_nl else on_ignored_nl on_ivar on_op # We don't use a duplicate here, because some providers (ParsedFile, at least) # use the hash here for later events.
def name on_nl UNK on_op on_ivar on_lbracket on_symbeg name on_rbracket on_nl if UNK on_nl return UNK on_nl UNK self on_period # Returns the name of the resource this provider is operating on. # @return [String] the name of the resource instance (e.g. the file path of a File). # @raise [Puppet::DevError] if no resource is set, or no name defined. #
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK do on_op param on_comma value on_op on_ignored_nl on_ivar on_lbracket param on_period # Sets the given parameters values as the current values for those parameters. # Other parameters are unchanged. # @param [Array<Puppet::Parameter>] params the parameters with values that should be set # @return [void] #
def to_s on_nl on_tstring_beg on_embexpr_beg on_ivar on_embexpr_end on_tstring_content on_embexpr_beg self on_period class on_period name on_embexpr_end on_tstring_content on_tstring_end on_nl end on_nl # @return [String] Returns a human readable string with information about the resource and the provider.
def UNK on_nl to_s on_nl end on_nl on_ignored_nl include on_const on_nl def on_op on_lparen UNK on_rparen on_ignored_nl return UNK unless # @return [String] Returns a human readable string with information about the resource and the provider.
include on_const on_nl def on_op on_lparen UNK on_rparen on_ignored_nl return UNK unless UNK on_period is_a? on_const on_op on_const on_nl return # Makes providers comparable.
def on_op on_lparen UNK on_rparen on_ignored_nl return UNK unless UNK on_period is_a? on_const on_op on_const on_nl return self on_period class # Compares this provider against another provider. # Comparison is only possible with another provider (no other class). # The ordering is based on the class name of the two providers. # # @return [-1,0,+1, nil] A comparison result -1, 0, +1 if this is before other, equal or after other. Returns # nil oif not comparable to other. # @see Comparable
return UNK unless UNK on_period is_a? on_const on_op on_const on_nl return self on_period class on_period name on_op UNK on_period class # We can only have ordering against other providers.
return self on_period class on_period name on_op UNK on_period class on_period name on_nl end on_nl on_ignored_nl on_ignored_nl on_ignored_nl end on_nl # Otherwise, order by the providers class name.
on_ignored_nl on_ignored_nl end on_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP # @comment Document prefetch here as it does not exist anywhere else (called from transaction if implemented) # @!method self.prefetch(resource_hash) # @abstract A subclass may implement this - it is not implemented in the Provider class # This method may be implemented by a provider in order to pre-fetch resource properties. # If implemented it should set the provider instance of the managed resources to a provider with the # fetched state (i.e. what is returned from the {instances} method). # @param resources_hash [Hash<{String => Puppet::Resource}>] map from name to resource of resources to prefetch # @return [void] # @api public
on_ignored_nl end on_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP # @comment Document post_resource_eval here as it does not exist anywhere else (called from transaction if implemented) # @!method self.post_resource_eval() # @since 3.4.0 # @api public # @abstract A subclass may implement this - it is not implemented in the Provider class # This method may be implemented by a provider in order to perform any # cleanup actions needed. It will be called at the end of the transaction if # any resources in the catalog make use of the provider, regardless of # whether the resources are changed or not and even if resource failures occur. # @return [void]
end on_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP # @comment Document flush here as it does not exist anywhere (called from transaction if implemented) # @!method flush() # @abstract A subclass may implement this - it is not implemented in the Provider class # This method may be implemented by a provider in order to flush properties that has not been individually # applied to the managed entity's current state. # @return [void] # @api public
