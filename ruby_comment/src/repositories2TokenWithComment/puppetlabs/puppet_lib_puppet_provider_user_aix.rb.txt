UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl # User Puppet provider for AIX. It uses standard commands to manage users: # mkuser, rmuser, lsuser, chuser # # Notes: # - AIX users can have expiry date defined with minute granularity, # but Puppet does not allow it. There is a ticket open for that (#5431) # # - AIX maximum password age is in WEEKs, not days # # See https://puppet.com/docs/puppet/latest/provider_development.html # for more information
UNK on_symbeg UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_symbeg UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_symbeg UNK on_op # Commands that manage the element
UNK on_symbeg UNK on_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_nl UNK on_symbeg UNK on_comma on_symbeg UNK # Provider features
on_ignored_nl def UNK on_lparen provider on_comma gid on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_lparen gid on_comma provider on_period UNK # Define some Puppet Property => AIX Attribute (and vice versa) # conversion functions here.
on_const on_period UNK on_lparen UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op UNK on_label UNK on_comma on_label provider on_period UNK on_period #TRANSLATORS 'AIX' is the name of an operating system and should not be translated
def UNK on_lparen groups on_rparen on_ignored_nl if groups on_op UNK on_tstring_content UNK on_nl UNK on_const on_comma UNK on_lparen on_tstring_beg on_tstring_content # We do some validation before-hand to ensure the value's an Array, # a String, etc. in the property. This routine does a final check to # ensure our value doesn't have whitespace before we convert it to # an attribute.
def UNK on_lparen provider on_comma UNK on_rparen on_ignored_nl on_const on_op on_const on_op on_const on_period UNK on_lparen provider on_period UNK on_lbracket # We do not directly use the groups attribute value because that will # always include the primary group, even if our user is not one of its # members. Instead, we retrieve our property value by parsing the etc/group file, # which matches what we do on our other POSIX platforms like Linux and Solaris. # # See https://www.ibm.com/support/knowledgecenter/en/ssw_aix_72/com.ibm.aix.files/group_security.htm
UNK on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op gid on_nl UNK on_op groups on_nl on_ignored_nl UNK on_lparen # Now that we have all of our mappings, let's go ahead and make # the resource methods (property getters + setters for our mapped # properties + a getter for the attributes property).
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op gid on_nl UNK on_op groups on_nl on_ignored_nl UNK on_lparen on_symbeg gid on_comma # Setting the primary group (pgrp attribute) on AIX causes both the # current and new primary groups to be included in our user's groups, # which is undesirable behavior. Thus, this custom setter resets the # 'groups' property back to its previous value after setting the primary # group.
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_period UNK UNK on_op UNK on_op UNK on_op UNK # Helper function that parses the password from the given # password filehandle. This is here to make testing easier # for #password since we cannot configure Mocha to mock out # a method and have it return a block's value, meaning we # cannot test #password directly (not in a simple and obvious # way, at least). # @api private
UNK on_op UNK on_period UNK on_period UNK UNK on_op UNK on_op UNK on_op UNK on_tstring_content on_embexpr_beg on_ivar on_lbracket on_symbeg name # From the docs, a user stanza is formatted as (newlines are explicitly # stated here for clarity): # <user>:\n # <attribute1>=<value1>\n # <attribute2>=<value2>\n # # First, find our user stanza
match_obj on_op UNK on_nl UNK on_period UNK on_period UNK UNK on_op UNK on_op on_ignored_nl UNK if UNK on_op UNK on_tstring_content # Now find the password line, if it exists. Note our call to each_line here # will pick up right where we left off.
UNK if UNK on_op UNK on_tstring_content UNK on_nl on_ignored_nl match_obj on_op UNK on_tstring_content UNK on_period UNK on_lparen UNK on_rparen on_nl # Break if we find another user stanza. This means our user # does not have a password.
def UNK on_nl on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma UNK on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen UNK #- **password** # The user's password, in whatever encrypted format the local machine # requires. Be sure to enclose any value that includes a dollar sign ($) # in single quotes ('). Requires features manages_passwords. # # Retrieve the password parsing the /etc/security/passwd file.
on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma UNK on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen UNK on_op UNK on_op # AIX reference indicates this file is ASCII # https://www.ibm.com/support/knowledgecenter/en/ssw_aix_72/com.ibm.aix.files/passwd_security.htm
tempfile on_op UNK on_nl tempfile on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_content on_tstring_end on_comma on_symbeg UNK # Puppet execute does not support strings as input, only files. # The password is expected to be in an encrypted format given -e is specified: # https://www.ibm.com/support/knowledgecenter/ssw_aix_71/com.ibm.aix.cmds1/chpasswd.htm # /etc/security/passwd is specified as an ASCII file per the AIX documentation
UNK on_op on_lbracket UNK on_period UNK on_period UNK on_lparen on_symbeg UNK on_rparen on_comma on_op UNK on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma # Options '-e', '-c', use encrypted password and clear flags # Must receive "user:enc_password" as input # command, arguments = {:failonfail => true, :combine => true} # Fix for bugs #11200 and #10915
if UNK on_op on_tstring_beg on_tstring_end on_nl UNK on_const on_op on_const on_comma on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_end on_nl end on_nl # chpasswd can return 1, even on success (at least on AIX 6.1); empty output # indicates success
tempfile on_period UNK on_lparen on_rparen on_nl tempfile on_period UNK on_lparen on_rparen on_nl end on_nl end on_nl end on_nl on_ignored_nl def # Extra close will noop. This is in case the write to our tempfile # fails.
if on_lparen groups on_op on_ivar on_period UNK on_lparen on_symbeg groups on_rparen on_rparen on_nl UNK on_period groups on_op groups on_nl end # We specify the 'groups' AIX attribute in AixObject's create method # when creating our user. However, this does not always guarantee that # our 'groups' property is set to the right value. For example, the # primary group will always be included in the 'groups' property. This is # bad if we're explicitly managing the 'groups' property under inclusive # membership, and we are not specifying the primary group in the 'groups' # property value. # # Setting the groups property here a second time will ensure that our user is # created and in the right state. Note that this is an idempotent operation, # so if AixObject's create method already set it to the right value, then this # will noop.
on_ignored_nl end on_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP # UNSUPPORTED #- **profile_membership** # Whether specified roles should be treated as the only roles # of which the user is a member or whether they should merely # be treated as the minimum membership list. Valid values are # `inclusive`, `minimum`. # UNSUPPORTED #- **profiles** # The profiles the user has. Multiple profiles should be # specified as an array. Requires features manages_solaris_rbac. # UNSUPPORTED #- **project** # The name of the project associated with a user Requires features # manages_solaris_rbac. # UNSUPPORTED #- **role_membership** # Whether specified roles should be treated as the only roles # of which the user is a member or whether they should merely # be treated as the minimum membership list. Valid values are # `inclusive`, `minimum`. # UNSUPPORTED #- **roles** # The roles the user has. Multiple roles should be # specified as an array. Requires features manages_solaris_rbac. # UNSUPPORTED #- **key_membership** # Whether specified key value pairs should be treated as the only # attributes # of the user or whether they should merely # be treated as the minimum list. Valid values are `inclusive`, # `minimum`. # UNSUPPORTED #- **keys** # Specify user attributes in an array of keyvalue pairs Requires features # manages_solaris_rbac. # UNSUPPORTED #- **allowdupe** # Whether to allow duplicate UIDs. Valid values are `true`, `false`. # UNSUPPORTED #- **auths** # The auths the user has. Multiple auths should be # specified as an array. Requires features manages_solaris_rbac. # UNSUPPORTED #- **auth_membership** # Whether specified auths should be treated as the only auths # of which the user is a member or whether they should merely # be treated as the minimum membership list. Valid values are # `inclusive`, `minimum`. # UNSUPPORTED
