def UNK on_lparen host on_rparen on_ignored_nl UNK UNK if host on_period UNK on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl UNK # Return whether a host supports the systemd provider. # @param host [String] hostname # @return [Boolean] whether the systemd provider is supported.
UNK UNK if host on_period UNK on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_op on_const on_op on_const on_op on_const # The Windows MSI doesn't put Puppet in the Ruby vendor or site dir, so loading it fails.
def UNK on_lparen service on_comma status on_rparen on_ignored_nl UNK on_op on_tstring_beg on_tstring_content on_embexpr_beg status on_lbracket on_symbeg ensure on_rbracket on_embexpr_end on_tstring_content # Construct manifest ensuring service status. # @param service [String] name of the service # @param status [Hash] properties to set - can include 'ensure' and 'enable' keys. # @return [String] a manifest
def UNK on_lparen host on_comma service on_comma status on_rparen on_ignored_nl apply_manifest_on host on_comma UNK on_lparen service on_comma status on_rparen on_comma # Alter the state of a service using puppet apply and assert that a change was logged. # Assumes the starting state is not the desired state. # @param host [String] hostname. # @param service [String] name of the service. # @param status [Hash] properties to set - can include 'ensure' and 'enable' keys. # @return None
apply_manifest_on host on_comma UNK on_lparen service on_comma status on_rparen on_comma on_symbeg UNK on_op on_lbracket UNK on_comma UNK on_rbracket do on_ignored_nl # the process of creating the service will also start it # to avoid a flickering test from the race condition, this test will ensure # that the exit code is either # 2 => something changed, or # 0 => no change needed
def UNK on_lparen host on_comma service on_comma status on_rparen on_ignored_nl apply_manifest_on host on_comma UNK on_lparen service on_comma status on_rparen do # Ensure the state of a service using puppet apply and assert that no change was logged. # Assumes the starting state is the ensured state. # @param host [String] hostname. # @param service [String] name of the service. # @param status [Hash] properties to set - can include 'ensure' and 'enable' keys. # @return None
apply_manifest_on host on_comma UNK on_lparen service on_comma status on_rparen do on_ignored_nl UNK on_lparen on_regexp_beg on_tstring_content on_embexpr_beg service on_embexpr_end on_tstring_content on_regexp_end # ensure idempotency
def UNK on_lparen host on_comma service on_comma status on_comma on_op block on_rparen on_ignored_nl UNK on_lparen host on_comma service on_comma status # Alter the state of a service using puppet apply, assert that it changed and change is idempotent. # Can set 'ensure' and 'enable'. Assumes the starting state is not the desired state. # @param host [String] hostname. # @param service [String] name of the service. # @param status [Hash] properties to set - can include 'ensure' and 'enable' keys. # @param block [Proc] optional: block to verify service state # @return None
def UNK on_lparen host on_comma service on_comma status on_comma on_op block on_rparen on_ignored_nl UNK on_op on_tstring_beg on_tstring_content on_embexpr_beg status on_lbracket # Checks that the ensure and/or enable status of a service are as expected. # @param host [String] hostname. # @param service [String] name of the service. # @param status [Hash] properties to set - can include 'ensure' and 'enable' keys. # @param block [Proc] optional: block to verify service state # @return None
if block on_nl UNK block on_nl end on_nl end on_nl on_ignored_nl def UNK on_lparen host on_comma service on_rparen on_ignored_nl UNK # Verify service state on the system using a custom block
def UNK on_lparen host on_comma service on_rparen on_ignored_nl UNK on_op on_tstring_beg on_tstring_content on_embexpr_beg service on_embexpr_end on_tstring_content on_embexpr_beg service on_embexpr_end on_tstring_content # Refreshes a service. # @param host [String] hostname. # @param service [String] name of the service to refresh. # @return None
def UNK on_lparen service on_rparen on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl UNK on_lparen UNK on_comma UNK on_lparen on_tstring_beg on_tstring_content # Runs some common acceptance tests for nonexistent services. # @param service [String] name of the service # @return None
