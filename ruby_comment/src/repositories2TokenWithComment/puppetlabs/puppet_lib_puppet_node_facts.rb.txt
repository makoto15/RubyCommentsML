UNK on_const on_op on_const on_op on_const on_nl UNK on_const on_op on_const on_op on_const on_nl on_ignored_nl UNK on_const on_op on_const on_nl # Manage a given node's facts. This either accepts facts and stores them, or # returns facts for a given node.
UNK on_const on_op on_const on_nl on_ignored_nl UNK on_const on_nl def UNK on_lparen UNK on_comma UNK on_op UNK on_comma UNK on_op # Set up indirection, so that nodes can be looked for in # the node sources.
UNK on_const on_nl def UNK on_lparen UNK on_comma UNK on_op UNK on_comma UNK on_op on_lbrace on_rbrace on_rparen on_ignored_nl on_const on_op # We want to expire any cached nodes if the facts are saved.
timestamp on_op on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl timestamp on_op data on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl # Timestamp will be here in YAML, e.g. when reading old reports
timestamp on_op data on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl on_ignored_nl if timestamp on_period is_a? on_const on_nl on_ivar on_op on_const on_period # Timestamp will be here in JSON
def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_period UNK on_lparen UNK on_rparen on_nl UNK on_nl end on_nl on_ignored_nl def UNK # Add extra values, such as facts given to lookup on the command line. The # extra values will override existing values. # @param extra_values [Hash{String=>Object}] the values to add # @api private
def UNK on_nl values on_period UNK UNK on_op fact on_comma UNK on_op on_ignored_nl values on_lbracket fact on_rbracket on_op UNK UNK # Sanitize fact values by converting everything not a string, Boolean # numeric, array or hash into strings.
if result on_period UNK on_op on_const on_op on_const on_nl UNK on_ignored_nl result on_op result on_period UNK on_lparen on_const on_op on_const # The result may be ascii-8bit encoded without being a binary (low level object.inspect returns ascii-8bit string)
result on_nl end on_nl end on_nl result on_nl end on_nl end on_nl end on_nl EMP EMP EMP EMP EMP EMP # return the ascii-8bit - it will be taken as a binary
