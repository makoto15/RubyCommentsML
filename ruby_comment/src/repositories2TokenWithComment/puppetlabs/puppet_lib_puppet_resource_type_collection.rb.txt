UNK on_const on_op on_const on_op on_const on_nl UNK on_symbeg environment on_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_const on_op on_const # @api private
on_ivar on_op on_lbracket on_rbracket on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK on_period UNK on_lparen # So we can keep a list and match the first-defined regex
on_rbrace on_period UNK on_nl end on_nl on_ignored_nl def on_op on_lparen UNK on_rparen on_ignored_nl UNK on_lparen UNK on_rparen on_nl UNK on_nl # todo, could be just a binary, this dumps the entire body (good while developing)
def on_op on_lparen UNK on_rparen on_ignored_nl UNK on_lparen UNK on_rparen on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_lparen instance # @api private
UNK on_lparen on_symbeg UNK on_rparen on_lbrace on_ignored_nl UNK on_lparen on_tstring_beg on_tstring_content UNK instance on_period type UNK on_tstring_end on_comma instance on_rparen # return a merged instance, or the given
UNK instance UNK instance on_period name on_op on_tstring_beg on_tstring_end on_nl if instance on_period type on_op on_symbeg UNK on_op on_lparen UNK # Only main class (named '') can be merged (for purpose of merging top-scopes).
UNK on_symbeg UNK on_comma UNK on_nl end on_nl end on_nl on_ignored_nl def UNK on_lparen instance on_rparen on_ignored_nl on_ivar on_lbracket on_tstring_beg # throw is used to signal merge - avoids dupe checks and adding it to hostclasses
def UNK on_lparen instance on_rparen on_ignored_nl on_ivar on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op instance on_nl end on_nl on_ignored_nl def UNK # Replaces the known settings with a new instance (that must be named 'settings'). # This is primarily needed for testing purposes. Also see PUP-5954 as it makes # it illegal to merge classes other than the '' (main) class. Prior to this change # settings where always merged rather than being defined from scratch for many testing scenarios # not having a complete side effect free setup for compilation. #
on_lbracket on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_ignored_nl on_symbeg UNK on_rbracket on_period UNK UNK # TODO: This implementation is wasteful as it creates a copy on each request #
def UNK on_lparen name on_comma type on_rparen on_ignored_nl on_ivar on_period UNK UNK on_ignored_nl fqname on_op on_lparen name on_lbracket on_int on_comma # Resolve namespaces and find the given object. Autoload it if # necessary.
fqname on_op on_lparen name on_lbracket on_int on_comma on_int on_rbracket on_op on_const on_op name on_lbracket on_int on_op on_op on_int on_rbracket on_op # Name is always absolute, but may start with :: which must be removed
if on_const on_lbracket on_symbeg UNK on_rbracket on_nl UNK _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label type on_comma on_label # do not try to autoload if we already tried and it wasn't conclusive # as this is a time consuming operation. Warn the user. # Check first if debugging is on since the call to debug_once is expensive
