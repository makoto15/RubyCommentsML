on_ignored_nl UNK on_const on_op on_const on_op on_const on_op on_const on_op on_const on_op on_const on_nl UNK on_const on_op on_const on_op on_const # This class models a node catalog. It is the thing meant to be passed # from server to client, and it contains all of the information in the # catalog, including the resources and the relationships between them. # # @api public
attr_accessor on_symbeg name on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg code_id on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl # The host name this is a catalog for.
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg code_id on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl # The catalog version. Used for testing whether a catalog # is up to date.
attr_accessor on_symbeg code_id on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl # The id of the code input to the compiler.
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg recursive_metadata on_nl on_ignored_nl # The UUID of the catalog
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg recursive_metadata on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl # @return [Integer] catalog format version number. This value is constant # for a given version of Puppet; it is incremented when a new release of # Puppet changes the API for the various objects that make up the catalog.
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg recursive_metadata on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl # Inlined file metadata for non-recursive find # A hash of title => metadata
attr_accessor on_symbeg recursive_metadata on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl # Inlined file metadata for recursive search # A hash of title => { source => [metadata, ...] }
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_comma on_symbeg # How long this catalog took to retrieve. Used for reporting stats.
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg # Whether this is a host catalog, which behaves very differently. # In particular, reports are sent, graphs are made, and state is # stored in the state database. If this is set incorrectly, then you often # end up in infinite loops, because catalogs are used to make things # that the host catalog needs.
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg environment on_nl on_ignored_nl attr_accessor on_symbeg # Whether this catalog was retrieved from the cache, which affects # whether it is written back out again.
attr_accessor on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg environment on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl def UNK # Some metadata to help us compile and generally respond to the current state.
attr_accessor on_symbeg environment on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen on_op classes on_rparen on_ignored_nl classes on_period each # A String representing the environment for this catalog
attr_accessor on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen on_op classes on_rparen on_ignored_nl classes on_period each do on_op UNK on_op on_ignored_nl # The actual environment instance that was used during compilation
def UNK on_lparen on_op classes on_rparen on_ignored_nl classes on_period each do on_op UNK on_op on_ignored_nl on_ivar on_op UNK on_nl end # Add classes to our class list.
UNK on_lparen on_op classes on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen ref on_rparen on_ignored_nl s on_op ref on_period UNK # Add the class names as tags, too.
def UNK on_lparen ref on_rparen on_ignored_nl s on_op ref on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl e on_op ref # Returns [typename, title] when given a String with "Type[title]". # Returns [nil, nil] if '[' ']' not detected. #
def UNK on_lparen other on_comma on_op resources on_rparen on_ignored_nl resources on_period each do on_op resource on_op on_ignored_nl UNK on_op UNK # Add `resources` to the catalog after `other`. WARNING: adding # multiple resources will produce the reverse ordering, e.g. calling # `add_resource_after(A, [B,C])` will result in `[A,C,B]`.
def UNK on_lparen resource on_rparen on_ignored_nl UNK on_lparen resource on_comma on_symbeg UNK on_op on_symbeg UNK on_rparen on_lbracket on_int on_rbracket on_nl # @param resource [A Resource] a resource in the catalog # @return [A Resource, nil] the resource that contains the given resource # @api public
UNK on_op on_lbracket resource on_lbracket on_symbeg UNK on_rbracket on_rbracket on_period UNK on_period UNK on_nl UNK on_period each on_lbrace on_op UNK # Explicit aliases must always be processed # The alias setting logic checks, and does not error if the alias is set to an already set alias # for the same resource (i.e. it is ok if alias == title
return unless resource on_period UNK on_lparen on_symbeg UNK on_rparen and resource on_period UNK on_nl on_ignored_nl UNK on_op resource on_period UNK # Skip creating uniqueness key alias and checking collisions for non-isomorphic resources.
UNK on_op resource on_period UNK on_nl if UNK on_period UNK and UNK on_op on_lbracket resource on_period title on_rbracket on_nl self # Add an alias if the uniqueness key is valid and not the title, which has already been checked.
def UNK on_lparen resource on_comma key on_rparen on_ignored_nl ref on_op resource on_period ref on_nl ref on_op UNK on_tstring_content UNK on_nl # Create an alias for a resource.
UNK on_op on_ivar on_lbracket newref on_rbracket on_nl if UNK on_nl return if UNK on_op resource on_nl UNK on_op on_const on_op # LAK:NOTE It's important that we directly compare the references, # because sometimes an alias is created before the resource is # added to the catalog, so comparing inside the below if block # isn't sufficient.
_ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_ignored_nl on_lbrace on_label ref on_comma on_label key on_period inspect on_comma on_label newref on_period #TRANSLATORS 'alias' should not be translated
_ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_ignored_nl on_lbrace on_label ref on_comma on_label key on_period inspect on_comma on_label UNK on_comma #TRANSLATORS 'alias' should not be translated
def UNK on_lparen options on_op on_lbrace on_rbrace on_rparen on_ignored_nl on_const on_op on_const on_op on_const on_period UNK if UNK on_nl on_ignored_nl # Apply our catalog to the local host. # @param options [Hash{Symbol => Object}] a hash of options # @option options [Puppet::Transaction::Report] :report # The report object to log this transaction to. This is optional, # and the resulting transaction will create a report if not # supplied. # # @return [Puppet::Transaction] the transaction created for this # application # # @api public
on_const on_op on_const on_op on_const on_period UNK if UNK on_nl end on_nl on_ignored_nl UNK transaction if UNK on_nl on_ignored_nl transaction # Don't try to store state unless we're a host config # too recursive.
def UNK on_lparen UNK on_op nil on_rparen on_ignored_nl if on_ivar on_period UNK on_nl on_ivar on_op on_const on_op on_const on_op on_const # The relationship_graph form of the catalog. This contains all of the # dependency edges that are used for determining order. # # @param given_prioritizer [Puppet::Graph::Prioritizer] The prioritization # strategy to use when constructing the relationship graph. Defaults the # being determined by the `ordering` setting. # @return [Puppet::Graph::RelationshipGraph] # @api public
on_ivar on_period UNK on_period each on_lbrace on_op resource on_op resource on_period UNK on_rbrace if UNK on_nl on_ivar on_period UNK on_nl # We have to do this so that the resources clean themselves up.
def UNK on_lparen type on_comma options on_rparen on_ignored_nl UNK on_op on_const on_op on_const on_period type on_lparen type on_rparen on_nl unless # Create a new resource and register it in the catalog.
def UNK on_nl UNK on_nl on_ignored_nl on_ivar on_period UNK on_period each on_lbrace on_op resource on_op resource on_period UNK on_rbrace on_nl # Make sure all of our resources are "finished".
def UNK on_nl on_ignored_nl on_const on_op on_const on_period type on_lparen on_symbeg UNK on_rparen on_period UNK on_period each on_lbrace on_op res # Make the default objects necessary for function.
on_ignored_nl on_const on_op on_const on_period type on_lparen on_symbeg UNK on_rparen on_period UNK on_period each on_lbrace on_op res on_op add_resource on_lparen # We have to add the resources to the catalog, or else they won't get cleaned up after # the transaction.
on_const on_op on_const on_period type on_lparen on_symbeg UNK on_rparen on_period UNK on_period each on_lbrace on_op res on_op add_resource on_lparen res # First create the default scheduling objects
UNK on_op on_const on_op on_const on_period type on_lparen on_symbeg UNK on_rparen on_period UNK on_nl if UNK on_nl add_resource on_lparen UNK # And filebuckets
def UNK on_lparen on_op resources on_rparen on_ignored_nl resources on_period each do on_op resource on_op on_ignored_nl ref on_op resource on_period ref # Remove the resource from our catalog. Notice that we also call # 'remove' on the resource, at least until resource classes no longer maintain # references to the resource instances.
resource on_period UNK if resource on_period UNK on_lparen on_symbeg UNK on_rparen on_nl end on_nl end on_nl on_ignored_nl def resource on_lparen # Only Puppet::Type kind of resources respond to :remove, not Puppet::Resource
def resource on_lparen type on_comma title on_op nil on_rparen on_ignored_nl type_name on_op type on_period UNK on_lparen on_const on_op on_const on_rparen # Look a resource up by its reference (e.g., File[/etc/passwd]).
type_name on_op type on_period UNK on_lparen on_const on_op on_const on_rparen on_op type on_period UNK on_lparen on_const on_op on_const on_op on_const # Retain type if it's a type
res on_op on_const on_op on_const on_period new on_lparen type on_comma title on_comma on_lbrace on_symbeg environment on_op on_ivar on_rbrace on_rparen on_nl # an instance has to be created in order to construct the unique key used when # searching for aliases, or nothing is found as it is needed by the CapabilityFinder.
result on_op on_ivar on_lbracket on_lbracket type_name on_comma res on_period UNK on_rbracket on_period UNK on_rbracket on_nl on_ignored_nl if result on_period UNK # Must check with uniqueness key because of aliases or if resource transforms title in title # to attribute mappings.
result on_op on_const on_op on_const on_op on_const on_period UNK on_lparen environment on_comma code_id on_comma res on_rparen on_nl add_resource on_lparen result # @todo lutter 2015-03-10: this assumes that it is legal to just # mention a capability resource in code and have it automatically # made available, even if the current component does not require it
def UNK on_nl UNK on_symbeg UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_symbeg UNK on_nl end on_nl on_ignored_nl # Convert our catalog into a RAL catalog.
def UNK on_nl UNK on_symbeg UNK on_nl end on_nl on_ignored_nl def UNK on_lparen on_op UNK on_rparen on_ignored_nl if UNK on_nl # Convert our catalog into a catalog of Puppet::Resource instances.
def UNK on_lparen on_op UNK on_rparen on_ignored_nl if UNK on_nl on_const on_period UNK on_lparen on_lbrace on_symbeg UNK on_op UNK on_rbrace # filter out the catalog, applying +block+ to each resource. # If the block result is false, the resource will # be kept otherwise it will be skipped
if UNK on_nl on_const on_period UNK on_lparen on_lbrace on_symbeg UNK on_op UNK on_rbrace on_rparen do on_ignored_nl UNK on_symbeg UNK on_comma # to_catalog must take place in a context where current_environment is set to the same env as the # environment set in the catalog (if it is set) # See PUP-3755
UNK on_symbeg UNK on_comma on_op UNK on_nl end on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op on_const on_period UNK # If catalog has no environment_instance, hope that the caller has made sure the context has the # correct current_environment
def UNK on_nl UNK on_op on_const on_period UNK on_period UNK on_lparen on_symbeg UNK on_rparen on_nl on_const on_op on_const on_period UNK # Store the classes in the classfile.
UNK on_op on_const on_period UNK on_period UNK on_lparen on_symbeg UNK on_rparen on_nl on_const on_op on_const on_period UNK on_lparen UNK on_period # classfile paths may contain UTF-8 # https://puppet.com/docs/puppet/latest/configuration.html#classfile
def UNK on_nl UNK on_op on_const on_period UNK on_period UNK on_lparen on_symbeg UNK on_rparen on_nl on_const on_op on_const on_period UNK # Store the list of resources we manage
UNK on_op on_const on_period UNK on_period UNK on_lparen on_symbeg UNK on_rparen on_nl on_const on_op on_const on_period UNK on_lparen UNK on_period # resourcefile contains resources that may be UTF-8 names # https://puppet.com/docs/puppet/latest/configuration.html#resourcefile
def UNK on_lparen name on_rparen on_ignored_nl return unless UNK on_nl on_ignored_nl UNK on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl def # Produce the graph files if requested.
return unless UNK on_nl on_ignored_nl UNK on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl def UNK on_nl on_ivar on_op on_const on_op # We only want to graph the main host catalog.
def UNK on_lparen resource on_comma title_key on_rparen on_ignored_nl UNK on_op on_ivar on_lbracket title_key on_rbracket on_nl return unless UNK on_nl on_ignored_nl # Verify that the given resource isn't declared elsewhere.
UNK on_op on_ivar on_lbracket title_key on_rbracket on_nl return unless UNK on_nl on_ignored_nl UNK on_op on_const on_op on_const on_op on_const on_period # Short-circuit the common case,
UNK on_op on_const on_op on_const on_op on_const on_period UNK on_lparen UNK on_period UNK on_comma UNK on_period UNK on_rparen on_nl UNK # If we've gotten this far, it's a real conflict
def UNK on_lparen UNK on_rparen on_ignored_nl result on_op self on_period UNK on_period new on_lparen self on_period name on_comma self on_period # An abstracted method for converting one catalog into another type of catalog. # This pretty much just converts all of the resources from one class to another, using # a conversion method.
map on_lbracket resource on_period ref on_rbracket on_op newres on_nl on_ignored_nl result on_period add_resource newres on_nl end on_nl on_ignored_nl UNK on_op # We can't guarantee that resources don't munge their names # (like files do with trailing slashes), so we have to keep track # of what a resource got converted to.
next if UNK on_lparen edge on_period source on_rparen on_nl next if UNK and UNK edge on_period source on_nl on_ignored_nl next # Skip edges between virtual resources.
