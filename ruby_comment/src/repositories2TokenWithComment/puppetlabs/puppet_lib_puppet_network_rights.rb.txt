UNK on_const on_op on_const on_op on_const UNK end on_nl on_ignored_nl UNK on_const on_nl def UNK on_lparen name on_comma on_op args # this exception is thrown when a request is not authenticated
UNK on_const on_nl def UNK on_lparen name on_comma on_op args on_rparen on_ignored_nl on_op UNK on_lparen name on_comma on_symbeg UNK on_op # Rights class manages a list of ACLs for paths.
def UNK on_lparen name on_comma on_op args on_rparen on_ignored_nl on_op UNK on_lparen name on_comma on_symbeg UNK on_op args on_lbracket UNK # Check that name is allowed or not
on_lbracket on_symbeg UNK on_comma on_symbeg UNK on_rbracket on_nl UNK on_ignored_nl on_lbracket method on_rbracket on_nl end on_nl UNK on_op UNK on_period # :head is ok if either :find or :save is ok.
UNK on_nl UNK on_ignored_nl UNK on_period UNK on_nl end on_nl end on_nl on_ignored_nl def UNK on_lparen name on_comma args on_op # One of the methods we checked is ok, therefore this request is ok.
UNK on_period UNK on_nl end on_nl end on_nl on_ignored_nl def UNK on_lparen name on_comma args on_op on_lbrace on_rbrace on_rparen on_ignored_nl # Just need to return any of the failure exceptions.
match on_op UNK on_period UNK on_lparen name on_rparen on_nl if match on_nl args on_lbracket on_symbeg match on_rbracket on_op match on_nl # an acl can return :dunno, which means "I'm not qualified to answer your question, # please ask someone else". This is used when for instance an acl matches, but not for the # current rest method, where we might think some other acl might be more specific.
UNK UNK if UNK on_nl UNK on_op true on_nl end on_nl end on_nl UNK on_nl end on_nl on_ignored_nl UNK on_op # return early if we're allowed
UNK on_op true on_nl end on_nl end on_nl UNK on_nl end on_nl on_ignored_nl UNK on_op on_tstring_beg UNK name UNK on_tstring_content # we matched, select this acl
UNK on_op on_tstring_beg UNK name UNK on_tstring_content UNK args on_lbracket on_symbeg method on_rbracket UNK on_tstring_content on_tstring_end on_nl on_ignored_nl on_const on_period # if we end up here, then that means we either didn't match or failed, in any # case will return an error to the outside world
def UNK on_lparen name on_comma UNK on_op UNK on_comma UNK on_op UNK on_rparen on_ignored_nl UNK on_lparen on_const on_period UNK on_lparen # Define a new right to which access can be provided.
def UNK on_lparen name on_rparen on_ignored_nl UNK on_lbracket name on_rbracket on_nl end on_nl on_ignored_nl UNK on_const on_op on_const on_op on_const # Retrieve a right by name.
UNK on_const on_op on_const on_op on_const on_op on_const on_nl UNK on_symbeg name on_comma on_symbeg UNK on_nl UNK on_symbeg UNK on_comma # A right.
UNK on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg authentication on_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl on_const on_op # Overriding Object#methods sucks for debugging. If we're in here in the # future, it would be nice to rename Right#methods
on_ivar on_op name on_nl on_ivar on_op UNK on_op UNK on_nl on_ivar on_op UNK on_nl on_ivar on_op on_const on_nl on_ignored_nl UNK # defaults to authenticated
on_ivar on_op name on_period UNK on_lparen UNK on_tstring_content UNK on_comma on_tstring_beg on_tstring_end on_rparen on_nl on_ivar on_op on_const on_period UNK on_lparen # this is a regex
def UNK on_nl true on_nl end on_nl on_ignored_nl def UNK on_lparen name on_comma UNK on_comma args on_op on_lbrace on_rbrace on_rparen # There's no real check to do at this point
def UNK on_lparen name on_comma UNK on_comma args on_op on_lbrace on_rbrace on_rparen on_ignored_nl if UNK on_ivar on_period include? on_lparen args # does this right is allowed for this triplet? # if this right is too restrictive (ie we don't match this access method) # then return :dunno so that upper layers have a chance to try another right # tailored to the given method
UNK on_lparen args on_lbracket on_symbeg match on_rbracket on_rparen if args on_lbracket on_symbeg match on_rbracket on_nl UNK on_op UNK on_lparen name # make sure any capture are replaced if needed
def UNK on_lparen m on_rparen on_ignored_nl m on_op m on_period UNK if m on_period UNK on_lparen on_const on_rparen on_nl on_ignored_nl # restrict this right to some method only
if on_ivar on_op on_const on_nl on_ivar on_op on_lbracket on_rbracket on_nl end on_nl on_ignored_nl UNK on_const on_comma _ on_lparen on_tstring_beg on_tstring_content # if we were allowing all methods, then starts from scratch
UNK on_period UNK on_period match on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl def on_op on_lparen name on_rparen on_ignored_nl UNK on_period # otherwise match with the regex
