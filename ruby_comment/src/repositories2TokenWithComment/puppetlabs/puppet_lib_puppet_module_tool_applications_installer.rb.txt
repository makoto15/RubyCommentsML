unless on_ivar on_nl on_const on_op on_const on_period UNK on_lparen UNK on_rparen on_nl on_const on_op on_const on_period UNK on_lparen module_repository on_rparen # If we're operating on a local tarball and ignoring dependencies, we # don't need to search any additional sources. This will cut down on # unnecessary network traffic.
UNK on_op on_tstring_beg on_tstring_content on_embexpr_beg version on_embexpr_end on_tstring_content on_embexpr_beg version on_period UNK on_embexpr_end on_tstring_content on_tstring_end on_nl graph on_period UNK on_lparen # Since upgrading already installed modules can be troublesome, # we'll place constraints on the graph for each installed module, # locking it to upgrades within the same major version.
if graph on_period dependencies on_lbracket name on_rbracket on_period UNK on_nl raise on_const on_comma results on_period UNK on_lparen on_symbeg UNK on_op # Ensure that there is at least one candidate release available # for the target package.
releases on_period each do on_op rel on_op on_ignored_nl installed_module on_op UNK on_period UNK on_lbracket rel on_period name on_period UNK on_lparen # Check for module name conflicts.
def UNK on_nl UNK on_nl on_ignored_nl if on_op forced? on_op on_ivar on_period UNK on_lparen on_ivar on_rparen on_nl raise on_const on_comma # Return a Pathname object representing the path to the module # release package in the `Puppet.settings[:module_working_dir]`.
on_const on_op on_const on_op on_const on_period UNK on_nl UNK on_lparen on_ivar on_comma on_ivar on_period UNK on_lbracket on_symbeg path on_rbracket on_comma # This clean call means we never "cache" the module we're installing, but this # is desired since module authors can easily rerelease modules different content but the same # version number, meaning someone with the old content cached will be very confused as to why # they can't get new content. # Long term we should just get rid of this caching behavior and cleanup downloaded modules after they install # but for now this is a quick fix to disable caching
def UNK on_lparen graph on_comma UNK on_op UNK on_rparen on_ignored_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_embexpr_beg graph on_period UNK # # Resolve installation conflicts by checking if the requested module # or one of its dependencies conflicts with an installed module. # # Conflicts occur under the following conditions: # # When installing 'puppetlabs-foo' and an existing directory in the # target install path contains a 'foo' directory and we cannot determine # the "full name" of the installed module. # # When installing 'puppetlabs-foo' and 'pete-foo' is already installed. # This is considered a conflict because 'puppetlabs-foo' and 'pete-foo' # install into the same directory 'foo'. #
def UNK on_lparen name on_rparen on_ignored_nl UNK on_op on_const on_period UNK on_lparen name on_rparen on_nl UNK on_op UNK on_tstring_content UNK # # Check if a file is a vaild module package. # --- # FIXME: Checking for a valid module package should be more robust and # use the actual metadata contained in the package. 03132012 - Hightower # +++ #
