UNK on_const on_op on_const on_op on_const on_op on_const on_op on_const on_op on_const on_nl UNK on_const on_op on_const UNK end on_nl # A file.
UNK on_const on_nl def value on_nl nil on_nl end on_nl end on_nl on_ignored_nl UNK on_const on_nl def value on_nl on_tstring_beg # An unspecified user or group # # @api private
UNK on_const on_nl def value on_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl end on_nl on_ignored_nl UNK on_const on_nl def UNK # A "root" user or group # # @api private
UNK on_const on_nl def UNK on_lparen name on_comma UNK on_comma UNK on_comma UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl on_ivar # A "service" user or group that picks up values from settings when the # referenced user or group is safe to use (it exists or will be created), and # uses the given fallback value when not safe. # # @api private
def UNK on_lparen name on_comma UNK on_comma UNK on_comma UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl on_ivar on_op UNK on_nl # @param name [Symbol] the name of the setting to use as the service value # @param fallback [String, nil] the value to use when the service value cannot be used # @param settings [Puppet::Settings] the puppet settings object # @param available_method [Symbol] the name of the method to call on # settings to determine if the value in settings is available on the system #
def UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_lparen value on_rparen on_ignored_nl on_ivar on_op UNK value on_nl when # Should we create files, rather than just directories?
def UNK on_lparen value on_rparen on_ignored_nl on_ivar on_op UNK value on_nl when on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_period new on_nl # @param value [String] the group to use on the created file (can only be "root" or "service") # @api public
on_const on_period new on_lparen on_symbeg group on_comma nil on_comma on_ivar on_comma on_symbeg UNK on_rparen on_nl UNK on_ignored_nl UNK on_lparen on_tstring_beg # Group falls back to `nil` because we cannot assume that a "root" group exists. # Some systems have root group, others have wheel, others have something else.
def UNK on_lparen value on_rparen on_ignored_nl on_ivar on_op UNK value on_nl when on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_period new on_nl # @param value [String] the owner to use on the created file (can only be "root" or "service") # @api public
def group on_nl on_ivar on_period value on_nl end on_nl on_ignored_nl def owner on_nl on_ivar on_period value on_nl end on_nl on_ignored_nl # @return [String, nil] the name of the group to use for the file or nil if the group should not be managed # @api public
def owner on_nl on_ivar on_period value on_nl end on_nl on_ignored_nl def UNK on_lparen meta on_rparen on_ignored_nl self on_period owner on_op # @return [String, nil] the name of the user to use for the file or nil if the user should not be managed # @api public
value on_op on_const on_period UNK on_lparen value on_rparen on_nl end on_nl value on_nl end on_nl on_ignored_nl def type on_nl on_symbeg # for sqlite3 in-memory tests
def UNK on_nl type on_op self on_period type on_nl UNK nil UNK type on_nl on_ignored_nl path on_op self on_period value # Turn our setting thing into a Puppet::Resource instance.
path on_op on_const on_period UNK on_lparen path on_rparen on_nl on_ignored_nl UNK nil UNK type on_op on_symbeg UNK UNK UNK UNK # Make sure the paths are fully qualified.
mode on_op self on_period mode on_nl mode on_op mode on_period UNK on_lparen UNK on_rparen if mode on_period UNK on_lparen on_const # This ends up mimicking the munge method of the mode # parameter to make sure that we're always passing the string # version of the octal number. If we were setting the # 'should' value for mode rather than the 'is', then the munge # method would be called for us automatically. Normally, one # wouldn't need to call the munge method manually, since # 'should' gets set by the provider and it should be able to # provide the data in the appropriate format.
if on_const on_period UNK on_period UNK UNK on_op on_const on_op on_const on_op on_const on_period UNK on_nl resource on_lbracket on_symbeg owner # REMIND fails on Windows because chown/chgrp functionality not supported yet
def UNK on_lparen value on_rparen on_ignored_nl UNK UNK UNK value on_period UNK on_const on_nl value on_period UNK on_lparen UNK on_tstring_content # Make sure any provided variables look up to something.
def UNK on_lparen UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_op UNK on_rparen on_ignored_nl UNK UNK on_op mode on_op on_ignored_nl on_const # @api private # @param option [String] Extra file operation mode information to use # (defaults to read-only mode 'r') # This is the standard mechanism Ruby uses in the IO class, and therefore # encoding may be explicitly like fmode : encoding or fmode : "BOM|UTF-*" # for example, a:ASCII or w+:UTF-8
def UNK on_lparen UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_op UNK on_rparen on_ignored_nl UNK UNK on_op mode on_op on_ignored_nl on_const # @api private # @param option [String] Extra file operation mode information to use # (defaults to read-only mode 'r') # This is the standard mechanism Ruby uses in the IO class, and therefore # encoding may be explicitly like fmode : encoding or fmode : "BOM|UTF-*" # for example, a:ASCII or w+:UTF-8
on_const on_op on_const on_period UNK on_lparen on_const on_period UNK on_op UNK on_rparen UNK on_ignored_nl UNK on_op UNK self on_period mode # Update the umask to make non-executable files
