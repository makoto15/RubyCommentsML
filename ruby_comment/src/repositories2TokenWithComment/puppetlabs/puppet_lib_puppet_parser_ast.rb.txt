UNK on_const on_op on_const on_op on_const on_nl on_const on_op on_const on_op on_const on_op on_const on_nl on_ignored_nl UNK on_const on_op on_const # The base class for the 3x "parse tree", now only used by the top level # constructs and the compiler. # Handles things like file name, line #, and also does the initialization # for all of the parameters of all of the child objects. #
UNK UNK on_lparen UNK on_rparen on_ignored_nl end on_nl on_ignored_nl UNK UNK on_lparen UNK on_rparen on_ignored_nl UNK on_ignored_nl UNK UNK UNK # Evaluate the current object. Just a stub method, since the subclass # should override this method.
UNK UNK on_lparen UNK on_rparen on_ignored_nl UNK on_ignored_nl UNK UNK UNK UNK on_lparen UNK on_rparen on_nl UNK on_const on_op on_const # The version of the evaluate method that should be called, because it # correctly handles errors. It is critical to use this method because # it can enable you to catch the error where it happens, rather than # much higher up the stack.
UNK on_ignored_nl UNK UNK UNK UNK on_lparen UNK on_rparen on_nl UNK on_const on_op on_const on_op on_const on_op on_const on_op detail # We duplicate code here, rather than using exceptwrap, because this # is called so many times during parsing.
UNK on_const on_op on_const on_op detail on_nl UNK UNK on_lparen detail on_rparen on_nl UNK on_op detail on_nl UNK on_op on_const # # Only deals with StopIteration from the break() function as a general # # StopIteration is a general runtime problem # raise Puppet::ParseError.new(detail.message, detail.file, detail.line, detail)
UNK UNK on_lparen UNK on_comma detail on_rparen on_nl end on_nl end on_nl on_ignored_nl UNK UNK on_lparen UNK UNK on_comma UNK # We can't use self.fail here because it always expects strings, # not exceptions.
require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl # And include all of the AST subclasses.
