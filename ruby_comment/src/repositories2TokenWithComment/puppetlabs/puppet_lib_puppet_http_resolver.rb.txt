UNK on_const on_op on_const on_op on_const on_nl UNK UNK on_lparen UNK on_rparen UNK UNK on_op UNK on_nl UNK on_nl UNK # # @api private # # Resolver base class. Each resolver represents a different strategy for # resolving a service name into a list of candidate servers and ports. # # @abstract Subclass and override {#resolve} to create a new resolver. #
UNK UNK on_lparen UNK on_rparen UNK UNK on_op UNK on_nl UNK on_nl UNK UNK UNK on_lparen UNK on_comma UNK on_comma # # @api private # # Create a new resolver # # @param [Puppet::HTTP::Client] client #
UNK UNK on_lparen UNK on_comma UNK on_comma UNK UNK on_comma UNK UNK on_rparen UNK UNK on_const on_nl UNK on_nl UNK # # @api private # # Return a working server/port for the resolver. This is the base # implementation and is meant to be a placeholder. # # @param [Puppet::HTTP::Session] session # @param [Symbol] name the service to resolve # @param [Puppet::SSL::SSLContext] ssl_context (nil) optional ssl context to # use when creating a connection # @param [Proc] error_handler (nil) optional callback for each error # encountered while resolving a route. # # @raise [NotImplementedError] this base class is not implemented #
UNK UNK on_lparen UNK on_comma UNK on_comma UNK UNK on_comma UNK UNK on_rparen UNK UNK UNK UNK on_lparen UNK UNK # # @api private # # Check a given connection to establish if it can be relied on for future use # # @param [Puppet::HTTP::Session] session # @param [Puppet::HTTP::Service] service # @param [Puppet::SSL::SSLContext] ssl_context # @param [Proc] error_handler (nil) optional callback for each error # encountered while resolving a route. # # @return [Boolean] Returns true if a connection is successful, false otherwise #
