UNK on_const on_op on_const on_op on_const on_nl on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_symbeg install_options on_comma on_symbeg UNK # provides Rpm parsing and comparison
def self on_period UNK on_lparen UNK on_comma disablerepo on_comma enablerepo on_comma disableexcludes on_rparen on_ignored_nl on_ignored_nl key on_op on_lbracket disablerepo on_comma # Retrieve the latest package version information for a given package name # and combination of repos to enable and disable. # # @note If multiple package versions are defined (such as in the case where a # package is built for multiple architectures), the first package found # will be used. # # @api private # @param package [String] The name of the package to query # @param disablerepo [Array<String>] A list of repositories to disable for this query # @param enablerepo [Array<String>] A list of repositories to enable for this query # @param disableexcludes [Array<String>] A list of repository excludes to disable for this query # @return [Hash<Symbol, String>]
def self on_period UNK on_lparen disablerepo on_comma enablerepo on_comma disableexcludes on_rparen on_ignored_nl UNK on_op on_lbracket command on_lparen on_symbeg cmd on_rparen # Search for all installed packages that have newer versions, given a # combination of repositories to enable and disable. # # @api private # @param disablerepo [Array<String>] A list of repositories to disable for this query # @param enablerepo [Array<String>] A list of repositories to enable for this query # @param disableexcludes [Array<String>] A list of repository excludes to disable for this query # @return [Hash<String, Array<Hash<String, String>>>] All packages that were # found with a list of found versions for each package.
UNK on_op UNK on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end on_rparen on_period UNK on_nl on_ignored_nl updates on_op on_const on_period UNK on_lbrace # Strip off all content that contains Obsoleting, Security: or Update
UNK on_op hash on_lbracket on_symbeg name on_rbracket on_nl UNK on_op on_tstring_beg on_embexpr_beg hash on_lbracket on_symbeg name on_rbracket on_embexpr_end on_tstring_content on_embexpr_beg # Create entries for both the package name without a version and a # version since yum considers those as mostly interchangeable.
name on_comma _ on_comma UNK on_op UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl if name on_period UNK on_nl # The pkgname string has two parts: name, and architecture. Architecture # is the portion of the string following the last "." character. All # characters preceding the final dot are the package name. Parse out # these two pieces of component data.
on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_lparen should on_rparen on_ignored_nl if should on_period UNK on_lparen on_const on_rparen # In yum both `upgrade` and `update` can be used to update packages # `yum upgrade` == `yum --obsoletes update` # Quote the DNF docs: # "Yum does this if its obsoletes config option is enabled but # the behavior is not properly documented and can be harmful." # So we'll stick with the safer option # If a user wants to remove obsoletes, they can use { :install_options => '--obsoletes' } # More detail here: https://bugzilla.redhat.com/show_bug.cgi?id=1096506
unless on_ivar on_period UNK on_nl UNK on_lparen on_lbracket command on_lparen on_symbeg cmd on_rparen on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content # If not allowing virtual packages, do a query to ensure a real package exists
if on_ivar on_lbracket on_symbeg UNK on_rbracket on_nl wanted on_op on_ivar on_lbracket on_symbeg UNK on_rbracket on_nl self on_period debug on_tstring_beg on_tstring_content # if we have been given a source and we were not asked for a specific # version feed it to yum directly
should on_op UNK on_nl else on_ignored_nl if on_ivar on_lbracket on_symbeg UNK on_rbracket on_nl wanted on_op on_ivar on_lbracket on_symbeg UNK on_rbracket # pass
wanted on_op on_ivar on_lbracket on_symbeg UNK on_rbracket on_nl self on_period debug on_tstring_beg on_tstring_content on_embexpr_beg wanted on_embexpr_end on_tstring_end on_nl else on_ignored_nl # An explicit source was supplied, which means we're ensuring a specific # version, and also supplying the path to a package that supplies that # version.
should on_op UNK on_lparen should on_rparen on_nl wanted on_op on_tstring_beg on_tstring_content on_embexpr_beg should on_embexpr_end on_tstring_end on_nl if wanted on_period UNK # No explicit source was specified, so add the package version
UNK on_op if on_const on_period UNK on_lparen on_symbeg UNK on_rparen on_period UNK on_op on_int UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma # Yum on el-4 and el-5 returns exit status 0 when trying to install a package it doesn't recognize; # ensure we capture output to check for errors.
if should on_nl is on_op self on_period UNK on_nl raise on_const on_op on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen # If a version was specified, query again to see if it is a matching version
raise on_const on_op on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label should on_comma on_label version on_rbrace unless # FIXME: Should we raise an exception even if should == :latest # and yum updated us to a version other than @param_hash[:ensure] ?
def UNK on_nl UNK on_op self on_period class on_period UNK on_lparen on_ivar on_lbracket on_symbeg name on_rbracket on_comma disablerepo on_comma enablerepo # What's the latest package version available?
return on_tstring_beg on_embexpr_beg UNK on_lbracket on_symbeg UNK on_rbracket on_embexpr_end on_tstring_content on_embexpr_beg UNK on_lbracket on_symbeg version on_rbracket on_embexpr_end on_tstring_content on_embexpr_beg UNK # FIXME: there could be more than one update for a package # because of multiarch
version on_op UNK on_lbracket on_symbeg ensure on_rbracket on_nl raise on_const on_op on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen if # Yum didn't find updates, pretend the current version is the latest
self on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_lparen on_lbracket command on_lparen on_symbeg cmd on_rparen on_comma on_tstring_beg # Install in yum can be used for update, too
def UNK on_lparen UNK on_comma key on_rparen on_ignored_nl return on_lbracket on_rbracket unless UNK on_period UNK on_lparen on_const on_rparen on_nl UNK # Scan a structure that looks like the package type 'install_options' # structure for all hashes that have a specific key. # # @api private # @param options [Array<String | Hash>, nil] The options structure. If the # options are nil an empty array will be returned. # @param key [String] The key to look for in all contained hashes # @return [Array<String>] All hash values with the given key.
else on_ignored_nl repo on_nl end on_nl UNK on_lbracket key on_rbracket on_nl end on_nl UNK on_period UNK on_period UNK on_nl end # make it a hash
