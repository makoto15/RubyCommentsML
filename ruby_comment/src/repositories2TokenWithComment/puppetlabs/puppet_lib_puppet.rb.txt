require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl # see the bottom of the file for further inclusions # Also see the new Vendor support - towards the end #
require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl # PSON is deprecated, use JSON instead
on_ignored_nl UNK on_const on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require #------------------------------------------------------------ # the top-level module # # all this really does is dictate how the whole system behaves, through # preferences for things like debugging # # it's also a place to find top-level commands like 'debug'
UNK on_const on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg # The main Puppet class. Everything is contained here. # # @api public
on_cvar on_op on_const on_op on_const on_period new on_nl on_ignored_nl def self on_period settings on_nl on_cvar on_nl end on_nl on_ignored_nl def # the hash that determines how our system behaves
def self on_period settings on_nl on_cvar on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen UNK on_rparen on_ignored_nl on_cvar on_op # Note: It's important that these accessors (`self.settings`, `self.[]`) are # defined before we try to load any "features" (which happens a few lines below), # because the implementation of the features loading may examine the values of # settings.
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl on_cvar on_op UNK on_nl end on_nl on_ignored_nl def self on_period on_op on_lparen # The puppetserver project has its own settings class that is thread-aware; this # method is here to allow the puppetserver to define its own custom settings class # for multithreaded puppet. It is not intended for use outside of the puppetserver # implmentation.
def self on_period on_op on_lparen UNK on_rparen on_ignored_nl if UNK on_op on_symbeg UNK on_nl UNK on_const on_op on_const on_op on_const # Get the value for a setting # # @param [Symbol] param the setting to retrieve # # @api public
on_const on_op on_const on_op on_const on_period UNK on_nl on_ignored_nl on_ivar on_op on_const on_op on_const on_op on_const on_period new on_lparen on_tstring_beg # Setup facter's logging
on_ivar on_op on_const on_op on_const on_op on_const on_period new on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end # The feature collection
require on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl def self on_period UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl on_const on_period UNK on_lparen # Load the base features.
def self on_period UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_cvar # Store a new default value.
def self on_period on_op on_lparen UNK on_comma UNK on_rparen on_ignored_nl on_cvar on_lbracket UNK on_rbracket on_op UNK on_nl end on_nl on_ignored_nl # setting access and stuff
on_const on_op on_const on_op on_const on_lbracket on_cvar on_period UNK on_rbracket on_nl end on_nl on_ignored_nl on_const on_period UNK on_lparen settings on_rparen # This sucks (the existence of this method); there are a lot of places in our code that branch based the value of # "run mode", but there used to be some really confusing code paths that made it almost impossible to determine # when during the lifecycle of a puppet application run the value would be set properly. A lot of the lifecycle # stuff has been cleaned up now, but it still seems frightening that we rely so heavily on this value. # # I'd like to see about getting rid of the concept of "run_mode" entirely, but there are just too many places in # the code that call this method at the moment... so I've settled for isolating it inside of the Settings class # (rather than using a global variable, as we did previously...). Would be good to revisit this at some point. # # --cprice 2012-03-16
on_const on_period UNK on_lparen settings on_rparen on_nl on_ignored_nl if on_const on_op on_const on_period new on_lparen on_const on_period UNK on_rparen on_op # Modify the settings with defaults defined in `initialize_default_settings` method in puppet/defaults.rb. This can # be used in the initialization of new Puppet::Settings objects in the puppetserver project.
if on_const on_op on_const on_period new on_lparen on_const on_period UNK on_rparen on_op on_const on_op on_const on_period new on_lparen on_const on_op # Now that settings are loaded we have the code loaded to be able to issue # deprecation warnings. Warn if we're on a deprecated ruby version.
def self on_period UNK on_lparen UNK on_op on_lbracket on_rbracket on_comma UNK on_op UNK on_comma UNK on_op UNK on_comma UNK on_op # Initialize puppet's settings. This is intended only for use by external tools that are not # built off of the Faces API or the Puppet::Util::Application class. It may also be used # to initialize state so that a Face may be used programatically, rather than as a stand-alone # command-line tool. # # @api public # @param args [Array<String>] the command line arguments to use for initialization # @param require_config [Boolean] controls loading of Puppet configuration files # @param global_settings [Boolean] controls push to global context after settings object initialization # @param runtime_implementations [Hash<Symbol, Object>] runtime implementations to register # @return [void]
def self on_period UNK on_lparen UNK on_comma UNK on_comma UNK on_comma UNK on_comma UNK on_rparen on_ignored_nl on_const on_period settings on_period # private helper method to provide the implementation details of initializing for a run mode, # but allowing us to control where the deprecation warning is issued
def self on_period UNK on_nl on_const on_period UNK on_lparen on_symbeg UNK on_rparen UNK on_ignored_nl UNK on_lbrace on_const on_period UNK on_period # Initialize puppet's core facts. It should not be called before initialize_settings.
on_const on_period UNK on_lparen on_symbeg UNK on_rparen UNK on_ignored_nl UNK on_lbrace on_const on_period UNK on_period UNK on_rbrace on_nl end on_nl # Add the puppetversion fact; this is done before generating the hash so it is # accessible to custom facts.
require on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_op on_const on_period UNK on_nl on_ignored_nl def self on_period UNK on_lparen settings on_rparen on_ignored_nl # Load vendored (setup paths, and load what is needed upfront). # See the Vendor class for how to add additional vendored gems/code
def self on_period UNK on_lparen settings on_rparen on_ignored_nl UNK on_op settings on_lbracket on_symbeg UNK on_rbracket on_nl UNK on_op on_const on_op # The bindings used for initialization of puppet # # @param settings [Puppet::Settings,Hash<Symbol,String>] either a Puppet::Settings instance # or a Hash of settings key/value pairs. # @api private
UNK on_op on_const on_lbracket on_symbeg UNK on_rbracket on_period UNK on_nl if UNK on_op on_symbeg UNK on_nl modulepath on_op settings on_lbracket # in case the configured environment (used for the default sometimes) # doesn't exist
on_const on_period UNK on_lparen UNK on_comma UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace UNK UNK on_period UNK on_rbrace on_rparen # TRANSLATORS: `message` is an already translated string of why SSL failed to initialize
on_const on_period UNK on_lparen UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_rparen on_nl UNK UNK on_nl end on_nl on_rbrace on_comma on_ignored_nl # TRANSLATORS: `puppet agent -t` is a command and should not be translated
def self on_period UNK on_nl UNK on_op on_const on_op on_const on_op on_const on_period UNK on_lparen on_symbeg on_tstring_content on_tstring_end on_comma on_lbracket # A simple set of bindings that is just enough to limp along to # initialization where the {base_context} bindings are put in place # @api private
def self on_period UNK on_lparen UNK on_comma description on_op on_tstring_beg on_tstring_end on_rparen on_ignored_nl on_ivar on_period UNK on_lparen UNK on_comma description # @param overrides [Hash] A hash of bindings to be merged with the parent context. # @param description [String] A description of the context. # @api private
def self on_period UNK on_lparen UNK on_comma description on_op on_tstring_beg on_tstring_end on_rparen on_ignored_nl on_ivar on_period UNK on_lparen UNK on_comma description # Push something onto the the context and make it global across threads. This # has the potential to convert threadlocal overrides earlier on the stack into # global overrides. # @api private
def self on_period UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen name on_comma on_op # Return to the previous context. # @raise [StackUnderflow] if the current context is the root # @api private
def self on_period UNK on_lparen name on_comma on_op UNK on_rparen on_ignored_nl on_ivar on_period UNK on_lparen name on_comma on_op UNK on_rparen # Lookup a binding by name or return a default value provided by a passed block (if given). # @api private
def self on_period UNK on_lparen UNK on_comma description on_op on_tstring_beg on_tstring_end on_comma on_op UNK on_rparen on_ignored_nl on_ivar on_period UNK on_lparen # @param bindings [Hash] A hash of bindings to be merged with the parent context. # @param description [String] A description of the context. # @yield [] A block executed in the context of the temporarily pushed bindings. # @api private
def self on_period UNK on_lparen name on_rparen on_ignored_nl on_ivar on_period UNK on_lparen name on_rparen on_nl end on_nl on_ignored_nl def self # @param name The name of a context key to ignore; intended for test usage. # @api private
def self on_period UNK on_lparen name on_rparen on_ignored_nl on_ivar on_period UNK on_lparen name on_rparen on_nl end on_nl on_ignored_nl def self # @param name The name of a previously ignored context key to restore; intended for test usage. # @api private
def self on_period UNK on_lparen name on_rparen on_ignored_nl on_ivar on_period UNK on_lparen name on_rparen on_nl end on_nl on_ignored_nl def self # @api private
def self on_period UNK on_lparen name on_rparen on_ignored_nl on_ivar on_period UNK on_lparen name on_rparen on_nl end on_nl on_ignored_nl def self # @api private
on_ivar on_op on_const on_op on_const on_period new on_lparen UNK on_rparen on_nl on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl on_ivar on_op on_const # The single instance used for normal operation
on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end # This feels weird to me; I would really like for us to get to a state where there is never a "require" statement # anywhere besides the very top of a file. That would not be possible at the moment without a great deal of # effort, but I think we should strive for it and revisit this at some point. --cprice 2012-03-16
