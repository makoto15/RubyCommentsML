on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl # This is the only domain name that won't be a symbol, making it unique from environments.
UNK on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_op on_const on_nl UNK on_const on_op # Load gettext helpers and track whether they're available. # Used instead of features because we initialize gettext before features is available.
UNK on_op on_const on_nl UNK on_const on_op on_const on_nl end on_nl on_ignored_nl on_ivar on_op UNK on_nl UNK on_const on_nl UNK # Make translation methods (e.g. `_()` and `n_()`) available everywhere.
UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ivar on_op false on_nl end on_nl on_ignored_nl def self on_period gettext_loaded? on_nl on_ivar on_nl end # Stub out gettext's `_` and `n_()` methods, which attempt to load translations, # with versions that do nothing
def self on_period gettext_loaded? on_nl on_ivar on_nl end on_nl on_ignored_nl def self on_period UNK on_nl if gettext_loaded? on_nl return on_const # @api private # Whether we were able to require fast_gettext and locale # @return [Boolean] true if translation gems were successfully loaded
def self on_period UNK on_nl if gettext_loaded? on_nl return on_const on_period UNK on_nl UNK on_ignored_nl return on_tstring_beg on_tstring_content on_tstring_end on_nl # @api private # Returns the currently selected locale from FastGettext, # or 'en' of gettext has not been loaded # @return [String] the active locale
def self on_period UNK on_nl return on_lbracket on_rbracket if on_ivar on_op on_op gettext_loaded? on_nl on_ignored_nl return on_const on_period translation_repositories on_period # @api private # Returns a list of the names of the loaded text domains # @return [[String]] the names of the loaded text domains
def self on_period UNK on_lparen domain_name on_rparen on_ignored_nl return if on_ivar on_op on_op gettext_loaded? on_nl domain_name on_op domain_name on_period UNK # @api private # Clears the translation repository for the given text domain, # creating it if it doesn't exist, then adds default translations # and switches to using this domain. # @param [String, Symbol] domain_name the name of the domain to create
def self on_period UNK on_nl return if on_ivar on_op on_op gettext_loaded? on_nl on_const on_period text_domain on_op nil on_nl end on_nl # @api private # Resets the thread's configured text_domain to the default text domain. # In Puppet Server, thread A may process a compile request that configures # a domain, while thread B may invalidate that environment and delete the # domain. That leaves thread A with an invalid text_domain selected. # To avoid that, clear_text_domain after any processing that needs the # non-default text domain.
def self on_period UNK on_nl return if on_ivar on_op on_op gettext_loaded? on_nl on_ignored_nl on_const on_period UNK on_lparen on_const on_comma on_ignored_nl # @api private # Creates a default text domain containing the translations for # Puppet as the start of chain. When semantic_puppet gets initialized, # its translations are added to this chain. This is used as a cache # so that all non-module translations only need to be loaded once as # we create and reset environment-specific text domains. # # @return true if Puppet translations were successfully loaded, false # otherwise
def self on_period UNK on_lparen domain_name on_rparen on_ignored_nl return if on_ivar on_op on_op gettext_loaded? on_nl domain_name on_op domain_name on_period UNK # @api private # Switches the active text domain, if the requested domain exists. # @param [String, Symbol] domain_name the name of the domain to switch to
def self on_period UNK on_nl on_const on_period translation_repositories on_period UNK on_nl on_const on_period UNK on_op nil on_nl on_const on_period text_domain # @api private # Delete all text domains.
def self on_period UNK on_lparen domain_name on_rparen on_ignored_nl return if on_ivar on_op on_op gettext_loaded? on_nl domain_name on_op domain_name on_period UNK # @api private # Deletes the text domain with the given name # @param [String, Symbol] domain_name the name of the domain to delete
def self on_period UNK on_nl return if on_ivar on_op on_op gettext_loaded? on_nl on_ignored_nl on_const on_period translation_repositories on_period UNK on_period UNK # @api private # Deletes all text domains except the default one
UNK if UNK on_op on_const on_nl on_ignored_nl on_const on_period translation_repositories on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_const on_period # do not clear default translations
def self on_period UNK on_lparen domain_name on_rparen on_ignored_nl return if on_ivar on_op on_op gettext_loaded? on_nl on_ignored_nl if on_const on_period UNK # @api private # Adds translations from the default text domain to the specified # text domain. Creates the default text domain if one does not exist # (this will load Puppet's translations). # # Since we are currently (Nov 2017) vendoring semantic_puppet, in normal # flows these translations will be copied along with Puppet's. # # @param [Symbol] domain_name the name of the domain to add translations to
def self on_period UNK on_nl if on_const on_op on_const on_period UNK on_lparen on_const on_rparen on_nl return on_const on_nl UNK on_const # @api private # Search for puppet gettext config files # @return [String] path to the config, or nil if not found
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl if on_const on_op UNK on_op on_const on_op UNK on_nl return on_symbeg UNK # @api private # Determine which translation file format to use # @param [String] conf_path the path to the gettext config file # @return [Symbol] :mo if in a package structure, :po otherwise
def self on_period UNK on_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen project_name on_comma locale_dir # @api private # Prevent future gettext initializations
def self on_period UNK on_lparen project_name on_comma locale_dir on_comma file_format on_comma text_domain on_op on_const on_period text_domain on_rparen on_ignored_nl if project_name # @api private # Attempt to load translations for the given project. # @param [String] project_name the project whose translations we want to load # @param [String] locale_dir the path to the directory containing translations # @param [Symbol] file_format translation file format to use, either :po or :mo # @return true if initialization succeeded, false otherwise
def self on_period UNK on_lparen project_name on_comma locale_dir on_comma file_format on_comma text_domain on_op on_const on_period text_domain on_rparen on_ignored_nl return if # @api private # Add the translations for this project to the domain's repository chain # chain for the currently selected text domain, if needed. # @param [String] project_name the name of the project for which to load translations # @param [String] locale_dir the path to the directory containing translations # @param [Symbol] file_format the format of the translations files, :po or :mo
def self on_period UNK on_nl return if on_ivar on_op on_op gettext_loaded? on_nl on_ignored_nl UNK on_lparen on_const on_period UNK on_period UNK # @api private # Sets FastGettext's locale to the current system locale
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl return if on_ivar on_op on_op gettext_loaded? on_nl on_const on_period UNK on_op nil # @api private # Sets the language in which to display strings. # @param [String] locale the language portion of a locale string (e.g. "ja")
on_const on_period UNK on_op nil on_nl on_ignored_nl on_const on_period UNK on_op UNK on_nl end on_nl end on_nl EMP EMP EMP # make sure we're not using the `available_locales` machinery
