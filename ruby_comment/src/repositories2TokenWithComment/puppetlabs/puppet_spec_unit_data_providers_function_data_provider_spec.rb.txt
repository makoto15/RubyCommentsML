UNK on_lparen on_symbeg UNK on_rparen on_lbrace UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_rbrace on_nl on_ignored_nl UNK on_lparen on_symbeg UNK on_rparen # There is a fully configured environment in fixtures in this location
on_const on_period UNK on_period UNK on_nl UNK on_op on_const on_op on_const on_op on_const on_period new on_lparen UNK on_comma on_lbracket on_rbracket # Initialize settings to get a full compile as close as possible to a real # environment load
UNK on_op on_const on_op on_const on_op on_const on_period new on_lparen UNK on_comma on_lbracket on_rbracket on_rparen on_nl on_const on_period UNK on_lparen # Initialize loaders based on the environmentpath. It does not work to # just set the setting environmentpath for some reason - this achieves the same: # - first a loader is created, loading directory environments from the fixture (there is # one such environment, 'production', which will be loaded since the node references this # environment by name). # - secondly, the created env loader is set as 'environments' in the puppet context. #
UNK on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl on_const on_lbracket on_symbeg UNK on_rbracket on_op on_tstring_beg on_tstring_content on_tstring_end on_nl node on_op on_const on_op # The environment configured in the fixture has one module called 'abc'. Its class abc, includes # a class called 'def'. This class has three parameters test1, test2, and test3 and it creates # three notify with name set to the value of the three parameters. # # Since the abc class does not provide any parameter values to its def class, it attempts to # get them from data lookup. The fixture has an environment that is configured to load data from # a function called environment::data, this data sets test1, and test2. # The module 'abc' is configured to get data by calling the function abc::data(), this function # returns data for all three parameters test1-test3, now with the prefix 'module'. # # The result should be that the data set in the environment wins over those set in the # module. #
node on_op on_const on_op on_const on_period new on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg UNK on_op on_const on_op on_const on_op on_const # find the loaders to patch with faulty function
node on_op on_const on_op on_const on_period new on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg UNK on_op on_const on_op on_const on_op on_const # find the loaders to patch with faulty function
