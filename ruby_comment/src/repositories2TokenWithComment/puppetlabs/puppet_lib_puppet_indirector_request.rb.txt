UNK on_const on_op on_const on_op on_const on_nl UNK on_const on_op on_const on_op on_const on_nl UNK on_const on_op on_const on_op on_const # This class encapsulates all of the information you need to make an # Indirection call, and as a result also handles REST calls. It's somewhat # analogous to an HTTP Request object, except tuned for our Indirector.
on_const on_op on_lbracket on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK # trusted_information is specifically left out because we can't serialize it # and keep it "trusted"
def UNK on_nl on_op on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op on_const on_period UNK on_lparen on_symbeg # Is this an authenticated request?
on_op on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op on_const on_period UNK on_lparen on_symbeg UNK on_rparen on_nl # Double negative, so we just get true or false
on_ivar on_op on_const on_period UNK on_lparen on_symbeg UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar # If environment has not been set directly, we should use the application's # current environment
def UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK # LAK:NOTE This is a messy interface to the cache, and it's only # used by the Configurer class. I decided it was better to implement # it now and refactor later, when we have a better design, than # to spend another month coming up with a design now that might # not be any better.
on_ignored_nl if key on_period to_s on_op UNK on_tstring_content UNK UNK UNK on_const on_op on_const on_period UNK on_lparen key on_period to_s # If the request key is a URI, then we need to treat it specially, # because it rewrites the key. We could otherwise strip server/port/etc # info out in the REST class, but it seemed bad design for the REST # class to rewrite the key.
UNK on_lparen key on_rparen on_nl else on_ignored_nl on_ivar on_op key on_nl end on_nl end on_nl on_ignored_nl on_ivar on_op on_ivar on_period # it's a URI
def UNK on_nl on_const on_op on_const on_op on_const on_period UNK on_lparen indirection_name on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen # Look up the indirection based on the name provided.
def UNK on_nl UNK on_op on_symbeg UNK on_nl end on_nl on_ignored_nl def UNK on_nl return on_tstring_beg on_tstring_end if options on_period # Are we trying to interact with multiple resources, or just one?
def UNK on_nl return on_tstring_beg on_tstring_end if options on_period UNK on_op options on_period UNK on_nl UNK on_lparen UNK on_lparen options # Create the query string, if options are present.
return UNK on_lparen self on_rparen if on_op self on_period server on_period UNK on_nl on_ignored_nl if on_const on_period settings on_lbracket on_symbeg # We were given a specific server to use, so just use that one. # This happens if someone does something like specifying a file # source using a puppet:// URI with a specific server.
UNK on_op on_const on_op on_const on_op on_const on_period UNK on_nl UNK on_period UNK on_lparen on_const on_period settings on_lbracket on_symbeg UNK # We may want to consider not creating a new resolver here # every request eventually, to take advantage of the resolver's # caching behavior.
UNK _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label primary_server on_lbracket on_int on_rbracket on_rbrace on_nl primary_server on_lbracket on_int on_rbracket #TRANSLATORS 'server_list' is the name of a setting and should not be translated
UNK _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label on_const on_period settings on_lbracket on_symbeg server on_rbracket on_rbrace on_nl on_const #TRANSLATORS 'server' is the name of a setting and should not be translated
UNK _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label primary_server on_lbracket on_int on_rbracket on_rbrace on_nl primary_server on_lbracket on_int on_rbracket #TRANSLATORS 'server_list' is the name of a setting and should not be translated
UNK _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label on_const on_period settings on_lbracket on_symbeg UNK on_rbracket on_rbrace on_nl on_const #TRANSLATORS 'masterport' is the name of a setting and should not be translated
def UNK on_lparen key on_rparen on_ignored_nl on_ivar on_op key on_nl UNK on_ignored_nl uri on_op on_const on_period UNK on_lparen on_const on_op # Parse the key as a URI, setting attributes appropriately.
uri on_op on_const on_period UNK on_lparen on_const on_op on_const on_period UNK on_lparen key on_rparen on_rparen on_nl UNK on_op UNK on_nl # calling uri_encode for UTF-8 characters will % escape them and keep them UTF-8
if uri on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ivar on_op on_const on_op on_const on_period UNK on_lparen uri on_rparen on_nl # Just short-circuit these to full paths
if uri on_period port on_period UNK on_op on_int UNK uri on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ivar on_op on_const # If the URI class can look up the scheme, it will provide a port, # otherwise it will default to '0'.
if uri on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ivar on_op on_tstring_beg on_tstring_content on_tstring_end on_nl else on_ignored_nl on_ivar on_op uri # filebucket:// is only used internally to pass request details # from Dipper objects to the indirector. The wire always uses HTTPS.
