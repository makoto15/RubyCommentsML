UNK on_const on_op on_const on_nl on_const on_op on_regexp_beg on_tstring_content on_regexp_end on_nl on_const on_op on_regexp_beg on_tstring_content on_regexp_end on_nl on_const on_op on_regexp_beg # This class implements the PSON parser that is used to parse a PSON string # into a Ruby data structure.
def UNK on_lparen source on_comma opts on_op UNK UNK on_rparen on_ignored_nl source on_op UNK source on_nl UNK source on_nl if # Creates a new PSON::Pure::Parser instance for the string _source_. # # It will be configured by the _opts_ hash. _opts_ can have the following # keys: # * *max_nesting*: The maximum depth of nesting allowed in the parsed data # structures. Disable depth checking with :max_nesting => false|nil|0, # it defaults to 19. # * *allow_nan*: If set to true, allow NaN, Infinity and -Infinity in # defiance of RFC 4627 to be parsed by the Parser. This option defaults # to false. # * *object_class*: Defaults to Hash # * *array_class*: Defaults to Array
on_ivar on_op on_int on_nl UNK opts on_lbracket on_symbeg UNK on_rbracket on_nl on_ivar on_op opts on_lbracket on_symbeg UNK on_rbracket on_nl else # defaults to 19
def UNK on_nl UNK on_nl obj on_op UNK on_nl UNK UNK on_nl case on_ignored_nl when scan on_lparen on_const on_rparen on_nl # Parses the current PSON string _source_ and returns the complete data # structure as a result.
string on_period UNK on_lparen on_symbeg UNK on_rparen on_op UNK on_lparen on_op on_const on_rparen on_nl end on_nl on_ignored_nl on_const on_op on_const # Some modules, such as REXML on 1.8.7 (see #22804) can actually create # a top-level Encoding constant when they are misused. Therefore # checking for just that constant is not enough, so we'll be a bit more # robust about if we can actually support encoding transformations.
on_const on_op on_const on_period UNK UNK on_op UNK on_comma UNK on_op UNK on_lbracket UNK on_rbracket on_op UNK on_period UNK UNK # Unescape characters in strings.
UNK on_op on_tstring_beg on_tstring_end on_nl i on_op on_int on_nl UNK UNK on_lbracket on_int on_op i on_rbracket on_op on_char on_op UNK # \uXXXX
