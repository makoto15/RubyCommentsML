UNK on_const on_op on_const on_nl UNK on_const on_nl def self on_period UNK on_lparen o on_rparen on_ignored_nl UNK o on_nl UNK # Provides utility methods
def self on_period UNK on_lparen o on_rparen on_ignored_nl UNK o on_nl UNK on_const on_nl UNK on_nl else on_ignored_nl on_op on_op # Can the given o be converted to numeric? (or is numeric already) # Accepts a leading '::' # Returns a boolean if the value is numeric # If testing if value can be converted it is more efficient to call {#to_n} or {#to_n_with_radix} directly # and check if value is nil.
def self on_period UNK on_lparen match on_rparen on_ignored_nl if match on_lbracket on_int on_rbracket on_period to_s on_period UNK on_op on_int on_nl # Convert a match from Patterns::NUMERIC to floating point value if # possible
if on_const on_lparen match on_lbracket on_int on_rbracket on_rparen on_op on_int on_op match on_lbracket on_int on_rbracket on_op UNK on_tstring_content UNK on_nl # Use default radix (default is decimal == 10) for floats # Do not convert a value that is 0 raised to 10^somevalue to float - the value is always 0 # i.e. 0000.0e1, 0e1, 0.0000e1
def self on_period UNK o on_nl UNK on_ignored_nl UNK o on_nl UNK on_const on_nl match on_op on_const on_op on_const on_period # To Numeric with radix, or nil if not a number. # If the value is already Numeric it is returned verbatim with a radix of 10. # @param o [String, Number] a string containing a number in octal, hex, integer (decimal) or floating point form # with optional sign +/- # @return [Array<Number, Integer>, nil] array with converted number and radix, or nil if not possible to convert # @api public #
UNK on_op on_int on_nl if match on_lbracket on_int on_rbracket on_period to_s on_period UNK on_op on_int on_nl UNK on_op on_int on_nl # Set radix (default is decimal == 10)
match on_lbracket on_int on_rbracket on_op on_tstring_beg on_tstring_content on_tstring_end on_op on_lbracket on_op on_const on_lparen match on_lbracket on_int on_rbracket on_rparen UNK UNK # Ruby 1.8.7 does not have a second argument to Kernel method that creates an # integer from a string, it relies on the prefix 0x, 0X, 0 (and unsupported in puppet binary 'b') # We have the correct string here, match[2] is safe to parse without passing on radix
on_lbracket o UNK on_int on_rbracket on_nl else on_ignored_nl nil on_nl end on_nl UNK on_const on_nl nil on_nl end on_nl end # Impossible to calculate radix, assume decimal
def self on_period UNK o on_nl UNK on_ignored_nl UNK o on_nl UNK on_const on_nl match on_op on_const on_op on_const on_period # To Numeric (or already numeric) # Returns nil if value is not numeric, else an Integer or Float. A String may have an optional sign. # # A leading '::' is accepted (and ignored) #
def self on_period UNK name on_nl name on_period UNK on_tstring_beg on_tstring_content on_tstring_end on_period UNK on_nl end on_nl on_ignored_nl def self # is the name absolute (i.e. starts with ::)
