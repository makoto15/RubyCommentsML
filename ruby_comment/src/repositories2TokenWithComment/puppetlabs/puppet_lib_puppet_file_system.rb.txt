on_ivar on_op UNK on_const on_op on_const on_op on_const on_period UNK on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_op on_const on_op # create instance of the file system implementation to use for the current platform
def self on_period UNK on_lparen on_op UNK on_comma on_op block on_rparen on_ignored_nl UNK on_op on_ivar on_nl on_ivar on_op on_const on_op # Allows overriding the filesystem for the duration of the given block. # The filesystem will only contain the given file(s). # # @param files [Puppet::FileSystem::MemoryFile] the files to have available # # @api private #
def self on_period UNK on_lparen path on_comma mode on_comma options on_comma on_op block on_rparen on_ignored_nl on_ivar on_period UNK on_lparen assert_path # Opens the given path with given mode, and options and optionally yields it to the given block. # # @param path [String, Pathname] the path to the file to operate on # @param mode [Integer] The mode to apply to the file if it is created # @param options [String] Extra file operation mode information to use # This is the standard mechanism Ruby uses in the IO class, and therefore # encoding may be specified explicitly as fmode : encoding or fmode : "BOM|UTF-*" # for example, a:ASCII or w+:UTF-8 # @yield The file handle, in the mode given by options, else read-write mode # @return [Void] # # @api public #
def self on_period UNK on_lparen path on_rparen on_ignored_nl on_ivar on_period UNK on_lparen assert_path on_lparen path on_rparen on_rparen on_nl end on_nl # @return [Object] The directory of this file as an opaque handle # # @api public #
def self on_period UNK on_lparen path on_rparen on_ignored_nl on_ivar on_period UNK on_lparen on_ivar on_period UNK on_lparen assert_path on_lparen path on_rparen # @return [String] The directory of this file as a String # # @api public #
def self on_period UNK on_lparen path on_rparen on_ignored_nl on_ivar on_period UNK on_lparen on_ivar on_period UNK on_lparen assert_path on_lparen path on_rparen # @return [Boolean] Does the directory of the given path exist?
def self on_period UNK on_lparen path on_rparen on_ignored_nl on_ivar on_period UNK on_lparen on_ivar on_period UNK on_lparen assert_path on_lparen path on_rparen # Creates all directories down to (inclusive) the dir of the given path
def self on_period UNK on_lparen path on_rparen on_ignored_nl on_ivar on_period UNK on_lparen assert_path on_lparen path on_rparen on_rparen on_nl end on_nl # @return [Object] the name of the file as a opaque handle # # @api public #
def self on_period UNK on_lparen path on_rparen on_ignored_nl on_ivar on_period UNK on_lparen on_ivar on_period UNK on_lparen assert_path on_lparen path on_rparen # @return [String] the name of the file # # @api public #
def self on_period UNK on_lparen path on_comma mode on_comma options on_op on_tstring_beg on_tstring_content on_tstring_end on_comma UNK on_op UNK on_comma on_op # Allows exclusive updates to a file to be made by excluding concurrent # access using flock. This means that if the file is on a filesystem that # does not support flock, this method will provide no protection. # # While polling to acquire the lock the process will wait ever increasing # amounts of time in order to prevent multiple processes from wasting # resources. # # @param path [Pathname] the path to the file to operate on # @param mode [Integer] The mode to apply to the file if it is created # @param options [String] Extra file operation mode information to use # (defaults to read-only mode 'r') # This is the standard mechanism Ruby uses in the IO class, and therefore # encoding may be specified explicitly as fmode : encoding or fmode : "BOM|UTF-*" # for example, a:ASCII or w+:UTF-8 # @param timeout [Integer] Number of seconds to wait for the lock (defaults to 300) # @yield The file handle, in the mode given by options, else read-write mode # @return [Void] # @raise [Timeout::Error] If the timeout is exceeded while waiting to acquire the lock # # @api public #
def self on_period UNK on_lparen path on_comma on_op block on_rparen on_ignored_nl on_ivar on_period UNK on_lparen assert_path on_lparen path on_rparen on_comma # Processes each line of the file by yielding it to the given block # # @api public #
def self on_period UNK on_lparen path on_comma UNK on_op UNK UNK on_rparen on_ignored_nl on_ivar on_period UNK on_lparen assert_path on_lparen path # @return [String] The contents of the file # # @api public #
def self on_period UNK on_lparen path on_rparen on_ignored_nl on_ivar on_period UNK on_lparen assert_path on_lparen path on_rparen on_rparen on_nl end on_nl # Read a file keeping the original line endings intact. This # attempts to open files using binary mode using some encoding # overrides and falling back to IO.read when none of the # encodings are valid. # # @return [String] The contents of the file # # @api public #
def self on_period UNK on_lparen path on_rparen on_ignored_nl on_ivar on_period UNK on_lparen assert_path on_lparen path on_rparen on_rparen on_nl end on_nl # @return [String] The binary contents of the file # # @api public #
def self on_period UNK on_lparen path on_rparen on_ignored_nl on_ivar on_period UNK on_lparen assert_path on_lparen path on_rparen on_rparen on_nl end on_nl # Determines if a file exists by verifying that the file can be stat'd. # Will follow symlinks and verify that the actual target path exists. # # @return [Boolean] true if the named file exists. # # @api public #
def self on_period UNK on_lparen path on_rparen on_ignored_nl on_ivar on_period UNK on_lparen assert_path on_lparen path on_rparen on_rparen on_nl end on_nl # Determines if a file is a directory. # # @return [Boolean] true if the given file is a directory. # # @api public
def self on_period UNK on_lparen path on_rparen on_ignored_nl on_ivar on_period UNK on_lparen assert_path on_lparen path on_rparen on_rparen on_nl end on_nl # Determines if a file is a file. # # @return [Boolean] true if the given file is a file. # # @api public
def self on_period UNK on_lparen path on_rparen on_ignored_nl on_ivar on_period UNK on_lparen assert_path on_lparen path on_rparen on_rparen on_nl end on_nl # Determines if a file is executable. # # @todo Should this take into account extensions on the windows platform? # # @return [Boolean] true if this file can be executed # # @api public #
def self on_period UNK on_lparen path on_rparen on_ignored_nl on_ivar on_period UNK on_lparen assert_path on_lparen path on_rparen on_rparen on_nl end on_nl # @return [Boolean] Whether the file is writable by the current process # # @api public #
def self on_period UNK on_lparen path on_comma UNK UNK on_rparen on_ignored_nl on_ivar on_period UNK on_lparen assert_path on_lparen path on_rparen on_comma # Touches the file. On most systems this updates the mtime of the file. # # @param mtime [Time] The last modified time or nil to use the current time # # @api public #
def self on_period UNK on_lparen path on_rparen on_ignored_nl on_ivar on_period UNK on_lparen assert_path on_lparen path on_rparen on_rparen on_nl end on_nl # Creates directories for all parts of the given path. # # @api public #
def self on_period UNK on_lparen path on_rparen on_ignored_nl on_ivar on_period UNK on_lparen assert_path on_lparen path on_rparen on_rparen on_nl end on_nl # @return [Array<Object>] references to all of the children of the given # directory path, excluding `.` and `..`. # @api public
def self on_period UNK on_lparen path on_comma UNK on_comma options on_op UNK UNK on_rparen on_ignored_nl on_ivar on_period UNK on_lparen assert_path # Creates a symbolic link dest which points to the current file. # If dest already exists: # # * and is a file, will raise Errno::EEXIST # * and is a directory, will return 0 but perform no action # * and is a symlink referencing a file, will raise Errno::EEXIST # * and is a symlink referencing a directory, will return 0 but perform no action # # With the :force option set to true, when dest already exists: # # * and is a file, will replace the existing file with a symlink (DANGEROUS) # * and is a directory, will return 0 but perform no action # * and is a symlink referencing a file, will modify the existing symlink # * and is a symlink referencing a directory, will return 0 but perform no action # # @param dest [String] The path to create the new symlink at # @param [Hash] options the options to create the symlink with # @option options [Boolean] :force overwrite dest # @option options [Boolean] :noop do not perform the operation # @option options [Boolean] :verbose verbose output # # @raise [Errno::EEXIST] dest already exists as a file and, :force is not set # # @return [Integer] 0 # # @api public #
def self on_period UNK on_lparen path on_rparen on_ignored_nl on_ivar on_period UNK on_lparen assert_path on_lparen path on_rparen on_rparen on_nl end on_nl # @return [Boolean] true if the file is a symbolic link. # # @api public #
def self on_period UNK on_lparen path on_rparen on_ignored_nl on_ivar on_period UNK on_lparen assert_path on_lparen path on_rparen on_rparen on_nl end on_nl # @return [String] the name of the file referenced by the given link. # # @api public #
def self on_period UNK on_lparen on_op UNK on_rparen on_ignored_nl on_ivar on_period UNK on_lparen on_op on_lparen UNK on_period UNK UNK on_op # Deletes the given paths, returning the number of names passed as arguments. # See also Dir::rmdir. # # @raise an exception on any error. # # @return [Integer] the number of paths passed as arguments # # @api public #
def self on_period UNK on_lparen path on_rparen on_ignored_nl on_ivar on_period UNK on_lparen assert_path on_lparen path on_rparen on_rparen on_nl end on_nl # @return [File::Stat] object for the named file. # # @api public #
def self on_period UNK on_lparen path on_rparen on_ignored_nl on_ivar on_period UNK on_lparen assert_path on_lparen path on_rparen on_rparen on_nl end on_nl # @return [Integer] the size of the file # # @api public #
def self on_period UNK on_lparen path on_rparen on_ignored_nl on_ivar on_period UNK on_lparen assert_path on_lparen path on_rparen on_rparen on_nl end on_nl # @return [File::Stat] Same as stat, but does not follow the last symbolic # link. Instead, reports on the link itself. # # @api public #
def self on_period UNK on_lparen path on_comma UNK on_rparen on_ignored_nl on_ivar on_period UNK on_lparen assert_path on_lparen path on_rparen on_comma UNK # Compares the contents of this file against the contents of a stream. # # @param stream [IO] The stream to compare the contents against # @return [Boolean] Whether the contents were the same # # @api public #
def self on_period UNK on_lparen path on_rparen on_ignored_nl on_ivar on_period UNK on_lparen path on_rparen on_nl end on_nl on_ignored_nl def self # Produces an opaque pathname "handle" object representing the given path. # Different implementations of the underlying file system may use different runtime # objects. The produced "handle" should be used in all other operations # that take a "path". No operation should be directly invoked on the returned opaque object # # @param path [String] The string representation of the path # @return [Object] An opaque path handle on which no operations should be directly performed # # @api public #
def self on_period UNK on_lparen path on_comma UNK on_op UNK on_rparen on_ignored_nl on_ivar on_period UNK on_lparen path on_comma UNK on_rparen # Produces a string representation of the opaque path handle, with expansions # performed on ~. For Windows, this means that C:\Users\Admini~1\AppData will # be expanded to C:\Users\Administrator\AppData. On POSIX filesystems, the # value ~ will be expanded to something like /Users/Foo # # This method exists primarlily to resolve a Ruby deficiency where # File.expand_path doesn't handle ~ in each segment on a Windows path # # @param path [Object] a path handle produced by {#pathname} # @return [String] a string representation of the path #
def self on_period assert_path on_lparen path on_rparen on_ignored_nl on_ivar on_period assert_path on_lparen path on_rparen on_nl end on_nl on_ignored_nl def self # Asserts that the given path is of the expected type produced by #pathname # # @raise [ArgumentError] when path is not of the expected type # # @api public #
def self on_period UNK on_lparen path on_rparen on_ignored_nl on_ivar on_period UNK on_lparen path on_rparen on_nl end on_nl on_ignored_nl def self # Produces a string representation of the opaque path handle. # # @param path [Object] a path handle produced by {#pathname} # @return [String] a string representation of the path #
def self on_period UNK on_lparen path on_comma mode on_comma on_op block on_rparen on_ignored_nl on_ivar on_period UNK on_lparen assert_path on_lparen path # Create and open a file for write only if it doesn't exist. # # @see Puppet::FileSystem::open # # @raise [Errno::EEXIST] path already exists. # # @api public #
def self on_period UNK on_lparen mode on_comma path on_rparen on_ignored_nl on_ivar on_period UNK on_lparen mode on_comma path on_rparen on_nl end # Changes permission bits on the named path to the bit pattern represented # by mode. # # @param mode [Integer] The mode to apply to the file if it is created # @param path [String] The path to the file, can also accept [PathName] # # @raise [Errno::ENOENT]: path doesn't exist # # @api public #
def self on_period UNK on_lparen path on_comma mode on_op UNK on_comma on_op block on_rparen on_ignored_nl on_ivar on_period UNK on_lparen assert_path # Replace the contents of a file atomically, creating the file if necessary. # If a `mode` is specified, then it will always be applied to the file. If # a `mode` is not specified and the file exists, its mode will be preserved. # If the file doesn't exist, the mode will be set to a platform-specific # default. # # @param path [String] The path to the file, can also accept [PathName] # @param mode [Integer] Optional mode for the file. # # @raise [Errno::EISDIR]: path is a directory # # @api public #
