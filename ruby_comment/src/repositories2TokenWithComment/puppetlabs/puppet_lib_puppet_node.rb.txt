UNK on_const on_op on_const on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_op on_const # A class for managing nodes, including their facts and environment.
UNK on_const on_op on_const on_nl on_ignored_nl UNK on_const on_op on_const on_op on_const on_nl on_ignored_nl UNK on_symbeg UNK on_comma on_symbeg UNK # Set up indirection, so that nodes can be looked for in # the node sources.
UNK on_const on_op on_const on_op on_const on_nl on_ignored_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_op on_symbeg UNK on_comma on_symbeg UNK # Asymmetric serialization/deserialization required in this class via to/from datahash
UNK on_symbeg UNK on_comma on_symbeg UNK on_op on_symbeg UNK on_comma on_symbeg UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_symbeg # Use the node source as the indirection terminus.
self on_period environment on_op on_const on_period UNK on_lparen on_symbeg UNK on_rparen on_period UNK on_lparen on_const on_lbracket on_symbeg environment on_rbracket on_rparen # This should not be :current_environment, this is the default # for a node when it has not specified its environment # it will be used to establish what the current environment is. #
unless on_ivar on_period nil? on_nl on_ivar on_lbracket on_const on_rbracket on_op on_ivar on_period name on_period UNK on_nl self on_period UNK on_op # Keep environment_name attribute and parameter in sync if they have been set
on_ivar on_lbracket on_const on_rbracket on_op on_ivar on_period name on_period UNK on_nl self on_period UNK on_op on_ivar on_period name if UNK # always set the environment parameter. It becomes top scope $environment for a manifest during catalog compilation.
def UNK on_lparen facts on_op UNK on_rparen on_ignored_nl UNK on_ignored_nl on_ivar on_op facts on_period nil? on_op on_const on_op on_const on_op # Merge the node facts with parameters from the node source. # @api public # @param facts [optional, Puppet::Node::Facts] facts to merge into node parameters. # Will query Facts indirection if not supplied. # @raise [Puppet::Error] Raise on failure to retrieve facts if not supplied # @return [nil]
UNK on_op on_ivar on_lbracket on_const on_rbracket on_nl UNK on_lparen on_ivar on_period UNK on_rparen on_nl on_ivar on_lbracket on_const on_rbracket on_op UNK # facts should never modify the environment parameter
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK UNK on_op name on_comma UNK on_op on_ignored_nl if on_ivar on_period UNK # Merge any random parameters into our parameter list.
def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_period UNK on_lparen UNK on_rparen on_nl on_ivar on_period UNK on_lparen UNK on_rparen on_nl # Add extra facts, such as facts given to lookup on the command line The # extra facts will override existing ones. # @param extra_facts [Hash{String=>Object}] the facts to tadd # @api private
on_ivar on_op facts on_period UNK on_lparen on_lbrace on_tstring_beg on_tstring_content on_tstring_end on_op self on_period environment on_period name on_period UNK on_rbrace on_rparen # Append the current environment to the list of server facts
UNK on_lparen facts on_rparen on_nl end on_nl on_ignored_nl def names on_nl UNK on_lbracket name on_rbracket if on_const on_period UNK on_lbracket # Merge the server facts into the parameters for the node
def names on_nl UNK on_lbracket name on_rbracket if on_const on_period UNK on_lbracket on_symbeg UNK on_rbracket on_nl on_ignored_nl names on_op on_lbracket # Calculate the list of names we might use for looking # up our node. This is only used for AST nodes.
UNK on_op parameters on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl unless UNK on_nl if parameters on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket UNK # First, get the fqdn
names on_op UNK on_lparen UNK on_rparen if UNK on_nl on_ignored_nl if on_const on_lbracket on_symbeg UNK on_rbracket on_op on_tstring_beg on_tstring_content on_tstring_end # Now that we (might) have the fqdn, add each piece to the name # list to search, in order of longest to shortest.
if on_const on_lbracket on_symbeg UNK on_rbracket on_op on_tstring_beg on_tstring_content on_tstring_end on_nl names on_period UNK name on_nl else on_ignored_nl names on_period # And make sure the node name is first, since that's the most # likely usage. # The name is usually the Certificate CN, but it can be # set to the 'facter' hostname instead.
def UNK on_lparen data on_rparen on_ignored_nl on_const on_period UNK on_lparen _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label name # Ensures the data is frozen #
def UNK on_nl trusted_param on_op on_ivar on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl if trusted_param on_nl on_ivar on_period UNK on_lparen on_tstring_beg # Resurrects and sanitizes trusted information in the node by modifying it and setting # the trusted_data in the node from parameters. # This modifies the node #
trusted_param on_op on_ivar on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl if trusted_param on_nl on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen # Resurrect "trusted information" that comes from node/fact terminus. # The current way this is done in puppet db (currently the only one) # is to store the node parameter 'trusted' as a hash of the trusted information. # # Thus here there are two main cases: # 1. This terminus was used in a real agent call (only meaningful if someone curls the request as it would # fail since the result is a hash of two catalogs). # 2 It is a command line call with a given node that use a terminus that: # 2.1 does not include a 'trusted' fact - use local from node trusted information # 2.2 has a 'trusted' fact - this in turn could be # 2.2.1 puppet db having stored trusted node data as a fact (not a great design) # 2.2.2 some other terminus having stored a fact called "trusted" (most likely that would have failed earlier, but could # be spoofed). # # For the reasons above, the resurrection of trusted node data with authenticated => true is only performed # if user is running as root, else it is resurrected as unauthenticated. #
on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl unless trusted_param on_period UNK on_lparen on_const on_rparen on_op UNK on_tstring_content UNK # Blows up if it is a parameter as it will be set as $trusted by the compiler as if it was a variable
trusted_param on_op UNK on_nl end on_nl else on_ignored_nl trusted_param on_op UNK on_nl end on_nl on_ignored_nl if on_op UNK on_nl UNK # trusted is some kind of garbage, do not resurrect
trusted_param on_op UNK on_nl end on_nl on_ignored_nl if on_op UNK on_nl UNK on_op on_const on_period UNK on_lparen on_symbeg UNK on_rparen # trusted may be Boolean false if set as a fact by someone
if on_op UNK on_nl UNK on_op on_const on_period UNK on_lparen on_symbeg UNK on_rparen UNK on_ignored_nl trusted_param on_op on_const on_op on_const # The options for node.trusted_data in priority order are: # 1) node came with trusted_data so use that # 2) else if there is :trusted_information in the puppet context # 3) else if the node provided a 'trusted' parameter (parsed out above) # 4) last, fallback to local node trusted information # # Note that trusted_data should be a hash, but (2) and (4) are not # hashes, so we to_h at the end
