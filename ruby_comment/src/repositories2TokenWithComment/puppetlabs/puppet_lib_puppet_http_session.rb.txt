UNK on_const on_op on_const on_op on_const on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period UNK on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end # # @api private # # The session is the mechanism by which services may be connected to and accessed. #
on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period UNK on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period UNK on_nl on_ignored_nl on_const on_op on_const # capabilities for a site
on_const on_op on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ignored_nl on_const on_op on_const on_op on_const on_period # puppet version where locales mount was added
on_const on_op on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ignored_nl UNK UNK on_lparen UNK on_comma UNK # puppet version where JSON was enabled by default
UNK UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl on_ivar on_op UNK on_nl on_ivar on_op UNK UNK # # @api private # # Create a new HTTP session. The session is the mechanism by which services # may be connected to and accessed. # # @param [Puppet::HTTP::Client] client the container for this session # @param [Array<Puppet::HTTP::Resolver>] resolvers array of resolver strategies # to implement. #
UNK UNK on_lparen name on_comma UNK UNK on_comma UNK UNK on_rparen on_ignored_nl UNK on_const on_comma on_tstring_beg on_tstring_content on_embexpr_beg name on_embexpr_end # # @api private # # If an explicit server and port are specified on the command line or # configuration file, this method always returns a Service with that host and # port. Otherwise, we walk the list of resolvers in priority order: # - DNS SRV # - Server List # - Puppet server/port settings # If a given resolver fails to connect, it tries the next available resolver # until a successful connection is found and returned. The successful service # is cached and returned if `route_to` is called again. # # @param [Symbol] name the service to resolve # @param [URI] url (nil) optional explicit url to use, if it is already known # @param [Puppet::SSL::SSLContext] ssl_context ssl_context ssl context to be # used for connections # # @return [Puppet::HTTP::Service] the resolved service #
UNK url on_op url on_period UNK on_op UNK on_op on_op url on_period UNK on_period UNK on_nl service on_op on_const on_op # short circuit if explicit URL host & port given
UNK UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_lbracket on_const on_op on_const on_op on_const on_rbracket on_nl UNK UNK on_nl # # @api private # # Collect per-site server versions. This will allow us to modify future # requests based on the version of puppetserver we are talking to. # # @param [Puppet::HTTP::Response] response the request response containing headers #
UNK UNK on_lparen name on_comma UNK on_rparen on_ignored_nl UNK on_const on_comma on_tstring_beg on_tstring_content on_embexpr_beg name on_embexpr_end on_tstring_end UNK on_const on_op # # @api private # # Determine if a session supports a capability. Depending on the server version # we are talking to, we know certain features are available or not. These # specifications are defined here so we can modify our requests appropriately. # # @param [Symbol] name name of the service to check # @param [String] capability the capability, ie `locales` or `json` # # @return [Boolean] #
