let on_lparen on_symbeg UNK on_rparen on_lbrace on_lbracket on_int on_comma on_int on_rbracket on_period pack on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_rbrace on_ignored_nl # When received as BINARY are not transcodable, but by "guessing" # Encoding.default_external can transcode to UTF-8
on_ignored_nl it on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl result on_op on_const on_op on_const on_period UNK on_lparen on_const on_op on_const on_rparen do # pack('C*') returns string in BINARY
result on_op on_const on_op on_const on_period UNK on_lparen on_const on_op on_const on_rparen do on_ignored_nl on_const on_op on_const on_op on_const on_period # そ - HIRAGANA LETTER SO # In Windows_31J: \x82 \xbb - 130 187 # In Unicode: \u305d - \xe3 \x81 \x9d - 227 129 157
on_ignored_nl it on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl result on_op on_const on_op on_const on_period UNK on_lparen on_const on_op on_const on_rparen do # these bytes are not valid windows_31j
on_ignored_nl result on_op on_const on_op on_const on_op on_const on_period convert_to_utf_8 on_lparen UNK on_rparen on_nl expect on_lparen result on_rparen on_period to # http://www.fileformat.info/info/unicode/char/3050/index.htm # ぐ - HIRAGANA LETTER GU # In Shift_JIS: \x82 \xae - 130 174 # In Unicode: \u3050 - \xe3 \x81 \x90 - 227 129 144 # if we were only ruby > 2.3.0, we could do String.new("\x82\xae", :encoding => Encoding::Shift_JIS)
expect on_lparen result on_period UNK on_period UNK on_rparen on_period to eq on_lparen on_lbracket on_int on_comma on_int on_comma on_int on_rbracket on_rparen # largely redundant but reinforces the point - this was transcoded:
on_ignored_nl let on_lparen on_symbeg UNK on_rparen on_lbrace on_lbracket on_int on_comma on_int on_rbracket on_period pack on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period # An admittedly contrived case, but perhaps not so improbable # http://www.fileformat.info/info/unicode/char/5e0c/index.htm # 希 Han Character 'rare; hope, expect, strive for' # In EUC_KR: \xfd \xf1 - 253 241 # In Unicode: \u5e0c - \xe5 \xb8 \x8c - 229 184 140
let on_lparen on_symbeg UNK on_rparen on_lbrace on_lbracket on_int on_comma on_int on_rbracket on_period pack on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period force_encoding # In this case, this EUC_KR character has been read in as ASCII and is # invalid in that encoding. This would raise an EncodingError # exception on transcode but we catch this issue a debug message - # leaving the original string unaltered.
let on_lparen on_symbeg UNK on_rparen on_lbrace on_lbracket on_int on_comma on_int on_comma on_int on_rbracket on_period pack on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen # ☃ - unicode snowman # \u2603 - \xe2 \x98 \x83 - 226 152 131
let on_lparen on_symbeg UNK on_rparen on_lbrace on_lbracket on_int on_rbracket on_period pack on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period force_encoding on_lparen on_const # Ø - Latin capital letter O with stroke # In ISO-8859-1: \xd8 - 216 # Invalid in UTF-8 without transcoding
