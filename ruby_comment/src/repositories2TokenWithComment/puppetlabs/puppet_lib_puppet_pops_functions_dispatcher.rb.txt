UNK on_const on_op on_const on_op on_const on_op on_const on_nl UNK UNK UNK on_nl on_ignored_nl def UNK on_lparen on_rparen on_ignored_nl UNK # Evaluate the dispatches defined as {Puppet::Pops::Functions::Dispatch} # instances to call the appropriate method on the # {Puppet::Pops::Functions::Function} instance. # # @api private
def UNK on_lparen on_rparen on_ignored_nl UNK on_op UNK UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_period UNK on_nl # @api private
def UNK on_nl UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_comma UNK on_comma args on_comma on_op # Answers if dispatching has been defined # @return [Boolean] true if dispatching has been defined # # @api private
def UNK on_lparen UNK on_comma UNK on_comma args on_comma on_op UNK on_rparen on_ignored_nl UNK on_op UNK on_period UNK UNK on_op # Dispatches the call to the first found signature (entry with matching type). # # @param instance [Puppet::Functions::Function] - the function to call # @param calling_scope [T.B.D::Scope] - the scope of the caller # @param args [Array<Object>] - the given arguments in the form of an Array # @return [Object] - what the called function produced # # @api private
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_nl end on_nl on_ignored_nl def UNK on_lparen on_rparen on_ignored_nl UNK on_op # Adds a dispatch directly to the set of dispatchers. # @api private
def UNK on_lparen on_rparen on_ignored_nl UNK on_op UNK on_period UNK UNK on_op UNK on_op UNK on_period UNK UNK on_nl on_ignored_nl # Produces a CallableType for a single signature, and a Variant[<callables>] otherwise # # @api private
UNK on_op UNK on_period UNK UNK on_op UNK on_op UNK on_period UNK UNK on_nl on_ignored_nl UNK on_period UNK on_op UNK # make a copy to make sure it can be contained by someone else (even if it is not contained here, it # should be treated as immutable). #
UNK on_period UNK on_op UNK on_op on_const on_op on_const on_op on_const on_op on_const on_period UNK on_lparen on_op UNK on_rparen on_op # multiple signatures, produce a Variant type of Callable1-n (must copy them) # single signature, produce single Callable
def UNK on_nl UNK on_period UNK UNK on_op UNK on_op UNK on_period UNK UNK on_nl end on_nl end on_nl EMP # @api private
