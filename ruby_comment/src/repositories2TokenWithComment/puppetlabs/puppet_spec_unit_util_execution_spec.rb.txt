UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl describe on_const on_op on_const # encoding: UTF-8
UNK call_exec_posix on_lparen UNK on_comma UNK on_comma stdin on_comma stdout on_comma stderr on_rparen on_ignored_nl on_const on_op on_const on_op on_const on_period # utility methods to help us test some private methods without being quite so verbose
allow on_lparen on_const on_rparen on_period to receive on_lparen on_symbeg UNK on_rparen on_period and_return on_lparen pid on_rparen on_period UNK on_nl allow # Most of the things this method does are bad to do during specs. :/
allow on_lparen on_const on_rparen on_period to receive on_lparen on_symbeg new on_rparen on_nl on_ignored_nl allow on_lparen UNK on_rparen on_period to receive # ensure that we don't really close anything!
on_ivar on_op on_const on_period UNK on_nl on_ignored_nl on_const on_op on_const on_op on_const on_op on_const on_op on_lbrace on_rbrace on_nl end on_nl # there is a danger here that ENV will be modified by exec_posix. Normally it would only affect the ENV # of a forked process, but here, we're stubbing Kernel.fork, so the method has the ability to override the # "real" ENV. To guard against this, we'll capture a snapshot of ENV before each test.
on_const on_op on_const on_op on_const on_op on_const on_op on_lbrace on_rbrace on_nl end on_nl on_ignored_nl UNK on_symbeg each do on_ignored_nl on_const # Now, we're going to effectively "mock" the magic ruby 'ENV' variable by creating a local definition of it # inside of the module we're testing.
on_const on_op on_const on_op on_const on_period UNK on_lparen on_symbeg UNK on_comma on_symbeg on_const on_rparen on_nl on_ignored_nl cur_env on_op on_const on_period # And here we remove our "mock" version of 'ENV', which will allow us to validate that the real ENV has been # left unharmed.
cur_env on_op on_const on_period UNK on_nl on_ignored_nl on_ivar on_period UNK on_lbrace on_op UNK on_comma UNK on_op expect on_lparen cur_env on_lbracket # capture the current environment and make sure it's the same as it was before the test
on_ivar on_period UNK on_lbrace on_op UNK on_comma UNK on_op expect on_lparen cur_env on_lbracket UNK on_rbracket on_rparen on_period to eq on_lparen # we will get some fairly useless output if we just use the raw == operator on the hashes here, so we'll # be a bit more explicit and laborious in the name of making the error more useful...
on_ignored_nl expect on_lparen on_const on_op on_const on_op on_const on_period execute on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg failonfail on_op false on_rparen # The exitstatus is changed to be mod 256 so that ruby can fit it into 8 bits.
on_ivar on_op on_const on_period UNK on_nl end on_nl on_ignored_nl UNK on_symbeg each do on_ignored_nl cur_env on_op on_const on_period UNK on_nl # there is a danger here that ENV will be modified by exec_posix. Normally it would only affect the ENV # of a forked process, but, in some of the previous tests in this file we're stubbing Kernel.fork., which could # allow the method to override the "real" ENV. This shouldn't be a problem for these tests because they are # not stubbing Kernel.fork, but, better safe than sorry... so, to guard against this, we'll capture a snapshot # of ENV before each test.
cur_env on_op on_const on_period UNK on_nl on_ivar on_period UNK on_lbrace on_op UNK on_comma UNK on_op expect on_lparen cur_env on_lbracket UNK # capture the current environment and make sure it's the same as it was before the test
on_ivar on_period UNK on_lbrace on_op UNK on_comma UNK on_op expect on_lparen cur_env on_lbracket UNK on_rbracket on_rparen on_period to eq on_lparen # we will get some fairly useless output if we just use the raw == operator on the hashes here, so we'll # be a bit more explicit and laborious in the name of making the error more useful...
get_env_var_cmd on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl locale_sentinel_env on_op on_lbrace on_rbrace on_nl on_const on_op # build up a printf-style string that contains a command to get the value of an environment variable # from the operating system. We can substitute into this with the names of the desired environment variables later.
UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl locale_sentinel_env on_op on_lbrace on_rbrace on_nl on_const on_op on_const on_op on_const on_op on_const on_period each # a sentinel value that we can use to emulate what locale environment variables might be set to on an international # system.
locale_sentinel_env on_op on_lbrace on_rbrace on_nl on_const on_op on_const on_op on_const on_op on_const on_period each on_lbrace on_op var on_op locale_sentinel_env on_lbracket # a temporary hash that contains sentinel values for each of the locale environment variables that we override in # "execute"
on_const on_op on_const on_period withenv on_lparen locale_sentinel_env on_rparen do on_ignored_nl on_const on_op on_const on_op on_const on_op on_const on_period each do # temporarily override the locale environment vars with a sentinel value, so that we can confirm that # execute is actually setting them.
UNK on_op on_lparen on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period UNK on_lparen var on_rparen on_rparen on_op on_tstring_beg # we expect that all of the POSIX vars will have been cleared except for LANG and LC_ALL
on_const on_op on_const on_period withenv on_lparen locale_sentinel_env on_rparen do on_ignored_nl on_const on_op on_const on_op on_const on_op on_const on_period each do # temporarily override the locale environment vars with a sentinel value, so that we can confirm that # execute is actually setting them.
UNK on_op on_lparen on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period UNK on_lparen var on_rparen on_rparen on_op on_tstring_beg # we expect that all of the POSIX vars will have been cleared except for LANG and LC_ALL
on_const on_op on_const on_period withenv on_lparen locale_sentinel_env on_rparen do on_ignored_nl on_const on_op on_const on_op on_const on_op on_const on_period each do # temporarily override the locale environment vars with a sentinel value, so that we can confirm that # execute is not setting them.
orig_env_vals on_op on_lbrace on_rbrace on_nl on_const on_op on_const on_op on_const on_op on_const on_period each do on_op var on_op on_ignored_nl orig_env_vals # we'll do this once without any sentinel values, to give us a little more test coverage
on_const on_op on_const on_op on_const on_period execute on_lparen get_env_var_cmd on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_lbrace on_symbeg UNK on_op true on_rbrace # now we can really execute any command--doesn't matter what it is...
on_const on_op on_const on_op on_const on_op on_const on_period each do on_op var on_op on_ignored_nl expect on_lparen on_const on_lbracket var on_rbracket # now we check and make sure the original environment was restored
on_const on_op on_const on_period withenv on_lparen locale_sentinel_env on_rparen do on_ignored_nl on_const on_op on_const on_op on_const on_period execute on_lparen get_env_var_cmd on_op # now, once more... but with our sentinel values
on_const on_op on_const on_op on_const on_period execute on_lparen get_env_var_cmd on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_lbrace on_symbeg UNK on_op true on_rbrace # now we can really execute any command--doesn't matter what it is...
on_const on_op on_const on_op on_const on_op on_const on_period each do on_op var on_op on_ignored_nl expect on_lparen on_const on_lbracket var on_rbracket # now we check and make sure the original environment was restored
get_env_var_cmd on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl user_sentinel_env on_op on_lbrace on_rbrace on_nl on_const on_op # build up a printf-style string that contains a command to get the value of an environment variable # from the operating system. We can substitute into this with the names of the desired environment variables later.
UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl user_sentinel_env on_op on_lbrace on_rbrace on_nl on_const on_op on_const on_op on_const on_op on_const on_period each # a sentinel value that we can use to emulate what locale environment variables might be set to on an international # system.
user_sentinel_env on_op on_lbrace on_rbrace on_nl on_const on_op on_const on_op on_const on_op on_const on_period each on_lbrace on_op var on_op user_sentinel_env on_lbracket # a temporary hash that contains sentinel values for each of the locale environment variables that we override in # "execute"
on_const on_op on_const on_period withenv on_lparen user_sentinel_env on_rparen do on_ignored_nl on_const on_op on_const on_op on_const on_op on_const on_period each do # first we set up a temporary execution environment with sentinel values for the user-related environment vars # that we care about.
on_const on_op on_const on_op on_const on_op on_const on_period each do on_op var on_op on_ignored_nl expect on_lparen on_const on_lbracket var on_rbracket # with this environment, we loop over the vars in question
expect on_lparen on_const on_lbracket var on_rbracket on_rparen on_period to eq on_lparen user_sentinel_env on_lbracket var on_rbracket on_rparen on_nl on_ignored_nl expect on_lparen # ensure that our temporary environment is set up as we expect
expect on_lparen on_const on_op on_const on_op on_const on_period execute on_lparen get_env_var_cmd on_op var on_rparen on_period UNK on_rparen on_period to eq # run an "exec" via the provider and ensure that it unsets the vars
expect on_lparen on_const on_lbracket var on_rbracket on_rparen on_period to eq on_lparen user_sentinel_env on_lbracket var on_rbracket on_rparen on_nl end on_nl end # ensure that after the exec, our temporary env is still intact
orig_env_vals on_op on_lbrace on_rbrace on_nl on_const on_op on_const on_op on_const on_op on_const on_period each do on_op var on_op on_ignored_nl orig_env_vals # we'll do this once without any sentinel values, to give us a little more test coverage
on_const on_op on_const on_op on_const on_period execute on_lparen get_env_var_cmd on_op on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_op on_const on_op on_const # now we can really execute any command--doesn't matter what it is...
on_const on_op on_const on_op on_const on_op on_const on_period each do on_op var on_op on_ignored_nl expect on_lparen on_const on_lbracket var on_rbracket # now we check and make sure the original environment was restored
on_const on_op on_const on_period withenv on_lparen user_sentinel_env on_rparen do on_ignored_nl on_const on_op on_const on_op on_const on_period execute on_lparen get_env_var_cmd on_op # now, once more... but with our sentinel values
on_const on_op on_const on_op on_const on_period execute on_lparen get_env_var_cmd on_op on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_op on_const on_op on_const # now we can really execute any command--doesn't matter what it is...
on_const on_op on_const on_op on_const on_op on_const on_period each do on_op var on_op on_ignored_nl expect on_lparen on_const on_lbracket var on_rbracket # now we check and make sure the original environment was restored
