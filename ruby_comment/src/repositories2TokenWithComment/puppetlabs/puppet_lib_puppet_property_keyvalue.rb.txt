UNK on_const on_op on_const on_nl UNK on_op UNK on_nl UNK on_symbeg UNK on_nl end on_nl on_ignored_nl UNK on_period UNK on_op # This subclass of {Puppet::Property} manages string key value pairs. # In order to use this property: # # * the _should_ value must be an array of key-value pairs separated by the 'separator' # * the retrieve method should return a hash with the keys as symbols # @note **IMPORTANT**: In order for this property to work there must also be a 'membership' parameter # The class that inherits from property should override that method with the symbol for the membership # @todo The node with an important message is not very clear. #
UNK on_symbeg UNK on_nl end on_nl on_ignored_nl UNK on_period UNK on_op UNK on_nl on_ignored_nl def UNK on_lparen hash on_rparen on_ignored_nl # This is a class-level variable that child properties can override # if they wish.
if on_op on_ivar on_period UNK on_op on_ivar on_period UNK on_period UNK on_lparen on_const on_rparen on_nl return on_ivar on_period UNK on_nl # Puppet casts all should values to arrays. Thus, if the user # passed in a hash for our property's should value, the should_value # parameter will be a single element array so we just extract our value # directly.
on_ivar on_period UNK on_lparen on_lbrace on_rbrace on_rparen UNK on_op hash on_comma UNK on_op on_ignored_nl UNK on_op UNK on_period UNK on_lparen # Here, should is an array of key/value pairs.
current on_period UNK on_lbrace on_op key on_op current on_lbracket key on_rbracket on_op UNK on_rbrace if UNK on_nl current on_nl end #inclusive means we are managing everything so if it isn't in should, its gone
should_value on_op current on_period UNK on_lparen UNK on_rparen on_nl on_ignored_nl on_ivar on_op should_value on_period UNK on_period UNK UNK on_op key #shared keys will get overwritten by members
on_ivar on_op should_value on_period UNK on_period UNK UNK on_op key on_op on_ignored_nl on_op current on_period UNK on_lparen key on_rparen on_op # Figure out the keys that will actually change in our Puppet run. # This lets us reduce the verbosity of Puppet's logging for instances # of this class when we want to. # # NOTE: We use ||= here because we only need to compute the # changed_or_new_keys once (since this property will only be synced once). #
def UNK on_nl on_tstring_beg UNK on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl on_tstring_beg UNK on_tstring_end on_nl end on_nl on_ignored_nl # @return [String] Returns a default separator of "="
def UNK on_nl on_tstring_beg UNK on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op UNK on_period UNK on_lparen UNK # @return [String] Returns a default delimiter of ";"
def UNK on_nl UNK on_op UNK on_period UNK on_lparen UNK on_rparen if UNK on_nl if UNK on_op UNK on_op on_symbeg # Retrieves the key-hash from the provider by invoking its method named the same as this property. # @return [Hash] the hash from the provider, or `:absent` #
UNK on_op UNK on_period UNK on_lparen UNK on_rparen if UNK on_nl if UNK on_op UNK on_op on_symbeg UNK on_nl return #ok, some 'convention' if the keyvalue property is named properties, provider should implement a properties method
def UNK on_lparen UNK on_rparen on_ignored_nl return UNK UNK UNK on_nl on_ignored_nl on_lparen UNK on_op UNK on_period UNK on_rparen on_nl # Returns true if there is no _is_ value, else returns if _is_ is equal to _should_ using == as comparison. # @return [Boolean] whether the property is in sync or not.
UNK UNK on_op value on_op on_ignored_nl UNK value on_period UNK on_lparen on_const on_rparen on_op value on_period UNK on_lparen on_const on_rparen # We only accept an array of key/value pairs (strings), a single # key/value pair (string) or a Hash as valid values for our property. # Note that for an array property value, the 'value' passed into the # block corresponds to the array element.
UNK UNK on_op value on_op on_ignored_nl UNK value if value on_period UNK on_lparen on_const on_rparen on_nl on_ignored_nl UNK on_op value # The validate step ensures that our passed-in value is # either a String or a Hash. If our value's a string, # then nothing else needs to be done. Otherwise, we need # to stringify the hash's keys and values to match our # internal representation of the property's value.
