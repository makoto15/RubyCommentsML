on_const on_lbracket on_symbeg UNK on_rbracket on_op UNK on_nl on_ignored_nl if UNK on_lbracket on_symbeg UNK on_rbracket on_op UNK on_period UNK on_period # The tasks feature is always on
if UNK on_lbracket on_symbeg UNK on_rbracket on_op UNK on_period UNK on_period UNK on_op on_int on_nl on_const on_lbracket on_symbeg UNK on_rbracket # Set the puppet code or file to use.
facts on_op on_const on_op on_const on_op on_const on_period UNK on_period UNK on_lparen on_const on_lbracket on_symbeg node_name_value on_rbracket on_rparen on_nl UNK # Collect the facts specified for that node
node on_op on_const on_op on_const on_period UNK on_period UNK on_lparen on_const on_lbracket on_symbeg node_name_value on_rbracket on_rparen on_nl UNK _ on_lparen # Find the Node
node on_period UNK on_op UNK on_nl on_ignored_nl on_const on_period UNK on_lparen on_lbrace on_symbeg UNK on_op UNK on_rbrace on_comma on_tstring_beg on_tstring_content # Modify the node descriptor to use the special apply_environment. # It is based on the actual environment from the node, or the locally # configured environment if the node does not specify one. # If a manifest file is passed on the command line, it overrides # the :manifest setting of the apply_environment.
on_const on_period UNK on_lparen on_lbrace on_symbeg UNK on_op UNK on_rbrace on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen UNK on_ignored_nl node on_period UNK # TRANSLATION, the string "For puppet script" is not user facing
node on_period UNK on_lparen facts on_period UNK on_rparen if facts on_nl on_ignored_nl node on_period UNK on_lparen on_lbrace on_rbrace on_rparen on_nl # Merge in the facts.
node on_period UNK on_lparen on_lbrace on_rbrace on_rparen on_nl on_ignored_nl UNK on_ignored_nl on_ignored_nl UNK on_ignored_nl on_ignored_nl node on_period UNK on_lparen on_rparen # Add server facts so $server_facts[environment] exists when doing a puppet script # SCRIPT TODO: May be needed when running scripts under orchestrator. Leave it for now. #
on_ignored_nl UNK on_ignored_nl on_ignored_nl node on_period UNK on_lparen on_rparen on_nl on_ignored_nl UNK on_op on_const on_op on_const on_op on_const on_period UNK # Compile the catalog
UNK on_ignored_nl on_ignored_nl node on_period UNK on_lparen on_rparen on_nl on_ignored_nl UNK on_op on_const on_op on_const on_op on_const on_period UNK on_lparen # When compiling, the compiler traps and logs certain errors # Those that do not lead to an immediate exit are caught by the general # rule and gets logged. #
on_ignored_nl node on_period UNK on_lparen on_rparen on_nl on_ignored_nl UNK on_op on_const on_op on_const on_op on_const on_period UNK on_lparen node on_period # support the following features when evaluating puppet code # * $facts with facts from host running the script # * $settings with 'settings::*' namespace populated, and '$settings::all_local' hash # * $trusted as setup when using puppet apply # * an environment #
node on_period UNK on_lparen on_rparen on_nl on_ignored_nl UNK on_op on_const on_op on_const on_op on_const on_period UNK on_lparen node on_period UNK # fixup trusted information
topscope on_period UNK on_lparen node on_period UNK on_rparen on_nl on_ignored_nl topscope on_period UNK on_lparen node on_period UNK on_rparen on_nl on_ignored_nl # When scripting the trusted data are always local, but set them anyway
topscope on_period UNK on_lparen node on_period UNK on_rparen on_nl on_ignored_nl UNK on_op node on_period facts on_period UNK on_op on_lbrace on_rbrace # Server facts are always about the local node's version etc.
UNK on_op node on_period facts on_period UNK on_op on_lbrace on_rbrace on_op node on_period facts on_period UNK on_nl topscope on_period UNK # Set $facts for the node running the script
topscope on_period UNK on_lparen node on_period UNK on_period UNK on_comma UNK on_rparen on_nl on_ignored_nl UNK on_period UNK on_lparen on_rparen on_nl # create the $settings:: variables
UNK on_lparen on_int on_rparen on_nl end on_nl on_ignored_nl UNK on_lparen on_int on_rparen on_nl UNK on_op UNK on_nl on_const on_period UNK # already logged and handled by the compiler, including Puppet::ParseErrorWithIssue
on_ignored_nl on_ignored_nl on_const on_op on_const on_op on_const on_period UNK on_period UNK on_op UNK on_nl on_ignored_nl on_const on_op on_const on_op on_const # TODO: This skips applying the settings catalog for these settings, but # the effect of doing this is unknown. It may be that it only works if there is a puppet # installed where a settings catalog have already been applied... # This saves 1/5th of the startup time
on_ignored_nl on_const on_op on_const on_op on_const on_period UNK on_period UNK on_op UNK on_nl on_ignored_nl on_const on_op on_const on_op on_const on_period # Puppet.settings.use :main, :agent, :ssl
on_const on_op on_const on_op on_const on_period UNK on_period UNK on_op UNK on_nl on_ignored_nl on_const on_op on_const on_op on_const on_period UNK # When running a script, the catalog is not relevant, and neither is caching of it
on_const on_op on_const on_op on_const on_period UNK on_period UNK on_op UNK on_nl on_ignored_nl UNK on_nl on_ignored_nl if on_const on_lbracket on_symbeg # we do not want the last report to be persisted
