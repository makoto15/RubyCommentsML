class on_const on_op on_const on_op on_const on_op on_const on_op on_const on_op on_const on_nl UNK on_const on_op on_const on_op on_const on_op # Access objects via REST
on_const on_op UNK on_nl on_ignored_nl class on_op self on_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_nl end on_nl on_ignored_nl def # puppet major version where JSON is enabled by default
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen # Specify the setting that we should use to get the server name.
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen # Specify the setting that we should use to get the port.
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_nl # Specify the service to use when doing SRV record lookup
def self on_period UNK on_nl on_const on_op on_const on_op on_const on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl def # Select the server to use based on the settings configuration # for this indirection, taking into account the HA server list.
def self on_period UNK on_nl on_const on_op on_const on_op on_const on_period UNK on_lparen UNK on_comma UNK on_rparen on_nl end on_nl # Select the port to use based on the settings configuration # for this indirection, taking into account the HA server list.
def UNK on_nl on_const on_op on_const on_op on_const on_period UNK on_op on_const on_op on_const on_op on_const on_op on_const on_nl end # Should we use puppet's http client to make requests. Will return # false when running in puppetserver
def headers on_nl UNK on_op UNK on_period UNK on_op on_const on_nl UNK on_op UNK on_period UNK on_lbrace on_op UNK on_op # Provide appropriate headers.
UNK on_op UNK on_period UNK on_op on_const on_nl UNK on_op UNK on_period UNK on_lbrace on_op UNK on_op UNK on_period UNK # yaml is not allowed on the network
if on_tstring_beg on_tstring_content UNK UNK UNK on_tstring_content on_tstring_end on_period UNK on_op UNK on_nl UNK on_op on_tstring_beg UNK UNK UNK on_tstring_content # WEBrick in Ruby 1.9.1 only supports up to 1024 character lines in an HTTP request # http://redmine.ruby-lang.org/issues/show/3991
_ on_comma body on_op parse_response on_lparen response on_rparen on_nl UNK on_op _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace UNK # 404 can get special treatment as the indirector API can not produce a meaningful # reason to why something is not found - it may not be the thing the user is # expecting to find that is missing, but something else (like the environment). # While this way of handling the issue is not perfect, there is at least an error # that makes a user aware of the reason for the failure. #
def do_request on_lparen request on_rparen on_ignored_nl response on_op request on_period do_request on_lparen self on_period class on_period UNK on_comma self on_period # Encapsulate call to request.do_request with the arguments from this class # Then yield to the code block that was called in # We certainly could have retained the full request.do_request(...) { |r| ... } # but this makes the code much cleaner and we only then actually make the call # to request.do_request from here, thus if we change what we pass or how we # get it, we only need to change it here.
on_const on_period UNK on_lparen _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_rparen on_nl on_const on_lbracket on_symbeg UNK on_rbracket on_op on_tstring_beg on_tstring_content #TRANSLATORS "PSON" should not be translated
end on_nl on_ignored_nl UNK on_nl on_ignored_nl def is_http_200? on_lparen response on_rparen on_ignored_nl UNK response on_period UNK on_nl UNK on_tstring_beg on_tstring_content # Validation happens on the remote end
UNK UNK on_lparen response on_rparen on_nl end on_nl end on_nl on_ignored_nl def UNK on_lparen response on_rparen on_ignored_nl response on_period UNK # Raise the http error if we didn't get a 'success' of some kind.
def parse_response on_lparen response on_rparen on_ignored_nl if response on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl on_lbracket response on_lbracket on_tstring_beg on_tstring_content on_tstring_end # Returns the content_type, stripping any appended charset, and the # body, decompressed if necessary (content-encoding is checked inside # uncompress_body)
