UNK on_const on_op on_const on_op on_const on_op on_const on_op on_const on_op on_const on_op on_const on_op on_const on_nl on_ignored_nl UNK UNK # The EppParser is a specialized Puppet Parser that starts parsing in Epp Text mode
UNK UNK on_nl UNK UNK UNK on_op on_const on_op on_const on_op on_const on_op on_const UNK UNK on_lparen on_rparen on_nl end # Initializes the epp parser support by creating a new instance of {Puppet::Pops::Parser::Lexer} # configured to start in Epp Lexing mode. # @return [void] #
UNK UNK on_lparen file on_rparen on_ignored_nl UNK on_const UNK UNK on_lparen file on_rparen on_nl UNK file on_op UNK UNK UNK # Parses a file expected to contain epp text/DSL logic.
UNK UNK on_lparen on_rparen on_ignored_nl UNK on_ignored_nl on_ivar on_op UNK on_nl UNK on_op UNK on_lparen on_ivar UNK UNK UNK on_rparen # Performs the parsing and returns the resulting model. # The lexer holds state, and this is setup with {#parse_string}, or {#parse_file}. # # TODO: deal with options containing origin (i.e. parsing a string from externally known location). # TODO: should return the model, not a Hostclass # # @api private #
end on_nl UNK UNK on_nl UNK on_ignored_nl on_ivar UNK UNK on_nl on_ivar on_op UNK UNK on_nl on_ivar on_op UNK UNK # #Commented out now because this hides problems in the racc grammar while developing # # TODO include this when test coverage is good enough. # rescue Puppet::ParseError => except # except.line ||= @lexer.line # except.file ||= @lexer.file # except.pos ||= @lexer.pos # raise except # rescue => except # raise Puppet::ParseError.new(except.message, @lexer.file, @lexer.line, @lexer.pos, except)
