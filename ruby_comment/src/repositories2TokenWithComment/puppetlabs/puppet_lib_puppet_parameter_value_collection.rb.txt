UNK on_const on_op on_const on_op on_const on_nl on_ignored_nl def UNK on_lparen name on_comma UNK on_rparen on_ignored_nl UNK on_op UNK on_period # A collection of values and regular expressions, used for specifying allowed values # in a given parameter. # @note This class is considered part of the internal implementation of {Puppet::Parameter}, and # {Puppet::Property} and the functionality provided by this class should be used via their interfaces. # @comment This class probably have several problems when trying to use it with a combination of # regular expressions and aliases as it finds an acceptable value holder vi "name" which may be # a regular expression... # # @api private #
def UNK on_lparen name on_comma UNK on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_nl value on_op match? on_lparen UNK on_rparen # Aliases the given existing _other_ value with the additional given _name_. # @return [void] # @api private #
def UNK on_nl unless UNK on_lparen on_ivar on_rparen on_nl on_ivar on_op on_tstring_beg on_tstring_end on_nl unless UNK on_period empty? on_nl on_ivar # Returns a doc string (enumerating the acceptable values) for all of the values in this parameter/property. # @return [String] a documentation string. # @api private #
def empty? on_nl on_ivar on_period empty? on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op on_lbrace on_rbrace on_nl on_ignored_nl on_ivar # @return [Boolean] Returns whether the set of allowed values is empty or not. # @api private #
def UNK on_nl on_ivar on_op on_lbrace on_rbrace on_nl on_ignored_nl on_ivar on_op UNK UNK on_nl on_ivar on_op UNK UNK on_nl end # @api private #
on_ivar on_op on_lbrace on_rbrace on_nl on_ignored_nl on_ivar on_op UNK UNK on_nl on_ivar on_op UNK UNK on_nl end on_nl on_ignored_nl def # We often look values up by name, so a hash makes more sense.
on_ivar on_op UNK UNK on_nl on_ivar on_op UNK UNK on_nl end on_nl on_ignored_nl def match? on_lparen UNK on_rparen on_ignored_nl value # However, we want to retain the ability to match values in order, # but we always prefer directly equality (i.e., strings) over regex matches.
def match? on_lparen UNK on_rparen on_ignored_nl value on_op on_ivar on_period UNK on_lbrace on_op v on_op v on_period match? on_lparen UNK # Checks if the given value is acceptable (matches one of the literal values or patterns) and returns # the "matcher" that matched. # Literal string matchers are tested first, if both a literal and a regexp match would match, the literal # match wins. # # @param test_value [Object] the value to test if it complies with the configured rules # @return [Puppet::Parameter::Value, nil] The instance of Puppet::Parameter::Value that matched the given value, or nil if there was no match. # @api private #
value on_op on_ivar on_period UNK on_lbrace on_op v on_op v on_period match? on_lparen UNK on_rparen on_rbrace on_nl return value if # First look for normal values
on_ivar on_period UNK on_lbrace on_op v on_op v on_period match? on_lparen UNK on_rparen on_rbrace on_nl end on_nl on_ignored_nl def UNK # Then look for a regex match
def UNK on_lparen value on_rparen on_ignored_nl return value if empty? on_nl on_ignored_nl UNK on_op match? on_lparen value on_rparen on_nl if # Munges the value if it is valid, else produces the same value. # @param value [Object] the value to munge # @return [Object] the munged value, or the given value # @todo This method does not seem to do any munging. It just returns the value if it matches the # regexp, or the (most likely Symbolic) allowed value if it matches (which is more of a replacement # of one instance with an equal one. Is the intent that this method should be specialized? # @api private #
def UNK on_lparen name on_comma UNK on_op on_lbrace on_rbrace on_comma on_op UNK on_rparen on_ignored_nl call_opt on_op UNK UNK on_symbeg UNK # Defines a new valid value for a {Puppet::Property}. # A valid value is specified as a literal (typically a Symbol), but can also be # specified with a regexp. # # @param name [Symbol, Regexp] a valid literal value, or a regexp that matches a value # @param options [Hash] a hash with options # @option options [Symbol] :event The event that should be emitted when this value is set. # @todo Option :event original comment says "event should be returned...", is "returned" the correct word # to use? # @option options [Symbol] :invalidate_refreshes True if a change on this property should invalidate and # remove any scheduled refreshes (from notify or subscribe) targeted at the same resource. For example, if # a change in this property takes into account any changes that a scheduled refresh would have performed, # then the scheduled refresh would be deleted. # @option options [Object] _any_ Any other option is treated as a call to a setter having the given # option name (e.g. `:required_features` calls `required_features=` with the option's value as an # argument). # @api private #
UNK on_op _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_op _ on_lparen on_tstring_beg on_tstring_content on_tstring_end #TRANSLATORS ':call' is a property and should not be translated
def UNK on_lparen on_op UNK on_rparen on_ignored_nl UNK on_period UNK on_lbrace on_op name on_op UNK on_lparen name on_rparen on_rbrace on_nl # Defines one or more valid values (literal or regexp) for a parameter or property. # @return [void] # @dsl type # @api private #
def UNK on_nl on_ivar on_period UNK on_lbrace on_op UNK on_op UNK on_period name on_period UNK on_rbrace on_nl end on_nl on_ignored_nl # @return [Array<String>] An array of the regular expressions in string form, configured as matching valid values. # @api private #
def UNK on_lparen value on_rparen on_ignored_nl return if empty? on_nl on_ignored_nl unless on_ivar on_period UNK on_lbrace on_op name on_comma v # Validates the given value against the set of valid literal values and regular expressions. # @raise [ArgumentError] if the value is not accepted # @return [void] # @api private #
def value on_lparen name on_rparen on_ignored_nl on_ivar UNK name UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK # Returns a valid value matcher (a literal or regular expression) # @todo This looks odd, asking for an instance that matches a symbol, or an instance that has # a regexp. What is the intention here? Marking as api private... # # @return [Puppet::Parameter::Value] a valid value matcher # @api private #
def UNK on_nl on_ivar on_period UNK on_lbrace on_op UNK on_op UNK on_period name on_rbrace on_nl end on_nl end on_nl EMP # @return [Array<Symbol>] Returns a list of valid literal values. # @see regexes # @api private #
