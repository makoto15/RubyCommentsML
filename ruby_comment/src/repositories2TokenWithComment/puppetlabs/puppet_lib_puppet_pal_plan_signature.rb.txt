UNK on_const on_nl UNK UNK UNK UNK UNK on_ignored_nl UNK on_op UNK on_nl end on_nl on_ignored_nl UNK UNK UNK UNK # A PlanSignature is returned from `plan_signature`. Its purpose is to answer questions about the plans's parameters # and if it can be called with a hash of named parameters. # # @api public #
UNK UNK UNK UNK UNK on_ignored_nl dispatcher on_op UNK on_period UNK on_period dispatcher on_period UNK UNK UNK UNK on_nl on_ignored_nl # Returns true or false depending on if the given PlanSignature is callable with a set of named arguments or not # In addition to returning the boolean outcome, if a block is given, it is called with a string of formatted # error messages that describes the difference between what was given and what is expected. The error message may # have multiple lines of text, and each line is indented one space. # # @example Checking if signature is acceptable # # signature = pal.plan_signature('myplan') # signature.callable_with?({x => 10}) { |errors| raise ArgumentError("Ooops: given arguments does not match\n#{errors}") } # # @api public #
UNK on_period UNK UNK on_op UNK UNK UNK on_op UNK UNK UNK UNK on_op UNK UNK UNK on_period UNK UNK # Assign all non-nil values, even those that represent non-existent parameters.
UNK UNK on_period UNK on_period UNK on_nl UNK UNK UNK UNK on_op UNK UNK UNK on_period UNK UNK UNK UNK # Arg either wasn't given, or it was undef
UNK UNK UNK UNK on_op UNK UNK UNK on_period UNK UNK UNK UNK on_nl UNK on_ignored_nl end on_nl end on_nl # No default. Assign nil if the args_hash included it
end on_nl end on_nl end on_nl on_ignored_nl UNK on_op on_const on_op on_const on_op on_const on_op on_const on_period UNK on_period UNK # parameter does not have a default value, it will be assigned its default when being called # we assume that the default value is of the correct type and therefore simply skip # checking this # param_scope[name] = param_scope.evaluate(name, p.value, closure_scope, @evaluator)
UNK UNK on_nl dispatcher on_op UNK on_period UNK on_period dispatcher on_period UNK UNK UNK UNK on_nl dispatcher on_period UNK on_nl # Returns a PStructType describing the parameters as a puppet Struct data type # Note that a `to_s` on the returned structure will result in a human readable Struct datatype as a # description of what a plan expects. # # @return [Puppet::Pops::Types::PStructType] a struct data type describing the parameters and their types # # @api public #
