def UNK on_period UNK on_nl on_ivar on_op on_const on_op on_const on_period parse on_lparen on_const on_rparen on_op on_const on_op on_const on_period # Discriminator for tests that attempts to unset HOME since that, for reasons currently unknown, # doesn't work in Ruby >= 2.4.0
on_ivar on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_op on_const on_period withenv on_ivar on_comma mode do # Setting Path & Environment parameters in Exec type can cause weirdness
expect on_lparen on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_rparen on_period to UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end on_rparen on_nl end on_nl # When assigning duplicate keys, can't guarantee order of evaluation
env_key on_op on_const on_period UNK on_period UNK on_nl on_ignored_nl begin on_ignored_nl original_value on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_lbracket env_key # start with lower case key,
env_key on_op on_const on_period UNK on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl begin on_ignored_nl original_value on_op on_tstring_beg on_tstring_content on_tstring_end # start with lower case key, ensuring string is not entirely numeric
on_ignored_nl utf_8_key on_op env_var_name on_op UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period force_encoding on_lparen on_const on_op on_const on_rparen # rune ᚠ
expect on_lparen process on_period UNK on_lbracket utf_8_key on_rbracket on_rparen on_period to eq on_lparen utf_8_value on_rparen on_nl on_ignored_nl expect on_lparen utf_8_key # the true Windows environment APIs see the variables correctly
expect on_lparen utf_8_key on_period UNK on_period UNK on_rparen on_period to eq on_lparen codepage_key on_period UNK on_period UNK on_rparen on_nl on_ignored_nl # the string contain the same bytes, but have different Ruby metadata
expect on_lparen process on_period UNK on_lbracket utf_8_key on_rbracket on_rparen on_period to eq on_lparen nil on_rparen on_nl end on_nl on_ignored_nl on_ignored_nl # real environment shouldn't have env var anymore
on_ignored_nl it on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_symbeg if on_op on_const on_op on_const on_op on_const on_period windows? do on_ignored_nl on_ignored_nl # document buggy Ruby behavior here for https://bugs.ruby-lang.org/issues/8822 # Ruby retrieves / stores ENV names in the current codepage # when these tests no longer pass, Ruby has fixed its bugs and workarounds can be removed
it on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_symbeg if on_op on_const on_op on_const on_op on_const on_period windows? do on_ignored_nl on_ignored_nl UNK # In 2.3, the behavior is mostly correct when external codepage is 65001 / UTF-8
on_ignored_nl UNK on_op on_lparen on_const on_period UNK on_op on_const on_op on_const on_rparen on_nl expect on_lparen on_const on_period UNK on_lparen codepage_key # Ruby 2.3 fixes access by the original UTF-8 key, and behaves differently than 2.1 # keying by local codepage will work only when the UTF-8 can be converted to local codepage # the key selected for this test contains characters unavailable to a local codepage, hence doesn't work
UNK on_op on_lparen on_const on_period UNK on_op on_const on_op on_const on_rparen on_nl expect on_lparen on_const on_period UNK on_lparen codepage_key on_rparen # On Japanese Windows (Code Page 932) this test resolves as true. # otherwise the key selected for this test contains characters # unavailable to a local codepage, hence doesn't work # HACK: tech debt to replace once PUP-7019 is understood
UNK on_op on_const on_period UNK on_period UNK on_lbrace on_op UNK on_op UNK on_period UNK on_op codepage_key on_period UNK on_rbrace on_nl # Ruby's ENV.keys has slightly different behavior than ENV.key?(key), and 2.3 differs from 2.1 # (codepage_key / utf_8_key have same bytes for the sake of searching)
expect on_lparen UNK on_rparen on_period to UNK on_nl on_ignored_nl expect on_lparen on_const on_period UNK on_period UNK on_lparen codepage_key on_rparen on_rparen # the keys collection in 2.3 does not have a string with the correct bytes! # a corrupt version of the key exists with the bytes [225, 154, 160] replaced with [63]!
expect on_lparen on_const on_period UNK on_period UNK on_lparen codepage_key on_rparen on_rparen on_period to eq on_lparen false on_rparen on_nl expect on_lparen # given the key is corrupted, include? cannot be used to find it in either UTF-8 or codepage encoding
UNK on_op on_const on_lbracket utf_8_key on_rbracket on_nl expect on_lparen UNK on_rparen on_period UNK eq on_lparen utf_8_value on_rparen on_nl expect on_lparen # The value stored at the UTF-8 key is a corrupted current codepage string and won't match UTF-8 value # again the bytes [225, 154, 160] have irreversibly been changed to [63]!
UNK on_op on_const on_lbracket utf_8_key on_rbracket on_period UNK on_period force_encoding on_lparen on_const on_op on_const on_rparen on_nl expect on_lparen UNK on_rparen # the ENV value returned will be in the local codepage which may or may not be able to be # encoded to UTF8. Our test UTF8 data is not convertible to non-Unicode codepages
utf_8_str on_op env_var_name on_op UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period force_encoding on_lparen on_const on_op on_const on_rparen on_nl # rune ᚠ
process on_period UNK on_lparen UNK on_comma utf_8_str on_rparen on_nl process on_period UNK on_lparen env_var_name on_comma utf_8_str on_rparen on_nl on_ignored_nl UNK # UTF-8 name and value
process on_period UNK on_lparen env_var_name on_comma utf_8_str on_rparen on_nl on_ignored_nl UNK on_op process on_period UNK on_period UNK on_period UNK on_nl # ASCII name / UTF-8 value
let on_lparen on_symbeg mixed_utf8 on_rparen on_lbrace on_tstring_beg on_tstring_content on_tstring_end on_rbrace let on_lparen on_symbeg mixed_utf8_urlencoded on_rparen on_lbrace on_tstring_beg on_tstring_content on_tstring_end on_rbrace # different UTF-8 widths # 1-byte A # 2-byte ۿ - http://www.fileformat.info/info/unicode/char/06ff/index.htm - 0xDB 0xBF / 219 191 # 3-byte ᚠ - http://www.fileformat.info/info/unicode/char/16A0/index.htm - 0xE1 0x9A 0xA0 / 225 154 160 # 4-byte ܎ - http://www.fileformat.info/info/unicode/char/2070E/index.htm - 0xF0 0xA0 0x9C 0x8E / 240 160 156 142
let on_lparen on_symbeg mixed_utf8_urlencoded on_rparen on_lbrace on_tstring_beg on_tstring_content on_tstring_end on_rbrace on_nl on_ignored_nl on_qwords_beg on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content # Aۿᚠ܎
it on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl path on_op on_tstring_beg on_tstring_content on_tstring_end on_nl uri on_op on_const on_op on_const on_period path_to_uri on_lparen # reserved characters are different for each part # https://web.archive.org/web/20151229061347/http://blog.lunatech.com/2009/02/03/what-every-web-developer-must-know-about-url-encoding#Thereservedcharactersaredifferentforeachpart # "?" is allowed unescaped anywhere within a query part, # "/" is allowed unescaped anywhere within a query part, # "=" is allowed unescaped anywhere within a path parameter or query parameter value, and within a path segment, # ":@-._~!$&'()*+,;=" are allowed unescaped anywhere within a path segment part, # "/?:@-._~!$&'()*+,;=" are allowed unescaped anywhere within a fragment part.
expect on_lparen uri on_period UNK on_rparen on_period to eq on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl expect on_lparen on_const on_period UNK # either + or %20 is correct for an encoded space in query # + is usually used for backward compatibility, but %20 is preferred for compat with Uri.unescape
expect on_lparen on_const on_period UNK on_lparen uri on_period UNK on_rparen on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end on_comma on_tstring_beg on_tstring_end on_rparen # complete roundtrip
let on_lparen on_symbeg mixed_utf8 on_rparen on_lbrace on_tstring_beg on_tstring_content on_tstring_end on_rbrace let on_lparen on_symbeg mixed_utf8_urlencoded on_rparen on_lbrace on_tstring_beg on_tstring_content on_tstring_end on_rbrace # different UTF-8 widths # 1-byte A # 2-byte ۿ - http://www.fileformat.info/info/unicode/char/06ff/index.htm - 0xDB 0xBF / 219 191 # 3-byte ᚠ - http://www.fileformat.info/info/unicode/char/16A0/index.htm - 0xE1 0x9A 0xA0 / 225 154 160 # 4-byte 𠜎 - http://www.fileformat.info/info/unicode/char/2070E/index.htm - 0xF0 0xA0 0x9C 0x8E / 240 160 156 142
let on_lparen on_symbeg mixed_utf8_urlencoded on_rparen on_lbrace on_tstring_beg on_tstring_content on_tstring_end on_rbrace on_nl on_ignored_nl it on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl expect on_lparen # Aۿᚠ𠜎
let on_lparen on_symbeg mixed_utf8 on_rparen on_lbrace on_tstring_beg on_tstring_content on_tstring_end on_rbrace let on_lparen on_symbeg mixed_utf8_urlencoded on_rparen on_lbrace on_tstring_beg on_tstring_content on_tstring_end on_rbrace # different UTF-8 widths # 1-byte A # 2-byte ۿ - http://www.fileformat.info/info/unicode/char/06ff/index.htm - 0xDB 0xBF / 219 191 # 3-byte ᚠ - http://www.fileformat.info/info/unicode/char/16A0/index.htm - 0xE1 0x9A 0xA0 / 225 154 160 # 4-byte ܎ - http://www.fileformat.info/info/unicode/char/2070E/index.htm - 0xF0 0xA0 0x9C 0x8E / 240 160 156 142
let on_lparen on_symbeg mixed_utf8_urlencoded on_rparen on_lbrace on_tstring_beg on_tstring_content on_tstring_end on_rbrace on_nl on_ignored_nl it on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl expect on_lparen # Aۿᚠ܎
let on_lparen on_symbeg mixed_utf8 on_rparen on_lbrace on_tstring_beg on_tstring_content on_tstring_end on_rbrace on_ignored_nl it on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl expect on_lparen on_const # different UTF-8 widths # 1-byte A # 2-byte ۿ - http://www.fileformat.info/info/unicode/char/06ff/index.htm - 0xDB 0xBF / 219 191 # 3-byte ᚠ - http://www.fileformat.info/info/unicode/char/16A0/index.htm - 0xE1 0x9A 0xA0 / 225 154 160 # 4-byte 𠜎 - http://www.fileformat.info/info/unicode/char/2070E/index.htm - 0xF0 0xA0 0x9C 0x8E / 240 160 156 142
on_ignored_nl it on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl expect on_lparen on_const on_op on_const on_period uri_to_path on_lparen on_const on_period parse on_lparen on_tstring_beg # Aۿᚠ𠜎
allow on_lparen on_const on_rparen on_period to receive on_lparen on_symbeg UNK on_rparen on_period and_return on_lparen UNK on_rparen on_period UNK on_nl on_ignored_nl # Most of the things this method does are bad to do during specs. :/
allow on_lparen on_const on_rparen on_period to receive on_lparen on_symbeg new on_rparen on_nl end on_nl on_ignored_nl it on_tstring_beg on_tstring_content on_tstring_end do # ensure that we don't really close anything!
UNK on_op on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg # This is ugly, but I can't really think of a better way to do it without # letting it actually close fds, which seems risky
on_lparen on_int on_op on_int on_rparen on_period each on_lbrace on_op UNK on_op expect on_lparen on_const on_rparen on_period not_to receive on_lparen on_symbeg # This is ugly, but I can't really think of a better way to do it without # letting it actually close fds, which seems risky
UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_op on_const on_period withenv on_lparen on_tstring_beg on_tstring_content on_tstring_end on_op on_tstring_beg on_tstring_content on_embexpr_beg UNK # Windows treats *any* user as a "user that doesn't exist", which means # that this will work correctly across all our platforms, and should # behave consistently. If they ever implement it correctly (eg: to do # the lookup for real) it should just work transparently.
target on_period UNK UNK nil on_nl target on_period UNK on_nl target on_nl end on_nl on_ignored_nl it on_tstring_beg on_tstring_content on_tstring_end do # make sure content is on disk.
expect on_lparen on_const on_period UNK on_lparen target on_period path on_rparen on_rparen on_period to eq on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl # Check that our file has the expected content.
subject on_period replace_file on_lparen target on_period path on_comma on_int on_rparen do on_op fh on_op on_ignored_nl fh on_period puts on_tstring_beg on_tstring_content # Replace the file.
expect on_lparen on_const on_period UNK on_lparen target on_period path on_rparen on_rparen on_period to eq on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl # ...and check the replacement was complete.
UNK on_op on_lbracket on_int on_comma on_int on_comma on_int on_rbracket on_nl UNK on_op on_lbracket on_int on_comma on_int on_rbracket UNK on_const on_op # When running with the same user and group sid, which is the default, # Windows collapses the owner and group modes into a single ACE, resulting # in set(0600) => get(0660) and so forth. --daniel 2012-03-30
expect on_lparen on_const on_period UNK on_lparen target on_period path on_rparen on_rparen on_period to eq on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl # ...and check the replacement was complete.
