on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl class on_const on_op on_const on_op on_const on_op on_const # The virtual base class for properties, which are the self-contained building # blocks for actually doing work on the system.
class on_const on_op on_const on_op on_const on_op on_const on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl # The Property class is the implementation of a resource's attributes of _property_ kind. # A Property is a specialized Resource Type Parameter that has both an 'is' (current) state, and # a 'should' (wanted state). However, even if this is conceptually true, the current _is_ value is # obtained by asking the associated provider for the value, and hence it is not actually part of a # property's state, and only available when a provider has been selected and can obtain the value (i.e. when # running on an agent). # # A Property (also in contrast to a parameter) is intended to describe a managed attribute of # some system entity, such as the name or mode of a file. # # The current value _(is)_ is read and written with the methods {#retrieve} and {#set}, and the wanted # value _(should)_ is read and written with the methods {#value} and {#value=} which delegate to # {#should} and {#should=}, i.e. when a property is used like any other parameter, it is the _should_ value # that is operated on. # # All resource type properties in the puppet system are derived from this class. # # The intention is that new parameters are created by using the DSL method {Puppet::Type.newproperty}. # # @abstract # @note Properties of Types are expressed using subclasses of this class. Such a class describes one # named property of a particular Type (as opposed to describing a type of property in general). This # limits the use of one (concrete) property class instance to occur only once for a given type's inheritance # chain. An instance of a Property class is the value holder of one instance of the resource type (e.g. the # mode of a file resource instance). # A Property class may server as the superclass _(parent)_ of another; e.g. a Size property that describes # handling of measurements such as kb, mb, gb. If a type requires two different size measurements it requires # one concrete class per such measure; e.g. MinSize (:parent => Size), and MaxSize (:parent => Size). # # @see Puppet::Type # @see Puppet::Parameter # # @api public #
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl class on_op self on_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK # Returns the original wanted value(s) _(should)_ unprocessed by munging/unmunging. # The original values are set by {#value=} or {#should=}. # @return (see #should) #
UNK on_symbeg UNK on_nl on_ignored_nl class on_op self on_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg name on_nl on_ignored_nl def # The noop mode for this property. # By setting a property's noop mode to `true`, any management of this property is inhibited. Calculation # and reporting still takes place, but if a change of the underlying managed entity's state # should take place it will not be carried out. This noop # setting overrides the overall `Puppet[:noop]` mode as well as the noop mode in the _associated resource_ #
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg name on_nl on_ignored_nl def UNK on_nl on_ivar on_op on_symbeg UNK on_nl end on_nl # @todo Figure out what this is used for. Can not find any logic in the puppet code base that # reads or writes this attribute. # ??? Probably Unused
UNK on_symbeg name on_nl on_ignored_nl def UNK on_nl on_ivar on_op on_symbeg UNK on_nl end on_nl on_ignored_nl def UNK on_lparen value # @return [Symbol] The name of the property as given when the property was created. #
def UNK on_nl on_ivar on_op on_symbeg UNK on_nl end on_nl on_ignored_nl def UNK on_lparen value on_rparen on_ignored_nl value on_op value # @!attribute [rw] array_matching # @comment note that $#46; is a period - char code require to not terminate sentence. # The `is` vs&#46; `should` array matching mode; `:first`, or `:all`. # # @comment there are two blank chars after the symbols to cause a break - do not remove these. # * `:first` # This is primarily used for single value properties. When matched against an array of values # a match is true if the `is` value matches any of the values in the `should` array. When the `is` value # is also an array, the matching is performed against the entire array as the `is` value. # * `:all` # : This is primarily used for multi-valued properties. When matched against an array of # `should` values, the size of `is` and `should` must be the same, and all values in `is` must match # a value in `should`. # # @note The semantics of these modes are implemented by the method {#insync?}. That method is the default # implementation and it has a backwards compatible behavior that imposes additional constraints # on what constitutes a positive match. A derived property may override that method. # @return [Symbol] (:first) the mode in which matching is performed # @see #insync? # @dsl type # @api public #
def UNK on_lparen value on_rparen on_ignored_nl value on_op value on_period UNK if value on_period UNK on_lparen on_const on_rparen on_nl raise # @comment This is documented as an attribute - see the {array_matching} method. #
raise on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen unless on_lbracket on_symbeg UNK on_comma on_symbeg UNK on_rbracket on_period UNK on_lparen #TRANSLATORS 'Property#array_matching', 'first', and 'all' should not be translated
def UNK on_nl on_ivar on_period UNK on_op on_ivar on_op UNK on_op on_ivar on_nl end on_nl on_ignored_nl def UNK on_lparen value # Used to mark a type property as having or lacking idempotency (on purpose # generally). This is used to avoid marking the property as a # corrective_change when there is known idempotency issues with the property # rendering a corrective_change flag as useless. # @return [Boolean] true if the property is marked as idempotent
def UNK on_lparen value on_rparen on_ignored_nl on_ivar on_op value on_nl end on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen # Attribute setter for the idempotent attribute. # @param [bool] value boolean indicating if the property is idempotent. # @see idempotent
def self on_period UNK on_lparen name on_rparen on_ignored_nl value on_op UNK on_period UNK on_lparen name on_rparen on_nl value on_period name # Looks up a value's name among valid values, to enable option lookup with result as a key. # @param name [Object] the parameter value to match against valid values (names). # @return {Symbol, Regexp} a value matching predicate # @api private #
def self on_period UNK on_lparen name on_comma UNK on_rparen on_ignored_nl value on_op UNK on_period value on_lparen name on_rparen on_nl value # Returns the value of the given option (set when a valid value with the given "name" was defined). # @param name [Symbol, Regexp] the valid value predicate as returned by {value_name} # @param option [Symbol] the name of the wanted option # @return [Object] value of the option # @raise [NoMethodError] if the option is not supported # @todo Guessing on result of passing a non supported option (it performs send(option)). # @api private #
def self on_period newvalue on_lparen name on_comma UNK on_op on_lbrace on_rbrace on_comma on_op block on_rparen on_ignored_nl value on_op UNK on_period # Defines a new valid value for this property. # A valid value is specified as a literal (typically a Symbol), but can also be # specified with a Regexp. # # @param name [Symbol, Regexp] a valid literal value, or a regexp that matches a value # @param options [Hash] a hash with options # @option options [Symbol] :event The event that should be emitted when this value is set. # @todo Option :event original comment says "event should be returned...", is "returned" the correct word # to use? # @option options [Symbol] :invalidate_refreshes Indicates a change on this property should invalidate and # remove any scheduled refreshes (from notify or subscribe) targeted at the same resource. For example, if # a change in this property takes into account any changes that a scheduled refresh would have performed, # then the scheduled refresh would be deleted. # @option options [Object] any Any other option is treated as a call to a setter having the given # option name (e.g. `:required_features` calls `required_features=` with the option's value as an # argument). # # @dsl type # @api public
UNK on_lparen method on_comma on_symbeg UNK on_rparen unless UNK on_lparen method on_rparen on_nl end on_nl end on_nl value on_nl end # Let the method be an alias for calling the providers setter unless we already have this method
def UNK on_lparen value on_rparen on_ignored_nl self on_period UNK on_tstring_beg on_embexpr_beg self on_period class on_period name on_embexpr_end on_tstring_content on_embexpr_beg value # Calls the provider setter method for this property with the given value as argument. # @return [Object] what the provider returns when calling a setter for this property's name # @raise [Puppet::Error] when the provider can not handle this property. # @see #set # @api private #
self on_period UNK on_tstring_beg on_embexpr_beg self on_period class on_period name on_embexpr_end on_tstring_content on_embexpr_beg value on_period UNK on_embexpr_end on_tstring_end unless on_ivar # We have no idea how to handle this unless our parent have a provider
def UNK on_lparen UNK on_comma newvalue on_rparen on_ignored_nl UNK on_ignored_nl if UNK on_op on_symbeg UNK on_nl return on_tstring_beg on_tstring_content on_embexpr_beg # Formats a message for a property change from the given `current_value` to the given `newvalue`. # @return [String] a message describing the property change. # @note If called with equal values, this is reported as a change. # @raise [Puppet::DevError] if there were issues formatting the message #
def UNK on_nl value on_op self on_period should on_nl on_ignored_nl UNK on_op self on_period class on_period UNK on_lparen value on_comma # Produces the name of the event to use to describe a change of this property's value. # The produced event name is either the event name configured for this property, or a generic # event based on the name of the property with suffix `_changed`, or if the property is # `:ensure`, the name of the resource type and one of the suffixes `_created`, `_removed`, or `_changed`. # @return [String] the name of the event that describes the change #
def UNK on_lparen UNK on_op on_lbrace on_rbrace on_rparen on_ignored_nl UNK on_op on_lbrace on_symbeg name on_op UNK on_comma on_symbeg UNK on_op # Produces an event describing a change of this property. # In addition to the event attributes set by the resource type, this method adds: # # * `:name` - the event_name # * `:desired_value` - a.k.a _should_ or _wanted value_ # * `:property` - reference to this property # * `:source_description` - The containment path of this property, indicating what resource this # property is associated with and in what stage and class that resource # was declared, e.g. "/Stage[main]/Myclass/File[/tmp/example]/ensure" # * `:invalidate_refreshes` - if scheduled refreshes should be invalidated # * `:redacted` - if the event will be redacted (due to this property being sensitive) # # @return [Puppet::Transaction::Event] the created event # @see Puppet::Type#event
def UNK on_lparen is on_rparen on_ignored_nl return UNK unless on_ivar on_nl on_ignored_nl UNK on_lparen is on_rparen on_nl end on_nl on_ignored_nl # Determines whether the property is in-sync or not in a way that is protected against missing value. # @note If the wanted value _(should)_ is not defined or is set to a non-true value then this is # a state that can not be fixed and the property is reported to be in sync. # @return [Boolean] the protected result of `true` or the result of calling {#insync?}. # # @api private # @note Do not override this method. #
return UNK unless on_ivar on_nl on_ignored_nl UNK on_lparen is on_rparen on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen UNK # If there is no @should value, consider the property to be in sync.
UNK on_lparen is on_rparen on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen UNK on_rparen on_ignored_nl raise on_tstring_beg on_tstring_content on_tstring_end # Otherwise delegate to the (possibly derived) insync? method.
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl raise on_tstring_beg on_tstring_content on_tstring_end if UNK on_op on_symbeg UNK on_nl end on_nl # Protects against override of the {#safe_insync?} method. # @raise [RuntimeError] if the added method is `:safe_insync?` # @api private #
def UNK on_lparen is on_rparen on_ignored_nl self on_period UNK on_tstring_beg on_embexpr_beg self on_period class on_period name on_embexpr_end on_tstring_content on_tstring_end unless # Checks if the current _(is)_ value is in sync with the wanted _(should)_ value. # The check if the two values are in sync is controlled by the result of {#match_all?} which # specifies a match of `:first` or `:all`). The matching of the _is_ value against the entire _should_ value # or each of the _should_ values (as controlled by {#match_all?} is performed by {#property_matches?}. # # A derived property typically only needs to override the {#property_matches?} method, but may also # override this method if there is a need to have more control over the array matching logic. # # @note The array matching logic in this method contains backwards compatible logic that performs the # comparison in `:all` mode by checking equality and equality of _is_ against _should_ converted to array of String, # and that the lengths are equal, and in `:first` mode by checking if one of the _should_ values # is included in the _is_ values. This means that the _is_ value needs to be carefully arranged to # match the _should_. # @todo The implementation should really do return is.zip(@should).all? {|a, b| property_matches?(a, b) } # instead of using equality check and then check against an array with converted strings. # @param is [Object] The current _(is)_ value to check if it is in sync with the wanted _(should)_ value(s) # @return [Boolean] whether the values are in sync or not. # @raise [Puppet::DevError] if wanted value _(should)_ is not an array. # @api public #
return UNK if on_ivar on_period UNK on_nl on_ignored_nl if UNK UNK on_ignored_nl return UNK unless is on_period UNK on_const on_nl # an empty array is analogous to no should values
if UNK UNK on_ignored_nl return UNK unless is on_period UNK on_const on_nl on_ignored_nl return UNK unless is on_period UNK on_op # Look for a matching value, either for all the @should values, or any of # them, depending on the configuration of this property.
return UNK unless is on_period UNK on_const on_nl on_ignored_nl return UNK unless is on_period UNK on_op on_ivar on_period UNK on_nl # Emulate Array#== using our own comparison function. # A non-array was not equal to an array, which @should always is.
return UNK unless is on_period UNK on_op on_ivar on_period UNK on_nl on_ignored_nl return on_lparen is on_op on_ivar UNK is on_op # If they were different lengths, they are not equal.
return on_lparen is on_op on_ivar UNK is on_op on_ivar on_period UNK on_lparen on_op on_symbeg to_s on_rparen on_rparen on_nl on_ignored_nl else # Finally, are all the elements equal? In order to preserve the # behaviour of previous 2.7.x releases, we need to impose some fun rules # on "equality" here. # # Specifically, we need to implement *this* comparison: the two arrays # are identical if the is values are == the should values, or if the is # values are == the should values, stringified. # # This does mean that property equality is not commutative, and will not # work unless the `is` value is carefully arranged to match the should.
else on_ignored_nl return on_ivar on_period UNK on_lbrace on_op UNK on_op UNK on_lparen is on_comma UNK on_rparen on_rbrace on_nl end on_nl # When we stop being idiots about this, and actually have meaningful # semantics, this version is the thing we actually want to do. # # return is.zip(@should).all? {|a, b| property_matches?(a, b) }
def UNK on_lparen should on_comma is on_rparen on_ignored_nl on_ignored_nl UNK on_op on_ivar on_nl on_ignored_nl UNK on_ignored_nl on_ivar on_op should on_nl # This method tests if two values are insync? outside of the properties current # should value. This works around the requirement for corrective_change analysis # that requires two older values to be compared with the properties potentially # custom insync? code. # # @param [Object] should the value it should be # @param [Object] is the value it is # @return [Boolean] whether or not the values are in sync or not # @api private
on_ignored_nl UNK on_op on_ivar on_nl on_ignored_nl UNK on_ignored_nl on_ivar on_op should on_nl UNK on_lparen is on_rparen on_nl UNK on_nl UNK # Here be dragons. We're setting the should value of a property purely just to # call its insync? method, as it lacks a way to pass in a should. # Unfortunately there isn't an API compatible way of avoiding this, as both should # an insync? behaviours are part of the public API. Future API work should factor # this kind of arbitrary comparisons into the API to remove this complexity. -ken
UNK on_op on_ivar on_nl on_ignored_nl UNK on_ignored_nl on_ivar on_op should on_nl UNK on_lparen is on_rparen on_nl UNK on_nl UNK on_op # Backup old should, set it to the new value, then call insync? on the property.
UNK on_op _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_ignored_nl on_lbrace on_label self on_period UNK on_period UNK on_comma on_label self # Certain operations may fail, but we don't want to fail the transaction if we can # avoid it #TRANSLATORS 'insync_values?' should not be translated
UNK on_nl UNK on_ignored_nl on_ivar on_op UNK on_nl end on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_comma UNK on_rparen # Return nil, ie. unknown
on_ivar on_op UNK on_nl end on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK on_op UNK # Always restore old should
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK on_op UNK UNK UNK on_op UNK on_period to_s on_nl end on_nl # Checks if the given current and desired values are equal. # This default implementation performs this check in a backwards compatible way where # the equality of the two values is checked, and then the equality of current with desired # converted to a string. # # A derived implementation may override this method to perform a property specific equality check. # # The intent of this method is to provide an equality check suitable for checking if the property # value is in sync or not. It is typically called from {#insync?}. #
UNK on_op UNK UNK UNK on_op UNK on_period to_s on_nl end on_nl on_ignored_nl def UNK on_lparen value on_rparen on_ignored_nl self # This preserves the older Puppet behaviour of doing raw and string # equality comparisons for all equality. I am not clear this is globally # desirable, but at least it is not a breaking change. --daniel 2011-11-11
def UNK on_lparen value on_rparen on_ignored_nl self on_period class on_period UNK on_lparen value on_rparen on_nl end on_nl on_ignored_nl def UNK # Produces a pretty printing string for the given value. # This default implementation calls {#format_value_for_display} on the class. A derived # implementation may perform property specific pretty printing when the _is_ values # are not already in suitable form. # @param value [Object] the value to format as a string # @return [String] a pretty printing string
def UNK on_lparen UNK on_rparen on_ignored_nl on_const on_op on_const on_op on_const on_period UNK on_lparen on_ignored_nl on_symbeg UNK on_op UNK on_lbracket # Emits a log message at the log level specified for the associated resource. # The log entry is associated with this property. # @param msg [String] the message to log # @return [void] #
def UNK on_nl self on_period class on_period UNK on_op on_symbeg UNK on_nl end on_nl on_ignored_nl def UNK on_nl self on_period # @return [Boolean] whether the {array_matching} mode is set to `:all` or not
def UNK on_nl self on_period class on_period UNK on_nl end on_nl on_ignored_nl def name on_nl self on_period class on_period name # @return [Boolean] whether the property is marked as idempotent for the purposes # of calculating corrective change.
def name on_nl self on_period class on_period name on_nl end on_nl on_ignored_nl def UNK on_nl if on_ivar on_period UNK on_lparen # @return [Symbol] the name of the property as stated when the property was created. # @note A property class (just like a parameter class) describes one specific property and # can only be used once within one type's inheritance chain.
def UNK on_nl if on_ivar on_period UNK on_lparen on_symbeg UNK on_rparen on_nl on_ivar on_period UNK on_nl else on_ignored_nl if UNK # @return [Boolean] whether this property is in noop mode or not. # Returns whether this property is in noop mode or not; if a difference between the # _is_ and _should_ values should be acted on or not. # The noop mode is a transitive setting. The mode is checked in this property, then in # the _associated resource_ and finally in Puppet[:noop]. # @todo This logic is different than Parameter#noop in that the resource noop mode overrides # the property's mode - in parameter it is the other way around. Bug or feature? #
if on_ivar on_period UNK on_lparen on_symbeg UNK on_rparen on_nl on_ivar on_period UNK on_nl else on_ignored_nl if UNK on_lparen on_ivar on_rparen # This is only here to make testing easier.
def UNK on_nl provider on_period UNK on_lparen self on_period class on_period name on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen # Retrieves the current value _(is)_ of this property from the provider. # This implementation performs this operation by calling a provider method with the # same name as this property (i.e. if the property name is 'gid', a call to the # 'provider.gid' is expected to return the current value. # @return [Object] what the provider returns as the current value of the property #
def UNK on_lparen value on_rparen on_ignored_nl name on_op self on_period class on_period UNK on_lparen value on_rparen on_nl method on_op self # Sets the current _(is)_ value of this property. # The _name_ associated with the value is first obtained by calling {value_name}. A dynamically created setter # method associated with this _name_ is called if it exists, otherwise the value is set using using the provider's # setter method for this property by calling ({#call_provider}). # # @param value [Object] the value to set # @return [Object] returns the result of calling the setter method or {#call_provider} # @raise [Puppet::Error] if there were problems setting the value using the setter method or when the provider # setter should be used but there is no provider in the associated resource_ # @raise [Puppet::ResourceError] if there was a problem setting the value and it was not raised # as a Puppet::Error. The original exception is wrapped and logged. # @api public #
name on_op self on_period class on_period UNK on_lparen value on_rparen on_nl method on_op self on_period class on_period UNK on_lparen name # Set a name for looking up associated options like the event.
self on_period UNK on_lparen on_op block on_rparen on_nl else on_ignored_nl UNK on_lparen value on_rparen on_nl end on_nl end on_nl end # FIXME It'd be better here to define a method, so that # the blocks could return values.
def should on_nl return UNK unless UNK on_lparen on_ivar on_rparen on_nl on_ignored_nl self on_period UNK on_tstring_beg on_tstring_content on_embexpr_beg self on_period # Returns the wanted _(should)_ value of this property. # If the _array matching mode_ {#match_all?} is true, an array of the wanted values in unmunged format # is returned, else the first value in the array of wanted values in unmunged format is returned. # @return [Array<Object>, Object, nil] Array of values if {#match_all?} else a single value, or nil if there are no # wanted values. # @raise [Puppet::DevError] if the wanted value is non nil and not an array # # @note This method will potentially return different values than the original values as they are # converted via munging/unmunging. If the original values are wanted, call {#shouldorig}. # # @see #shouldorig # @api public #
def UNK on_lparen values on_rparen on_ignored_nl values on_op on_lbracket values on_rbracket unless values on_period UNK on_lparen on_const on_rparen on_nl on_ignored_nl # Sets the wanted _(should)_ value of this property. # If the given value is not already an Array, it will be wrapped in one before being set. # This method also sets the cached original _should_ values returned by {#shouldorig}. # # @param values [Array<Object>, Object] the value(s) to set as the wanted value(s) # @raise [StandardError] when validation of a value fails (see {#validate}). # @api public #
def UNK on_lparen value on_rparen on_ignored_nl self on_period class on_period UNK on_lparen value on_rparen on_nl end on_nl on_ignored_nl def UNK # Produces a pretty printing string for the given value. # This default implementation calls {#format_value_for_display} on the class. A derived # implementation may perform property specific pretty printing when the _should_ values # are not already in suitable form. # @param value [Object] the value to format as a string # @return [String] a pretty printing string
def UNK on_nl UNK on_tstring_beg on_tstring_content on_tstring_end unless should on_nl UNK on_lparen should on_rparen on_nl end on_nl on_ignored_nl def UNK # Synchronizes the current value _(is)_ and the wanted value _(should)_ by calling {#set}. # @raise [Puppet::DevError] if {#should} is nil # @todo The implementation of this method is somewhat inefficient as it computes the should # array twice.
def UNK on_lparen value on_rparen on_ignored_nl UNK on_nl UNK on_lparen value on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen value # Asserts that the given value is valid. # If the developer uses a 'validate' hook, this method will get overridden. # @raise [Exception] if the value is invalid, or value can not be handled. # @return [void] # @api private #
def UNK on_lparen value on_rparen on_ignored_nl features on_op self on_period class on_period UNK on_lparen self on_period class on_period UNK on_lparen # Asserts that all required provider features are present for the given property value. # @raise [ArgumentError] if a required feature is not present # @return [void] # @api private #
raise on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_ignored_nl on_lbrace on_label provider on_period class on_period name on_comma on_label #TRANSLATORS 'Provider' refers to a Puppet provider class
def value on_nl self on_period should on_nl end on_nl on_ignored_nl def UNK on_lparen values on_rparen on_ignored_nl self on_period should on_op # @return [Object, nil] Returns the wanted _(should)_ value of this property.
def UNK on_lparen values on_rparen on_ignored_nl self on_period should on_op values on_nl end on_nl end on_nl EMP EMP EMP EMP # (see #should=)
