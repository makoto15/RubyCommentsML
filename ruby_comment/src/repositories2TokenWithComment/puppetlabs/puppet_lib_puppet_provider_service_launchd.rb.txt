def self on_period UNK on_nl on_lbracket on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end # These are the paths in OS X where a launchd service plist could # exist. This is a helper method, versus a constant, for easy testing # and mocking # # @api private
def self on_period UNK on_nl on_ivar on_op on_const on_period UNK on_lparen on_symbeg UNK on_rparen on_period UNK on_nl end on_nl on_ignored_nl # Gets the current Darwin version, example 10.6 returns 9 and 10.10 returns 14 # See https://en.wikipedia.org/wiki/Darwin_(operating_system)#Release_history # for more information. # # @api private
def self on_period UNK on_nl if self on_period UNK on_op on_int on_nl on_tstring_beg on_tstring_content on_tstring_end on_nl else on_ignored_nl on_tstring_beg on_tstring_content # Defines the path to the overrides plist file where service enabling # behavior is defined in 10.6 and greater. # # With the rewrite of launchd in 10.10+, this moves and slightly changes format. # # @api private
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK do on_op UNK on_op on_ignored_nl resource on_op UNK on_lbracket # Caching is enabled through the following three methods. Self.prefetch will # call self.instances to create an instance for each service. Self.flush will # clear out our cache when we're done.
def self on_period UNK on_nl UNK on_op self on_period UNK on_nl on_ivar on_op self on_period job_list on_nl UNK on_period UNK # Self.instances will return an array with each element being a hash # containing the name, provider, path, and status of each service on the # system.
def self on_period UNK on_lparen path on_rparen on_ignored_nl UNK on_op on_const on_period UNK on_lparen on_const on_period UNK on_lparen path on_comma # This method will return a list of files in the passed directory. This method # does not go recursively down the tree and does not return directories # # @param path [String] The directory to glob # # @api private # # @return [Array] of String instances modeling file paths
def self on_period UNK on_lparen UNK on_op false on_rparen on_ignored_nl return on_ivar if on_ivar UNK UNK UNK on_nl on_ivar on_op # Get a hash of all launchd plists, keyed by label. This value is cached, but # the cache will be refreshed if refresh is true. # # @api private
on_const on_period debug on_lparen _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace UNK filepath on_rbrace on_rparen on_nl UNK on_nl end #TRANSLATORS 'plist' and label' should not be translated
def self on_period UNK on_lparen label on_op UNK on_rparen on_ignored_nl by_label on_op UNK on_nl on_ignored_nl if label on_nl if by_label # Sets a class instance variable with a hash of all launchd plist files that # are found on the system. The key of the hash is the job id and the value # is the path to the file. If a label is passed, we return the job id and # path for that specific job.
by_label on_op UNK on_lparen true on_rparen on_nl if by_label on_period has_key? label on_nl return on_lbrace label on_op by_label on_lbracket label # try refreshing the map, in case a plist has been added in the interim
by_label on_nl end on_nl end on_nl on_ignored_nl def self on_period job_list on_nl on_ivar on_op on_const on_period new on_nl UNK on_ignored_nl # caller wants the whole map
def self on_period job_list on_nl on_ivar on_op on_const on_period new on_nl UNK on_ignored_nl UNK on_op UNK on_symbeg UNK on_nl raise # This status method lists out all currently running services. # This hash is returned at the end of the method.
def self on_period UNK on_lparen path on_rparen on_ignored_nl on_const on_op on_const on_op on_const on_period UNK on_lparen path on_rparen on_nl end # Read a plist, whether its format is XML or in Apple's "binary1" # format.
def self on_period UNK on_nl UNK on_op on_int on_nl overrides on_op UNK on_nl UNK do on_ignored_nl on_const on_period debug on_lparen # Read overrides plist, retrying if necessary
def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_const on_period debug on_lparen on_tstring_beg on_tstring_content on_embexpr_beg # Clean out the @property_hash variable containing the cached list of services
def UNK on_lparen label on_rparen on_ignored_nl job on_op self on_period class on_period UNK on_lparen label on_rparen on_nl job_path on_op job # finds the path for a given label and returns the path and parsed plist # as an array of [path, plist]. Note plist is really a Hash here.
def status on_nl if on_ivar on_op on_lparen on_lparen on_ivar on_lbracket on_symbeg UNK on_rbracket on_op on_symbeg false on_rparen on_op on_lparen on_ivar # when a service includes hasstatus=>false, we override the launchctl # status mechanism and fall back to the base provider status method.
UNK on_op on_ivar on_lbracket on_symbeg name on_rbracket on_nl job_list on_op self on_period class on_period job_list on_nl if job_list on_period UNK # property_hash was flushed so the service changed status
job_list on_op self on_period class on_period job_list on_nl if job_list on_period UNK on_lparen UNK on_rparen on_nl job_list on_lbracket UNK on_rbracket # Updating services with new statuses
if job_list on_period UNK on_lparen UNK on_rparen on_nl job_list on_lbracket UNK on_rbracket on_nl else on_ignored_nl on_symbeg UNK on_nl end on_nl # if job is present in job_list, return its status
else on_ignored_nl on_symbeg UNK on_nl end on_nl else on_ignored_nl on_ivar on_lbracket on_symbeg status on_rbracket on_nl end on_nl end on_nl on_ignored_nl # if job is no longer present in job_list, it was stopped
def UNK on_nl return UNK on_lparen on_symbeg UNK on_rparen if resource on_lbracket on_symbeg UNK on_rbracket on_nl job_path on_comma _ on_op # start the service. To get to a state of running/enabled, we need to # conditionally enable at load, then disable by modifying the plist file # directly.
cmds on_op on_tstring_beg on_tstring_content on_tstring_end on_nl if self on_period UNK on_op on_symbeg false on_op self on_period status on_op on_symbeg UNK # always add -w so it always starts the job, it is a noop if it is not needed, this means we do # not have to rescan all launchd plists.
UNK on_op true on_nl end on_nl cmds on_op job_path on_nl UNK on_ignored_nl UNK on_lparen cmds on_rparen on_nl UNK on_const on_op # launchctl won't load disabled jobs
self on_period UNK if UNK UNK resource on_lbracket on_symbeg UNK on_rbracket on_op on_symbeg false on_nl end on_nl on_ignored_nl on_ignored_nl def # As load -w clears the Disabled flag, we need to add it in after
cmds on_op on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_op true on_nl end on_nl cmds on_op job_path on_nl UNK on_ignored_nl UNK on_lparen # keepalive jobs can't be stopped without disabling
self on_period UNK if UNK UNK resource on_lbracket on_symbeg UNK on_rbracket on_op on_symbeg true on_nl end on_nl on_ignored_nl def UNK # As unload -w sets the Disabled flag, we need to add it in after
def UNK on_nl UNK on_op UNK on_nl UNK on_op UNK on_nl on_ignored_nl UNK on_ignored_nl _ on_comma UNK on_op UNK on_lparen # launchd jobs are enabled by default. They are only disabled if the key # "Disabled" is set to true, but it can also be set to false to enable it. # Starting in 10.6, the Disabled key in the job plist is consulted, but only # if there is no entry in the global overrides plist. We need to draw a # distinction between undefined, true and false for both locations where the # Disabled flag can be defined.
on_const on_period UNK on_lparen UNK on_rparen on_nl return on_symbeg false on_nl end on_nl on_ignored_nl UNK on_op UNK on_lbracket on_tstring_beg on_tstring_content # if job does not exist, log the error and return false as on other platforms
def UNK on_nl overrides on_op self on_period class on_period UNK on_nl if self on_period class on_period UNK on_op on_int on_nl # enable and disable are a bit hacky. We write out the plist with the appropriate value # rather than dealing with launchctl as it is unable to change the Disabled flag # without actually loading/unloading the job.
