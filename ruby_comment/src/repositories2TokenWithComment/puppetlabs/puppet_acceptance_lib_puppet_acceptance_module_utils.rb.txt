def UNK on_lparen host on_rparen on_ignored_nl UNK on_op on on_lparen host on_comma UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_rparen on_period # Return an array of module paths for a given host. # # Example return value: # # [ # "/etc/puppetlabs/code/environments/production/modules", # "/etc/puppetlabs/code/modules", # "/opt/puppet/share/puppet/modules", # ] # # @param host [String] hostname # @return [Array] paths for found modulepath
def UNK on_lparen host on_rparen on_ignored_nl UNK on_lparen host on_rparen on_lbracket on_int on_rbracket on_nl end on_nl on_ignored_nl def UNK on_lparen # Return a string of the default (first) path in modulepath for a given host. # # Example return value: # # "/etc/puppetlabs/code/environments/production/modules" # # @param host [String] hostname # @return [String] first path for found modulepath
def UNK on_lparen host on_rparen on_ignored_nl on host on_comma UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl UNK on_op stdout on_period # Return an array of paths to installed modules for a given host. # # Example return value: # # [ # "/opt/puppet/share/puppet/modules/apt", # "/opt/puppet/share/puppet/modules/auth_conf", # "/opt/puppet/share/puppet/modules/concat", # ] # # @param host [String] hostname # @return [Array] paths for found modules
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK UNK on_nl UNK on_period each do on_op host on_op on_ignored_nl UNK # Return a hash of array of paths to installed modules for a hosts. # The individual hostnames are the keys of the hash. The only value # for a given key is an array of paths for the found modules. # # Example return value: # # { # "my_master" => # [ # "/opt/puppet/share/puppet/modules/apt", # "/opt/puppet/share/puppet/modules/auth_conf", # "/opt/puppet/share/puppet/modules/concat", # ], # "my_agent01" => # [ # "/opt/puppet/share/puppet/modules/apt", # "/opt/puppet/share/puppet/modules/auth_conf", # "/opt/puppet/share/puppet/modules/concat", # ], # } # # @param hosts [Array] hostnames # @return [Hash] paths for found modules indexed by hostname
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK on_period each do on_op host on_comma UNK on_op on_ignored_nl UNK on_period # Compare the module paths in given hashes and remove paths that # are were not present in the first hash. The use case for this # method is to remove any modules that were installed during the # course of a test run. # # Installed module hashes would be gathered using the # `get_+installed_module_for_hosts` command in the setup stage # and teardown stages of a test. These hashes would be passed into # this method in order to find modules installed during the test # and delete them in order to return the SUT environments to their # initial state. # # TODO: Enhance to take versions into account, so that upgrade/ # downgrade events during a test does not persist in the SUT # environment. # # @param beginning_hash [Hash] paths for found modules indexed # by hostname. Taken in the setup stage of a test. # @param ending_hash [Hash] paths for found modules indexed # by hostname. Taken in the teardown stage of a test.
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl UNK on_lbracket on_int # Convert a semantic version number string to an integer. # # Example return value given an input of '1.2.42': # # 10242 # # @param semver [String] semantic version number
UNK on_op UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl UNK on_lbracket on_int on_rbracket on_period UNK on_op on_int on_op # semver assumed to be in format <major>.<minor>.<patch> # calculation assumes that each segment is < 100
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK on_lparen UNK on_rparen on_op UNK on_lparen UNK on_rparen on_nl end on_nl # Compare two given semantic version numbers. # # Returns an integer indicating the relationship between the two: # 0 indicates that both are equal # a value greater than 0 indicates that the semver1 is greater than semver2 # a value less than 0 indicates that the semver1 is less than semver2 #
def UNK on_lparen stdout on_comma UNK on_comma module_name on_comma UNK on_op nil on_comma UNK on_op nil on_rparen on_ignored_nl UNK on_op # Assert that a module was installed according to the UI.. # # This is a wrapper to centralize the validation about how # the UI responded that a module was installed. # It is called after a call # to `on ( host )` and inspects # STDOUT for specific content. # # @param stdout [String] # @param module_author [String] the author portion of a module name # @param module_name [String] the name portion of a module name # @param module_verion [String] the version of the module to compare to # installed version # @param compare_op [String] the operator for comparing the verions of # the installed module
def UNK on_lparen host on_comma module_name on_comma moduledir on_op nil on_rparen on_ignored_nl moduledir on_op UNK on_lparen host on_rparen on_nl UNK # Assert that a module is installed on disk. # # @param host [HOST] the host object to make the remote call on # @param module_name [String] the name portion of a module name # @param optional moduledir [String, Array] the path where the module should be, will # iterate over components of the modulepath by default.
if on on_lparen host on_comma on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_content on_embexpr_beg module_name on_embexpr_end on_tstring_content on_tstring_end on_comma on_symbeg UNK on_op # module directory should exist
on host on_comma on_tstring_beg on_tstring_content on_embexpr_beg moduledir on_embexpr_end on_tstring_content on_embexpr_beg module_name on_embexpr_end on_tstring_content on_tstring_end do on_ignored_nl listings on_op stdout on_period # A module's files should have: # * a mode of 644 (755, if they're a directory) # * owner == owner of moduledir # * group == group of moduledir
def UNK on_lparen host on_comma module_name on_comma moduledir on_op nil on_rparen on_ignored_nl moduledir on_op UNK on_lparen host on_rparen on_nl UNK # Assert that a module is not installed on disk. # # @param host [HOST] the host object to make the remote call on # @param module_name [String] the name portion of a module name # @param optional moduledir [String, Array] the path where the module should be, will # iterate over components of the modulepath by default.
on host on_comma on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_content on_embexpr_beg module_name on_embexpr_end on_tstring_content on_tstring_end on_nl end on_nl end on_nl on_ignored_nl # module directory should not exist
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op on_tstring_beg on_embexpr_beg UNK on_embexpr_end on_tstring_content on_tstring_end on_nl UNK on_op on_tstring_beg on_embexpr_beg UNK # Create a simple directory environment and puppet.conf at :tmpdir. # # @note Also registers a teardown block to remove generated files. # # @param tmpdir [String] directory to contain all the # generated environment files # @return [String] path to the new puppet configuration file defining the # environments
