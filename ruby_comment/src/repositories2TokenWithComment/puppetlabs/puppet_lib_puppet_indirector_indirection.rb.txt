UNK on_const on_op on_const on_op on_const on_nl UNK on_const on_op on_const on_op on_const on_nl on_ignored_nl UNK on_symbeg name on_comma on_symbeg # The class that connects functional classes with their different collection # back-ends. Each indirection has a set of associated terminus classes, # each of which is a subclass of Puppet::Indirector::Terminus.
def self on_period instance on_lparen name on_rparen on_ignored_nl on_cvar on_period find on_lbrace on_op i on_op i on_period name on_op name # Find an indirection by name. This is provided so that Terminus classes # can specifically hook up with the indirections they are associated with.
def self on_period UNK on_nl on_cvar on_period UNK on_lbrace on_op i on_op i on_period name on_rbrace on_nl end on_nl on_ignored_nl # Return a list of all known indirections. Used to generate the # reference.
def self on_period UNK on_lparen name on_rparen on_ignored_nl UNK on_op on_cvar on_period find on_lbrace on_op i on_op i on_period name # Find an indirected model by name. This is provided so that Terminus classes # can specifically hook up with the indirections they are associated with.
def cache on_nl raise on_const on_op on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen unless cache_class on_nl terminus on_lparen cache_class # Create and return our cache terminus.
def cache? on_nl cache_class on_op UNK on_op UNK on_nl end on_nl on_ignored_nl def cache_class on_nl on_ivar on_period value on_nl end # Should we use a cache?
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_lparen UNK on_rparen if UNK on_nl on_ivar on_period value on_op UNK on_nl end # Define a terminus class to be used for caching.
def UNK on_nl on_cvar on_period UNK on_lparen self on_rparen if on_cvar on_period UNK on_lparen self on_rparen on_nl end on_nl on_ignored_nl # This is only used for testing.
def UNK on_lparen value on_rparen on_ignored_nl raise on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen unless value on_period UNK on_lparen # Set the time-to-live for instances created through this indirection.
raise on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen unless value on_period UNK on_lparen on_const on_rparen on_nl on_ivar on_op value #TRANSLATORS "TTL" stands for "time to live" and refers to a duration of time
def UNK on_nl on_ivar on_op on_const UNK on_symbeg UNK UNK on_nl end on_nl on_ignored_nl def expiration on_nl on_const on_period UNK # Default to the runinterval for the ttl.
def expiration on_nl on_const on_period UNK on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op on_tstring_beg on_tstring_end on_nl # Calculate the expiration date for a returned instance.
def UNK on_nl UNK on_op on_tstring_beg on_tstring_end on_nl on_ignored_nl UNK on_op UNK on_lparen on_ivar on_rparen on_op on_tstring_beg on_tstring_content on_tstring_end if # Generate the full doc string.
UNK on_lparen on_symbeg cache_class on_comma cache_class on_rparen on_nl UNK on_lparen on_symbeg terminus_class on_comma terminus_class on_rparen on_nl UNK on_lparen on_symbeg terminus_setting # Setting these depend on the indirection already being installed so they have to be at the end
def UNK on_lparen setting on_comma value on_rparen on_ignored_nl UNK setting on_nl UNK on_symbeg cache_class on_nl UNK on_lparen value on_rparen if # Use this to set indirector settings globally across threads.
def request on_lparen on_op UNK on_rparen on_ignored_nl on_const on_op on_const on_op on_const on_period UNK on_lparen self on_period name on_comma on_op # Set up our request object.
def terminus on_lparen terminus_name on_op nil on_rparen on_ignored_nl raise on_const on_op on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op # Return the singleton terminus for this indirection.
raise on_const on_op on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label self on_period name on_rbrace unless terminus_name # Get the name of the terminus.
def terminus_setting on_nl on_ivar on_period value on_nl end on_nl on_ignored_nl def UNK on_lparen setting on_rparen on_ignored_nl on_ivar on_period value on_op # These can be used to select the terminus class.
def terminus_class on_nl unless on_ivar on_period value on_nl setting on_op self on_period terminus_setting on_nl if setting on_nl self on_period terminus_class # Determine the terminus class.
def UNK on_lparen klass on_rparen on_ignored_nl UNK on_lparen klass on_rparen on_nl on_ivar on_period value on_op klass on_nl end on_nl on_ignored_nl # Specify the terminus class to use.
def UNK on_lparen terminus_class on_rparen on_ignored_nl unless terminus_class UNK terminus_class on_period UNK on_op on_tstring_beg on_tstring_end on_nl raise on_const on_comma _ # This is used by terminus_class= and cache=.
def UNK on_lparen key on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl request on_op request on_lparen on_symbeg UNK on_comma key on_comma # Expire a cached object, if one is cached. Note that we don't actually # remove it, we expire it and write it back out to disk. This way people # can still use the expired object if they want.
instance on_period expiration on_op on_const on_period UNK on_op UNK on_nl on_ignored_nl cache on_period save on_lparen request on_lparen on_symbeg save on_comma # Set an expiration date in the past
def find on_lparen key on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl request on_op request on_lparen on_symbeg find on_comma key on_comma # Search for an instance in the appropriate terminus, caching the # results if caching is configured..
result on_op terminus on_period find on_lparen request on_rparen on_nl if UNK result on_period UNK on_nl result on_period expiration on_op self # Otherwise, return the result from the terminus, caching if # appropriate.
def UNK on_lparen key on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl request on_op request on_lparen on_symbeg UNK on_comma key on_comma # Search for an instance in the appropriate terminus, and return a # boolean indicating whether the instance was found.
on_op on_op on_lparen UNK on_lparen request on_rparen on_op terminus on_period UNK on_lparen request on_rparen on_rparen on_nl end on_nl on_ignored_nl def # Look in the cache first, then in the terminus. Force the result # to be a boolean.
UNK on_op cache on_period find on_lparen request on_rparen if cache? on_op on_op request on_period UNK on_nl return nil unless UNK # See if our instance is in the cache and up to date.
def UNK on_lparen key on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl request on_op request on_lparen on_symbeg UNK on_comma key on_comma # Remove something via the terminus.
cache on_period UNK on_lparen request on_rparen on_nl end on_nl on_ignored_nl result on_nl end on_nl on_ignored_nl def UNK on_lparen key on_comma # Reuse the existing request, since it's equivalent.
def UNK on_lparen key on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl request on_op request on_lparen on_symbeg UNK on_comma key on_comma # Search for more than one instance. Should always return an array.
def save on_lparen instance on_comma key on_op nil on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl request on_op request on_lparen on_symbeg # Save the instance in the appropriate terminus. This method is # normally an instance method on the indirected class.
cache on_period save on_lparen request on_rparen if cache? on_op on_op request on_period UNK on_nl on_ignored_nl result on_nl end on_nl on_ignored_nl # If caching is enabled, save our document there
def UNK on_lparen request on_comma terminus on_rparen on_ignored_nl return unless request on_period UNK on_nl on_ignored_nl return unless terminus on_period UNK # Check authorization if there's a hook available; fail if there is one # and it returns false.
return unless request on_period UNK on_nl on_ignored_nl return unless terminus on_period UNK on_lparen on_symbeg UNK on_rparen on_nl on_ignored_nl unless terminus # At this point, we're assuming authorization makes no sense without # client information.
return unless terminus on_period UNK on_lparen on_symbeg UNK on_rparen on_nl on_ignored_nl unless terminus on_period UNK on_lparen request on_rparen on_nl UNK # This is only to authorize via a terminus-specific authorization hook.
def prepare on_lparen request on_rparen on_ignored_nl terminus_name on_op terminus_class on_nl on_ignored_nl UNK on_op terminus on_lparen terminus_name on_rparen on_nl UNK on_lparen # Pick the appropriate terminus, check the request's authorization, and return it. # @param [Puppet::Indirector::Request] request instance # @return [Puppet::Indirector::Terminus] terminus instance (usually a subclass # of Puppet::Indirector::Terminus) for this request
terminus_name on_op terminus_class on_nl on_ignored_nl UNK on_op terminus on_lparen terminus_name on_rparen on_nl UNK on_lparen request on_comma UNK on_rparen on_nl UNK # Pick our terminus.
def UNK on_lparen terminus_class on_rparen on_ignored_nl klass on_op on_const on_op on_const on_op on_const on_period terminus_class on_lparen self on_period name on_comma # Create a new terminus instance.
klass on_op on_const on_op on_const on_op on_const on_period terminus_class on_lparen self on_period name on_comma terminus_class on_rparen on_nl unless klass on_nl # Load our terminus class.
