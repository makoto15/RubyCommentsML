on_ignored_nl describe on_const on_op on_const on_comma on_symbeg if on_op on_op on_const on_op on_const on_op on_const on_period UNK do on_ignored_nl let # The Ruby::Etc module is largely non-functional on Windows - many methods # simply return nil regardless of input, the Etc::Group struct is not defined, # and Etc::Passwd is missing fields # We want to test that: # - We correctly set external encoding values IF they're valid UTF-8 bytes # - We do not modify non-UTF-8 values if they're NOT valid UTF-8 bytes
let on_lparen on_symbeg euc_kr on_rparen on_lbrace on_lbracket on_int on_comma on_int on_rbracket on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period force_encoding # http://www.fileformat.info/info/unicode/char/5e0c/index.htm # 希 Han Character 'rare; hope, expect, strive for' # In EUC_KR: \xfd \xf1 - 253 241 # In UTF-8: \u5e0c - \xe5 \xb8 \x8c - 229 184 140
let on_lparen on_symbeg euc_kr_as_binary on_rparen on_lbrace on_lbracket on_int on_comma on_int on_rbracket on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_rbrace let # valid_encoding? == true
let on_lparen on_symbeg euc_kr_as_utf_8 on_rparen on_lbrace on_lbracket on_int on_comma on_int on_rbracket on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period force_encoding # valid_encoding? == true
on_ignored_nl let on_lparen on_symbeg mixed_utf_8 on_rparen on_lbrace on_tstring_beg on_tstring_content on_tstring_end on_period force_encoding on_lparen on_const on_op on_const on_rparen on_rbrace let on_lparen # valid_encoding? == false
let on_lparen on_symbeg mixed_utf_8 on_rparen on_lbrace on_tstring_beg on_tstring_content on_tstring_end on_period force_encoding on_lparen on_const on_op on_const on_rparen on_rbrace let on_lparen on_symbeg # characters representing different UTF-8 widths # 1-byte A # 2-byte ۿ - http://www.fileformat.info/info/unicode/char/06ff/index.htm - 0xDB 0xBF / 219 191 # 3-byte ᚠ - http://www.fileformat.info/info/unicode/char/16A0/index.htm - 0xE1 0x9A 0xA0 / 225 154 160 # 4-byte 𠜎 - http://www.fileformat.info/info/unicode/char/2070E/index.htm - 0xF0 0xA0 0x9C 0x8E / 240 160 156 142
let on_lparen on_symbeg UNK on_rparen on_lbrace on_tstring_beg on_tstring_content on_tstring_end on_period force_encoding on_lparen on_const on_op on_const on_rparen on_rbrace on_nl let on_lparen # Aۿᚠ𠜎
let on_lparen on_symbeg root on_rparen on_lbrace on_tstring_beg on_tstring_content on_tstring_end on_rbrace on_nl on_ignored_nl on_ignored_nl let on_lparen on_symbeg UNK on_rparen do on_ignored_nl # An uninteresting value that ruby might return in an Etc struct.
on_ignored_nl let on_lparen on_symbeg UNK on_rparen do on_ignored_nl group on_op on_const on_op on_const on_period new on_nl on_ignored_nl group on_period mem # Set up example Etc Group structs with values representative of what we would # get back in these encodings
on_ignored_nl group on_period mem on_op on_lbracket mixed_utf_8 on_comma root on_period UNK on_period force_encoding on_lparen on_const on_op on_const on_rparen on_comma euc_kr_as_utf_8 # In a UTF-8 environment, these values will come back as UTF-8, even if # they're not valid UTF-8. We do not modify anything about either the # valid or invalid UTF-8 strings.
group on_period mem on_op on_lbracket mixed_utf_8 on_comma root on_period UNK on_period force_encoding on_lparen on_const on_op on_const on_rparen on_comma euc_kr_as_utf_8 on_rbracket # Group member contains a mix of valid and invalid UTF-8-labeled strings
group on_period name on_op euc_kr_as_utf_8 on_nl group on_period passwd on_op mixed_utf_8 on_nl group on_period UNK on_op on_int on_nl group on_nl # group name contains same EUC_KR bytes labeled as UTF-8
group on_period passwd on_op mixed_utf_8 on_nl group on_period UNK on_op on_int on_nl group on_nl end on_nl on_ignored_nl let on_lparen on_symbeg # group passwd field is valid UTF-8
group on_op on_const on_op on_const on_period new on_nl group on_period mem on_op on_lbracket euc_kr on_comma root on_period UNK on_period force_encoding # In an EUC_KR environment, values will come back as EUC_KR, even if they're # not valid in that encoding. For values that are valid in UTF-8 we expect # their external encoding to be set to UTF-8 by Puppet::Etc. For values that # are invalid in UTF-8, we expect the string to be kept intact, unmodified, # as we can't transcode it.
group on_op on_const on_op on_const on_period new on_nl group on_period mem on_op on_lbracket euc_kr_as_binary on_comma root on_period UNK on_period force_encoding # In a POSIX environment, any strings containing only values under # code-point 128 will be returned as ASCII, whereas anything above that # point will be returned as BINARY. In either case we override the encoding # to UTF-8 if that would be valid.
user on_period name on_op euc_kr_as_utf_8 on_nl user on_period passwd on_op mixed_utf_8 on_nl user on_period UNK on_op on_int on_nl user on_nl # user name contains same EUC_KR bytes labeled as UTF-8
user on_period passwd on_op mixed_utf_8 on_nl user on_period UNK on_op on_int on_nl user on_nl end on_nl on_ignored_nl let on_lparen on_symbeg # group passwd field is valid UTF-8
expect on_lparen group on_period members on_period UNK on_lbrace on_op UNK on_op UNK on_period UNK on_lparen UNK on_tstring_content UNK on_rparen on_rbrace # Confirm we haven't just added the new members to the original struct object, ie this is really a new struct
UNK on_period each_pair do on_op member on_comma value on_op on_ignored_nl expect on_lparen overridden on_lbracket on_tstring_beg on_tstring_content on_embexpr_beg member on_embexpr_end on_tstring_end # Confirm we've actually copied all the values to the canonical_members
if on_op value on_period is_a? on_lparen on_const on_rparen on_op on_op value on_period is_a? on_lparen on_const on_rparen on_nl expect on_lparen overridden # Confirm we've reassigned all non-string and array values
UNK on_period each_pair do on_op member on_comma value on_op on_ignored_nl expect on_lparen overridden on_lbracket on_tstring_beg on_tstring_content on_embexpr_beg member on_embexpr_end on_tstring_end # Confirm we've actually copied all the values to the canonical_members
if on_op value on_period is_a? on_lparen on_const on_rparen on_op on_op value on_period is_a? on_lparen on_const on_rparen on_nl expect on_lparen overridden # Confirm we've reassigned all non-string and array values
ascii_group_struct on_period each_pair do on_op member on_comma value on_op on_ignored_nl expect on_lparen overridden on_lbracket on_tstring_beg on_tstring_content on_embexpr_beg member on_embexpr_end on_tstring_end # Confirm we've actually copied all the values to the canonical_members
if on_op value on_period is_a? on_lparen on_const on_rparen on_op on_op value on_period is_a? on_lparen on_const on_rparen on_nl expect on_lparen overridden # Confirm we've reassigned all non-string and array values
expect on_lparen user on_period members on_period UNK on_lbrace on_op UNK on_op UNK on_period UNK on_lparen UNK on_tstring_content UNK on_rparen on_rbrace # Confirm we haven't just added the new members to the original struct object, ie this is really a new struct
UNK on_period each_pair do on_op member on_comma value on_op on_ignored_nl expect on_lparen overridden on_lbracket on_tstring_beg on_tstring_content on_embexpr_beg member on_embexpr_end on_tstring_end # Confirm we've actually copied all the values to the canonical_members
if on_op value on_period is_a? on_lparen on_const on_rparen on_op on_op value on_period is_a? on_lparen on_const on_rparen on_nl expect on_lparen overridden # Confirm we've reassigned all non-string and array values
UNK on_period each_pair do on_op member on_comma value on_op on_ignored_nl expect on_lparen overridden on_lbracket on_tstring_beg on_tstring_content on_embexpr_beg member on_embexpr_end on_tstring_end # Confirm we've actually copied all the values to the canonical_members
if on_op value on_period is_a? on_lparen on_const on_rparen on_op on_op value on_period is_a? on_lparen on_const on_rparen on_nl expect on_lparen overridden # Confirm we've reassigned all non-string and array values
UNK on_period each_pair do on_op member on_comma value on_op on_ignored_nl expect on_lparen overridden on_lbracket on_tstring_beg on_tstring_content on_embexpr_beg member on_embexpr_end on_tstring_end # Confirm we've actually copied all the values to the canonical_members
if on_op value on_period is_a? on_lparen on_const on_rparen on_op on_op value on_period is_a? on_lparen on_const on_rparen on_nl expect on_lparen overridden # Confirm we've reassigned all non-string and array values
