UNK on_const on_op on_const on_op on_const on_nl UNK UNK on_lparen path on_rparen on_ignored_nl on_const on_op on_const on_period UNK on_lparen path # Methods for managing PEM encoded files. While PEM encoded strings are # always ASCII, the files may contain user specified comments, so they are # UTF-8 encoded. # # @api private
UNK UNK on_lparen path on_rparen on_ignored_nl on_const on_op on_const on_period UNK on_lparen path on_comma UNK UNK UNK UNK on_rparen on_nl # Load a pem encoded object. # # @param path [String] file path # @return [String, nil] The PEM encoded object or nil if the # path does not exist # @raise [Errno::EACCES] if permission is denied # @api private
UNK UNK on_lparen UNK on_comma path on_comma UNK UNK on_comma UNK UNK on_comma UNK UNK on_rparen on_ignored_nl on_const on_op on_const # Save pem encoded content to a file. If the file doesn't exist, it # will be created. Otherwise, the file will be overwritten. In both # cases the contents will be overwritten atomically so other # processes don't see a partially written file. # # @param pem [String] The PEM encoded object to write # @param path [String] The file path to write to # @raise [Errno::EACCES] if permission is denied # @raise [Errno::EPERM] if the operation cannot be completed # @api private
UNK UNK on_lparen path on_rparen on_ignored_nl on_const on_op on_const on_period UNK on_lparen path on_rparen on_nl UNK on_nl UNK on_const on_op # Delete a pem encoded object, if it exists. # # @param path [String] The file path to delete # @return [Boolean] Returns true if the file was deleted, false otherwise # @raise [Errno::EACCES] if permission is denied # @api private
