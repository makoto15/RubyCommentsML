let on_lparen on_symbeg UNK on_rparen on_lbrace on_tstring_beg on_tstring_content on_tstring_end on_rbrace on_ignored_nl def UNK on_lparen content on_rparen on_ignored_nl path on_op tmpfile # different UTF-8 widths # 1-byte A # 2-byte ۿ - http://www.fileformat.info/info/unicode/char/06ff/index.htm - 0xDB 0xBF / 219 191 # 3-byte ᚠ - http://www.fileformat.info/info/unicode/char/16A0/index.htm - 0xE1 0x9A 0xA0 / 225 154 160 # 4-byte 𠜎 - http://www.fileformat.info/info/unicode/char/2070E/index.htm - 0xF0 0xA0 0x9C 0x8E / 240 160 156 142
on_ignored_nl def UNK on_lparen content on_rparen on_ignored_nl path on_op tmpfile on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl file on_op on_const on_period # Aۿᚠ𠜎
on_lparen UNK on_op on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_ignored_nl on_lparen # default Windows mode based on temp file storage for SYSTEM user or regular user # for Jenkins or other services running as SYSTEM writing to c:\windows\temp # the permissions will typically be SYSTEM(F) / Administrators(F) which is 770 # but sometimes there are extra users like IIS_IUSRS granted rights which adds the "extra ace" 2 # for local Administrators writing to their own temp folders under c:\users\USER # they will have (F) for themselves, and Users will not have a permission, hence 700
on_lparen on_int on_op on_int on_op on_op on_const on_period UNK on_rparen on_period to_s on_lparen on_int on_rparen on_nl expect on_lparen on_lbracket UNK # or for *nix determine expected mode via bitwise AND complement of umask
expect on_lparen on_const on_op on_const on_period stat on_lparen file on_rparen on_period mode on_rparen on_period to eq on_lparen on_const on_op on_const # which matches the behavior of File.open
on_const on_op on_const on_period UNK on_lparen file on_comma on_int on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_lbrace on_op fh on_op fh on_period # NOTE: 777 here returns 755, but due to Ruby?
UNK on_op on_const on_op on_const on_op on_const on_period windows? on_op on_ignored_nl on_lparen UNK on_op on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg # Behavior may change in the future on Windows, to *actually* change perms # but for now, setting a mode doesn't touch them
on_tstring_beg on_tstring_content on_tstring_end on_op on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl expect on_lparen on_const on_period stat on_lparen file on_rparen on_period mode # The Windows behavior has been changed to ignore the mode specified by open # given it's unlikely a caller expects Windows file attributes to be set # therefore mode is explicitly not managed (until PUP-6959 is fixed) # # In default Ruby on Windows a mode controls file attribute setting # (like archive, read-only, etc) # The GetFileInformationByHandle API returns an attributes value that is # a bitmask of Windows File Attribute Constants at # https://msdn.microsoft.com/en-us/library/windows/desktop/gg258117(v=vs.85).aspx
on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl expect on_lparen on_const on_period stat on_lparen file on_rparen on_period mode on_period to_s on_lparen on_int on_rparen # On other platforms, the mode should be what was set by octal 0444
on_const on_period default_external on_op on_const on_op on_const on_nl on_ignored_nl file on_op tmpfile on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ignored_nl on_const # this must be set through Ruby API and cannot be mocked - it sets internal state used by File.open # pick a bizarre encoding unlikely to be used in any real tests
on_const on_op on_const on_period UNK on_lparen file on_comma on_int on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen do on_op fh on_op on_ignored_nl expect # test writing a UTF-8 string when Default external encoding is something different
expect on_lparen fh on_period UNK on_rparen on_period to UNK on_nl fh on_period write on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl # note Ruby behavior which has no external_encoding, but implicitly uses Encoding.default_external
fh on_period write on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl written on_op on_const on_op on_const on_period read on_lparen file on_rparen # write a UTF-8 string to this file
written on_op on_const on_op on_const on_period read on_lparen file on_rparen on_nl expect on_lparen written on_period encoding on_rparen on_period to eq # prove that Ruby implicitly converts read strings back to Encoding.default_external # and that it did that in the previous write
on_const on_period default_external on_op UNK on_nl end on_nl end on_nl end on_nl on_ignored_nl context on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl it # carefully roll back to the previous
on_const on_period default_external on_op on_const on_op on_const on_nl on_ignored_nl file on_op tmpfile on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ignored_nl on_const # this must be set through Ruby API and cannot be mocked - it sets internal state used by File.open # pick a bizarre encoding unlikely to be used in any real tests
on_const on_op on_const on_period UNK on_lparen file on_comma on_int on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen do on_op fh on_op on_ignored_nl expect # test writing a UTF-8 string when Default external encoding is something different
expect on_lparen fh on_period UNK on_rparen on_period to UNK on_nl fh on_period write on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl # note Ruby behavior which has no external_encoding, but implicitly uses Encoding.default_external
fh on_period write on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl written on_op on_const on_op on_const on_period read on_lparen file on_rparen # write a UTF-8 string to this file
written on_op on_const on_op on_const on_period read on_lparen file on_rparen on_nl expect on_lparen written on_period encoding on_rparen on_period to eq # prove that Ruby implicitly converts read strings back to Encoding.default_external # and that it did that in the previous write
on_const on_period default_external on_op UNK on_nl end on_nl end on_nl on_ignored_nl it on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_label on_const on_op # carefully roll back to the previous
let on_lparen on_symbeg UNK on_rparen on_lbrace on_tstring_beg on_tstring_content on_tstring_end on_rbrace on_ignored_nl it on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl temp_file on_op UNK # First line of Rune version of Rune poem at http://www.columbia.edu/~fdc/utf8/ # characters chosen since they will not parse on Windows with codepage 437 or 1252 # Section 3.2.1.3 of Ruby spec guarantees that \u strings are encoded as UTF-8
on_ignored_nl it on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl temp_file on_op UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma UNK on_rparen on_nl on_ignored_nl contents # 'ᚠᛇᚻ'
symlink on_op tmpfile on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_op on_const on_period symlink on_lparen file on_comma symlink on_rparen on_nl # point symlink -> file
symlink2 on_op tmpfile on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_op on_const on_period symlink on_lparen symlink on_comma symlink2 on_rparen on_nl # point symlink2 -> symlink
symlink3 on_op tmpfile on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_op on_const on_period symlink on_lparen symlink2 on_comma symlink3 on_rparen on_nl # point symlink3 -> symlink2
on_op on_const on_period UNK on_lparen file on_rparen on_nl on_ignored_nl on_const on_op on_const on_period unlink on_lparen symlink on_rparen on_nl on_ignored_nl on_const # yank file, temporarily dangle
on_const on_op on_const on_period unlink on_lparen symlink on_rparen on_nl on_ignored_nl on_const on_op on_const on_period symlink on_lparen symlink3 on_comma symlink on_rparen # and trash it so that we can recreate it OK on windows
on_const on_op on_const on_period symlink on_lparen symlink3 on_comma symlink on_rparen on_nl on_ignored_nl expect on_lparen on_const on_op on_const on_period exist? on_lparen # point symlink -> symlink3 to create a cycle
symlink on_op tmpfile on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_op on_const on_period symlink on_lparen file on_comma symlink on_rparen on_nl # point symlink -> file
symlink2 on_op tmpfile on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_op on_const on_period symlink on_lparen symlink on_comma symlink2 on_rparen on_nl # point symlink2 -> symlink
symlink3 on_op tmpfile on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_op on_const on_period symlink on_lparen symlink2 on_comma symlink3 on_rparen on_nl # point symlink3 -> symlink2
symlink on_op tmpfile on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_op on_const on_period symlink on_lparen file on_comma symlink on_rparen on_nl # point symlink -> file
symlink2 on_op tmpfile on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_op on_const on_period symlink on_lparen symlink on_comma symlink2 on_rparen on_nl # point symlink2 -> symlink
symlink3 on_op tmpfile on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_op on_const on_period symlink on_lparen symlink2 on_comma symlink3 on_rparen on_nl # point symlink3 -> symlink2
on_op on_const on_period UNK on_lparen file on_rparen on_nl on_ignored_nl expect on_lparen on_const on_op on_const on_period exist? on_lparen symlink3 on_rparen on_rparen # yank file, and make symlink dangle
expect on_lparen on_const on_op on_const on_period exist? on_lparen symlink3 on_rparen on_rparen on_period to be_falsey on_nl end on_nl on_ignored_nl it on_tstring_beg # symlink3 is now indirectly dangled
expect on_lparen on_const on_op on_const on_period symlink on_lparen target on_comma symlink on_rparen on_rparen on_period to eq on_lparen on_int on_rparen on_nl # now try to point it at the new target, no error raised, but file system unchanged
on_const on_op on_const on_period symlink on_lparen UNK on_comma symlink on_rparen on_nl on_ignored_nl on_lbracket file on_comma dir on_rbracket on_period each do # symlink -> file_2
on_const on_op on_const on_period unlink on_lparen symlink on_rparen on_nl end on_nl on_ignored_nl it on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl symlink on_op # on Windows, this won't get cleaned up if still linked
symlink on_op tmpfile on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_op on_const on_period symlink on_lparen file on_comma symlink on_rparen on_nl # point symlink -> file
symlink2 on_op tmpfile on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_op on_const on_period symlink on_lparen symlink on_comma symlink2 on_rparen on_nl # point symlink2 -> symlink
symlink on_op tmpfile on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_op on_const on_period symlink on_lparen file on_comma symlink on_rparen on_nl # point symlink -> file
symlink2 on_op tmpfile on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_op on_const on_period symlink on_lparen symlink on_comma symlink2 on_rparen on_nl # point symlink2 -> symlink
on_ignored_nl expect on_lparen on_const on_op on_const on_period exist? on_lparen target on_rparen on_rparen on_period to be_truthy on_nl expect on_lparen on_const on_op # count of files
on_ignored_nl expect on_lparen on_const on_op on_const on_period exist? on_lparen target on_rparen on_rparen on_period to be_truthy on_nl expect on_lparen on_const on_op # count of files
on_ignored_nl expect on_lparen on_const on_op on_const on_period exist? on_lparen file on_rparen on_rparen on_period to be_falsey on_nl end on_nl on_ignored_nl it # count of files
on_ignored_nl expect on_lparen on_const on_op on_const on_period exist? on_lparen file on_rparen on_rparen on_period to be_falsey on_nl end on_nl on_ignored_nl it # count of files
on_ignored_nl UNK on_period each on_lbrace on_op UNK on_op expect on_lparen on_const on_op on_const on_period exist? on_lparen UNK on_rparen on_rparen on_period # count of files
on_const on_op on_const on_rbracket on_rparen on_period to UNK on_lparen UNK on_period UNK on_rparen on_nl on_ignored_nl expect on_lparen on_const on_op on_const # Windows and OSX
on_rbracket on_rparen on_period to UNK on_lparen UNK on_period UNK on_rparen on_nl on_ignored_nl expect on_lparen on_const on_op on_const on_period exist? on_lparen # Linux
expect on_lbrace on_const on_op on_const on_period expand_path on_lparen nil on_rparen on_rbrace on_period to raise_error on_lparen on_const on_rparen on_nl end on_nl # match Ruby behavior
UNK on_op tmpfile on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma tmpdir on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_rparen on_nl on_const on_op on_const on_period # this exists specifically for Puppet::Pops::Loader::ModuleLoaders::FileBased#add_to_index # which should receive an expanded path value from it's parent Environment # and will later compare values generated by Dir.glob
path on_op tmpdir on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ignored_nl expect on_lparen on_const on_op on_const on_period expand_path on_lparen path on_rparen # on Windows this may be 8.3 style, but not so on other platforms # only done since expect(::File).to receive(:expand_path).with(path).at_least(:once) # cannot be used since it will cause a stack overflow
UNK on_op on_const on_op on_const on_period expand_path on_lparen UNK on_rparen on_nl expect on_lparen UNK on_rparen on_period to eq on_lparen on_const # regardless of slash direction, return value is drive letter
ruby_expanded on_op on_const on_period expand_path on_lparen UNK on_rparen on_nl expect on_lparen ruby_expanded on_rparen on_period to UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end # this will change c:\\file~1.ext to c:/file~1.ext (existing Ruby behavior), but not expand any ~
ruby_expanded on_op on_const on_period expand_path on_lparen UNK on_rparen on_nl expect on_lparen ruby_expanded on_rparen on_period to UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end # this will change c:\\progra~1 to c:/progra~1 (existing Ruby behavior), but not expand any ~
expect on_lparen UNK on_rparen on_period to UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end on_rparen on_nl on_ignored_nl ruby_expanded on_op on_const on_period expand_path on_lparen # a shortened path to the temp dir will have a least 2 ~ # for instance, C:\\Users\\Administrator\\AppData\\Local\\Temp\\rspecrun2016####-####-#######\\super-long-thing-that-Windows-shortens\ # or C:\\Windows\\Temp\\rspecrun2016####-####-#######\\super-long-thing-that-Windows-shortens\ # will shorten to Temp\\rspecr~#\\super-~1
ruby_expanded on_op on_const on_period expand_path on_lparen UNK on_rparen on_nl expect on_lparen ruby_expanded on_rparen on_period to UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end # expand with Ruby, noting not all ~ have been expanded # which is the primary reason that a Puppet helper exists
UNK on_op on_const on_op on_const on_period expand_path on_lparen UNK on_rparen on_nl expect on_lparen UNK on_rparen on_period UNK UNK on_lparen on_regexp_beg # Puppet expansion uses the Windows API and has no ~ remaining
expect on_lparen on_const on_period UNK on_lparen UNK on_comma UNK on_rparen on_rparen on_period to be_truthy on_nl end on_nl end on_nl end # and the directories are one and the same
