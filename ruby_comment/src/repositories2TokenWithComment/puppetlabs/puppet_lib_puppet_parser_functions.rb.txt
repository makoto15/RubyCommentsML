UNK on_const on_op on_const on_op on_const on_nl on_const on_op on_const on_op on_const on_op on_const on_nl on_ignored_nl UNK on_op self on_nl # A module for managing parser functions. Each specified function # is added to a central module that then gets included into the Scope # class. # # @api public
def self on_period UNK on_nl UNK on_op on_const on_period lookup on_lparen on_symbeg UNK on_rparen on_nl on_const on_period UNK on_lparen UNK # Reset the list of loaded functions. # # @api private
UNK on_op on_const on_period lookup on_lparen on_symbeg UNK on_rparen on_nl on_const on_period UNK on_lparen UNK on_rparen on_nl on_const on_op on_const # Runs a newfunction to create a function for each of the log levels
def self on_period UNK on_nl on_ivar on_op on_const on_period UNK on_nl end on_nl on_ignored_nl UNK on_const on_op on_const on_op on_const # Accessor for singleton autoloader # # @api private
UNK on_const on_op on_const on_op on_const on_op on_const on_op on_const on_nl UNK on_symbeg UNK on_nl end on_nl on_ignored_nl on_ivar on_op # An adapter that ties the anonymous module that acts as the container for all 3x functions to the environment # where the functions are created. This adapter ensures that the life-cycle of those functions doesn't exceed # the life-cycle of the environment. # # @api private
def self on_period environment_module on_lparen env on_rparen on_ignored_nl on_ivar on_period UNK do on_ignored_nl on_const on_period UNK on_lparen env on_rparen do # Get the module that functions are mixed into corresponding to an # environment # # @api private
def self on_period UNK on_lparen name on_comma options on_op on_lbrace on_rbrace on_comma on_op UNK on_rparen on_ignored_nl name on_op name on_period # Create a new Puppet DSL function. # # **The {newfunction} method provides a public API.** # # This method is used both internally inside of Puppet to define parser # functions. For example, template() is defined in # {file:lib/puppet/parser/functions/template.rb template.rb} using the # {newfunction} method. Third party Puppet modules such as # [stdlib](https://forge.puppetlabs.com/puppetlabs/stdlib) use this method to # extend the behavior and functionality of Puppet. # # See also [Docs: Custom # Functions](https://puppet.com/docs/puppet/5.5/lang_write_functions_in_puppet.html) # # @example Define a new Puppet DSL Function # >> Puppet::Parser::Functions.newfunction(:double, :arity => 1, # :doc => "Doubles an object, typically a number or string.", # :type => :rvalue) {|i| i[0]*2 } # => {:arity=>1, :type=>:rvalue, # :name=>"function_double", # :doc=>"Doubles an object, typically a number or string."} # # @example Invoke the double function from irb as is done in RSpec examples: # >> require 'puppet_spec/scope' # >> scope = PuppetSpec::Scope.create_test_scope_for_node('example') # => Scope() # >> scope.function_double([2]) # => 4 # >> scope.function_double([4]) # => 8 # >> scope.function_double([]) # ArgumentError: double(): Wrong number of arguments given (0 for 1) # >> scope.function_double([4,8]) # ArgumentError: double(): Wrong number of arguments given (2 for 1) # >> scope.function_double(["hello"]) # => "hellohello" # # @param [Symbol] name the name of the function represented as a ruby Symbol. # The {newfunction} method will define a Ruby method based on this name on # the parser scope instance. # # @param [Proc] block the block provided to the {newfunction} method will be # executed when the Puppet DSL function is evaluated during catalog # compilation. The arguments to the function will be passed as an array to # the first argument of the block. The return value of the block will be # the return value of the Puppet DSL function for `:rvalue` functions. # # @option options [:rvalue, :statement] :type (:statement) the type of function. # Either `:rvalue` for functions that return a value, or `:statement` for # functions that do not return a value. # # @option options [String] :doc ('') the documentation for the function. # This string will be extracted by documentation generation tools. # # @option options [Integer] :arity (-1) the # [arity](https://en.wikipedia.org/wiki/Arity) of the function. When # specified as a positive integer the function is expected to receive # _exactly_ the specified number of arguments. When specified as a # negative number, the function is expected to receive _at least_ the # absolute value of the specified number of arguments incremented by one. # For example, a function with an arity of `-4` is expected to receive at # minimum 3 arguments. A function with the default arity of `-1` accepts # zero or more arguments. A function with an arity of 2 must be provided # with exactly two arguments, no more and no less. Added in Puppet 3.1.0. # # @option options [Puppet::Node::Environment] :environment (nil) can # explicitly pass the environment we wanted the function added to. Only used # to set logging functions in root environment # # @return [Hash] describing the function. # # @api public
UNK on_op on_tstring_beg on_tstring_content on_embexpr_beg name on_embexpr_end on_tstring_end on_nl environment_module on_lparen environment on_rparen on_period UNK on_lparen on_symbeg UNK on_comma UNK # the block must be installed as a method because it may use "return", # which is not allowed from procs.
options on_lbracket on_symbeg UNK on_rbracket on_op on_symbeg UNK on_op UNK on_op UNK on_nl UNK on_ignored_nl UNK on_const on_comma _ on_lparen # avoid leaking aribtrary value if not being an rvalue function
def self on_period UNK on_lparen name on_comma environment on_op on_const on_period lookup on_lparen on_symbeg current_environment on_rparen on_rparen on_ignored_nl name on_op # Determine if a function is defined # # @param [Symbol] name the function # @param [Puppet::Node::Environment] environment the environment to find the function in # # @return [Symbol, false] The name of the function if it's defined, # otherwise false. # # @api public
def self on_period UNK on_lparen name on_comma environment on_op on_const on_period lookup on_lparen on_symbeg current_environment on_rparen on_rparen on_ignored_nl func on_op # Determine whether a given function returns a value. # # @param [Symbol] name the function # @param [Puppet::Node::Environment] environment The environment to find the function in # @return [Boolean] whether it is an rvalue function # # @api public
def self on_period arity on_lparen name on_comma environment on_op on_const on_period lookup on_lparen on_symbeg current_environment on_rparen on_rparen on_ignored_nl func on_op # Return the number of arguments a function expects. # # @param [Symbol] name the function # @param [Puppet::Node::Environment] environment The environment to find the function in # @return [Integer] The arity of the function. See {newfunction} for # the meaning of negative values. # # @api public
