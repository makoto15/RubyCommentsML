class on_const on_op on_const on_op on_const on_nl def UNK on_lparen type_set on_comma UNK on_rparen on_ignored_nl UNK on_lparen UNK on_comma on_tstring_beg # A Loader that makes the types known to the TypeSet visible # # @api private
def UNK on_lparen UNK on_comma UNK on_op nil on_comma name_authority on_op nil on_rparen on_ignored_nl on_ivar on_op on_const on_nl on_ivar on_op # Initialize a TypeSet Type instance. The initialization will use either a name and an initialization # hash expression, or a fully resolved initialization hash. # # @overload initialize(name, init_hash_expression) # Used when the TypeSet type is loaded using a type alias expression. When that happens, it is important that # the actual resolution of the expression is deferred until all definitions have been made known to the current # loader. The package will then be resolved when it is loaded by the {TypeParser}. "resolved" here, means that # the hash expression is fully resolved, and then passed to the {#_pcore_init_from_hash} method. # @param name [String] The name of the type set # @param init_hash_expression [Model::LiteralHash] The hash describing the TypeSet features # @param name_authority [String] The default name authority for the type set # # @overload initialize(init_hash) # Used when the package is created by the {TypeFactory}. The init_hash must be fully resolved. # @param init_hash [Hash{String=>Object}] The hash describing the TypeSet features # # @api private
on_ivar on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_const on_op on_const on_comma UNK on_rparen on_nl on_ivar on_op on_const # Creation using "type XXX = TypeSet[{}]". This means that the name is given
def UNK on_lparen init_hash on_rparen on_ignored_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_const on_comma init_hash on_rparen on_nl on_ignored_nl # @api private
on_ivar on_op init_hash on_lbracket on_const on_rbracket on_period freeze on_nl on_ivar on_op init_hash on_lbracket on_const on_rbracket on_period freeze on_nl on_ignored_nl on_ivar # Name given to the loader have higher precedence than a name declared in the type
on_ivar on_op on_lbrace on_rbrace on_nl on_ivar on_period UNK on_period each on_lbrace on_op key on_op on_ivar on_lbracket key on_period UNK on_rbracket # Map downcase names to their camel-cased equivalent
ref_name on_op ref on_period name on_nl UNK on_op ref on_period name_authority on_op on_ivar on_nl UNK on_op UNK on_lbracket UNK on_rbracket # Protect against importing the exact same name_authority/name combination twice if the version ranges intersect
def UNK on_nl result on_op UNK on_lparen on_rparen on_nl result on_lbracket on_const on_op on_const on_rbracket on_op on_ivar unless on_ivar on_period # Produce a hash suitable for the initializer # @return [Hash{String => Object}] the initialization hash # # @api private
def on_op on_lparen qname on_rparen on_ignored_nl if qname on_period is_a? on_lparen on_const on_op on_const on_rparen on_nl UNK nil unless qname # Resolve a type in this type set using a qualified name. The resolved type may either be a type defined in this type set # or a type defined in a type set that is referenced by this type set (nesting may occur to any level). # The name resolution is case insensitive. # # @param qname [String,Loader::TypedName] the qualified name of the type to resolve # @return [PAnyType,nil] the resolved type, or `nil` in case no type could be found # # @api public
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl key on_op on_ivar on_period key on_lparen UNK on_rparen on_nl if key on_period # Returns the name by which the given type is referenced from within this type set # @param t [PAnyType] # @return [String] the name by which the type is referenced within this type set # # @api private
def UNK on_nl on_tstring_beg on_tstring_content on_embexpr_beg on_ivar on_embexpr_end on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_lparen loader on_rparen on_ignored_nl # @api private
def UNK on_lparen loader on_rparen on_ignored_nl UNK on_nl on_ivar on_period UNK on_lbrace on_op ref on_op ref on_period UNK on_lparen loader # @api private
def UNK on_lparen loader on_comma UNK on_rparen on_ignored_nl result on_op on_lbrace on_rbrace on_nl UNK on_op on_const on_period UNK on_nl UNK # @api private
hash on_op on_lbrace on_rbrace on_nl UNK on_period value on_period entries on_period each do on_op UNK on_op on_ignored_nl UNK on_op UNK # Skip type parser interpretation and convert qualified references directly to String keys.
n on_op value on_period UNK on_nl name on_op n on_period UNK on_nl entries on_op on_lbracket on_rbracket on_nl unless name on_op # This is actually a <Parent> { <key-value entries> } notation. Convert to a literal hash that contains the parent
def UNK on_lparen loader on_comma init_hash on_rparen on_ignored_nl result on_op on_const on_lbracket init_hash on_period UNK do on_op key on_comma value # @api private
def UNK on_lparen o on_comma UNK on_rparen on_ignored_nl self on_period class on_op o on_period class on_op on_lparen self on_op on_const # @api_private
