on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_op on_const on_op on_const on_nl UNK # Module Puppet::IniConfig # A generic way to parse .ini style files and manipulate them in memory # One 'file' can be made up of several physical files. Changes to sections # on the file are tracked so that only the physical files in which # something has changed are written back to disk # Great care is taken to preserve comments and blank lines from the original # files # # The parsing tries to stay close to python's ConfigParser
UNK on_const on_nl UNK on_symbeg name on_comma on_symbeg file on_comma on_symbeg UNK on_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK # A section in a .ini file
def UNK on_nl on_ivar UNK on_ivar on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl # Does this section need to be updated in/removed from the associated file? # # @note This section is dirty if a key has been modified _or_ if the # section has been modified so the associated file can be rewritten # without this section.
def UNK on_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK # Should only be used internally
def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl end on_nl # Should the file be destroyed?
def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def on_op on_lparen key on_comma value on_rparen # Add a line of text (e.g., a comment) Such lines # will be written back out in exactly the same # place they were read in
def on_op on_lparen key on_comma value on_rparen on_ignored_nl entry on_op UNK on_lparen key on_rparen on_nl on_ivar on_op UNK on_nl if # Set the entry 'key=value'. If no entry with the # given key exists, one is appended to the end of the section
def on_op on_lparen key on_rparen on_ignored_nl entry on_op UNK on_lparen key on_rparen on_nl UNK on_lparen entry on_period nil? on_op nil # Return the value associated with KEY. If no such entry # exists, return nil
def UNK on_nl if on_ivar on_nl text on_op on_tstring_beg on_tstring_end on_nl else on_ignored_nl text on_op on_tstring_beg on_tstring_content UNK name UNK # Format the section as text in the way it should be # written to file
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl # @!attribute [r] filetype # @api private # @return [Puppet::Util::FileType::FileTypeFlat]
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen file on_comma # @!attribute [r] contents # @api private # @return [Array<String, Puppet::Util::IniConfig::Section>]
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen file on_comma UNK on_op on_lbrace on_rbrace on_rparen # @!attribute [rw] destroy_empty # Whether empty files should be removed if no sections are defined. # Defaults to false
UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen file on_comma UNK on_op on_lbrace on_rbrace on_rparen on_ignored_nl on_ivar on_op file on_nl # @!attribute [rw] file_collection # @return [Puppet::Util::IniConfig::FileCollection]
def UNK on_nl text on_op on_ivar on_period UNK on_nl if text on_period nil? on_nl UNK on_const on_comma UNK on_lparen on_tstring_beg # Read and parse the on-disk file associated with this object
def UNK on_lparen text on_rparen on_ignored_nl section on_op nil UNK on_op nil UNK on_op on_int on_nl on_ignored_nl text on_period UNK # @api private
UNK on_op nil UNK on_op on_int on_nl on_ignored_nl text on_period UNK do on_op l on_op on_ignored_nl UNK on_op on_int on_nl # The name of the current section
UNK on_op on_int on_nl on_ignored_nl text on_period UNK do on_op l on_op on_ignored_nl UNK on_op on_int on_nl if l on_period # The name of the last option in section
if section on_period nil? on_nl on_ivar on_op l on_nl else on_ignored_nl section on_period UNK on_lparen l on_rparen on_nl end on_nl # Whitespace or comment
section on_lbracket UNK on_rbracket on_op on_tstring_beg on_tstring_content UNK l on_period UNK UNK on_tstring_end on_nl UNK on_lparen match on_op l on_period # continuation line
section on_period UNK if section on_nl on_ignored_nl UNK on_op match on_lbracket on_int on_rbracket on_nl on_ignored_nl section on_op UNK on_lparen UNK # section heading
key on_op match on_lbracket on_int on_rbracket on_nl UNK on_op match on_lbracket on_int on_rbracket on_period UNK on_nl on_ignored_nl if section on_period # the regex strips leading white space from the value, and here we strip the trailing white space as well
def sections on_nl on_ivar on_period UNK on_lbrace on_op entry on_op entry on_period UNK on_const on_rbrace on_nl end on_nl on_ignored_nl def # @return [Array<Puppet::Util::IniConfig::Section>] All sections defined in # this file.
def get_section on_lparen name on_rparen on_ignored_nl on_ivar on_period UNK on_lbrace on_op entry on_op entry on_period UNK on_const UNK entry on_period # @return [Puppet::Util::IniConfig::Section, nil] The section with the # given name if it exists, else nil.
def UNK on_lparen name on_rparen on_ignored_nl if UNK on_lparen name on_rparen on_nl UNK on_const on_period new on_lparen UNK on_lparen on_tstring_beg # Create a new section and store it in the file contents # # @api private # @param name [String] The name of the section to create # @return [Puppet::Util::IniConfig::Section]
def UNK on_lparen file on_rparen on_ignored_nl UNK on_lparen file on_rparen on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar # Read and parse a file and store it in the collection. If the file has # already been read it will be destroyed and re-read.
def UNK on_lparen file on_rparen on_ignored_nl if on_ivar on_lbracket file on_rbracket on_nl on_ivar on_lbracket file on_rbracket on_nl else on_ignored_nl UNK # Return a file if it's already been defined, create a new file if it hasn't # been defined.
def UNK on_lparen file on_rparen on_ignored_nl on_ivar on_lbracket file on_rbracket on_op on_const on_period new on_lparen file on_rparen on_nl on_ivar on_lbracket # Create a new physical file and set required attributes on that file.
