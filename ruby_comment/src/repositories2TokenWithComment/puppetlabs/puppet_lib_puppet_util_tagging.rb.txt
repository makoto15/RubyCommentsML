def UNK on_lparen on_op UNK on_rparen on_ignored_nl on_ivar on_op new_tags on_nl on_ignored_nl UNK on_period UNK on_period UNK on_period UNK UNK # Add a tag to the current tag set. # When a tag set is used for a scope, these tags will be added to all of # the objects contained in this scope when the objects are finished. #
if on_ivar on_period UNK on_lparen name on_rparen on_nl if UNK on_lparen name on_rparen on_nl if UNK on_nl on_ivar on_period UNK # Add the tag before testing if it's valid since this means that # we never need to test the same valid tag twice. This speeds things # up since we get a lot of duplicates and rarely fail on bad tags
if UNK on_lparen name on_rparen on_nl if UNK on_nl on_ivar on_period UNK on_lparen name on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end # not seen before, so now we test if it is valid
on_ivar on_period UNK on_lparen name on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_rparen if name on_period UNK on_lparen on_tstring_beg on_tstring_content # avoid adding twice by first testing if the string contains '::'
def UNK on_lparen name on_rparen on_ignored_nl if name on_period UNK on_lparen on_const on_rparen on_op UNK on_lparen name on_rparen on_nl name # Add a name to the current tag set. Silently ignore names that does not # represent valid tags. # # Use this method instead of doing this: # # tag(name) if is_valid?(name) # # since that results in testing the same string twice #
def UNK on_lparen on_op tags on_rparen on_ignored_nl UNK on_lparen tags on_period UNK UNK on_op UNK on_op UNK on_period UNK on_period # Answers if this resource is tagged with at least one of the given tags. # # The given tags are converted to downcased strings before the match is performed. # # @param *tags [String] splat of tags to look for # @return [Boolean] true if this instance is tagged with at least one of the provided tags #
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_period tags on_nl on_op UNK on_period UNK UNK on_op UNK on_op # Answers if this resource is tagged with at least one of the tags given in downcased string form. # # The method is a faster variant of the tagged? method that does no conversion of its # arguments. # # @param tag_array [Array[String]] array of tags to look for # @return [Boolean] true if this instance is tagged with at least one of the provided tags #
def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op UNK on_period tags on_nl end on_nl on_ignored_nl def tags on_nl on_ivar on_op # Only use this method when copying known tags from one Tagging instance to another
def tags on_nl on_ivar on_op new_tags on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl # Return a copy of the tag list, so someone can't ask for our tags # and then modify them.
def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op new_tags on_nl UNK on_period UNK on_lparen on_ivar on_rparen on_nl end on_nl on_ignored_nl # Merge tags from a tagged instance with no attempts to split, downcase # or verify the tags
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK on_lparen on_ivar on_rparen UNK on_ivar on_period UNK on_nl end on_nl on_ignored_nl # Merge the tags of this instance into the provide TagSet
