configurer on_op on_const on_op on_const on_period new on_nl on_ignored_nl expect on_lparen on_const on_op on_const on_op on_const on_period indirection on_rparen on_period # Regenerate the agent to pick up the new setting
on_const on_op on_const on_op on_const on_period indirection on_period terminus_class on_op on_symbeg UNK on_nl on_ignored_nl expect on_lparen on_const on_op on_const on_op # This is weird, we collect facts when constructing the node, # but we don't send them in the indirector request. Then the compiler # looks up the node, and collects its facts, which we could have sent # in the first place. This seems like a bug.
UNK on_op on_const on_period new on_lparen on_const on_rparen do on_ignored_nl def UNK on_lparen on_op UNK on_rparen on_ignored_nl UNK on_tstring_beg on_tstring_content # The mock will raise an exception on any method used. This should # simulate a nice hard failure from the underlying OS for us.
stub_request on_lparen on_symbeg get on_comma on_regexp_beg on_tstring_content on_regexp_end on_rparen on_period to_return on_lparen on_symbeg status on_op on_int on_rparen on_nl stub_request on_lparen # after failing to use a cached catalog, we'll need to pluginsync before getting # a new catalog, which also fails.
expect on_lparen on_const on_op on_const on_op on_const on_period indirection on_rparen on_period to_not UNK on_nl expect on_lparen on_ivar on_rparen on_period to # make sure cache class is not set to avoid surprises later
on_const on_period settings on_period UNK on_lparen on_symbeg UNK on_comma on_symbeg UNK on_rparen on_nl path on_op on_const on_op on_const on_op on_const # update cached catalog
