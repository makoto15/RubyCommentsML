if request on_period options on_lbracket on_symbeg UNK on_rbracket on_nl return UNK unless on_op on_const on_period UNK on_lparen request on_period options # If filebucket mode is 'list'
on_const on_period UNK _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label checksum on_rbrace on_nl UNK on_period UNK on_lparen on_const #TRANSLATORS "FileBucket" should not be translated
UNK on_op on_const on_period UNK on_lbrace on_lbracket on_rbracket on_rbrace on_nl UNK on_op on_tstring_beg on_tstring_end on_nl on_const on_period UNK on_lparen request # Setting hash's default value to [], needed by the following loop
on_const on_period UNK on_lparen request on_period options on_lbracket on_symbeg bucket_path on_rbracket on_rparen on_period UNK on_lbrace on_op item on_op on_ignored_nl if # Get all files with mtime between 'from' and 'to'
UNK on_period UNK on_lbrace on_op UNK on_comma UNK on_op on_ignored_nl UNK on_period UNK do on_op item on_op on_ignored_nl item on_lbracket # Sort the results
item on_lbracket on_int on_rbracket on_nl end on_nl on_rbrace on_nl UNK on_period UNK on_period UNK on_lbrace on_op UNK on_comma UNK on_op # NOTE: Ruby 2.4 may reshuffle item order even if the keys in sequence are sorted already
UNK on_period UNK on_period UNK on_lbrace on_op UNK on_comma UNK on_op on_ignored_nl UNK on_period UNK on_lbrace on_op UNK on_comma UNK # Build the output message. Sorted by names then by dates
UNK on_period UNK on_lparen on_tstring_beg on_tstring_end on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen request on_rparen on_ignored_nl end on_nl on_ignored_nl # don't echo the request content back to the agent
end on_nl on_ignored_nl UNK on_nl on_ignored_nl def UNK on_lparen paths_file on_comma files_original_path on_rparen on_ignored_nl on_const on_op on_const on_period UNK on_lparen # There are no ACLs on filebucket files so validating key is not important
def UNK on_lparen paths_file on_comma files_original_path on_rparen on_ignored_nl on_const on_op on_const on_period UNK on_lparen paths_file on_comma on_int on_comma on_tstring_beg on_tstring_content # @param paths_file [Object] Opaque file path # @param files_original_path [String] #
on_const on_op on_const on_period UNK on_lparen paths_file on_comma on_int on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen do on_op f on_op on_ignored_nl UNK # Puppet will have already written the paths_file in the systems encoding # given its possible that request.options[:bucket_path] or Puppet[:bucketdir] # contained characters in an encoding that are not represented the # same way when the bytes are decoded as UTF-8, continue using system encoding
UNK on_period UNK on_nl UNK on_period UNK do on_op UNK on_op on_ignored_nl return UNK if UNK on_period UNK on_op files_original_path # if no path was provided, it's a match
def UNK on_lparen bucket_file on_comma files_original_path on_comma contents_file on_comma paths_file on_rparen on_ignored_nl on_const on_op on_const on_period UNK on_lparen on_int on_rparen # @param bucket_file [Puppet::FileBucket::File] IO object representing # content to back up # @param files_original_path [String] Path to original source file on disk # @param contents_file [Pathname] Opaque file path to intended backup # location # @param paths_file [Pathname] Opaque file path to file containing source # file paths on disk # @return [void] # @raise [Puppet::FileBucket::BucketError] on possible sum collision between # existing and new backup # @api private
on_const on_op on_const on_period UNK on_lparen paths_file on_comma on_int on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen do on_op f on_op on_ignored_nl if # Puppet will have already written the paths_file in the systems encoding # given its possible that request.options[:bucket_path] or Puppet[:bucketdir] # contained characters in an encoding that are not represented the # same way when the bytes are decoded as UTF-8, continue using system encoding
on_const on_period UNK _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label bucket_file on_period checksum on_rbrace on_nl if on_op on_const #TRANSLATORS "FileBucket" should not be translated
if on_op on_const on_op on_const on_op on_const on_period UNK on_nl on_const on_op on_const on_period UNK on_lparen contents_file on_rparen on_nl end # Don't touch the contents file on Windows, since we can't update the # mtime of read-only files there.
on_const on_period UNK on_lparen _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label contents_file on_period UNK on_rbrace on_rparen on_nl raise # If the contents or sizes don't match, but the checksum does, # then we've found a conflict (potential hash collision). # Unlikely, but quite bad. Don't remove the file in case it's # needed, but ask the user to validate. # Note: Don't print the full path to the bucket file in the # exception to avoid disclosing file system layout on server. #TRANSLATORS "FileBucket" should not be translated
on_const on_period UNK on_lparen _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label bucket_file on_period checksum on_rbrace on_rparen on_nl UNK # PUP-1334 If the contents_file exists but does not match its # checksum, our backup has been corrupted. Warn about overwriting # it, and proceed with new backup.
UNK on_op UNK on_nl end on_nl raise on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label checksum_type on_period # Treat "md5/<checksum>/" like "md5/<checksum>"
def path_for on_lparen bucket_path on_comma UNK on_comma UNK on_op UNK on_rparen on_ignored_nl bucket_path on_op on_const on_lbracket on_symbeg UNK on_rbracket on_nl # @return [Object] Opaque path as constructed by the Puppet::FileSystem #
def UNK on_lparen contents_file on_comma bucket_file on_rparen on_ignored_nl on_lparen bucket_file on_period UNK on_period UNK on_op on_const on_op on_const on_period UNK # @param contents_file [Pathname] Opaque file path to intended backup # location # @param bucket_file [Puppet::FileBucket::File] IO object representing # content to back up # @return [Boolean] whether the data in contents_file is of the same size # and content as that in the bucket_file # @api private
def UNK on_lparen contents_file on_comma UNK on_comma checksum_type on_rparen on_ignored_nl UNK on_op on_const on_op on_const on_op on_const on_period UNK on_lparen # @param contents_file [Pathname] Opaque file path to intended backup # location # @param expected_checksum_data [String] expected value of checksum of type # checksum_type # @param checksum_type [String] type of check sum of checksum_data, ie "md5" # @return [Boolean] whether the checksum of the contents_file matches the # supplied checksum # @api private
def UNK on_lparen contents_file on_comma bucket_file on_rparen on_ignored_nl on_const on_op on_const on_period UNK on_lparen contents_file on_comma on_int on_rparen do on_op # @param contents_file [Pathname] Opaque file path to intended backup # location # @param bucket_file [Puppet::FileBucket::File] IO object representing # content to back up # @return [void] # @api private
bucket_file on_period UNK on_lparen on_rparen do on_op UNK on_op on_ignored_nl on_const on_period UNK on_lparen UNK on_comma UNK on_rparen on_nl end # PUP-1044 writes all of the contents
