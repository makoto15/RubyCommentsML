UNK on_const UNK UNK on_const UNK UNK on_const UNK end UNK end UNK end on_nl on_ignored_nl UNK on_const on_op on_const # Puppet::Util::Windows::EventLog needs to be requirable without having loaded # any other parts of Puppet so it can be leveraged independently by the code # that runs Puppet as a service on Windows. # # For this reason we: # - Define Puppet::Util::Windows # - Replicate logic that exists elsewhere in puppet/util/windows # - Raise generic RuntimeError instead of Puppet::Util::Windows::Error if its not defined
on_const on_op on_int on_nl on_const on_op on_int on_nl on_const on_op on_int on_nl on_ignored_nl on_const on_op on_int on_nl on_const on_op on_int # https://msdn.microsoft.com/en-us/library/windows/desktop/aa363679(v=vs.85).aspx
on_const on_op on_int on_nl on_const on_op on_int on_nl on_ignored_nl def UNK on_lparen UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_rparen on_ignored_nl UNK # These are duplicate definitions from Puppet::Util::Windows::ApiTypes, # established here so this class can be standalone from Puppet, and public so # we can reference them in tests.
def UNK on_lparen UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_rparen on_ignored_nl UNK on_op on_const on_lparen on_const on_op on_const on_op on_const on_comma # Register an event log handle for the application # @param source_name [String] the name of the event source to retrieve a handle for # @return [void] # @api public
UNK on_const on_period UNK on_lparen UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_comma on_const on_period UNK on_rparen on_nl end on_nl end #TRANSLATORS 'Windows' is the operating system and 'RegisterEventSourceW' is a API call and should not be translated
def UNK on_nl on_const on_lparen UNK on_rparen on_nl UNK on_ignored_nl UNK on_op UNK on_nl end on_nl on_ignored_nl def UNK on_lparen # Close this instance's event log handle # @return [void] # @api public
def UNK on_lparen args on_op UNK UNK on_rparen on_ignored_nl UNK args on_lbracket on_symbeg UNK on_rbracket on_period UNK on_lparen on_const on_rparen # Report an event to this instance's event log handle. Accepts a string to # report (:data => <string>) and event type (:event_type => FixNum) and id # (:event_id => FixNum) as returned by #to_native. The additional arguments to # ReportEventW seen in this method aren't exposed - though ReportEventW # technically can accept multiple strings as well as raw binary data to log, # we accept a single string from Puppet::Util::Log # # @param args [Hash{Symbol=>Object}] options to the associated log event # @return [void] # @api public
UNK on_const on_period UNK on_lparen UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_comma on_const on_period UNK on_rparen on_nl end on_nl end #TRANSLATORS 'Windows' is the operating system and 'ReportEventW' is a API call and should not be translated
UNK on_symbeg UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK UNK on_nl UNK on_symbeg UNK on_comma # Feels more natural to do Puppet::Util::Window::EventLog.open("MyApplication")
def UNK on_lparen UNK on_rparen on_ignored_nl UNK UNK on_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_nl on_lbracket # Query event identifier info for a given log level # @param level [Symbol] an event log level # @return [Array] Win API Event ID, Puppet Event ID # @api public
on_ignored_nl UNK UNK on_lparen on_const on_op on_const on_op on_const on_op on_const on_rparen on_nl on_const on_op on_const on_op on_const on_op on_const # For the purposes of allowing this class to be standalone, the following are # duplicate definitions from elsewhere in Puppet:
UNK UNK on_lparen on_const on_op on_const on_op on_const on_op on_const on_rparen on_nl on_const on_op on_const on_op on_const on_op on_const on_op # If we're loaded via Puppet we should keep the previous behavior of raising # Puppet::Util::Windows::Error on errors. If we aren't, at least concatenate # the error code to the exception message to pass this information on to the # user
UNK on_lparen UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_op UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op UNK UNK UNK UNK on_rparen #TRANSLATORS 'Win32' is the Windows API and should not be translated
def UNK on_lparen str on_rparen on_ignored_nl UNK UNK UNK str on_period UNK on_nl UNK on_op str on_op on_tstring_beg on_tstring_content on_tstring_end # Private duplicate of Puppet::Util::Windows::String::wide_string # Not for use outside of EventLog! - use Puppet::Util::Windows instead # @api private
UNK UNK UNK str on_period UNK on_nl UNK on_op str on_op on_tstring_beg on_tstring_content on_tstring_end on_period UNK on_lparen str on_period UNK # if given a nil string, assume caller wants to pass a nil pointer to win32
UNK on_op str on_op on_tstring_beg on_tstring_content on_tstring_end on_period UNK on_lparen str on_period UNK on_rparen on_nl UNK on_period UNK on_lparen on_tstring_beg # ruby (< 2.1) does not respect multibyte terminators, so it is possible # for a string to contain a single trailing null byte, followed by garbage # causing buffer overruns. # # See http://svn.ruby-lang.org/cgi-bin/viewvc.cgi?revision=41920&view=revision
def UNK on_lparen str on_comma on_op UNK on_rparen on_ignored_nl str on_op UNK on_lparen str on_rparen on_nl on_const on_op on_const on_period # Private duplicate of Puppet::Util::Windows::ApiTypes::from_string_to_wide_string # Not for use outside of EventLog! - Use Puppet::Util::Windows instead # @api private
UNK on_period UNK on_lparen on_int on_comma str on_period UNK on_period UNK on_rparen on_nl on_ignored_nl UNK UNK on_nl end on_nl on_ignored_nl # uchar here is synonymous with byte
UNK on_nl end on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl on_ignored_nl UNK on_symbeg UNK on_nl UNK on_symbeg on_const on_comma on_lbracket # ptr has already had free called, so nothing to return
on_ignored_nl UNK on_symbeg UNK on_nl UNK on_symbeg on_const on_comma on_lbracket on_symbeg UNK on_comma on_symbeg UNK on_rbracket on_comma on_symbeg UNK on_nl # The following are typedefs in Puppet::Util::Winodws::ApiTypes, but here we # use their original FFI counterparts: # :uintptr_t for :handle # :int32 for :win32_bool # :uint16 for :word # :uint32 for :dword # :pointer for :lpvoid # :uchar for :byte
UNK on_symbeg UNK on_nl UNK on_symbeg on_const on_comma on_lbracket on_symbeg UNK on_comma on_symbeg UNK on_rbracket on_comma on_symbeg UNK on_nl UNK # https://msdn.microsoft.com/en-us/library/windows/desktop/aa363678(v=vs.85).aspx # HANDLE RegisterEventSource( # _In_ LPCTSTR lpUNCServerName, # _In_ LPCTSTR lpSourceName # );
UNK on_symbeg UNK on_nl UNK on_symbeg on_const on_comma on_lbracket on_symbeg UNK on_rbracket on_comma on_symbeg UNK on_nl UNK on_symbeg on_const on_nl # https://msdn.microsoft.com/en-us/library/windows/desktop/aa363642(v=vs.85).aspx # BOOL DeregisterEventSource( # _Inout_ HANDLE hEventLog # );
UNK on_symbeg UNK on_nl UNK on_symbeg on_const on_comma on_lbracket on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK # https://msdn.microsoft.com/en-us/library/windows/desktop/aa363679(v=vs.85).aspx # BOOL ReportEvent( # _In_ HANDLE hEventLog, # _In_ WORD wType, # _In_ WORD wCategory, # _In_ DWORD dwEventID, # _In_ PSID lpUserSid, # _In_ WORD wNumStrings, # _In_ DWORD dwDataSize, # _In_ LPCTSTR *lpStrings, # _In_ LPVOID lpRawData # );
