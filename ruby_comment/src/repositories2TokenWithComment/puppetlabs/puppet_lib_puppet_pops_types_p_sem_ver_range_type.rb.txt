UNK on_const on_op on_const on_nl def self on_period UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK on_lparen UNK on_comma UNK # An unparameterized type that represents all VersionRange instances # # @api public
def self on_period UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK UNK on_nl UNK on_const on_op on_const on_nl UNK on_period # Check if a version is included in a version range. The version can be a string or # a `SemanticPuppet::SemVer` # # @param range [SemanticPuppet::VersionRange] the range to match against # @param version [SemanticPuppet::Version,String] the version to match # @return [Boolean] `true` if the range includes the given version # # @api public
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK UNK on_nl UNK UNK on_comma on_const on_op on_const on_nl UNK on_nl # Creates a {SemanticPuppet::VersionRange} from the given _version_range_ argument. If the argument is `nil` or # a {SemanticPuppet::VersionRange}, it is returned. If it is a {String}, it will be parsed into a # {SemanticPuppet::VersionRange}. Any other class will raise an {ArgumentError}. # # @param version_range [SemanticPuppet::VersionRange,String,nil] the version range to convert # @return [SemanticPuppet::VersionRange] the converted version range # @raise [ArgumentError] when the argument cannot be converted into a version range #
def self on_period UNK on_lparen a on_comma b on_rparen on_ignored_nl b on_period begin on_op a on_period begin on_op on_lparen b # Checks if range _a_ is a sub-range of (i.e. completely covered by) range _b_ # @param a [SemanticPuppet::VersionRange] the first range # @param b [SemanticPuppet::VersionRange] the second range # # @return [Boolean] `true` if _a_ is completely covered by _b_
def self on_period UNK on_lparen a on_comma b on_rparen on_ignored_nl UNK a on_period UNK on_lparen b on_period begin on_rparen on_op # Merge two ranges so that the result matches all versions matched by both. A merge # is only possible when the ranges are either adjacent or have an overlap. # # @param a [SemanticPuppet::VersionRange] the first range # @param b [SemanticPuppet::VersionRange] the second range # @return [SemanticPuppet::VersionRange,nil] the result of the merge # # @api public
on_const on_op on_const on_period UNK on_lparen a on_period begin on_comma b on_period end on_comma b on_period exclude_end? on_rparen on_nl UNK # Adjacent, a before b
on_const on_op on_const on_period UNK on_lparen b on_period begin on_comma a on_period end on_comma a on_period exclude_end? on_rparen on_nl UNK # Adjacent, b before a
UNK on_nl end on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_lparen o on_comma # No overlap
UNK on_symbeg UNK UNK on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg UNK on_nl end on_nl on_ignored_nl UNK on_symbeg UNK UNK # Constructs a VersionRange from a String with a format specified by # # https://github.com/npm/node-semver#range-grammar # # The logical or || operator is not implemented since it effectively builds # an array of ranges that may be disparate. The {{SemanticPuppet::VersionRange}} inherits # from the standard ruby range. It must be possible to describe that range in terms # of min, max, and exclude max. # # The Puppet Version type is parameterized and accepts multiple ranges so creating such # constraints is still possible. It will just require several parameters rather than one # parameter containing the '||' operator. #
UNK on_symbeg UNK UNK on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg min on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg max # Constructs a VersionRange from a min, and a max version. The Boolean argument denotes # whether or not the max version is excluded or included in the range. It is included by # default. #
UNK on_symbeg UNK UNK on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK # Same as #from_versions but each argument is instead given in a Hash #
