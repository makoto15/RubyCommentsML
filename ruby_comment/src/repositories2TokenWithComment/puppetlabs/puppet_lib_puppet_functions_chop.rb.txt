UNK UNK UNK UNK UNK on_lparen on_symbeg UNK on_rparen UNK on_ignored_nl on_ignored_nl UNK on_symbeg UNK UNK on_ignored_nl UNK UNK UNK # Returns a new string with the last character removed. # If the string ends with `\r\n`, both characters are removed. Applying chop to an empty # string returns an empty string. If you wish to merely remove record # separators then you should use the `chomp` function. # # This function is compatible with the stdlib function with the same name. # # The function does the following: # * For a `String` the conversion removes the last character, or if it ends with \r\n` it removes both. If String is empty # an empty string is returned. # * For an `Iterable[Variant[String, Numeric]]` (for example an `Array`) each value is processed and the conversion is not recursive. # * If the value is `Numeric` it is simply returned (this is for backwards compatibility). # * An error is raised for all other data types. # # @example Removing line endings # ```puppet # "hello\r\n".chop() # chop("hello\r\n") # ``` # Would both result in `"hello"` # # @example Removing last char # ```puppet # "hello".chop() # chop("hello") # ``` # Would both result in `"hell"` # # @example Removing last char in an array # ```puppet # ["hello\r\n", "hi\r\n"].chop() # chop(["hello\r\n", "hi\r\n"]) # ``` # Would both result in `['hello', 'hi']` #
UNK UNK on_lparen UNK on_rparen on_ignored_nl UNK on_nl end on_nl on_ignored_nl UNK UNK on_lparen UNK on_rparen on_ignored_nl UNK UNK UNK # unit function - since the old implementation skipped Numeric values
x UNK UNK on_lparen UNK on_rparen UNK x UNK UNK UNK x on_nl end on_nl end on_nl EMP EMP EMP # x can only be a String or Numeric because type constraints have been automatically applied
