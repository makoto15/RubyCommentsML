UNK on_const on_op on_const on_op on_const on_nl UNK on_const on_op on_const on_nl on_ignored_nl def UNK on_lparen name on_comma options on_op # This is a utility module for generating classes. # @api public #
def UNK on_lparen name on_comma options on_op on_lbrace on_rbrace on_comma on_op block on_rparen on_ignored_nl UNK on_lparen name on_comma on_const on_comma # Create a new class. # @param name [String] the name of the generated class # @param options [Hash] a hash of options # @option options [Array<Class>] :array if specified, the generated class is appended to this array # @option options [Hash<{String => Object}>] :attributes a hash that is applied to the generated class # by calling setter methods corresponding to this hash's keys/value pairs. This is done before the given # block is evaluated. # @option options [Proc] :block a block to evaluate in the context of the class (this block can be provided # this way, or as a normal yield block). # @option options [String] :constant (name with first letter capitalized) what to set the constant that references # the generated class to. # @option options [Hash] :hash a hash of existing classes that this class is appended to (name => class). # This hash must be specified if the `:overwrite` option is set to `true`. # @option options [Boolean] :overwrite whether an overwrite of an existing class should be allowed (requires also # defining the `:hash` with existing classes as the test is based on the content of this hash). # @option options [Class] :parent (self) the parent class of the generated class. # @option options [String] ('') :prefix the constant prefix to prepend to the constant name referencing the # generated class. # @return [Class] the generated class #
def UNK on_lparen name on_comma options on_op on_lbrace on_rbrace on_comma on_op block on_rparen on_ignored_nl UNK on_lparen name on_comma on_const on_comma # Creates a new module. # @param name [String] the name of the generated module # @param options [Hash] hash with options # @option options [Array<Class>] :array if specified, the generated class is appended to this array # @option options [Hash<{String => Object}>] :attributes a hash that is applied to the generated class # by calling setter methods corresponding to this hash's keys/value pairs. This is done before the given # block is evaluated. # @option options [Proc] :block a block to evaluate in the context of the class (this block can be provided # this way, or as a normal yield block). # @option options [String] :constant (name with first letter capitalized) what to set the constant that references # the generated class to. # @option options [Hash] :hash a hash of existing classes that this class is appended to (name => class). # This hash must be specified if the `:overwrite` option is set to `true`. # @option options [Boolean] :overwrite whether an overwrite of an existing class should be allowed (requires also # defining the `:hash` with existing classes as the test is based on the content of this hash). # the capitalized name is appended and the result is set as the constant. # @option options [String] ('') :prefix the constant prefix to prepend to the constant name referencing the # generated class. # @return [Module] the generated Module
def UNK on_lparen name on_comma options on_rparen on_ignored_nl const on_op UNK on_lparen name on_comma options on_rparen on_nl UNK on_op UNK # Removes an existing class. # @param name [String] the name of the class to remove # @param options [Hash] options # @option options [Hash] :hash a hash of existing classes from which the class to be removed is also removed # @return [Boolean] whether the class was removed or not #
UNK on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl def UNK on_lparen name on_comma options on_rparen on_ignored_nl const on_op options on_lbracket # Let them know whether we did actually delete a subclass.
def UNK on_lparen name on_comma options on_rparen on_ignored_nl const on_op options on_lbracket on_symbeg UNK on_rbracket on_nl UNK const on_nl UNK # Generates the constant to create or remove. # @api private
def UNK on_lparen name on_comma UNK on_comma options on_comma block on_rparen on_ignored_nl name on_op name on_period UNK on_period UNK on_period # This does the actual work of creating our class or module. It's just a # slightly abstract version of genclass. # @api private
UNK on_op on_symbeg UNK on_nl klass on_op on_const on_period UNK UNK on_ignored_nl UNK on_op UNK on_nl UNK on_symbeg name on_nl #evalmethod = :module_eval
klass on_op on_const on_period UNK UNK on_ignored_nl UNK on_op UNK on_nl UNK on_symbeg name on_nl end on_nl UNK on_op name # Create the class, with the correct name.
klass on_op on_const on_period UNK on_lparen options on_lbracket on_symbeg UNK on_rbracket on_rparen UNK on_ignored_nl UNK on_op name on_nl end on_nl # Create the class, with the correct name.
UNK on_lparen klass on_comma name on_comma options on_rparen on_nl on_ignored_nl UNK on_lparen klass on_comma options on_rparen on_nl on_ignored_nl block on_op # Create the constant as appropriation.
UNK on_lparen klass on_comma options on_rparen on_nl on_ignored_nl block on_op options on_lbracket on_symbeg block on_rbracket on_nl on_ignored_nl klass on_period UNK # Initialize any necessary variables.
klass on_period UNK on_lparen UNK on_comma on_op block on_rparen if block on_nl on_ignored_nl klass on_period UNK if klass on_period UNK # Evaluate the passed block if there is one. This should usually # define all of the work.
UNK on_lparen klass on_comma name on_comma options on_rparen on_nl on_ignored_nl klass on_nl end on_nl on_ignored_nl def UNK on_lparen const on_rparen # Store the class in hashes or arrays or whatever.
def UNK on_lparen const on_rparen on_ignored_nl UNK on_lparen const on_comma UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen klass # @api private #
def UNK on_lparen klass on_comma name on_comma options on_rparen on_ignored_nl const on_op UNK on_lparen name on_comma options on_rparen on_nl on_ignored_nl # Handle the setting and/or removing of the associated constant. # @api private #
def UNK on_lparen klass on_comma options on_rparen on_ignored_nl klass on_period UNK if klass on_period UNK on_symbeg UNK on_nl on_ignored_nl UNK # Perform the initializations on the class. # @api private #
def UNK on_lparen name on_rparen on_ignored_nl name on_period UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen klass on_comma # Convert our name to a constant. # @api private
def UNK on_lparen klass on_comma klassname on_comma options on_rparen on_ignored_nl hash on_op options on_lbracket on_symbeg hash on_rbracket on_nl if hash # Store the class in the appropriate places. # @api private
UNK on_op options on_lbracket on_symbeg UNK on_rbracket on_nl if UNK on_nl if on_lparen klass on_period UNK on_symbeg name UNK on_ignored_nl # If we were told to stick it in a hash, then do so
