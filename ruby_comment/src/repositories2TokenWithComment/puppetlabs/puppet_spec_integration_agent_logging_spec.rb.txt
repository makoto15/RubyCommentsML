UNK on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_op # The command line flags affecting #20900 and #20919: # # --onetime # --daemonize # --no-daemonize # --logdest # --verbose # --debug # (no flags) (-) # # d and nd are mutally exclusive # # Combinations without logdest, verbose or debug: # # --onetime --daemonize # --onetime --no-daemonize # --onetime # --daemonize # --no-daemonize # - # # 6 cases X [--logdest=console, --logdest=syslog, --logdest=/some/file, <nothing added>] # = 24 cases to test # # X [--verbose, --debug, <nothing added>] # = 72 cases to test # # Expectations of behavior are defined in the expected_loggers, expected_level methods, # so adapting to a change in logging behavior should hopefully be mostly a matter of # adjusting the logic in those methods to define new behavior. # # Note that this test does not have anything to say about what happens to logging after # daemonizing.
UNK on_lparen on_const on_op on_const on_op on_const on_rparen on_period to UNK on_lparen on_symbeg UNK on_rparen on_nl UNK on_lparen on_const on_op # Don't actually run the agent, bypassing cert checks, forking and the puppet run itself
UNK on_lparen on_const on_op on_const on_op on_const on_rparen on_period to UNK on_lparen on_symbeg UNK on_rparen on_period UNK on_nl end on_nl # Let exceptions be raised instead of exiting
UNK on_lparen on_const on_op on_const on_op on_const on_rparen on_period to UNK on_lparen on_symbeg UNK on_rparen on_period UNK on_lparen UNK on_lparen # This logger is created by the Puppet::Settings object which creates and # applies a catalog to ensure that configuration files and users are in # place. # # It's not something we are specifically testing here since it occurs # regardless of user flags.
def self on_period UNK on_lparen argv on_rparen on_ignored_nl loggers on_op on_const on_period UNK on_nl loggers on_op on_const if UNK on_lparen # @param argv Array of commandline flags # @return Set<Symbol> of expected loggers
loggers on_op on_tstring_beg on_tstring_content on_tstring_end if UNK on_lparen argv on_comma on_const on_rparen on_nl on_ignored_nl loggers on_op on_const if UNK on_lparen # an explicit call to --logdest syslog on windows is swallowed silently with no # logger created (see #suitable() of the syslog Puppet::Util::Log::Destination subclass) # however Puppet::Util::Log.newdestination('syslog') does get called...so we have # to set an expectation
loggers on_op on_tstring_beg on_tstring_content on_tstring_end if UNK on_lparen argv on_comma on_const on_rparen on_nl loggers on_op on_const if UNK on_lparen argv # posix
def self on_period UNK on_lparen argv on_rparen on_ignored_nl UNK on_ignored_nl UNK argv on_period UNK on_lparen on_const on_rparen UNK on_const on_nl # @param argv Array of commandline flags # @return Symbol of the expected log level
def self on_period UNK on_lparen argv on_rparen on_ignored_nl UNK on_ignored_nl on_symbeg loggers on_op UNK on_lparen argv on_rparen on_comma on_ignored_nl on_symbeg # @param argv Array of commandline flags # @return Hash of expected loggers and the expected log level
on_ignored_nl on_const on_period UNK do on_op UNK on_op on_ignored_nl on_const on_period UNK do on_op UNK on_op on_ignored_nl on_const on_period UNK # For running a single spec (by line number): rspec -l150 spec/integration/agent/logging_spec.rb # debug_argv = [] # it_should_behave_like( "an agent", [debug_argv], with_expectations_based_on([debug_argv]))
