UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl on_const on_op on_const on_period UNK on_lparen on_symbeg UNK on_rparen on_period UNK on_symbeg UNK on_comma # Whole new package, so include pack stuff
on_ignored_nl UNK on_symbeg UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_symbeg UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_symbeg UNK ## has_features is usually autodetected based on defs below. # has_features :installable, :uninstallable, :upgradeable
on_ignored_nl UNK on_tstring_content UNK on_tstring_content on_tstring_end on_period UNK UNK on_op UNK on_op on_ignored_nl if on_const on_period UNK on_lparen UNK on_rparen ## Activate this only once approved by someone important. # defaultfor :operatingsystem => :freebsd
UNK on_tstring_content UNK on_tstring_content on_tstring_end on_period UNK UNK on_op UNK on_op on_ignored_nl if on_const on_period UNK on_lparen UNK on_rparen on_nl # Remove unwanted environment variables.
on_ignored_nl def UNK on_period UNK on_nl on_const on_period debug on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_op on_regexp_beg on_tstring_content on_regexp_end on_nl ######## instances sub command (builds the installed packages list)
UNK on_op on_regexp_beg on_tstring_content on_regexp_end on_nl UNK on_op on_lbracket on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_rbracket on_nl hash # regex to match output from pkg_info
UNK on_op on_lbracket on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_rbracket on_nl hash on_op on_const on_period new on_nl UNK # Corresponding field names
hash on_op on_const on_period new on_nl UNK on_op on_lbracket on_rbracket on_nl on_ignored_nl cmdline on_op on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl # define Temporary hash used, packages array of hashes
cmdline on_op on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl begin on_ignored_nl output on_op UNK on_lparen on_op cmdline on_rparen on_nl rescue on_const # exec command
output on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period UNK on_lbrace on_op UNK on_op on_ignored_nl hash on_period UNK on_nl UNK # split output and match it and populate temp hash
hash on_period UNK on_nl UNK on_op UNK on_period UNK on_lparen UNK on_rparen on_nl if UNK on_nl UNK on_period UNK on_lparen # reset hash to nil for each line
UNK on_period UNK on_lparen UNK on_period UNK on_rparen on_lbrace on_op UNK on_comma UNK on_op on_ignored_nl hash on_lbracket UNK on_rbracket on_op # Output matched regex
hash on_lbracket on_symbeg name on_rbracket on_op hash on_lbracket on_symbeg UNK on_rbracket on_nl hash on_lbracket on_symbeg UNK on_rbracket on_op UNK on_period # populate the actual :name field from the :portorigin # Set :provider to this object name
UNK on_op new on_lparen hash on_rparen on_nl else on_ignored_nl on_const on_period debug on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_end on_nl end # Add to the full packages listing
on_const on_period debug on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_end on_nl end on_nl on_rbrace on_nl on_ignored_nl return UNK on_nl end on_nl # unrecognised output from pkg_info
return UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK on_nl on_const on_period debug on_tstring_beg on_tstring_content on_embexpr_beg on_ivar on_lbracket on_symbeg name # return the packages array of hashes
on_ignored_nl def UNK on_nl on_const on_period debug on_tstring_beg on_tstring_content on_embexpr_beg on_ivar on_lbracket on_symbeg name on_rbracket on_embexpr_end on_tstring_end on_nl cmdline on_op ######## Installation sub command
cmdline on_op on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_ivar on_lbracket on_symbeg name on_rbracket on_rbracket on_nl on_ignored_nl begin on_ignored_nl output on_op UNK # -M: yes, we're a batch, so don't ask any questions
begin on_ignored_nl output on_op UNK on_lparen on_op cmdline on_rparen on_nl rescue on_const on_op on_const on_nl raise on_const on_op on_const on_period # FIXME: it's possible that portinstall prompts for data so locks up.
return UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK on_nl on_const on_period debug on_tstring_beg on_tstring_content on_embexpr_beg on_ivar on_lbracket on_symbeg name # No return code required, so do nil to be clean
on_ignored_nl def UNK on_nl on_const on_period debug on_tstring_beg on_tstring_content on_embexpr_beg on_ivar on_lbracket on_symbeg name on_rbracket on_embexpr_end on_tstring_end on_nl cmdline on_op ######## Latest subcommand (returns the latest version available, or current version if installed is latest)
cmdline on_op on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_ivar on_lbracket on_symbeg name on_rbracket on_rbracket on_nl on_ignored_nl begin on_ignored_nl output on_op UNK # search for latest version available, or return current version. # cmdline = "portversion -v <portorigin>", returns "<portname> <code> <stuff>" # or "** No matching package found: <portname>"
if output on_op on_regexp_beg on_tstring_content on_regexp_end on_nl installedversion on_op on_backref on_nl UNK on_op on_backref on_nl UNK on_op on_backref on_nl on_ignored_nl # Check: output format.
UNK UNK on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_period debug on_tstring_beg on_tstring_content on_embexpr_beg installedversion on_embexpr_end # Only return a new version number when it's clear that there is a new version # all others return the current version so no unexpected 'upgrades' occur.
if UNK on_op on_regexp_beg on_tstring_content on_regexp_end on_nl UNK on_op on_backref on_nl on_const on_period debug on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_content # "portpkg-1.7_5 < needs updating (port has 1.14)" # "portpkg-1.7_5 < needs updating (port has 1.14) (=> 'newport/pkg')
if output on_op on_regexp_beg on_tstring_content on_regexp_end on_nl raise on_const on_op on_const on_comma UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace # error: output not parsed correctly, error out with nil. # Seriously - this section should never be called in a perfect world. # as verification that the port is installed has already happened in query.
raise on_const on_op on_const on_comma UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace UNK output on_rbrace on_nl end on_nl on_ignored_nl # Any other error (dump output to log)
return UNK on_nl end on_nl on_ignored_nl raise on_const on_op on_const on_comma UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace UNK # Just in case we still are running, return nil
raise on_const on_op on_const on_comma UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace UNK output on_rbrace on_nl end on_nl on_ignored_nl # At this point normal operation has finished and we shouldn't have been called. # Error out and let the admin deal with it.
on_ignored_nl def UNK on_nl on_const on_period debug on_tstring_beg on_tstring_content on_embexpr_beg on_ivar on_lbracket on_symbeg name on_rbracket on_embexpr_end on_tstring_end on_nl on_ignored_nl cmdline ###### Query subcommand - return a hash of details if exists, or nil if it doesn't. # Used to make sure the package is installed
if output on_op on_regexp_beg on_tstring_content on_regexp_end on_nl hash on_op on_const on_period new on_nl hash on_lbracket on_symbeg UNK on_rbracket on_op UNK # Check: if output isn't in the right format, return nil
hash on_op on_const on_period new on_nl hash on_lbracket on_symbeg UNK on_rbracket on_op UNK on_period name on_nl hash on_lbracket on_symbeg UNK # Fill in the details
return hash on_nl else on_ignored_nl on_const on_period debug on_tstring_beg on_tstring_content on_embexpr_beg on_ivar on_lbracket on_symbeg name on_rbracket on_embexpr_end on_tstring_content on_tstring_end on_nl # If more details are required, then we can do another pkg_info # query here and parse out that output and add to the hash # return the hash to the caller
on_ignored_nl def UNK on_nl on_const on_period debug on_tstring_beg on_tstring_content on_embexpr_beg on_ivar on_lbracket on_symbeg name on_rbracket on_embexpr_end on_tstring_end on_nl cmdline on_op ####### Uninstall command
cmdline on_op on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_ivar on_lbracket on_symbeg name on_rbracket on_rbracket on_nl begin on_ignored_nl output on_op UNK on_lparen # Get full package name from port origin to uninstall with
UNK on_backref on_nl end on_nl end on_nl on_ignored_nl on_ignored_nl def UNK on_nl on_const on_period debug on_tstring_beg on_tstring_content on_embexpr_beg on_ivar on_lbracket # output matches, so uninstall it
on_ignored_nl def UNK on_nl on_const on_period debug on_tstring_beg on_tstring_content on_embexpr_beg on_ivar on_lbracket on_symbeg name on_rbracket on_embexpr_end on_tstring_content on_tstring_end on_nl on_ignored_nl ######## Update/upgrade command
cmdline on_op on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_backref on_rbracket on_nl begin on_ignored_nl output on_op UNK on_lparen on_op cmdline on_rparen on_nl # output matches, so upgrade the software
end on_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP ## EOF
