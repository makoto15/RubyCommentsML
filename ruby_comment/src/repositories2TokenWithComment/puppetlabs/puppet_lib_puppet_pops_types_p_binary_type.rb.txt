class on_const on_op on_const on_nl on_ignored_nl class on_const on_nl UNK on_symbeg UNK on_nl on_ignored_nl def self on_period UNK on_lparen str # A Puppet Language Type that represents binary data content (a sequence of 8-bit bytes). # Instances of this data type can be created from `String` and `Array[Integer[0,255]]` # values. Also see the `binary_file` function for reading binary content from a file. # # A `Binary` can be converted to `String` and `Array` form - see function `new` for # the respective target data type for more information. # # Instances of this data type serialize as base 64 encoded strings when the serialization # format is textual, and as binary content when a serialization format supports this. # # @api public
class on_const on_nl UNK on_symbeg UNK on_nl on_ignored_nl def self on_period UNK on_lparen str on_rparen on_ignored_nl new on_lparen on_const on_period # Represents a binary buffer # @api public
def self on_period UNK on_lparen str on_rparen on_ignored_nl new on_lparen on_const on_period UNK on_lparen str on_rparen on_rparen on_nl end on_nl # Constructs an instance of Binary from a base64 urlsafe encoded string (RFC 2045). # @param [String] A string with RFC 2045 compliant encoded binary #
def self on_period UNK on_lparen str on_rparen on_ignored_nl new on_lparen on_const on_period UNK on_lparen str on_rparen on_rparen on_nl end on_nl # Constructs an instance of Binary from a base64 encoded string (RFC4648 with "URL and Filename # Safe Alphabet" (That is with '-' instead of '+', and '_' instead of '/'). #
def self on_period UNK on_lparen str on_rparen on_ignored_nl new on_lparen on_const on_period UNK on_lparen str on_rparen on_rparen on_nl end on_nl # Constructs an instance of Binary from a base64 strict encoded string (RFC 4648) # Where correct padding must be used and line breaks causes an error to be raised. # # @param [String] A string with RFC 4648 compliant encoded binary #
def self on_period UNK on_lparen bin on_rparen on_ignored_nl new on_lparen bin on_rparen on_nl end on_nl on_ignored_nl def self on_period UNK # Creates a new Binary from a String containing binary data. If the string's encoding # is not already ASCII-8BIT, a copy of the string is force encoded as ASCII-8BIT (that is Ruby's "binary" format). # This means that this binary will have the exact same content, but the string will considered # to hold a sequence of bytes in the range 0 to 255. # # The given string will be frozen as a side effect if it is in ASCII-8BIT encoding. If this is not # wanted, a copy should be given to this method. # # @param [String] A string with binary data # @api public #
def self on_period UNK on_lparen encoded_string on_rparen on_ignored_nl UNK on_op encoded_string on_period UNK on_period UNK on_nl UNK encoded_string on_period UNK # Creates a new Binary from a String containing text/binary in its given encoding. If the string's encoding # is not already UTF-8, the string is first transcoded to UTF-8. # This means that this binary will have the UTF-8 byte representation of the original string. # For this to be valid, the encoding used in the given string must be valid. # The validity of the given string is therefore asserted. # # The given string will be frozen as a side effect if it is in ASCII-8BIT encoding. If this is not # wanted, a copy should be given to this method. # # @param [String] A string with valid content in its given encoding # @return [Puppet::Pops::Types::PBinaryType::Binary] with the UTF-8 representation of the UTF-8 transcoded string # @api public #
encoded_string on_op on_lparen UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op encoded_string on_period UNK on_op encoded_string on_period UNK on_lparen on_tstring_beg on_tstring_content # Convert to UTF-8 (if not already UTF-8), and then to binary
def UNK on_lparen bin on_rparen on_ignored_nl on_ivar on_op on_lparen bin on_period UNK on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_op bin # Creates a new Binary from a String containing raw binary data of unknown encoding. If the string's encoding # is not already ASCII-8BIT, a copy of the string is forced to ASCII-8BIT (that is Ruby's "binary" format). # This means that this binary will have the exact same content, but the string will considered # to hold a sequence of bytes in the range 0 to 255. # # @param [String] A string with binary data # @api private #
def UNK on_nl on_const on_period UNK on_lparen on_ivar on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl on_const on_period UNK on_lparen # Presents the binary content as a string base64 encoded string (without line breaks). #
def UNK on_nl on_const on_period UNK on_lparen on_ivar on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl on_const on_period UNK on_lparen # Returns the binary content as a "relaxed" base64 (standard) encoding where # the string is broken up with new lines.
def UNK on_nl on_const on_period UNK on_lparen on_ivar on_rparen on_nl end on_nl on_ignored_nl def hash on_nl on_ivar on_period hash on_nl # Returns the binary content as a url safe base64 string (where + and / are replaced by - and _) #
def UNK on_lparen o on_comma UNK on_op UNK on_rparen on_ignored_nl o on_period UNK on_lparen on_const on_rparen on_nl end on_nl on_ignored_nl # Only instances of Binary are instances of the PBinaryType #
def UNK on_nl UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen type on_rparen on_ignored_nl on_ivar on_op on_const on_op # Binary uses the strict base64 format as its string representation # @return [TrueClass] true
def self on_period UNK on_lparen type on_rparen on_ignored_nl on_ivar on_op on_const on_op on_const on_period UNK on_lparen on_symbeg UNK on_comma type # @api private
UNK on_symbeg UNK UNK on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg str on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg UNK # Creates a binary from a base64 encoded string in one of the formats %b, %u, %B, %s, or %r
UNK on_symbeg UNK UNK on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg UNK on_nl end on_nl on_ignored_nl def UNK on_lparen str # Same as from_string, or from_array, but value and (for string) optional format are given in the form # of a hash. #
UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_op on_lparen str on_period UNK on_op UNK on_rparen on_nl on_const on_period new on_lparen on_const on_period # padding must be added for older rubies to avoid truncation
on_const on_period UNK on_lparen UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen # The array is already known to have bytes in the range 0-255, or it is in error # Without this pack C would produce weird results
