describe on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl on_ignored_nl class on_const on_op on_const on_op on_const on_nl run_mode on_symbeg UNK on_nl UNK run_command # These tests may look a little weird and repetative in its current state; # it used to illustrate several ways that the run_mode could be changed # at run time; there are fewer ways now, but it would still be nice to # get to a point where it was entirely impossible.
end on_nl end on_nl on_ignored_nl it on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl allow on_lparen on_const on_period UNK on_rparen on_period to receive # no-op
end on_nl end on_nl on_rbrace on_period to raise_error on_lparen on_const on_op on_const on_op on_const on_comma on_regexp_beg on_tstring_content on_regexp_end on_rparen on_nl # no-op
on_ignored_nl UNK on_op UNK on_nl UNK on_op UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_lbrace UNK on_op true on_rbrace on_nl on_ignored_nl # if the signal doesn't fire, this causes failure.
UNK UNK UNK UNK UNK on_nl UNK on_ignored_nl UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma UNK on_rparen on_nl end on_nl end # Ruby 1.9 uses a separate OS level thread to run the signal # handler, so we have to poll - ideally, in a way that will kick # the OS into running other threads - for a while. # # You can't just use the Ruby Thread yield thing either, because # that is just an OS hint, and Linux ... doesn't take that # seriously. --daniel 2012-03-22
