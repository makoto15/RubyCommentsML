on_ignored_nl on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_const #!/usr/bin/env ruby
on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_period # = Synopsis # This is an external node classifier script, after # https://puppet.com/docs/puppet/latest/lang_write_functions_in_puppet.html # # = Usage # regexp_nodes.rb <host> # # = Description # This classifier implements filesystem autoloading: It looks through classes, # parameters, and environment subdirectories, looping through each file it # finds. Each file's contents are a regexp-per-line which, if they match the # hostname passed to the program as ARGV[0], sets a class, parameter value # or environment named the same thing as the file itself. At the end, the # resultant data structure is returned back to the puppet master process as # yaml. # # = Caveats # Since the files are read in directory order, multiple matches for a given # hostname in the parameters/ and environment/ subdirectories will return the # last-read value. (Multiple classes/ matches don't cause a problem; the # class is either incuded or it isn't) # # Unmatched hostnames in any of the environment/ files will cause 'production' # to be emitted; be aware of the complexity surrounding the interaction between # ENC and environments as discussed in https://projects.puppetlabs.com/issues/3910 # # = Examples # Based on the example files in the classes/ and parameters/ subdirectories # in the distribution, classes/database will set the 'database' class for # hosts matching %r{db\d{2}} (that is, 'db' followed by two digits) or with # 'mysql' anywhere in the hostname. Similarly, hosts beginning with 'www' or # 'web' or the hostname 'leterel' (my workstation) will be assigned the # 'webserver' class. # # Under parameters/ there is one subdirectory 'service' which # sets the a parameter called 'service' to the value 'prod' for production # hosts (whose hostnames always end with a three-digit code), 'qa' for # anything that starts with 'qa-' 'qa2-' or 'qa3-', and 'sandbox' for any # development machines whose hostnames start with 'dev-'. # # In the environment/ subdirectory, any hosts matching '^dev-' and a single # production host which serves as 'canary in the coal mine' will be put into # the development environment # # = Author # Eric Sorenson <eric@explosive.net>
UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_period UNK # we need yaml or there's not much point in going on
UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_const # Sets are like arrays but automatically de-duplicate elements
UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_const on_op on_const on_op on_const on_op on_const # set up some syslog logging
on_const on_period UNK on_op on_const on_op on_const on_lparen on_const on_op on_const on_rparen on_nl on_ignored_nl def log on_lparen UNK on_comma UNK # change this to LOG_UPTO(Sysslog::LOG_DEBUG) if you want to see everything # but remember your syslog.conf needs to match this or messages will be filtered
def log on_lparen UNK on_comma UNK on_op on_symbeg UNK on_rparen on_ignored_nl on_const on_period UNK on_lparen UNK on_comma UNK on_rparen on_nl # Helper method to log to syslog; we log at level debug if no level is specified # since those are the most frequent calls to this method
UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_op on_const on_period UNK on_lparen on_const on_period UNK on_lparen UNK on_rparen on_rparen on_nl on_const # set our workingdir to be the directory we're executed from, regardless # of parent's cwd, symlinks, etc. via handy Pathname.realpath method
on_ignored_nl UNK on_const on_nl UNK on_symbeg UNK on_comma on_symbeg parameters on_comma on_symbeg UNK on_comma on_symbeg hostname on_nl on_ignored_nl def UNK # This class holds all the methods for creating and accessing the properties # of an external node. There are really only two public methods: initialize # and a special version of to_yaml
UNK on_symbeg UNK on_comma on_symbeg parameters on_comma on_symbeg UNK on_comma on_symbeg hostname on_nl on_ignored_nl def UNK on_lparen hostname on_comma UNK # Make these instance variables get/set-able with eponymous methods
def UNK on_lparen hostname on_comma UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_comma UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_comma UNK on_op on_tstring_beg # initialize takes three arguments: # hostname:: usually passed in via ARGV[0] but it could be anything # classdir:: directory under WORKINGDIR to look for files named after # classes # parameterdir:: directory under WORKINGDIR to look for directories to set # parameters
on_ivar on_op on_const on_period UNK on_nl on_ivar on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_ivar on_op on_tstring_beg on_tstring_content # instance variables that contain the lists of classes and parameters
on_ivar on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl self on_period UNK on_lparen hostname on_rparen on_nl self on_period UNK on_lparen on_tstring_beg on_embexpr_beg # sets a default value of "unknown"
def UNK on_lparen hostname on_rparen on_ignored_nl if hostname on_op on_regexp_beg on_tstring_content on_regexp_end on_ivar on_op UNK on_nl UNK hostname on_op on_regexp_beg # private method called by initialize which sanity-checks our hostname. # good candidate for overriding in a subclass if you need different checks
on_ivar on_op UNK on_nl UNK hostname on_op on_regexp_beg on_tstring_content on_regexp_end on_ivar on_op hostname on_nl log on_lparen on_tstring_beg on_tstring_content on_embexpr_beg hostname # non-greedy up to the first . is hostname
on_ivar on_op hostname on_nl log on_lparen on_tstring_beg on_tstring_content on_embexpr_beg hostname on_embexpr_end on_tstring_content on_tstring_end on_rparen on_nl UNK on_ignored_nl log on_lparen on_tstring_beg # sometimes puppet's @name is just a name
def UNK on_nl UNK on_op self on_period UNK on_period UNK on_nl if self on_period parameters on_period UNK parameters on_op UNK # to_yaml massages a copy of the object and outputs clean yaml so we don't # feed weird things back to puppet []<
parameters on_op UNK on_nl UNK on_ignored_nl parameters on_op self on_period parameters on_nl end on_nl on_lparen UNK on_tstring_beg on_tstring_content on_tstring_end on_op # otherwise to_yaml prints "parameters: {}"
def UNK on_lparen filepath on_comma UNK on_rparen on_ignored_nl on_ignored_nl UNK on_op on_lbracket on_rbracket on_nl on_ignored_nl UNK on_ignored_nl UNK on_lparen filepath # Private method that expects an absolute path to a file and a string to # match - it returns true if the string was matched by any of the lines in # the file
log on_lparen on_tstring_beg on_embexpr_beg UNK on_embexpr_end on_tstring_content on_tstring_end on_rparen on_nl UNK UNK on_nl end on_nl on_ignored_nl end on_ignored_nl def UNK # hostname didn't match anything in patternlist
on_ignored_nl def UNK on_lparen fullpath on_rparen on_ignored_nl on_const on_period UNK on_lparen fullpath on_rparen UNK on_op patternfile on_op on_ignored_nl filepath on_op # def
def UNK on_lparen fullpath on_rparen on_ignored_nl on_const on_period UNK on_lparen fullpath on_rparen UNK on_op patternfile on_op on_ignored_nl filepath on_op on_tstring_beg # private method - takes a path to look for files, iterates through all # readable, regular files it finds, and matches this instance's @hostname # against each line; if any match, the class will be set for this node.
def UNK on_lparen fullpath on_rparen on_ignored_nl on_const on_period UNK on_lparen fullpath on_rparen UNK on_op patternfile on_op on_ignored_nl filepath on_op on_tstring_beg # match_environment is similar to match_classes but it overwrites # any previously set value (usually just the default, 'production') # with a match
def UNK on_lparen fullpath on_rparen on_ignored_nl on_const on_period UNK on_lparen fullpath on_rparen UNK on_op UNK on_op on_ignored_nl on_ignored_nl filepath on_op # Parameters are handled slightly differently; we make another level of # directories to get the parameter name, then use the names of the files # contained in there for the values of those parameters. # # ex: cat ./parameters/service/production # ^prodweb # would set parameters["service"] = "production" for prodweb001
on_ignored_nl next UNK on_const on_period UNK on_lparen filepath on_rparen UNK on_ignored_nl on_const on_period UNK on_lparen filepath on_rparen on_ignored_nl log on_lparen # skip over dotfiles
on_ignored_nl log on_lparen on_tstring_beg on_tstring_content on_embexpr_beg filepath on_embexpr_end on_tstring_end on_rparen on_nl on_ignored_nl on_const on_period UNK on_lparen on_tstring_beg on_embexpr_beg filepath on_embexpr_end # skip over non-directories
UNK on_const on_op on_const on_nl on_ignored_nl def UNK on_lparen hostname on_comma UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_comma UNK on_op on_tstring_beg # Logic for local hacks that don't fit neatly into the autoloading model can # happen as we initialize a subclass
if on_ivar on_op on_regexp_beg on_tstring_content on_regexp_end on_nl UNK on_op on_const on_period UNK on_nl on_ignored_nl UNK on_op UNK on_lbracket on_int on_rbracket # Set "hostclass" parameter based on hostname, # stripped of leading environment prefix and numeric suffix
on_ignored_nl UNK on_op on_const on_period UNK on_lparen on_const on_lbracket on_int on_rbracket on_rparen on_nl on_ignored_nl UNK UNK on_period UNK on_nl EMP # Here we begin actual execution by calling methods defined above
