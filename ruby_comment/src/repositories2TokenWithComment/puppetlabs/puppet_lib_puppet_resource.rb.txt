UNK on_const on_op on_const on_nl UNK on_const on_op on_const on_op on_const on_nl UNK on_const on_op on_const on_op on_const on_nl on_ignored_nl # The simplest resource class. Eventually it will function as the # base class for all resource-like behaviour. # # @api public
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_const on_op on_const on_nl # @!attribute [rw] sensitive_parameters # @api private # @return [Array<Symbol>] A list of parameters to be treated as sensitive
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_const on_op on_const on_nl UNK on_symbeg UNK on_comma on_symbeg # @deprecated
def UNK on_nl data on_op on_lbrace on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op type on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op title on_period # Produces a Data compliant hash of the resource. # The result depends on the --rich_data setting, and the context value # for Puppet.lookup(:stringify_rich), that if it is `true` will use the # ToStringifiedConverter to produce the value per parameter. # (Note that the ToStringifiedConverter output is lossy and should not # be used when producing a catalog serialization). #
UNK on_op on_const on_period UNK on_lparen on_symbeg UNK on_rparen on_lbrace false on_rbrace on_nl UNK on_op UNK on_op on_const on_op on_const # To get stringified parameter values the flag :stringify_rich can be set # in the puppet context. #
unless param on_op namevar on_op value on_op title on_nl if UNK on_nl params on_lbracket param on_period to_s on_rbracket on_op UNK # Don't duplicate the title as the namevar
UNK on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_tstring_end on_period each do on_op UNK on_op on_ignored_nl # Proxy these methods to the parameters hash. It's likely they'll # be overridden at some point, but this works for now.
def on_op on_lparen param on_comma value on_rparen on_ignored_nl UNK on_lparen param on_rparen if UNK on_nl parameters on_lbracket UNK on_lparen param # Set a given parameter. Converts all passed names # to lower-case symbols.
def on_op on_lparen param on_rparen on_ignored_nl parameters on_lbracket UNK on_lparen param on_rparen on_rbracket on_nl end on_nl on_ignored_nl def on_op on_lparen # Return a given parameter's value. Converts all passed names # to lower-case symbols.
def UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_nl resource_type on_period is_a? on_lparen on_const on_op on_const on_rparen on_nl # Compatibility method.
UNK on_nl end on_nl on_ignored_nl def UNK on_nl resource_type on_period is_a? on_lparen on_const on_op on_const on_rparen on_nl end on_nl on_ignored_nl # TODO: should be deprecated (was only used in one place in puppet codebase)
def UNK on_nl resource_type on_period is_a? on_lparen on_const on_op on_const on_rparen on_nl end on_nl on_ignored_nl def each on_nl parameters on_period # Is this a builtin resource type?
resource_type on_period is_a? on_lparen on_const on_op on_const on_rparen on_nl end on_nl on_ignored_nl def each on_nl parameters on_period each on_lbrace on_op # Note - old implementation only checked if the resource_type was a Class
def each on_nl parameters on_period each on_lbrace on_op UNK on_comma v on_op UNK UNK on_comma v on_rbrace on_nl end on_nl # Iterate over each param/value pair, as required for Enumerable.
def UNK on_lparen type on_comma title on_op nil on_comma attributes on_op on_const on_rparen on_ignored_nl on_ivar on_op on_lbrace on_rbrace on_nl on_ivar # Construct a resource from data. # # Constructs a resource instance with the given `type` and `title`. Multiple # type signatures are possible for these arguments and most will result in an # expensive call to {Puppet::Node::Environment#known_resource_types} in order # to resolve `String` and `Symbol` Types to actual Ruby classes. # # @param type [Symbol, String] The name of the Puppet Type, as a string or # symbol. The actual Type will be looked up using # {Puppet::Node::Environment#known_resource_types}. This lookup is expensive. # @param type [String] The full resource name in the form of # `"Type[Title]"`. This method of calling should only be used when # `title` is `nil`. # @param type [nil] If a `nil` is passed, the title argument must be a string # of the form `"Type[Title]"`. # @param type [Class] A class that inherits from `Puppet::Type`. This method # of construction is much more efficient as it skips calls to # {Puppet::Node::Environment#known_resource_types}. # # @param title [String, :main, nil] The title of the resource. If type is `nil`, may also # be the full resource name in the form of `"Type[Title]"`. # # @api public
src on_op type on_nl self on_period UNK on_op src on_period UNK on_nl self on_period UNK on_op src on_period UNK on_nl # Copy constructor. Let's avoid munging, extracting, tagging, etc
v on_op v on_period UNK if v on_period UNK on_period UNK on_lbrace on_op av on_op av on_period is_a? on_lparen on_const # flatten resource references arrays
raise on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_tstring_beg on_tstring_content on_tstring_end on_op on_ignored_nl _ on_lparen on_tstring_beg on_tstring_content on_tstring_end #TRANSLATORS 'Puppet::Resource.new' should not be translated
if type on_period is_a? on_lparen on_const on_op on_const on_rparen on_op type on_period is_a? on_lparen on_const on_op on_const on_op on_const on_rparen # In order to avoid an expensive search of 'known_resource_types" and # to obey/preserve the implementation of the resource's type - if the # given type is a resource type implementation (one of): # * a "classic" 3.x ruby plugin # * a compatible implementation (e.g. loading from pcore metadata) # * a resolved user defined type # # ...then, modify the parameters to the "old" (agent side compatible) way # of describing the type/title with string/symbols. # # TODO: Further optimizations should be possible as the "type juggling" is # not needed when the type implementation is known. #
self on_period resource_type on_op type on_nl type on_op type on_period name on_nl end on_nl on_ivar on_op false on_nl on_ignored_nl attributes # set the resource type implementation
type on_op type on_period name on_nl end on_nl on_ivar on_op false on_nl on_ignored_nl attributes on_period each do on_op attr on_comma # set the type name to the symbolic name
attributes on_period each do on_op attr on_comma value on_op on_ignored_nl UNK if attr on_op on_symbeg parameters on_nl UNK on_lparen attr # Set things like environment, strictness first.
def UNK on_nl UNK on_op UNK on_period UNK on_lparen to_s on_rparen on_op nil on_nl end on_nl on_ignored_nl def UNK on_nl # Find our resource.
def UNK on_nl return UNK if on_op UNK on_period empty? on_op self on_lbracket on_symbeg UNK on_rbracket on_nl UNK on_op self # A resource is an application component if it exports or consumes # one or more capabilities, or if it requires a capability resource
UNK on_op self on_lbracket on_symbeg UNK on_rbracket on_op on_lbracket on_rbracket on_nl UNK on_op on_lbracket UNK on_rbracket unless UNK on_period is_a? # Array(self[:require]) does not work for Puppet::Resource instances
def UNK on_nl on_op resource_type on_period nil? on_op resource_type on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl v on_op # A resource is a capability (instance) if its underlying type is a # capability type
def UNK on_nl v on_op self on_lbracket on_symbeg UNK on_rbracket on_op on_lbracket on_rbracket on_nl v on_period is_a? on_lparen on_const on_rparen # Returns the value of the 'export' metaparam as an Array # @api private
def resource_type on_nl on_ivar on_op self on_period UNK on_period resource_type on_lparen type on_comma title on_comma environment on_rparen on_nl end on_nl # The resource's type implementation # @return [Puppet::Type, Puppet::Resource::Type] # @api private
def self on_period resource_type on_lparen type on_comma title on_comma environment on_rparen on_ignored_nl UNK type on_nl UNK on_const UNK environment on_period # The resource's type implementation # @return [Puppet::Type, Puppet::Resource::Type] # @api private
def UNK on_lparen type on_rparen on_ignored_nl on_ivar on_op type on_nl end on_nl on_ignored_nl def environment on_nl on_ivar on_op if UNK # Set the resource's type implementation # @param type [Puppet::Type, Puppet::Resource::Type] # @api private
def to_hash on_nl UNK on_period UNK parameters on_nl end on_nl on_ignored_nl def to_s on_nl on_tstring_beg on_embexpr_beg type on_embexpr_end on_tstring_content on_embexpr_beg # Produces a hash of attribute to value mappings where the title parsed into its components # acts as the default values overridden by any parameter values explicitly given as parameters. #
h on_op self on_period to_hash on_nl name on_op h on_lbracket namevar on_rbracket on_op h on_lbracket on_symbeg name on_rbracket on_op self # Temporary kludge to deal with inconsistent use patterns; ensure we don't return nil for namevar/:name
def UNK on_nl attr on_op parameters on_period UNK on_nl UNK on_op attr on_period UNK on_lparen on_int on_rparen on_lbrace on_op max # Convert our resource to yaml for Hiera purposes. # # @deprecated Use {to_hiera_hash} instead.
attr on_op parameters on_period UNK on_nl UNK on_op attr on_period UNK on_lparen on_int on_rparen on_lbrace on_op max on_comma k on_op # Collect list of attributes to align => and move ensure first
def UNK on_nl h on_op UNK on_nl on_ignored_nl params on_op h on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op on_lbrace on_rbrace on_nl # Convert our resource to a hiera hash suitable for serialization.
h on_op UNK on_nl on_ignored_nl params on_op h on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op on_lbrace on_rbrace on_nl value on_op params # to_data_hash converts to safe Data types, e.g. no symbols, unicode replacement character
def UNK on_nl attr on_op parameters on_period UNK on_nl UNK on_op attr on_period UNK on_lparen on_int on_rparen on_lbrace on_op max # Convert our resource to Puppet code.
attr on_op parameters on_period UNK on_nl UNK on_op attr on_period UNK on_lparen on_int on_rparen on_lbrace on_op max on_comma k on_op # Collect list of attributes to align => and move ensure first
def UNK on_nl UNK on_op on_const on_op on_const on_period type on_lparen self on_period type on_rparen on_op on_const on_op on_const on_period # Convert our resource to a RAL resource instance. Creates component # instances for resource types that don't exist.
on_lbracket type on_comma title on_rbracket on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl resource_type # this is potential namespace conflict # between the notion of an "indirector name" # and a "resource name"
def UNK on_lparen UNK on_rparen on_ignored_nl on_const on_period UNK on_lparen _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_rparen on_nl on_ignored_nl return # @deprecated Not used by Puppet # @api private
unless UNK on_period nil? on_op on_op default on_period nil? on_nl self on_lbracket param on_period to_sym on_rbracket on_op UNK on_nl UNK # Assign bound value but don't let an undef trump a default expression
def UNK on_nl on_const on_period UNK on_lparen _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_rparen on_nl on_ignored_nl return unless resource_type and # Verify that all required arguments are either present or # have been provided with defaults. # Must be called after 'set_default_parameters'. We can't join the methods # because Type#set_parameters needs specifically ordered behavior. # # @deprecated Not used by Puppet # @api private
UNK on_op resource_type on_period UNK on_nl parameters on_period each do on_op name on_comma value on_op on_ignored_nl t on_op UNK on_lbracket # Perform optional type checking
parameters on_period each do on_op name on_comma value on_op on_ignored_nl t on_op UNK on_lbracket name on_period to_s on_rbracket UNK unless # Parameters is a map from name, to parameter, and the parameter again has name and value
UNK unless t on_nl unless on_const on_op on_const on_op on_const on_op on_const on_period UNK on_lparen t on_comma value on_period value # untyped, and parameters are symbols here (aargh, strings in the type)
def UNK on_nl nil on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_op on_const on_rparen on_ignored_nl UNK on_op resource_type on_period # This method, together with #file and #line, makes it possible for a Resource to be a 'source_pos' in a reported issue. # @return [Integer] Instances of this class will always return `nil`.
def self on_period UNK on_lparen type on_comma title on_rparen on_ignored_nl type on_comma title on_op UNK on_lparen type on_comma title on_rparen # @api private
def UNK on_lparen param on_rparen on_ignored_nl param on_op param on_period to_s on_period UNK on_period to_sym on_nl if param on_op on_symbeg # Produce a canonical method name.
def namevar on_nl if UNK on_op on_op on_lparen t on_op resource_type on_rparen on_period nil? on_op t on_period key_attributes on_period UNK # The namevar for our resource type. If the type doesn't exist, # always use :name.
def UNK on_nl h on_op on_lbrace on_rbrace on_nl type on_op resource_type on_nl if type on_period respond_to? on_lparen on_symbeg UNK on_rparen # Produces a hash with { :key => part_of_title } for each entry in title_patterns # for the resource type. A typical result for a title of 'example' is {:name => 'example'}. # A resource type with a complex title to attribute mapping returns one entry in the hash # per part. #
if UNK UNK on_ignored_nl h on_lbracket UNK on_rbracket on_op UNK on_period UNK on_lparen UNK on_rparen on_nl else on_ignored_nl h on_lbracket # Many types pass "identity" as the proc; we might as well give # them a shortcut to delivering that without the extra cost. # # Especially because the global type defines title_patterns and # uses the identity patterns. # # This was worth about 8MB of memory allocation saved in my # testing, so is worth the complexity for the API.
raise on_const on_op on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label title on_rbrace on_nl else on_ignored_nl return # If we've gotten this far, then none of the provided title patterns # matched. Since there's no way to determine the title then the # resource should fail here.
