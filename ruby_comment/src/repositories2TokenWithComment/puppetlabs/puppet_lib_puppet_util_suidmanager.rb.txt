UNK on_op UNK on_symbeg UNK on_comma on_symbeg euid on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg uid # Note groups= is handled specially due to a bug in OS X 10.6, 10.7, # and probably upcoming releases...
if UNK UNK UNK UNK on_period UNK on_nl return UNK on_nl UNK on_ignored_nl UNK UNK on_nl end on_nl end on_nl #We catch Errno::EINVAL as some operating systems (OS X in particular) can # cause troubles when using Process#groups= to change *this* user / process # list of supplementary groups membership. This is done via Ruby's function # "static VALUE proc_setgroups(VALUE obj, VALUE ary)" which is effectively # a wrapper for "int setgroups(size_t size, const gid_t *list)" (part of SVr4 # and 4.3BSD but not in POSIX.1-2001) that fails and sets errno to EINVAL. # # This does not appear to be a problem with Ruby but rather an issue on the # operating system side. Therefore we catch the exception and look whether # we run under OS X or not -- if so, then we acknowledge the problem and # re-throw the exception otherwise.
on_ignored_nl def UNK on_lparen UNK on_op nil on_comma UNK on_op nil on_rparen on_ignored_nl return UNK if on_const on_op on_const on_op # Methods to handle changing uid/gid of the running process. In general, # these will noop or fail on Windows, and require root to change to anything # but the current uid/gid (which is a noop).
def UNK on_lparen UNK on_op nil on_comma UNK on_op nil on_rparen on_ignored_nl return UNK if on_const on_op on_const on_op on_const # Runs block setting euid and egid if provided then restoring original ids. # If running on Windows or without root, the block will be run with the # current euid/egid.
def UNK on_lparen uid on_op nil on_comma gid on_op nil on_comma permanently on_op false on_rparen on_ignored_nl return unless uid UNK # If `permanently` is set, will permanently change the uid/gid of the # process. If not, it will only set the euid/egid. If only uid is supplied, # the primary group of the supplied gid will be used. If only gid is # supplied, only gid will be changed. This method will fail if used on # Windows.
def UNK on_lparen UNK on_comma permanently on_op false on_rparen on_ignored_nl gid on_op UNK on_lparen on_symbeg gid on_comma UNK on_rparen on_nl # Changes the egid of the process if `permanently` is not set, otherwise # changes gid. This method will fail if used on Windows, or attempting to # change to a different gid without root.
def UNK on_lparen UNK on_comma permanently on_op false on_rparen on_ignored_nl uid on_op UNK on_lparen on_symbeg uid on_comma UNK on_rparen on_nl # As change_group, but operates on uids. If changing user permanently, # supplementary groups will be set the to default groups for the new uid.
initgroups on_lparen uid on_rparen on_nl on_ignored_nl on_const on_op on_const on_period UNK on_lparen uid on_rparen on_nl UNK on_ignored_nl if on_const on_period # If changing uid, we must be root. So initgroups first here.
if on_const on_period euid on_op UNK on_nl initgroups on_lparen uid on_rparen on_nl on_const on_period euid on_op uid on_nl UNK on_ignored_nl # We must be root to initgroups, so initgroups before dropping euid if # we're root, otherwise elevate euid before initgroups. # change euid (to root) first.
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl return UNK if UNK on_period UNK on_const on_nl UNK on_op UNK on_symbeg # Make sure the passed argument is a number.
def initgroups on_lparen uid on_rparen on_ignored_nl UNK on_op on_const on_period UNK on_lparen uid on_rparen on_nl on_const on_period initgroups on_lparen UNK # Initialize primary and supplemental groups to those of the target user. We # take the UID and manually look up their details in the system database, # including username and primary group. This method will fail on Windows, or # if used without root to initgroups of another user.
