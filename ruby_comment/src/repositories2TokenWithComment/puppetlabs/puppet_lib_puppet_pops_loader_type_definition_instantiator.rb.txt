UNK on_const on_op on_const on_nl UNK on_const on_nl UNK on_const on_nl def self on_period UNK on_lparen UNK on_comma UNK on_comma # The TypeDefinitionInstantiator instantiates a type alias or a type definition #
UNK on_op on_const on_op on_const on_period UNK on_lparen on_rparen on_nl UNK on_op UNK on_period UNK on_lparen UNK on_comma source_ref on_rparen # parse and validate
on_ignored_nl name on_op UNK on_period name on_nl UNK UNK on_period UNK on_period UNK on_nl UNK UNK on_nl UNK on_const on_comma # Only one type is allowed (and no other definitions)
UNK on_ignored_nl UNK on_const on_comma on_ignored_nl UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op UNK on_label source_ref on_comma on_label name UNK # ok
UNK on_op UNK on_period UNK on_nl on_const on_op on_const on_period UNK on_lparen type_definition on_rparen on_period UNK on_op UNK on_period UNK # Adapt the type definition with loader - this is used from logic contained in its body to find the # loader to use when resolving contained aliases API. Such logic have a hard time finding the closure (where # the loader is known - hence this mechanism
def self on_period UNK on_lparen type_definition on_rparen on_ignored_nl UNK on_lparen type_definition on_period name on_comma type_definition on_period type_expr on_comma on_const on_op # @api private
UNK on_lparen type_definition on_period name on_comma type_definition on_period type_expr on_comma on_const on_op on_const on_rparen on_nl end on_nl on_ignored_nl def self # Using the RUNTIME_NAME_AUTHORITY as the name_authority is motivated by the fact that the type # alias name (managed by the runtime) becomes the name of the created type #
def self on_period UNK on_lparen name on_comma type_expr on_comma UNK on_rparen on_ignored_nl UNK on_lparen name on_comma UNK on_lparen type_expr on_rparen # @api private
def self on_period UNK on_lparen name on_comma UNK on_comma type_expr on_comma UNK on_rparen on_ignored_nl UNK UNK on_nl UNK on_tstring_beg on_tstring_content # @api private
unless type_expr on_period is_a? on_lparen on_const on_op on_const on_rparen on_nl type_expr on_op type_expr on_period UNK on_period UNK on_op UNK on_op # No need for an alias. The Object type itself will receive the name instead
type_expr on_op type_expr on_period UNK on_period UNK on_op UNK on_op type_expr on_period UNK UNK UNK UNK unless type_expr on_period is_a? # No need for an alias. The Object type itself will receive the name instead
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end UNK UNK on_period is_a? on_lparen on_const on_op on_const # @api private
