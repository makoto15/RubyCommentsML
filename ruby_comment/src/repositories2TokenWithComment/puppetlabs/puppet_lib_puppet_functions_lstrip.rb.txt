UNK UNK UNK UNK UNK on_lparen on_symbeg UNK on_rparen UNK on_ignored_nl on_ignored_nl UNK on_symbeg UNK UNK on_ignored_nl UNK UNK UNK # Strips leading spaces from a String # # This function is compatible with the stdlib function with the same name. # # The function does the following: # * For a `String` the conversion removes all leading ASCII white space characters such as space, tab, newline, and return. # It does not remove other space-like characters like hard space (Unicode U+00A0). (Tip, `/^[[:space:]]/` regular expression # matches all space-like characters). # * For an `Iterable[Variant[String, Numeric]]` (for example an `Array`) each value is processed and the conversion is not recursive. # * If the value is `Numeric` it is simply returned (this is for backwards compatibility). # * An error is raised for all other data types. # # @example Removing leading space from a String # ```puppet # "\n\thello".lstrip() # camelcase("\n\thello") # ``` # Would both result in `"hello"` # # @example Removing leading space from strings in an Array # ```puppet # ["\n\thello", "\n\thi"].lstrip() # lstrip(["\n\thello", "\n\thi"]) # ``` # Would both result in `['hello', 'hi']` #
UNK UNK on_lparen UNK on_rparen on_ignored_nl UNK on_nl end on_nl on_ignored_nl UNK UNK on_lparen UNK on_rparen on_ignored_nl UNK UNK UNK # unit function - since the old implementation skipped Numeric values
x UNK UNK on_lparen UNK on_rparen UNK x UNK UNK UNK x on_nl end on_nl end on_nl EMP EMP EMP # x can only be a String or Numeric because type constraints have been automatically applied
