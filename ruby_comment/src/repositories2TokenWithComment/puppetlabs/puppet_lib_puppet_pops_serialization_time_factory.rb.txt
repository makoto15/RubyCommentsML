UNK on_const on_nl on_ignored_nl on_const on_op UNK on_op UNK on_nl on_ignored_nl def self on_period UNK on_lparen on_op args on_rparen on_ignored_nl # Implements all the constructors found in the Time class and ensures that # the created Time object can be serialized and deserialized using its # seconds and nanoseconds without loss of precision. # # @deprecated No longer in use. Functionality replaced by Timestamp # @api private
def self on_period UNK on_lparen UNK UNK UNK on_rparen on_ignored_nl on_const on_period UNK on_lparen on_const on_lparen UNK on_op on_const on_op # Creates a Time object from a Rational defined as: # # (_sec_ * #NANO_DENOMINATOR + _nsec_) / #NANO_DENOMINATOR # # This ensures that a Time object can be reliably serialized and using its # its #tv_sec and #tv_nsec values and then recreated again (using this method) # without loss of precision. # # @param sec [Integer] seconds since Epoch # @param nsec [Integer] nano seconds # @return [Time] the created object #
def self on_period sec_nsec_safe on_lparen UNK on_rparen on_ignored_nl UNK on_lparen UNK on_period UNK UNK UNK on_period UNK on_rparen on_nl end # Returns a new Time object that is adjusted to ensure that precision is not # lost when it is serialized and deserialized using its seconds and nanoseconds # @param t [Time] the object to adjust # @return [Time] the adjusted object #
