class on_const on_op on_const on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl # the class that actually walks our resource/property tree, collects the changes, # and performs them # # @api private
UNK on_symbeg report on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_comma on_symbeg # The report, once generated.
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg # Routes and stores any events and subscriptions.
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg persistence on_nl on_ignored_nl UNK on_const # Handles most of the actual interacting with resources
UNK on_symbeg persistence on_nl on_ignored_nl UNK on_const on_op on_const on_nl UNK on_const on_op on_const on_op on_const on_nl on_ignored_nl def UNK # @!attribute [r] persistence # @return [Puppet::Transaction::Persistence] persistence object for cross # transaction storage.
on_ivar on_op on_const on_lbracket on_symbeg UNK on_rbracket on_nl on_ivar on_op on_const on_period new on_lparen on_rparen on_nl on_ivar on_op on_const on_period # With merge_dependency_warnings, notify and warn about class dependency failures ... just once per class. TJK 2019-09-09
def UNK on_nl UNK on_op on_lbrace on_rbrace on_nl on_ignored_nl on_ivar on_period UNK on_period each do on_op res on_op on_ignored_nl UNK # Invoke the pre_run_check hook in every resource in the catalog. # This should (only) be called by Transaction#evaluate before applying # the catalog. # # @see Puppet::Transaction#evaluate # @see Puppet::Type#pre_run_check # @raise [Puppet::Error] If any pre-run checks failed. # @return [void]
def UNK on_lparen on_op UNK on_rparen on_ignored_nl UNK on_op UNK on_lparen on_symbeg UNK on_rparen on_nl UNK on_op on_const on_period new # This method does all the actual work of running a transaction. It # collects all of the changes, executes them, and responds to any # necessary events.
relationship_graph on_period UNK if UNK on_period UNK on_lparen resource on_rparen on_nl end on_nl on_ignored_nl UNK on_op on_lbracket on_rbracket on_nl UNK # If we generated resources, we don't know what they are now # blocking, so we opt to recompute it, rather than try to track every # change that would affect the number.
return if UNK on_lparen resource on_rparen on_nl if resource on_period provider on_nl resource on_period UNK _ on_lparen on_tstring_beg on_tstring_content on_tstring_end # We don't automatically assign unsuitable providers, so if there # is one, it must have been selected by the user.
UNK on_period UNK on_period each do on_op type on_op on_ignored_nl on_const on_period UNK _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op # Just once per type. No need to punish the user.
UNK on_op lambda do on_op UNK on_op on_ignored_nl UNK on_period UNK on_period UNK on_period each do on_op resource on_op on_ignored_nl # Graph cycles are returned as an array of arrays # - outer array is an array of cycles # - each inner array is an array of resources involved in a cycle # Short circuit resource evaluation if we detect cycle(s) in the graph. Mark # each corresponding resource as failed in the report before we fail to # ensure accurate reporting.
resource_status on_lparen resource on_rparen on_period UNK on_lparen _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_rparen on_nl end on_nl UNK on_const on_op # We add a failed resource event to the status to ensure accurate # reporting through the event manager.
UNK on_period relationship_graph on_op relationship_graph on_nl UNK on_op UNK on_nl relationship_graph on_period UNK on_lparen on_symbeg UNK on_op UNK on_comma on_ignored_nl # Generate the relationship graph, set up our generator to use it # for eval_generate, then kick off our traversal.
if UNK on_period UNK on_nl report on_period UNK on_op true on_nl end on_nl on_ignored_nl report on_period UNK on_op true on_nl # if one or more resources has attempted and failed to generate resources, # report it
report on_period UNK on_op true on_nl on_ignored_nl on_const on_period debug on_tstring_beg on_tstring_content UNK UNK UNK on_tstring_end on_nl end on_nl on_ignored_nl # mark the end of transaction evaluate.
def UNK on_nl on_const on_op on_const on_period UNK on_op catalog on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl report # Wraps application run state check to flag need to interrupt processing
def UNK on_nl report on_period UNK on_period UNK on_period UNK on_lbrace on_op status on_op on_ignored_nl status on_period UNK on_op status # Are there any failed resources in this transaction?
def UNK on_nl report on_period UNK on_period UNK on_period UNK on_lbrace on_op status on_op status on_period UNK on_rbrace on_period UNK # Find all of the changed resources.
def tags on_nl UNK on_period tags on_op on_const on_lbracket on_symbeg tags on_rbracket unless UNK on_lparen on_ivar on_rparen on_nl on_ignored_nl UNK # The tags we should be checking.
def UNK on_lparen resource on_comma UNK on_op UNK on_rparen on_ignored_nl status on_op UNK on_period UNK on_lparen resource on_rparen on_nl UNK # Apply all changes for a resource
def UNK on_lparen resource on_comma UNK on_op UNK on_rparen on_ignored_nl UNK on_lparen resource on_rparen on_nl if UNK on_lparen resource on_rparen # Evaluate a single resource.
def UNK on_lparen resource on_rparen on_ignored_nl UNK on_op resource on_period class on_op on_const on_op on_const on_period type on_lparen on_symbeg UNK # Does this resource have any failed dependencies?
UNK on_op resource on_period class on_op on_const on_op on_const on_period type on_lparen on_symbeg UNK on_rparen on_nl s on_op resource_status on_lparen # When we introduced the :whit into the graph, to reduce the combinatorial # explosion of edges, we also ended up reporting failures for containers # like class and stage. This is undesirable; while just skipping the # output isn't perfect, it is RC-safe. --daniel 2011-06-07
s on_op resource_status on_lparen resource on_rparen on_nl if s on_op s on_period UNK on_nl if on_ivar on_op UNK on_nl UNK # With merge_dependency_warnings, notify about class dependency failures ... just once per class. TJK 2019-09-09
UNK on_op on_lparen s on_period UNK on_period UNK on_lparen on_op on_symbeg ref on_rparen on_op on_ivar on_period UNK on_rparen on_nl UNK # Notes: Puppet::Resource::Status.failed_dependencies() is an Array of Puppet::Resource(s) and # Puppet::Resource.ref() calls Puppet::Resource.to_s() which is: "#{type}[#{title}]" and # Puppet::Resource.resource_status(resource) calls Puppet::Resource.to_s()
def UNK on_lparen resource on_rparen on_ignored_nl on_ignored_nl provider_class on_op resource on_period provider on_period class on_nl s on_op resource_status on_lparen resource # We need to know if a resource has any failed dependencies before # we try to process it. We keep track of this by keeping a list on # each resource of the failed dependencies, and incrementally # computing it as the union of the failed dependencies of each # first-order dependency. We have to do this as-we-go instead of # up-front at failure time because the graph may be mutated as we # walk it.
def UNK on_nl on_op on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen type_name on_comma UNK on_rparen on_ignored_nl unless # Should we ignore tags?
def UNK on_lparen provider_class on_comma UNK on_rparen on_ignored_nl type_name on_op provider_class on_period UNK on_period name on_nl return if on_ivar on_lbracket # Prefetch any providers that support it, yo. We don't support prefetching # types, just providers.
message on_op _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label type_name on_comma on_label provider_class on_period name on_comma on_label detail #TRANSLATORS `prefetch` is a function name and should not be translated
def UNK on_lparen resource on_rparen on_ignored_nl UNK on_period UNK on_op UNK on_period UNK on_lparen resource on_rparen on_nl end on_nl on_ignored_nl # Is the resource currently scheduled?
def UNK on_lparen resource on_rparen on_ignored_nl if UNK on_lparen resource on_rparen on_nl resource on_period debug on_tstring_beg on_tstring_content UNK UNK on_period # Should this resource be skipped?
unless resource on_period class on_op on_const on_op on_const on_period type on_lparen on_symbeg UNK on_rparen on_nl if on_ivar on_op resource on_period # When we introduced the :whit into the graph, to reduce the combinatorial # explosion of edges, we also ended up reporting failures for containers # like class and stage. This is undesirable; while just skipping the # output isn't perfect, it is RC-safe. --daniel 2011-06-07 # With merge_dependency_warnings, warn about class dependency failures ... just once per class. TJK 2019-09-09
resource on_period UNK _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl elsif resource on_period UNK on_nl resource on_period debug on_tstring_beg on_tstring_content #Do not try to evaluate a resource with a known failed provider
def UNK on_lparen resource on_rparen on_ignored_nl return false if UNK on_nl return false if tags on_period UNK on_nl on_ignored_nl UNK # Is this resource tagged appropriately?
UNK on_symbeg UNK on_nl UNK on_symbeg UNK on_nl on_ignored_nl end on_nl on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl EMP EMP EMP # These two methods are only made public to enable the existing spec tests to run # under rspec 3 (apparently rspec 2 didn't enforce access controls?). Please do not # treat these as part of a public API. # Possible future improvement: rewrite to not require access to private methods.
