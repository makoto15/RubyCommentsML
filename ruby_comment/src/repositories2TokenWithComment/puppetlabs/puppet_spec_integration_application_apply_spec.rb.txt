UNK on_lparen on_const on_op on_const on_rparen on_period to receive on_lparen on_symbeg UNK on_rparen on_period UNK on_nl end on_nl on_ignored_nl UNK # Let exceptions be raised instead of exiting
it on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl on_const on_lbracket on_symbeg UNK on_rbracket on_op on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_op on_const on_op # Test just to verify that the Pcore Resource Type and not the Ruby one is produced when the catalog is produced
UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma node on_rparen on_nl on_ignored_nl notices on_op UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma node on_rparen # Ensure that the Resource[applytest,foo] is loaded'
notices on_op UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma node on_rparen on_nl expect on_lparen notices on_rparen on_period to include on_lparen on_tstring_beg # Ensure that: # a) The catalog contains aliases (using a name for the abc resource ensures this) # b) That Resource[applytest,xyz] is not defined in the catalog (although it's loaded) # c) That this doesn't trigger a load of the Puppet::Type
context on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl let on_lparen on_symbeg UNK on_rparen on_lbrace UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_rbrace on_nl # When executing an ENC script, output cannot be captured using # expect { }.to have_printed(...) # External node script execution will fail, likely due to the tampering # with the basic file descriptors. # Workaround: Define a log destination and merely inspect logs.
expect on_lparen cat on_period resource on_lparen on_symbeg notify on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period UNK # The resource return in this expect is a String, but since it was a Binary type that # was converted with `resolve_and_replace`, we want to make sure that the encoding # of that string is the expected ASCII-8BIT.
expect on_lbrace on_ignored_nl apply on_period command_line on_period args on_op on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl apply # processing the report happens after the transaction is finished, # so we expect exit code 0, with a later failure on stderr
UNK on_op UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_period UNK on_lparen UNK on_comma UNK on_period UNK on_period UNK # create a temp cacert bundle
on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_op UNK on_rparen do on_ignored_nl expect on_lbrace on_ignored_nl apply on_period command_line # override path to system cacert bundle, this must be done before # the SSLContext is created and the call to X509::Store.set_default_paths
