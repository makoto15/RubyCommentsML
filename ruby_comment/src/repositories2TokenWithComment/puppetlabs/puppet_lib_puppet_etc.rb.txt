on_ignored_nl UNK on_const on_op on_const on_nl UNK on_op UNK on_nl on_ignored_nl def UNK on_nl override_field_values_to_utf8 on_lparen on_op on_const on_period UNK # Wrapper around Ruby Etc module allowing us to manage encoding in a single # place. # This represents a subset of Ruby's Etc module, only the methods required by Puppet.
UNK on_const on_op on_const on_nl UNK on_op UNK on_nl on_ignored_nl def UNK on_nl override_field_values_to_utf8 on_lparen on_op on_const on_period UNK on_rparen # On Ruby 2.1.0 and later, Etc returns strings in variable encoding depending on # environment. The string returned will be labeled with the environment's # encoding (Encoding.default_external), with one exception: If the environment # encoding is 7-bit ASCII, and any individual character bit representation is # equal to or greater than 128 - \x80 - 0b10000000 - signifying the smallest # 8-bit big-endian value, the returned string will be in BINARY encoding instead # of environment encoding. # # Barring that exception, the returned string will be labeled as encoding # Encoding.default_external, regardless of validity or byte-width. For example, # ruby will label a string containing a four-byte characters such as "\u{2070E}" # as EUC_KR even though EUC_KR is a two-byte width encoding. # # On Ruby 2.0.x and earlier, Etc will always return string values in BINARY, # ignoring encoding altogether. # # For Puppet we specifically want UTF-8 as our input from the Etc module - which # is our input for many resource instance 'is' values. The associated 'should' # value will basically always be coming from Puppet in UTF-8 - and written to # disk as UTF-8. Etc is defined for Windows but the majority calls to it return # nil and Puppet does not use it. # # That being said, we have cause to retain the original, pre-override string # values. `puppet resource user` # (Puppet::Resource::User.indirection.search('User', {})) uses self.instances to # query for user(s) and then iterates over the results of that query again to # obtain state for each user. If we've overridden the original user name and not # retained the original, we've lost the ability to query the system for it # later. Hence the Puppet::Etc::Passwd and Puppet::Etc::Group structs. # # We only use Etc for retrieving existing property values from the system. For # setting property values, providers leverage system tools (i.e., `useradd`) # # @api private
def UNK on_nl override_field_values_to_utf8 on_lparen on_op on_const on_period UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl on_op on_const on_period # Etc::getgrent returns an Etc::Group struct object # On first call opens /etc/group and returns parse of first entry. Each subsquent call # returns new struct the next entry or nil if EOF. Call ::endgrent to close file.
def UNK on_nl on_op on_const on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_op on_const on_period UNK on_nl end # closes handle to /etc/group file
def UNK on_nl on_op on_const on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl override_field_values_to_utf8 on_lparen on_op on_const on_period UNK # effectively equivalent to IO#rewind of /etc/group
def UNK on_nl override_field_values_to_utf8 on_lparen on_op on_const on_period UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl on_op on_const on_period # Etc::getpwent returns an Etc::Passwd struct object # On first call opens /etc/passwd and returns parse of first entry. Each subsquent call # returns new struct for the next entry or nil if EOF. Call ::endgrent to close file.
def UNK on_nl on_op on_const on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_op on_const on_period UNK on_nl end # closes handle to /etc/passwd file
def UNK on_nl on_op on_const on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl override_field_values_to_utf8 on_lparen on_op #effectively equivalent to IO#rewind of /etc/passwd
def UNK on_lparen UNK on_rparen on_ignored_nl override_field_values_to_utf8 on_lparen on_op on_const on_period UNK on_lparen UNK on_rparen on_rparen on_nl end on_nl on_ignored_nl # Etc::getpwnam searches /etc/passwd file for an entry corresponding to # username. # returns an Etc::Passwd struct corresponding to the entry or raises # ArgumentError if none
def UNK on_lparen UNK on_rparen on_ignored_nl override_field_values_to_utf8 on_lparen on_op on_const on_period UNK on_lparen UNK on_rparen on_rparen on_nl end on_nl on_ignored_nl # Etc::getgrnam searches /etc/group file for an entry corresponding to groupname. # returns an Etc::Group struct corresponding to the entry or raises # ArgumentError if none
def UNK on_lparen UNK on_rparen on_ignored_nl override_field_values_to_utf8 on_lparen on_op on_const on_period UNK on_lparen UNK on_rparen on_rparen on_nl end on_nl on_ignored_nl # Etc::getgrid searches /etc/group file for an entry corresponding to id. # returns an Etc::Group struct corresponding to the entry or raises # ArgumentError if none
def UNK on_lparen UNK on_rparen on_ignored_nl override_field_values_to_utf8 on_lparen on_op on_const on_period UNK on_lparen UNK on_rparen on_rparen on_nl end on_nl on_ignored_nl # Etc::getpwuid searches /etc/passwd file for an entry corresponding to id. # returns an Etc::Passwd struct corresponding to the entry or raises # ArgumentError if none
def UNK on_nl UNK UNK UNK UNK on_nl on_ignored_nl UNK on_nl UNK on_ignored_nl UNK UNK on_op UNK UNK UNK on_nl # Etc::group returns a Ruby iterator that executes a block for # each entry in the /etc/group file. The code-block is passed # a Group struct. See getgrent above for more details.
UNK UNK UNK UNK on_nl on_ignored_nl UNK on_nl UNK on_ignored_nl UNK UNK on_op UNK UNK UNK on_nl end on_nl UNK # The implementation here duplicates the logic in https://github.com/ruby/etc/blob/master/ext/etc/etc.c#L523-L537 # Note that we do not call ::Etc.group directly, because we # want to use our wrappers for methods like getgrent, setgrent, # endgrent, etc.
UNK UNK on_nl end on_nl UNK on_ignored_nl UNK on_nl end on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl def UNK on_nl #rubocop:disable Lint/AssignmentInCondition
def UNK on_nl UNK on_op on_const on_period UNK on_lparen on_op on_const on_op on_const on_period UNK UNK on_op on_const on_op on_const # @api private # Defines Puppet::Etc::Passwd struct class. Contains all of the original # member fields of Etc::Passwd, and additional "canonical_" versions of # these fields as well. API compatible with Etc::Passwd. Because Struct.new # defines a new Class object, we memoize to avoid superfluous extra Class # instantiations.
def UNK on_nl UNK on_op on_const on_period UNK on_lparen on_op on_const on_op on_const on_period UNK UNK on_op on_const on_op on_const # @api private # Defines Puppet::Etc::Group struct class. Contains all of the original # member fields of Etc::Group, and additional "canonical_" versions of these # fields as well. API compatible with Etc::Group. Because Struct.new # defines a new Class object, we memoize to avoid superfluous extra Class # instantiations.
def override_field_values_to_utf8 on_lparen UNK on_rparen on_ignored_nl UNK UNK UNK UNK on_period UNK on_nl new_struct on_op UNK on_period UNK on_lparen on_const # Utility method for overriding the String values of a struct returned by # the Etc module to UTF-8. Structs returned by the ruby Etc module contain # members with fields of type String, Integer, or Array of Strings, so we # handle these types. Otherwise ignore fields. # # @api private # @param [Etc::Passwd or Etc::Group struct] # @return [Puppet::Etc::Passwd or Puppet::Etc::Group struct] a new struct # object with the original struct values overridden to UTF-8, if valid. For # invalid values originating in UTF-8, invalid characters are replaced with # '?'. For each member the struct also contains a corresponding # :canonical_<member name> struct member.
