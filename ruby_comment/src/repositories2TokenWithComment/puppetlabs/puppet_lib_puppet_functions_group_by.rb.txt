on_ignored_nl UNK on_op UNK on_period UNK on_lparen on_symbeg UNK on_rparen do on_ignored_nl UNK on_symbeg UNK do on_ignored_nl UNK on_tstring_beg on_tstring_content # frozen_string_literal: true
UNK on_op UNK on_period UNK on_lparen on_symbeg UNK on_rparen do on_ignored_nl UNK on_symbeg UNK do on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end # Groups the collection by result of the block. Returns a hash where the keys are the evaluated result from the block # and the values are arrays of elements in the collection that correspond to the key.
UNK on_symbeg UNK do on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg collection on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg UNK # @param collection A collection of things to group. # @example Group array of strings by length, results in e.g. { 1 => [a, b], 2 => [ab] } # [a, b, ab].group_by |$s| { $s.length } # @example Group array of strings by length and index, results in e.g. {1 => ['a'], 2 => ['b', 'ab']} # [a, b, ab].group_by |$i, $s| { $i%2 + $s.length } # @example Group hash iterating by key-value pair, results in e.g. { 2 => [['a', [1, 2]]], 1 => [['b', [1]]] } # { a => [1, 2], b => [1] }.group_by |$kv| { $kv[1].length } # @example Group hash iterating by key and value, results in e.g. { 2 => [['a', [1, 2]]], 1 => [['b', [1]]] } # { a => [1, 2], b => [1] }.group_by |$k, $v| { $v.length }
