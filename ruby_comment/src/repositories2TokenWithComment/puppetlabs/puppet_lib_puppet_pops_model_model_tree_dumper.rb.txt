UNK on_const on_op on_const on_op on_const on_op on_const on_op on_const on_op on_const on_op on_const on_op on_const on_nl def UNK o # Dumps a Pops::Model in reverse polish notation; i.e. LISP style # The intention is to use this for debugging output # TODO: BAD NAME - A DUMP is a Ruby Serialization #
def UNK o on_nl if o on_period UNK on_period size on_op on_int on_nl on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma do_dump on_lparen # x[y] prints as (slice x y)
if o on_period body on_nl result on_op do_dump on_lparen o on_period body on_rparen on_nl else on_ignored_nl result on_op on_lbracket on_rbracket # result << ["parameters"] + o.parameters.collect {|p| do_dump(p) } if o.parameters.size() > 0
def UNK o on_nl on_lbracket o on_period UNK on_comma o on_period operator on_comma do_dump on_lparen o on_period UNK on_rparen on_rbracket # Produces (name => expr) or (name +> expr)
def UNK o on_nl on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma do_dump on_lparen o on_period expr on_rparen on_rbracket on_nl end on_nl on_ignored_nl # Interpolation (to string) shown as (str expr)
def UNK o on_nl on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op o on_period UNK on_period collect on_lbrace on_op x on_op do_dump # Interpolated strings are shown as (cat seg0 seg1 ... segN)
result on_op on_lbracket UNK on_comma o on_period name on_rbracket on_nl result on_op on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op o on_period # the nil must be replaced with a string
def UNK o on_nl UNK on_op o on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_op on_tstring_beg on_tstring_end on_nl UNK on_op on_tstring_beg # Produces parameters as name, or (= name value)
def UNK on_lparen o on_rparen on_ignored_nl UNK on_lparen o on_period body on_rparen on_nl end on_nl on_ignored_nl def UNK o on_nl # Hides that Program exists in the output (only its body is shown), the definitions are just # references to contained classes, resource types, and nodes
def UNK o on_nl result on_op on_lbracket o on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_op on_tstring_beg on_tstring_content on_tstring_end on_comma do_dump # Produces (invoke name args...) when not required to produce an rvalue, and # (call name args ... ) otherwise. #
on_ignored_nl def UNK o on_nl result on_op on_lbracket o on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_op on_tstring_beg on_tstring_content on_tstring_end on_comma # def dump_CallNamedFunctionExpression o # result = [o.rval_required ? "call" : "invoke", do_dump(o.functor_expr)] # o.arguments.collect {|a| result << do_dump(a) } # result # end
