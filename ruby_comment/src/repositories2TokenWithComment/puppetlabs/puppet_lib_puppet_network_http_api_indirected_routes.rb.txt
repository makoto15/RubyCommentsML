on_const on_op on_lbrace on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op on_lbrace on_ignored_nl on_symbeg UNK on_op on_symbeg UNK on_comma on_ignored_nl on_symbeg singular on_op # How we map http methods and the indirection name in the URI # to an indirection method.
def UNK on_lparen request on_comma response on_rparen on_ignored_nl indirection on_comma method on_comma key on_comma params on_op UNK on_lparen request on_period # handle an HTTP request
raise on_const on_op on_const on_op on_const on_op on_const on_op on_const on_period new on_lparen _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op # TODO: should we tell the user we found an indirection but it doesn't # allow remote requests, or just pretend there's no handler at all? what # are the security implications for the former?
UNK on_comma UNK on_comma indirection_name on_comma key on_op UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_int on_rparen on_lbracket on_int # the first field is always nil because of the leading slash,
method on_op UNK on_lparen http_method on_comma indirection_name on_rparen on_nl on_ignored_nl if url_prefix on_op on_const on_period UNK on_lparen indirection_name on_rparen on_nl # this also depluralizes the indirection_name if it is a search
if url_prefix on_op on_const on_period UNK on_lparen indirection_name on_rparen on_nl raise on_const on_op on_const on_op on_const on_op on_const on_op on_const # check whether this indirection matches the prefix and version in the # request
def UNK on_lparen indirection on_comma key on_comma params on_comma request on_comma response on_rparen on_ignored_nl result on_op indirection on_period UNK on_lparen # Execute our find.
def UNK on_lparen indirection on_comma key on_comma params on_comma request on_comma response on_rparen on_ignored_nl UNK indirection on_period UNK on_lparen key # Execute our head.
end on_nl on_ignored_nl def UNK on_lparen indirection on_comma key on_comma params on_comma request on_comma response on_rparen on_ignored_nl result on_op indirection # No need to set a response because no response is expected from a # HEAD request. All we need to do is not die.
def UNK on_lparen indirection on_comma key on_comma params on_comma request on_comma response on_rparen on_ignored_nl result on_op indirection on_period UNK on_lparen # Execute our search.
def UNK on_lparen indirection on_comma key on_comma params on_comma request on_comma response on_rparen on_ignored_nl formatter on_op UNK on_lparen indirection on_period # Execute our destroy.
def UNK on_lparen indirection on_comma key on_comma params on_comma request on_comma response on_rparen on_ignored_nl formatter on_op UNK on_lparen indirection on_period # Execute our save.
def UNK on_lparen model on_comma request on_comma on_op UNK on_rparen on_ignored_nl UNK on_op UNK on_lparen model on_comma request on_rparen on_nl # Return the first response formatter that didn't cause the yielded # block to raise a FormatError.
def UNK on_lparen model_class on_comma request on_rparen on_ignored_nl request on_period UNK on_lparen model_class on_period UNK on_rparen on_nl end on_nl on_ignored_nl # Return an array of response formatters that the client accepts and # the server supports.
def UNK on_lparen model_class on_comma request on_rparen on_ignored_nl request on_period UNK on_lparen model_class on_period UNK on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen # Return the first response formatter that the client accepts and # the server supports, or default to 'application/json'.
raise on_const on_op on_const on_op on_const on_op on_const on_op on_const on_period new on_lparen on_ignored_nl _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen #TRANSLATORS "mime-type" is a keyword and should not be translated
return on_symbeg singular if indirection on_op on_tstring_beg on_tstring_content on_tstring_end on_nl return on_symbeg singular if indirection on_op on_tstring_beg on_tstring_content on_tstring_end on_nl # NOTE These specific hooks for paths are ridiculous, but it's a *many*-line # fix to not need this, and our goal is to move away from the complication # that leads to the fix being too long.
