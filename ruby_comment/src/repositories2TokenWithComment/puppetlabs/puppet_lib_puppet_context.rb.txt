class on_const on_op on_const on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl class on_const on_op on_const on_op on_const UNK end on_nl # Puppet::Context is a system for tracking services and contextual information # that puppet needs to be able to run. Values are "bound" in a context when it is created # and cannot be changed; however a child context can be created, using # {#override}, that provides a different value. # # When binding a {Proc}, the proc is called when the value is looked up, and the result # is memoized for subsequent lookups. This provides a lazy mechanism that can be used to # delay expensive production of values until they are needed. # # @api private
def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op on_const on_op on_const on_period new on_lparen on_const on_period new on_period push on_lparen # @api private
on_ivar on_op on_const on_op on_const on_period new on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl def push on_lparen overrides on_comma description # By initializing @rollbacks to nil and creating a hash lazily when #mark or # #rollback are called we ensure that the hashes are never shared between # threads and it's safe to mutate them
def push on_lparen overrides on_comma description on_op on_tstring_beg on_tstring_end on_rparen on_ignored_nl on_ivar on_period value on_op on_ivar on_period value on_period push # @api private
def UNK on_lparen overrides on_comma description on_op on_tstring_beg on_tstring_end on_rparen on_ignored_nl on_ivar on_op on_const on_op on_const on_period new on_lparen on_ignored_nl # Push a context and make this global across threads # Do not use in a context where multiple threads may already exist # # @api private
def UNK on_nl on_ivar on_period value on_op on_ivar on_period value on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen name # @api private
def UNK on_lparen name on_comma on_op block on_rparen on_ignored_nl on_ivar on_period value on_period UNK on_lparen name on_comma on_op block on_rparen # @api private
def UNK on_lparen bindings on_comma description on_op on_tstring_beg on_tstring_end on_comma on_op block on_rparen on_ignored_nl UNK on_op on_ivar on_period value on_nl # @api private
def UNK on_lparen name on_rparen on_ignored_nl on_ivar on_period value on_op on_lbrace on_rbrace on_nl UNK on_ivar on_period value UNK name UNK # Mark a place on the context stack to later return to with {rollback}. # # @param name [Object] The identifier for the mark # # @api private
def UNK on_lparen name on_rparen on_ignored_nl on_ivar on_period value on_op on_lbrace on_rbrace on_nl UNK on_ivar on_period value UNK name UNK # Roll back to a mark set by {mark}. # # Rollbacks can only reach a mark accessible via {pop}. If the mark is not on # the current context stack the behavior of rollback is undefined. # # @param name [Object] The identifier for the mark # # @api private
class on_const on_nl def UNK on_lparen name on_comma on_op block on_rparen on_ignored_nl UNK block on_nl block on_period UNK on_nl UNK # Base case for Puppet::Context::Stack. # # @api private
def UNK on_lparen name on_comma on_op block on_rparen on_ignored_nl UNK block on_nl block on_period UNK on_nl UNK on_ignored_nl UNK on_const # Lookup a binding. Since there are none in EmptyStack, this always raises # an exception unless a block is passed, in which case the block is called # and its return value is used. # # @api private
def UNK on_nl UNK on_lparen on_const on_comma on_ignored_nl UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_rparen on_nl end on_nl on_ignored_nl def # Base case of #pop always raises an error since this is the bottom # # @api private
def push on_lparen overrides on_comma description on_op on_tstring_beg on_tstring_end on_rparen on_ignored_nl on_const on_op on_const on_op on_const on_period new on_lparen UNK # Push bindings onto the stack by creating a new Stack object with `self` as # the parent # # @api private
def bindings on_nl on_lbrace on_rbrace on_nl end on_nl end on_nl on_ignored_nl class on_const on_nl UNK UNK bindings on_nl on_ignored_nl def # Return the bindings table, which is always empty here # # @api private
class on_const on_nl UNK UNK bindings on_nl on_ignored_nl def UNK on_lparen UNK on_comma bindings on_comma description on_op on_tstring_beg on_tstring_end on_rparen # Internal implementation of the bindings stack used by Puppet::Context. An # instance of Puppet::Context::Stack represents one level of bindings. It # caches a merged copy of all the bindings in the stack up to this point. # Each element of the stack is immutable, allowing the base to be shared # between threads. # # @api private
def UNK on_lparen name on_comma on_op block on_rparen on_ignored_nl UNK on_ivar on_period UNK on_lparen name on_rparen on_nl value on_op on_ivar # Lookup a binding in the current stack. Return the value if it is present. # If the value is a stored Proc, evaluate, cache, and return the result. If # no binding is found and a block is passed evaluate it and return the # result. Otherwise an exception is raised. # # @api private
def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def push on_lparen overrides on_comma description on_op on_tstring_beg on_tstring_end on_rparen on_ignored_nl on_const # Pop one level off the stack by returning the parent object. # # @api private
def push on_lparen overrides on_comma description on_op on_tstring_beg on_tstring_end on_rparen on_ignored_nl on_const on_op on_const on_op on_const on_period new on_lparen UNK # Push bindings onto the stack by creating a new Stack object with `self` as # the parent # # @api private
