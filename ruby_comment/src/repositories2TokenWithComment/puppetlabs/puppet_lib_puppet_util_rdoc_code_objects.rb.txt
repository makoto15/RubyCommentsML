on_ignored_nl UNK on_const on_nl attr_accessor on_symbeg UNK on_comma on_symbeg UNK on_nl end on_nl on_ignored_nl UNK on_const on_nl def UNK on_lparen # This modules contains various class that are used to hold information # about the various Puppet language structures we found while parsing. # # Those will be mapped to their html counterparts which are defined in # PuppetGenerator.
UNK on_const on_nl attr_accessor on_symbeg UNK on_comma on_symbeg UNK on_nl end on_nl on_ignored_nl UNK on_const on_nl def UNK on_lparen comment # PuppetTopLevel is a top level (usually a .pp/.rb file)
UNK on_const on_nl def UNK on_lparen comment on_comma UNK on_op UNK on_rparen on_ignored_nl super on_nl end on_nl end on_nl on_ignored_nl # Add top level comments to a class or module # @api private
class on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl attr_accessor on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl def initialize on_lparen # PuppetModule holds a Puppet Module # This is mapped to an HTMLPuppetModule # it leverage the RDoc (ruby) module infrastructure
def UNK on_lparen name on_comma superclass on_rparen on_ignored_nl cls on_op on_ivar on_lbracket name on_rbracket on_nl if cls on_nl UNK cls # Adds a module called __nodes__ and adds nodes to it as classes #
class on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl attr_accessor on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg # PuppetClass holds a puppet class # It is mapped to a HTMLPuppetClass for display # It leverages RDoc (ruby) Class
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_lparen on_ivar on_comma UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen UNK # we're (ab)using the RDoc require system here. # we're adding a required Puppet class, overriding # the RDoc add_require method which sees ruby required files.
def UNK on_lparen UNK on_comma UNK on_op UNK on_rparen on_ignored_nl result on_op super on_lparen UNK on_rparen on_nl if UNK result # Look up the given symbol. RDoc only looks for class1::class2.method # or class1::class2#method. Since our definitions are mapped to RDoc methods # but are written class1::class2::define we need to perform the lookup by # ourselves.
class on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl def initialize on_lparen name on_comma superclass on_rparen on_ignored_nl super on_lparen name # PuppetNode holds a puppet node # It is mapped to a HTMLPuppetNode for display # A node is just a variation of a class
class on_const on_op on_const on_nl attr_accessor on_symbeg name on_comma on_symbeg type on_nl on_ignored_nl def initialize on_lparen name on_comma type on_rparen # Plugin holds a native puppet plugin (function,type...) # It is mapped to a HTMLPuppetPlugin for display
class on_const on_op on_const on_nl attr_accessor on_symbeg name on_comma on_symbeg UNK on_nl on_ignored_nl def initialize on_lparen name on_comma UNK on_rparen # Fact holds a custom fact # It is mapped to a HTMLPuppetPlugin for display
class on_const on_op on_const on_nl attr_accessor on_symbeg type on_comma on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl def initialize on_lparen type # PuppetResource holds a puppet resource # It is mapped to a HTMLPuppetResource for display # A resource is defined by its "normal" form Type[title]
