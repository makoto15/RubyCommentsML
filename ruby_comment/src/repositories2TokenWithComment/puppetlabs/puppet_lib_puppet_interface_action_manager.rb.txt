UNK on_const on_op on_const on_op on_const on_nl on_ignored_nl def UNK on_lparen name UNK on_op UNK on_rparen on_ignored_nl on_ivar on_op on_lbrace # This class is not actually public API, but the method # {Puppet::Interface::ActionManager#action action} is public when used # as part of the Faces DSL (i.e. from within a # {Puppet::Interface.define define} block). # @api public
on_ignored_nl def UNK on_lparen name UNK on_op UNK on_rparen on_ignored_nl on_ivar on_op on_lbrace on_rbrace on_nl on_const on_period UNK UNK on_lparen # Declare that this app can take a specific action, and provide # the code to do so.
def UNK on_lparen name UNK on_op UNK on_rparen on_ignored_nl on_ivar on_op on_lbrace on_rbrace on_nl on_const on_period UNK UNK on_lparen UNK # Defines a new action. This takes a block to build the action using # the methods on {Puppet::Interface::ActionBuilder}. # @param name [Symbol] The name that will be used to invoke the # action # @overload action(name, {|| block}) # @return [void] # @api public # @dsl Faces
UNK on_op UNK if UNK on_period default on_nl if UNK on_nl UNK UNK on_tstring_content UNK UNK on_period name UNK on_tstring_content # REVISIT: (#18042) doesn't this mean we can't redefine the default action? -- josh
def actions on_nl on_ivar on_op on_lbrace on_rbrace on_nl result on_op on_ivar on_period UNK on_nl on_ignored_nl if self on_period UNK on_lparen # Returns the list of available actions for this face. # @return [Array<Symbol>] The names of the actions for this face # @api private
on_lparen result on_op on_ivar on_period UNK on_rparen on_period UNK on_period UNK on_nl end on_nl on_ignored_nl def get_action on_lparen name on_rparen # We need to uniq the result, because we duplicate actions when they are # fetched to ensure that they have the correct bindings; they shadow the # parent, and uniq implements that. --daniel 2011-06-01
def get_action on_lparen name on_rparen on_ignored_nl on_ivar on_op on_lbrace on_rbrace on_nl result on_op on_ivar UNK name on_period UNK UNK on_nl # Retrieves a named action # @param name [Symbol] The name of the action # @return [Puppet::Interface::Action] The action object # @api private
result on_op on_ivar UNK name on_period UNK UNK on_op UNK on_period UNK on_lparen self on_rparen on_nl end on_nl end on_nl # This is not the nicest way to make action equivalent to the Ruby # Method object, rather than UnboundMethod, but it will do for now, # and we only have to make this change in *one* place. --daniel 2011-04-12
def UNK on_nl default on_op actions on_period UNK on_lbrace on_op UNK on_op get_action on_lparen UNK on_rparen on_rbrace on_period UNK on_lbrace # Retrieves the default action for the face # @return [Puppet::Interface::Action] # @api private
def UNK on_lparen name on_rparen on_ignored_nl on_ivar on_op on_const on_period UNK on_nl on_ivar on_period UNK name on_period UNK on_nl end # Deactivate a named action # @return [Puppet::Interface::Action] # @api public
def UNK on_lparen name on_rparen on_ignored_nl actions on_period UNK on_lparen name on_period UNK on_rparen on_nl end on_nl end on_nl EMP # @api private
