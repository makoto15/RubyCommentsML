UNK on_const on_nl def UNK on_lparen UNK on_comma UNK on_op UNK on_rparen on_ignored_nl on_ivar on_op UNK UNK on_nl on_ivar on_op # Abstract class for protocol specific readers such as MsgPack or JSON # The abstract reader is capable of reading the primitive scalars: # - Boolean # - Integer # - Float # - String # and, by using extensions, also # - Array start # - Map start # - Object start # - Regexp # - Version # - VersionRange # - Timespan # - Timestamp # - Default # # @api public
def UNK on_lparen UNK on_comma UNK on_op UNK on_rparen on_ignored_nl on_ivar on_op UNK UNK on_nl on_ivar on_op UNK on_nl on_ivar # @param [MessagePack::Unpacker,JSON::Unpacker] unpacker The low lever unpacker that delivers the primitive objects # @param [MessagePack::Unpacker,JSON::Unpacker] extension_unpacker Optional unpacker for extensions. Defaults to the unpacker # @api public
def read on_nl obj on_op on_ivar on_period read on_nl UNK obj on_nl UNK on_const on_op on_const on_nl on_ivar UNK obj # Read an object from the underlying unpacker # @return [Object] the object that was read # @api public
obj on_nl UNK on_ignored_nl on_ivar on_op obj on_nl obj on_nl end on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period # not tabulated
def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def read_payload on_lparen data on_rparen on_ignored_nl UNK on_const on_comma UNK # @return [Integer] The total count of unique primitive values that has been read # @api private
def read_payload on_lparen data on_rparen on_ignored_nl UNK on_const on_comma UNK UNK UNK UNK on_period UNK UNK UNK UNK on_nl end # @api private
def UNK on_lparen ep on_rparen on_ignored_nl on_const on_period new on_lparen ep on_period read on_rparen on_lbrace UNK on_lparen ep on_rparen on_rbrace # @api private
def UNK on_lparen ep on_rparen on_ignored_nl obj on_op ep on_period read on_nl UNK obj on_nl UNK on_const on_nl on_ivar UNK # @api private
def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def register_type on_lparen UNK on_comma on_op UNK on_rparen on_ignored_nl on_ivar on_period register_type # @api private
def register_type on_lparen UNK on_comma on_op UNK on_rparen on_ignored_nl on_ivar on_period register_type on_lparen UNK on_comma on_op UNK on_rparen on_nl end # @api private
def UNK on_nl register_type on_lparen on_const on_op on_const on_rparen do on_op data on_op on_ignored_nl read_payload on_lparen data on_rparen on_lbrace on_op # @api private
read_payload on_lparen data on_rparen on_lbrace on_op ep on_op on_const on_op on_const on_op on_const on_period new on_lparen ep on_period read on_rparen # The Ruby MessagePack implementation have special treatment for "ASCII-8BIT" strings. They # are written as binary data.
