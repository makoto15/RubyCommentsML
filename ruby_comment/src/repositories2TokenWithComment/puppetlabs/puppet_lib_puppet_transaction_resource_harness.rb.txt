schedule on_period UNK on_lparen UNK on_lparen resource on_comma on_symbeg UNK on_rparen on_period UNK on_rparen on_nl end on_nl on_ignored_nl def schedule # We use 'checked' here instead of 'synced' because otherwise we'll # end up checking most resources most times, because they will generally # have been synced a long time ago (e.g., a file only gets updated # once a month on the server and its schedule is daily; the last sync time # will have been a month ago, so we'd end up checking every run).
def UNK on_lparen resource on_comma name on_rparen on_ignored_nl on_const on_op on_const on_op on_const on_period cache on_lparen resource on_rparen on_lbracket name # Used mostly for scheduling and auditing at this point.
def cache on_lparen resource on_comma name on_comma UNK on_rparen on_ignored_nl on_const on_op on_const on_op on_const on_period cache on_lparen resource on_rparen # Used mostly for scheduling and auditing at this point.
context on_period UNK on_period UNK do on_op param on_op on_ignored_nl cache on_lparen resource on_comma param on_comma context on_period current_values on_lbracket # Record the current state in state.yml.
def UNK on_lparen resource on_comma context on_rparen on_ignored_nl UNK on_op on_lbrace on_rbrace on_nl context on_period status on_period UNK on_period UNK # We persist the last known values for the properties of a resource after resource # application. # @param [Puppet::Type] resource resource whose values we are to persist. # @param [ResourceApplicationContext] context the application context to operate on.
on_const on_period UNK on_lparen detail on_rparen on_nl on_ignored_nl event on_op UNK on_lparen param on_comma current_value on_comma historical_value on_rparen on_nl event # Execution will continue on StandardErrors, just store the event
event on_op UNK on_lparen param on_comma current_value on_comma historical_value on_rparen on_nl event on_period status on_op on_tstring_beg on_tstring_content on_tstring_end on_nl event # Execution will halt on Exceptions, they get raised to the application
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK on_op UNK on_op on_lparen UNK on_period UNK on_lparen on_const on_rparen on_op # This method is an ugly hack because, given a Time object with nanosecond # resolution, roundtripped through YAML serialization, the Time object will # be truncated to microseconds. # For audit purposes, this code special cases this comparison, and compares # the two objects by their second and microsecond components. tv_sec is the # number of seconds since the epoch, and tv_usec is only the microsecond # portion of time.
def UNK on_lparen event on_comma property on_comma context on_rparen on_ignored_nl event on_period UNK on_op UNK on_nl event on_period status on_op # Populate an existing event with audit information. # # @param event [Puppet::Transaction::Event] The event to be populated. # @param property [Puppet::Property] The property being audited. # @param context [ResourceApplicationContext] # # @return [Puppet::Transaction::Event] The given event, populated with the audit information.
if on_op UNK on_lparen context on_period historical_values on_lbracket property on_period name on_rbracket on_comma context on_period current_values on_lbracket property on_period name # The event we've been provided might have been redacted so we need to use the state stored within # the resource application context to see if an event was actually generated.
def UNK on_lparen property on_comma event on_comma UNK on_rparen on_ignored_nl if event on_op event on_period status on_op on_tstring_beg on_tstring_content on_tstring_end # Given an event and its property, calculate the system_value to persist # for future calculations. # @param [Puppet::Transaction::Event] event event to use for processing # @param [Puppet::Property] property correlating property # @param [Object] old_system_value system_value from last transaction # @return [Object] system_value to be used for next transaction
UNK on_op on_lbracket event on_period UNK on_rbracket UNK event on_period UNK on_period UNK on_lparen on_const on_rparen on_nl UNK on_period UNK # For non-success events, we persist the old_system_value if it is defined, # or use the event previous_value. # If we're using the event previous_value, we ensure that it's # an array. This is needed because properties assume that their # `should` value is an array, and we will use this value later # on in property insync? logic.
property on_period UNK on_lparen on_symbeg on_ivar on_rparen on_nl end on_nl end on_nl on_ignored_nl on_const on_op on_const on_period UNK on_lparen on_symbeg # For non events, or for success cases, we just want to store # the parameters agent value. # We use instance_variable_get here because we want this process to bypass any # munging/unmunging or validation that the property might try to do, since those # operations may not be correctly implemented for custom types.
on_const on_op on_const on_period UNK on_lparen on_symbeg resource on_comma on_ignored_nl on_symbeg current_values on_comma on_ignored_nl on_symbeg historical_values on_comma on_ignored_nl on_symbeg UNK # @api private
