UNK on_const on_op on_const on_op on_const on_op on_const on_op on_const on_op on_const on_op on_const on_nl UNK UNK value UNK UNK # The base class for all of the leaves of the parse trees. These # basically just have types and values. Both of these parameters # are simple values, not AST objects. #
def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_lparen value on_rparen on_ignored_nl on_ivar on_op value # Return our value.
UNK on_const on_op on_const on_op on_const on_op on_const on_op on_const on_op on_const on_op on_const on_op on_const on_nl def UNK on_lparen # Host names, either fully qualified or just the short name, or even a regex #
UNK on_ivar on_period UNK on_lparen on_const on_rparen on_nl on_ivar on_op on_ivar on_period UNK on_period UNK on_nl UNK on_ivar on_op UNK # Note that this is an AST::Regex, not a Regexp
def UNK on_lparen value on_rparen on_ignored_nl on_ivar on_period UNK on_lparen value on_period UNK on_lparen on_const on_rparen on_op value on_period value # implementing eql? and hash so that when an HostName is stored # in a hash it has the same hashing properties as the underlying value
on_ivar on_op on_const on_period UNK on_lparen on_ivar on_rparen UNK on_ivar on_period UNK on_lparen on_const on_rparen on_nl end on_nl on_ignored_nl def # transform value from hash options unless it is already a regular expression
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_nl end on_nl on_ignored_nl def UNK on_lparen value on_rparen on_ignored_nl on_ivar on_period UNK # we're returning self here to wrap the regexp and to be used in places # where a string would have been used, without modifying any client code. # For instance, in many places we have the following code snippet: # val = @val.safeevaluate(@scope) # if val.match(otherval) # ... # end # this way, we don't have to modify this test specifically for handling # regexes. #
