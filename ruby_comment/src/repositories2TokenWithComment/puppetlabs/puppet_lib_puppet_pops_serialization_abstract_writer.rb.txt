UNK on_const on_nl def UNK on_lparen UNK on_comma UNK on_comma UNK on_op UNK on_rparen on_ignored_nl on_ivar on_op UNK UNK UNK # Abstract class for protocol specific writers such as MsgPack or JSON # The abstract write is capable of writing the primitive scalars: # - Boolean # - Integer # - Float # - String # and, by using extensions, also # - Array start # - Map start # - Object start # - Regexp # - Version # - VersionRange # - Timespan # - Timestamp # - Default # # @api public
def UNK on_lparen UNK on_comma UNK on_comma UNK on_op UNK on_rparen on_ignored_nl on_ivar on_op UNK UNK UNK UNK UNK on_nl # @param [MessagePack::Packer,JSON::Packer] packer the underlying packer stream # @param [Hash] options # @option options [Boolean] :tabulate `true` if tabulation is enabled (which is the default). # @param [DebugPacker,nil] extension_packer Optional specific extension packer. Only used for debug output # @api public
def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_nl end on_nl on_ignored_nl def write # Tell the underlying packer to flush. # @api public
def write on_lparen value on_rparen on_ignored_nl UNK on_op UNK on_nl UNK value on_nl UNK on_const on_nl UNK on_const on_comma UNK # Write a value on the underlying stream # @api public
UNK on_const on_comma UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen if value on_op on_const on_op value on_op on_const on_nl UNK on_const # not tabulated, but integers larger than 64-bit cannot be allowed.
UNK on_ignored_nl if on_ivar on_nl index on_op on_ivar UNK value UNK on_nl if index on_period UNK on_nl on_ivar on_period write # not tabulated
def build_payload on_nl UNK on_const on_comma on_tstring_beg on_tstring_content UNK UNK on_period UNK UNK on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def # Called from extension callbacks only # # @api private
def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_lparen ep on_comma UNK on_rparen on_ignored_nl UNK on_op UNK on_period # @api private
def UNK on_lparen ep on_comma UNK on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl ep # Called from extension callbacks only # # @api private
def UNK on_lparen ep on_comma value on_rparen on_ignored_nl UNK on_const on_comma UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen if value on_period # Called from extension callbacks only # # @api private
UNK on_const on_comma UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen if value on_period UNK on_lparen on_const on_rparen on_nl if on_ivar on_nl #TRANSLATORS 'Integers' is a Ruby class for numbers and should not be translated
def register_type on_lparen UNK on_comma UNK on_comma on_op UNK on_rparen on_ignored_nl on_ivar on_period register_type on_lparen UNK on_comma UNK on_comma on_op # @api private
def UNK on_nl on_ignored_nl register_type on_lparen on_const on_op on_const on_comma on_const on_op on_const on_rparen do on_op o on_op on_ignored_nl build_payload # @api private
on_ignored_nl register_type on_lparen on_const on_op on_const on_comma on_const on_op on_const on_rparen do on_op o on_op on_ignored_nl build_payload on_lbrace on_op ep # 0x00 - 0x0F are reserved for low-level serialization / tabulation extensions
on_ignored_nl register_type on_lparen on_const on_op on_const on_comma on_const on_op on_const on_rparen do on_op o on_op on_ignored_nl build_payload on_lbrace on_op ep # 0x10 - 0x1F are reserved for structural extensions
on_ignored_nl register_type on_lparen on_const on_op on_const on_comma on_const on_op on_const on_rparen do on_op o on_op on_ignored_nl build_payload on_lbrace on_op ep # 0x20 - 0x2f reserved for special extension objects
on_ignored_nl register_type on_lparen on_const on_op on_const on_comma on_const on_rparen do on_op o on_op on_ignored_nl build_payload on_lbrace on_op ep on_op ep # 0x30 - 0x7f reserved for mapping of specific runtime classes
build_payload on_lbrace on_op ep on_op ep on_period write on_lparen o on_period UNK on_rparen on_rbrace on_nl end on_nl UNK on_ignored_nl register_type # The Ruby MessagePack implementation has special treatment for "ASCII-8BIT" strings. They # are written as binary data.
