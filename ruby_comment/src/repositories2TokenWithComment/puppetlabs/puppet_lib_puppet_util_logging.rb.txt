UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_op # A module to make logging a bit easier.
on_const on_op on_const on_op on_const on_period UNK do on_op level on_op on_ignored_nl UNK if level on_op on_symbeg debug on_nl UNK # Create a method for each log level.
UNK if level on_op on_symbeg debug on_nl UNK on_lparen level on_rparen do on_op args on_op on_ignored_nl args on_op args on_period # handle debug a special way for performance reasons
def debug on_lparen on_op args on_rparen on_ignored_nl UNK nil UNK on_const on_op on_const on_op on_const on_period level on_op on_symbeg debug # Output a debug log message if debugging is on (but only then) # If the output is anything except a static string, give the debug # a block - it will be called with all other arguments, and is expected # to return the single string result. # # Use a block at all times for increased performance. # # @example This takes 40% of the time compared to not using a block # Puppet.debug { "This is a string that interpolated #{x} and #{y} }" #
def UNK on_lparen exception on_comma message on_op on_symbeg default on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl level on_op options on_lbracket # Log an exception via Puppet.err. Will also log the backtrace if Puppet[:trace] is set. # Parameters: # [exception] an Exception to log # [message] an optional String overriding the message to be logged; by default, we log Exception.message. # If you pass a String here, your string will be logged instead. You may also pass nil if you don't # wish to log a message at all; in this case it is likely that you are only calling this method in order # to take advantage of the backtrace logging.
backtrace on_op UNK on_lparen exception on_comma combined_trace on_comma puppet_trace on_rparen on_nl on_const on_op on_const on_op on_const on_period UNK on_lparen on_lbrace # Retain all detailed info and keep plain message and stacktrace separate
else on_ignored_nl arr on_op message on_nl end on_nl on_ignored_nl arr on_op UNK on_lparen exception on_comma combined_trace on_comma puppet_trace on_rparen on_nl # don't log anything if they passed a nil; they are just calling for the optional backtrace logging
def UNK on_lparen message on_comma key on_op nil on_rparen on_ignored_nl UNK on_lparen message on_comma key on_comma nil on_comma nil on_comma # Logs a warning indicating that the Ruby code path is deprecated. Note that # this method keeps track of the offending lines of code that triggered the # deprecation warning, and will only log a warning once per offending line of # code. It will also stop logging deprecation warnings altogether after 100 # unique deprecation warnings have been logged. Finally, if # Puppet[:disable_warnings] includes 'deprecations', it will squelch all # warning calls made via this method. # # @param message [String] The message to log (logs via warning) # @param key [String] Optional key to mark the message as unique. If not # passed in, the originating call line will be used instead.
def UNK on_lparen message on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl key on_op options on_lbracket on_symbeg key on_rbracket on_nl file # Logs a warning whose origin comes from Puppet source rather than somewhere # internal within Puppet. Otherwise the same as deprecation_warning() # # @param message [String] The message to log (logs via warning) # @param options [Hash] # @option options [String] :file File we are warning from # @option options [Integer] :line Line number we are warning from # @option options [String] :key (:file + :line) Alternative key used to mark # warning as unique # # Either :file and :line and/or :key must be passed.
UNK on_const on_op on_const on_comma UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen if on_lparen key on_period UNK on_rparen on_op on_lparen file #TRANSLATORS the literals ":file", ":line", and ":key" should not be translated
def UNK on_lparen UNK on_comma key on_comma message on_comma file on_op nil on_comma line on_op nil on_comma level on_op on_symbeg # Logs a (non deprecation) warning once for a given key. # # @param kind [String] The kind of warning. The # kind must be one of the defined kinds for the Puppet[:disable_warnings] setting. # @param message [String] The message to log (logs via warning) # @param key [String] Key used to make this warning unique # @param file [String,:default,nil] the File related to the warning # @param line [Integer,:default,nil] the Line number related to the warning # warning as unique # @param level [Symbol] log level to use, defaults to :warning # # Either :file and :line and/or :key must be passed.
on_tstring_beg on_tstring_end on_nl else on_ignored_nl UNK on_op on_const on_op on_const on_op on_const on_period UNK on_lparen file on_comma line on_rparen on_nl # Suppress the file and line number output
if on_const on_lbracket on_symbeg UNK on_rbracket on_nl UNK on_lparen UNK on_rparen on_nl else on_ignored_nl on_lbracket UNK on_lparen UNK on_comma UNK # we have to put this in its own method to simplify testing; we need to be able to mock the offender results in # order to test this class, and our framework does not appear to enjoy it if you try to mock Kernel.caller # # let's find the offending line; we need to jump back up the stack a few steps to find the method that called # the deprecated method
on_ignored_nl def UNK on_lparen UNK on_comma UNK on_op nil on_rparen on_ignored_nl on_gvar on_op on_lbrace on_rbrace on_nl on_ignored_nl on_const on_op on_const # TODO: determine whether there might be a potential use for adding a puppet configuration option that would # enable this deprecation logging.
def UNK on_lparen UNK on_comma UNK on_op nil on_rparen on_ignored_nl on_gvar on_op on_lbrace on_rbrace on_nl on_ignored_nl on_const on_op on_const on_period # utility method that can be called, e.g., from spec_helper config.after, when tracking down calls to deprecated # code. # Parameters: # [deprecations_file] relative or absolute path of a file to log the deprecations to # [pattern] (default nil) if specified, will only log deprecations whose message matches the provided pattern
on_gvar on_op on_lbrace on_rbrace on_nl on_ignored_nl on_const on_op on_const on_period UNK on_lparen UNK on_comma nil on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen # this method may get called lots and lots of times (e.g., from spec_helper config.after) without the global # list of deprecation warnings being cleared out. We don't want to keep logging the same offenders over and over, # so, we need to keep track of what we've logged. # # It'd be nice if we could just clear out the list of deprecation warnings, but then the very next spec might # find the same offender, and we'd end up logging it again.
on_const on_op on_const on_period UNK on_lparen UNK on_comma nil on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen do on_op UNK on_op on_ignored_nl if # Deprecation messages are UTF-8 as they are produced by Ruby
def UNK on_period UNK on_nl UNK UNK UNK on_const on_period respond_to? on_symbeg UNK on_nl on_ignored_nl on_const on_period UNK do on_op # Sets up Facter logging. # This method causes Facter output to be forwarded to Puppet.
UNK UNK UNK on_const on_period respond_to? on_symbeg UNK on_nl on_ignored_nl on_const on_period UNK do on_op level on_comma message on_op on_ignored_nl # Only recent versions of Facter support this feature
on_const on_period UNK do on_op level on_comma message on_op on_ignored_nl UNK level on_nl when on_symbeg UNK on_comma on_symbeg debug on_nl # The current Facter log levels are: :trace, :debug, :info, :warn, :error, and :fatal. # Convert to the corresponding levels in Puppet
when on_symbeg UNK on_nl level on_op on_symbeg UNK on_nl when on_symbeg UNK on_nl level on_op on_symbeg UNK on_nl when on_symbeg # Same as Puppet
UNK on_op if UNK on_nl UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace UNK on_lparen offender on_op UNK on_rparen on_period # split out to allow translation
on_lparen UNK UNK UNK on_rparen UNK respond_to? on_lparen on_symbeg UNK on_rparen UNK UNK UNK on_period UNK on_nl UNK on_nl end # We need to guard the existence of the constants, since this module is used by the base Puppet module.
