UNK on_const on_op on_const on_op on_const on_nl on_const on_op on_const on_op on_const on_op on_const on_nl on_const on_op on_const on_op on_const # The class that manages all aspects of our SSL certificates -- # private keys, public keys, requests, etc. # # @deprecated Use {Puppet::SSL::SSLProvider} instead.
on_const on_op on_const on_op on_const on_op on_const on_nl on_const on_op on_const on_op on_const on_op on_const on_nl on_const on_op on_const on_op # Yay, ruby's strange constant lookups.
def UNK on_period UNK on_lparen UNK on_comma cache on_op nil on_rparen on_ignored_nl on_const on_period indirection on_period UNK on_op UNK on_nl # Configure how our various classes interact with their various terminuses.
on_const on_period indirection on_period UNK on_op cache on_nl else on_ignored_nl on_const on_period indirection on_period UNK on_op UNK on_nl end on_nl # This is weird; we don't actually cache our keys, we # use what would otherwise be the cache as our normal # terminus.
on_const on_period indirection on_period UNK on_op nil on_nl on_const on_period indirection on_period UNK on_op nil on_nl end on_nl end on_nl # Make sure we have no cache configured. puppet master # switches the configurations around a bit, so it's important # that we specify the configs for absolutely everything, every # time.
def UNK on_nl on_ivar on_op on_const on_period new on_lparen name on_rparen on_nl on_ivar on_period UNK on_nl begin on_ignored_nl on_const on_period # This is the private key; we can create it from scratch # with no inputs.
def UNK on_lparen UNK on_op on_lbrace on_rbrace on_rparen on_ignored_nl UNK unless key on_nl on_ignored_nl if name on_op on_const on_lbracket on_symbeg # Our certificate request requires the key but that's all.
if name on_op on_const on_lbracket on_symbeg certname on_rbracket on_period UNK on_nl if on_const on_lbracket on_symbeg UNK on_rbracket UNK on_const on_lbracket # If this CSR is for the current machine...
if on_const on_lbracket on_symbeg UNK on_rbracket UNK on_const on_lbracket on_symbeg UNK on_rbracket on_op on_tstring_beg on_tstring_end on_nl UNK on_lbracket on_symbeg UNK # ...add our configured dns_alt_names
UNK on_op on_const on_op on_const on_op on_const on_period new on_lparen on_label UNK on_rparen on_nl UNK on_period UNK on_nl on_ignored_nl cert # get CA and optional CRL
on_ignored_nl def UNK on_nl on_ivar on_op on_tstring_beg on_tstring_content UNK on_const on_lbracket on_symbeg certname on_rbracket UNK on_tstring_end on_op on_tstring_beg on_tstring_end on_nl # The puppet parameters for commands output by the validate_ methods depend # upon whether this is an agent or a device.
def UNK on_lparen cert on_rparen on_ignored_nl raise on_const on_op on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen unless cert on_nl # Validate that our private key matches the specified certificate. # # @param [Puppet::SSL::Certificate] cert the certificate to check # @raises [Puppet::Error] if the private key does not match
def UNK on_nl unless on_ivar on_nl csr on_op UNK on_nl if csr on_nl on_ivar on_op csr on_nl else on_ignored_nl csr # Search for an existing CSR for this host either cached on # disk or stored by the CA. Returns nil if no request exists. # @return [Puppet::SSL::CertificateRequest, nil]
def UNK on_nl UNK unless key on_nl on_ignored_nl UNK on_op UNK on_nl on_ignored_nl UNK on_lparen UNK on_comma key on_rparen if # Generate all necessary parts of our ssl host.
UNK on_lparen UNK on_comma key on_rparen if UNK on_nl on_ignored_nl UNK unless UNK on_nl end on_nl on_ignored_nl def UNK on_lparen # if CSR downloaded from master, but the local keypair was just generated and # does not match the public key in the CSR, fail hard
def public_key on_nl key on_period content on_period public_key on_nl end on_nl on_ignored_nl def UNK on_nl on_op on_op on_ivar on_nl end # Extract the public key from the private key.
def UNK on_lparen UNK on_op on_const on_op on_const on_op on_const on_rparen on_ignored_nl if on_ivar on_period UNK on_nl on_ivar on_op UNK # Create/return a store that uses our SSL info to validate # connections.
def UNK on_lparen UNK on_rparen on_ignored_nl begin on_ignored_nl return if certificate on_nl UNK on_nl return if certificate on_nl rescue on_const # Attempt to retrieve a cert, if we don't already have one.
def UNK on_lparen cert on_rparen on_ignored_nl file_path on_op UNK on_lparen name on_rparen on_nl on_const on_op on_const on_period UNK on_lparen file_path # Saves the given certificate to disc, at a location determined by this # host's configuration. # @param [Puppet::SSL::Certificate] cert the cert to save
def UNK on_nl UNK on_op UNK on_lparen name on_rparen on_nl if on_const on_op on_const on_period UNK on_lparen UNK on_rparen on_nl # Load a previously generated CSR from disk # @return [Puppet::SSL::CertificateRequest, nil]
def UNK on_nl begin on_ignored_nl UNK on_op on_const on_op on_const on_op on_const on_period UNK on_lparen on_ignored_nl name on_comma on_const on_op # Download the CSR for this host from the CA. Returns nil if the CA # has no saved CSR for this host. # @raises [Puppet::Error] if the response from the server is not a valid # CSR or an error occurs while fetching. # @return [Puppet::SSL::CertificateRequest, nil]
def UNK on_lparen csr on_rparen on_ignored_nl on_const on_op on_const on_op on_const on_period UNK on_lparen on_ignored_nl csr on_period UNK on_comma name # Submit the CSR to the CA via an HTTP PUT request. # @param [Puppet::SSL::CertificateRequest] csr the request to submit
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_tstring_content UNK on_nl UNK on_period UNK on_lparen UNK on_rparen on_period UNK # @param crl_string [String] CRLs read from disk or obtained from server # @return [Array<OpenSSL::X509::CRL>] CRLs from chain # @raise [Puppet::Error<OpenSSL::X509::CRLError>] if the CRL chain is malformed
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op on_const on_op on_const on_period UNK on_lparen UNK on_comma on_label on_const on_op on_const # @param path [String] Path to CRL Chain # @return [Array<OpenSSL::X509::CRL>] CRLs from chain # @raise [Puppet::Error<OpenSSL::X509::CRLError>] if the CRL chain is malformed
def UNK on_lparen store on_op nil on_rparen on_ignored_nl begin on_ignored_nl store on_op UNK on_nl on_const on_op on_const on_period UNK on_lparen # Fetches and saves the crl bundle from the CA server without validating # its contents. Takes an optional store to use with the http_client, # necessary for initial download of the CRL because `build_ssl_store` # calls this `download_and_save_crl_bundle`. If there is an error during # this downloading process, the file should not be replaced at all. This # streams the file directly to disk to avoid loading the entire CRL in memory. # @param [OpenSSL::X509::Store] store optional ssl_store to use with http_client # @raise [Puppet::Error<Puppet::Rest::ResponseError>] if bad response from server # @return nil
store on_op UNK on_nl on_const on_op on_const on_period UNK on_lparen UNK on_comma on_int on_rparen UNK on_op UNK on_op on_ignored_nl UNK # If no SSL store was supplied, use this host's SSL store
def UNK on_nl cert on_op UNK on_lparen name on_rparen on_nl if cert on_nl return cert on_nl else on_ignored_nl cert on_op # Attempts to load or fetch this host's certificate. Returns nil if # no certificate could be found. # @return [Puppet::SSL::Certificate, nil]
def UNK on_lparen cert_name on_rparen on_ignored_nl file_path on_op UNK on_lparen cert_name on_rparen on_nl if on_const on_op on_const on_period UNK on_lparen # Checks for the requested certificate on disc, at a location # determined by this host's configuration. # @name [String] name the name of the cert to look for # @raise [Puppet::Error] if contents of certificate file is invalid # and could not be loaded # @return [Puppet::SSL::Certificate, nil]
def UNK on_lparen cert_name on_rparen on_ignored_nl begin on_ignored_nl cert on_op on_const on_op on_const on_op on_const on_period UNK on_lparen on_ignored_nl cert_name # Attempts to download this host's certificate from the CA server. # Returns nil if the CA does not yet have a signed cert for this host. # @param [String] name then name of the cert to fetch # @raise [Puppet::Error] if response from the CA does not contain a valid # certificate # @return [Puppet::SSL::Certificate, nil]
def UNK on_lparen cert_name on_rparen on_ignored_nl cert_name on_op on_const on_op on_const on_lbracket on_symbeg UNK on_rbracket on_op on_const on_period UNK on_lparen # Returns the file path for the named certificate, based on this host's # configuration. # @param [String] name the name of the cert to find # @return [String] file path to the cert's location
def UNK on_lparen cert_name on_rparen on_ignored_nl on_const on_period UNK on_lparen on_const on_lbracket on_symbeg UNK on_rbracket on_comma on_tstring_beg UNK cert_name UNK # Returns the file path for the named CSR, based on this host's configuration. # @param [String] name the name of the CSR to find # @return [String] file path to the CSR's location
def UNK on_lparen UNK on_op on_const on_op on_const on_op on_const on_rparen on_ignored_nl store on_op on_const on_op on_const on_op on_const on_period # @param [OpenSSL::X509::PURPOSE_*] constant defining the kinds of certs # this store can verify # @return [OpenSSL::X509::Store] # @raise [OpenSSL::X509::StoreError] if localcacert is malformed or non-existant # @raise [Puppet::Error] if the CRL chain is malformed # @raise [Errno::ENOENT] if the CRL does not exist on disk but use_crl? is true
store on_period UNK on_lparen on_const on_period UNK on_lbracket on_symbeg UNK on_rbracket on_rparen on_nl on_ignored_nl if UNK on_nl if on_op on_const # Use the file path here, because we don't want to cause # a lookup in the middle of setting our ssl connection.
