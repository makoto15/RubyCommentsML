UNK on_const on_op on_const on_op on_const on_nl include on_const on_op on_const on_nl UNK on_const on_op on_const on_op on_const on_nl include # Pass feedback to the user. Log levels are modeled after syslog's, and it is # expected that that will be the most common log destination. Supports # multiple destinations, one of which is a remote server.
def self on_period UNK on_lparen name on_comma UNK on_op on_lbrace on_rbrace on_comma on_op UNK on_rparen on_ignored_nl on_ignored_nl dest on_op UNK # Create a new destination type.
def on_const on_period close on_lparen destination on_rparen on_ignored_nl if on_ivar on_period UNK on_lparen destination on_rparen on_nl on_ivar on_lbracket destination on_rbracket # Reset log to basics. Basically just flushes and closes files and # undefs other objects.
raise on_const on_op on_const on_period new on_lparen _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label on_ivar on_period UNK on_period #TRANSLATORS "Log.close_all" is a method name and should not be translated
def on_const on_period UNK on_nl on_ivar on_period each on_lbrace on_op type on_comma dest on_op on_ignored_nl dest on_period UNK if dest # Flush any log destinations that support such operations.
def on_const on_period UNK on_lparen hash on_rparen on_ignored_nl raise on_const on_op on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen unless # Create a new log message. The primary role of this method is to # avoid creating log messages below the loglevel.
def on_const on_period UNK on_nl on_ivar on_period each on_lbrace on_op level on_op UNK level on_rbrace on_nl end on_nl on_ignored_nl def # Yield each valid level in turn
def on_const on_period level on_nl on_ivar on_lbracket on_ivar on_rbracket on_nl end on_nl on_ignored_nl def on_const on_period UNK on_lparen level on_rparen # Return the current log level.
def on_const on_period UNK on_lparen level on_rparen on_ignored_nl level on_op level on_period UNK unless level on_period UNK on_lparen on_const on_rparen # Set the current log level.
on_const on_period UNK on_lparen level on_op on_symbeg UNK on_rparen if on_const on_period respond_to? on_symbeg UNK on_nl end on_nl on_ignored_nl def # Enable or disable Facter debugging
def on_const on_period newdestination on_lparen dest on_rparen on_ignored_nl if on_ivar on_period UNK on_lbrace on_op name on_comma UNK on_op UNK on_period # Create a new log destination.
if on_ivar on_period UNK on_lbrace on_op name on_comma UNK on_op UNK on_period name on_op dest on_rbrace on_nl UNK on_nl end # Each destination can only occur once.
if UNK on_period UNK on_op dest on_period UNK on_op on_symbeg UNK on_nl newdestination on_lparen on_symbeg UNK on_rparen on_nl end on_nl # If this was our only destination, then add the console back in.
raise UNK on_nl end on_nl end on_nl on_ignored_nl def on_const on_period UNK on_lparen destination on_comma on_op UNK on_rparen on_ignored_nl if # Re-raise (end exit Puppet) because we could not set up logging correctly.
message on_op _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_ignored_nl on_lbrace on_label on_const on_op on_const on_op on_const on_period UNK on_lparen # We only select the last 10 callers in the stack to avoid being spammy
def on_const on_period UNK on_lparen msg on_rparen on_ignored_nl UNK if on_ivar on_period UNK on_lparen msg on_period level on_rparen on_op on_ivar # Route the actual message. FIXME There are lots of things this method # should do, like caching and a bit more. It's worth noting that there's # a potential for a loop here, if the machine somehow gets the destination set as # itself.
def on_const on_period UNK on_lparen on_rparen on_ignored_nl if on_lparen on_ivar on_period UNK UNK on_op on_lparen on_ivar on_period UNK on_rparen on_rparen # Flush the logging queue. If there are no destinations available, # adds in a console logger before flushing the queue. # This is mainly intended to be used as a last-resort attempt # to ensure that logging messages are not thrown away before # the program is about to exit--most likely in a horrific # error scenario. # @return nil
def on_const on_period UNK on_nl on_const on_period UNK _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl UNK on_op on_ivar on_period UNK # Reopen all of our logs.
UNK on_ignored_nl UNK on_period each on_lbrace on_op type on_op on_ignored_nl on_const on_period newdestination on_lparen type on_rparen on_nl on_rbrace on_nl UNK # We need to make sure we always end up with some kind of destination
def self on_period UNK on_lparen level on_rparen on_ignored_nl on_ivar on_period UNK on_lparen level on_rparen on_nl end on_nl on_ignored_nl def self # Is the passed level a valid log level?
def self on_period UNK on_lparen UNK on_comma level on_comma UNK on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_lbrace on_op UNK # Log output using scope and level # # @param [Puppet::Parser::Scope] scope # @param [Symbol] level log level # @param [Array<Object>] vals the values to log (will be converted to string and joined with space) #
UNK on_op UNK on_period UNK on_lbrace on_op UNK on_op on_const on_op on_const on_op on_const on_op on_const on_period new on_period UNK # NOTE: 3x, does this: vals.join(" ") # New implementation uses the evaluator to get proper formatting per type
on_const on_op on_const on_op on_const on_period UNK on_lparen on_lbrace on_symbeg level on_op level on_comma on_symbeg source on_op UNK on_comma on_symbeg # Bypass Puppet.<level> call since it picks up source from "self" which is not applicable in the 4x # Function API. # TODO: When a function can obtain the file, line, pos of the call merge those in (3x supports # options :file, :line. (These were never output when calling the 3x logging functions since # 3x scope does not know about the calling location at that detailed level, nor do they # appear in a report to stdout/error when included). Now, the output simply uses scope (like 3x) # as this is good enough, but does not reflect the true call-stack, but is a rough estimate # of where the logging call originates from). #
on_lbracket on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg # Don't add these unless defined (preserve 3.x API as much as possible)
UNK on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_tstring_end on_period each do on_op name # Don't add these unless defined (preserve 3.x API as much as possible)
raise on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen unless msg on_nl on_ivar on_op msg on_period to_s on_nl end on_nl #TRANSLATORS 'Puppet::Util::Log' refers to a Puppet source code class
raise on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen unless level on_nl raise on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end #TRANSLATORS 'Puppet::Util::Log' refers to a Puppet source code class
raise on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen unless level on_period respond_to? on_tstring_beg on_tstring_content on_tstring_end on_nl on_ivar on_op level #TRANSLATORS 'Puppet::Util::Log' refers to a Puppet source code class
UNK on_lparen level on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen source on_rparen on_ignored_nl if UNK on_lparen on_const on_op on_const # Tag myself with my log level
def UNK on_lparen source on_rparen on_ignored_nl if UNK on_lparen on_const on_op on_const on_rparen on_op source on_period UNK on_lparen on_const on_op # If they pass a source in to us, we make sure it is a string, and # we retrieve any tags we can.
unless UNK on_period UNK on_nl msg on_op _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_lbrace on_label UNK on_comma on_label msg # Issue based messages do not have details in the message. It # must be appended here
on_const on_op on_const on_op on_const on_op on_const on_op on_const on_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP # This is for backward compatibility from when we changed the constant to # Puppet::Util::Log because the reports include the constant name. It was # considered for removal but left in due to risk of breakage (PUP-7502).
