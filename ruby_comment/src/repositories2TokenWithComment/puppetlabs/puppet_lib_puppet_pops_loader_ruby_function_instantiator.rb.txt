UNK on_const on_op on_const on_op on_const on_op on_const on_nl UNK UNK on_period UNK on_lparen UNK on_comma UNK on_comma UNK on_comma # The RubyFunctionInstantiator instantiates a Puppet::Functions::Function given the ruby source # that calls Puppet::Functions.create_function. #
UNK UNK on_period UNK on_lparen UNK on_comma UNK on_comma UNK on_comma UNK on_rparen UNK UNK UNK on_period UNK on_lparen on_const # Produces an instance of the Function class with the given typed_name, or fails with an error if the # given ruby source does not produce this instance when evaluated. # # @param loader [Puppet::Pops::Loader::Loader] The loader the function is associated with # @param typed_name [Puppet::Pops::Loader::TypedName] the type / name of the function to load # @param source_ref [URI, String] a reference to the source / origin of the ruby code to evaluate # @param ruby_code_string [String] ruby code in a string # # @return [Puppet::Pops::Functions.Function] - an instantiated function with global scope closure associated with the given loader #
UNK on_op UNK on_period UNK on_nl UNK on_op UNK on_lparen UNK on_rparen on_nl created on_op UNK on_lparen UNK on_comma UNK # make the private loader available in a binding to allow it to be passed on
UNK created on_period UNK on_lparen UNK on_comma UNK on_rparen on_nl end on_nl UNK UNK UNK on_period UNK on_lparen UNK on_rparen # create the function instance - it needs closure (scope), and loader (i.e. where it should start searching for things # when calling functions etc. # It should be bound to global scope
created on_period UNK on_lparen UNK on_comma UNK on_rparen on_nl end on_nl UNK UNK UNK on_period UNK on_lparen UNK on_rparen UNK # Sets closure scope to nil, to let it be picked up at runtime from Puppet.lookup(:global_scope) # If function definition used the loader from the binding to create a new loader, that loader wins
UNK UNK on_period UNK on_lparen UNK on_rparen UNK UNK on_nl end on_nl UNK UNK UNK on_nl end on_nl EMP EMP # Produces a binding where the given loader is bound as a local variable (loader_injected_arg). This variable can be used in loaded # ruby code - e.g. to call Puppet::Function.create_loaded_function(:name, loader,...) #
