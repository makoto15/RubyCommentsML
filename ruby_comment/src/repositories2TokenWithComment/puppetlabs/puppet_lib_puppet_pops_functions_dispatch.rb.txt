UNK on_const on_op on_const on_op on_const on_nl UNK on_symbeg UNK on_nl UNK on_symbeg UNK on_nl UNK on_symbeg UNK on_nl on_ignored_nl # Defines a connection between a implementation method and the signature that # the method will handle. # # This interface should not be used directly. Instead dispatches should be # constructed using the DSL defined in {Puppet::Functions}. # # @api private
UNK on_symbeg UNK on_nl UNK on_symbeg UNK on_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl UNK on_symbeg UNK # @api public
UNK on_symbeg UNK on_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK # TODO: refactor to parameter_names since that makes it API
UNK on_symbeg UNK on_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen UNK on_comma UNK on_comma UNK on_comma UNK on_op # Describes how arguments are woven if there are injections, a regular argument is a given arg index, an array # an injection description. #
UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen UNK on_comma UNK on_comma UNK on_comma UNK on_op UNK on_comma UNK on_op # @api public
def UNK on_lparen UNK on_comma UNK on_comma UNK on_comma UNK on_op UNK on_comma UNK on_op UNK on_comma UNK on_op on_const # @param type [Puppet::Pops::Types::PArrayType, Puppet::Pops::Types::PTupleType] - type describing signature # @param method_name [String] the name of the method that will be called when type matches given arguments # @param param_names [Array<String>] names matching the number of parameters specified by type (or empty array) # @param block_name [String,nil] name of block parameter, no nil # @param injections [Array<Array>] injection data for weaved parameters # @param weaving [Array<Integer,Array>] weaving knits # @param last_captures [Boolean] true if last parameter is captures rest # @param argument_mismatch_handler [Boolean] true if this is a dispatch for an argument mismatch # @api private
def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar # @api private
def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_lparen UNK # @api private
def UNK on_lparen UNK on_comma UNK on_comma args on_comma on_op UNK on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_lparen on_ivar # @api private
def UNK on_lparen UNK on_comma args on_rparen on_ignored_nl UNK on_ivar on_period UNK on_nl args on_nl UNK on_ignored_nl UNK on_op UNK # @api private
UNK on_ivar on_period UNK on_nl args on_nl UNK on_ignored_nl UNK on_op UNK UNK on_nl on_ivar on_period UNK UNK on_op knit # no need to weave if there are no injections
UNK knit on_op UNK on_nl UNK on_op on_op knit on_op UNK on_nl UNK on_op args UNK UNK on_op on_op UNK # Careful so no new nil arguments are added since they would override default # parameter values in the received
