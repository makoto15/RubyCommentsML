class on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl UNK on_symbeg nsecs on_nl on_ignored_nl def initialize on_lparen nanoseconds on_rparen on_ignored_nl # TimeData is a Numeric that stores its value internally as nano-seconds but will be considered to be seconds and fractions of # seconds when used in arithmetic or comparison with other Numeric types. #
def UNK on_nl on_ivar on_period UNK on_lparen on_const on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op on_const on_nl # @return [Float] the number of seconds
def UNK on_nl on_ivar on_op on_const on_nl end on_nl on_ignored_nl def to_i on_nl UNK on_nl end on_nl on_ignored_nl def UNK # @return [Integer] the number of seconds with fraction part truncated
def UNK on_nl UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_const on_lparen on_ivar on_comma on_const on_rparen on_nl # @return [Complex] short for `#to_f.to_c`
def UNK on_nl on_const on_lparen on_ivar on_comma on_const on_rparen on_nl end on_nl on_ignored_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_comma # @return [Rational] initial numerator is nano-seconds and denominator is nano-seconds per second
def UNK on_nl on_ivar on_op on_int on_nl end on_nl on_ignored_nl def on_op on_lparen o on_rparen on_ignored_nl case o on_nl when # @return [true] if the stored value is negative
on_const on_period new on_lparen on_ivar on_op on_lparen o on_op on_const on_rparen on_period to_i on_rparen on_nl else on_ignored_nl raise on_const on_comma # Add seconds
on_const on_period new on_lparen on_ivar on_op on_lparen o on_op on_const on_rparen on_period to_i on_rparen on_nl else on_ignored_nl raise on_const on_comma # Subtract seconds
on_ivar on_period UNK on_lparen o on_period nsecs on_rparen on_nl when on_const on_comma on_const on_nl on_const on_period new on_lparen on_ivar on_period # Timespan/Timespan yields a Float
def UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op on_int on_nl end on_nl on_ignored_nl def UNK # @return [Integer] a positive integer denoting the number of days
def UNK on_nl UNK on_op on_int on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op on_int on_nl end on_nl on_ignored_nl # @return [Integer] a positive integer, 0 - 23 denoting hours of day
def UNK on_nl UNK on_op on_int on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op on_int on_nl end on_nl on_ignored_nl # @return [Integer] a positive integer, 0 - 59 denoting minutes of hour
def UNK on_nl UNK on_op on_int on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op on_int on_nl end on_nl on_ignored_nl # @return [Integer] a positive integer, 0 - 59 denoting seconds of minute
def UNK on_nl UNK on_op on_int on_nl end on_nl on_ignored_nl def nanoseconds on_nl total_nanoseconds on_op on_const on_nl end on_nl on_ignored_nl # @return [Integer] a positive integer, 0 - 999 denoting milliseconds of second
def nanoseconds on_nl total_nanoseconds on_op on_const on_nl end on_nl on_ignored_nl def format on_lparen format on_rparen on_ignored_nl format on_op on_const on_period # @return [Integer] a positive integer, 0 - 999.999.999 denoting nanoseconds of second
def format on_lparen format on_rparen on_ignored_nl format on_op on_const on_period UNK on_period UNK on_lparen format on_rparen unless format on_period is_a? # Formats this timestamp into a string according to the given `format` # # @param [String,Format] format The format to use when producing the string # @return [String] the string representing the formatted timestamp # @raise [ArgumentError] if the format is a string with illegal format characters # @api public
def UNK on_nl format on_lparen on_const on_op on_const on_lbracket on_int on_rbracket on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen UNK # Formats this timestamp into a string according to {Format::DEFAULTS[0]} # # @return [String] the string representing the formatted timestamp # @api public
def UNK on_nl total_nanoseconds on_op on_const on_nl end on_nl on_ignored_nl def UNK on_nl total_nanoseconds on_op on_const on_nl end on_nl on_ignored_nl # @api private
def UNK on_nl total_nanoseconds on_op on_const on_nl end on_nl on_ignored_nl def UNK on_nl total_nanoseconds on_op on_const on_nl end on_nl on_ignored_nl # @api private
def UNK on_nl total_nanoseconds on_op on_const on_nl end on_nl on_ignored_nl def UNK on_nl total_nanoseconds on_op on_const on_nl end on_nl on_ignored_nl # @api private
def UNK on_nl total_nanoseconds on_op on_const on_nl end on_nl on_ignored_nl def UNK on_nl total_nanoseconds on_op on_const on_nl end on_nl on_ignored_nl # @api private
def UNK on_nl total_nanoseconds on_op on_const on_nl end on_nl on_ignored_nl def UNK on_nl total_nanoseconds on_op on_const on_nl end on_nl on_ignored_nl # @api private
def UNK on_nl total_nanoseconds on_op on_const on_nl end on_nl on_ignored_nl def total_nanoseconds on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl # @api private
def total_nanoseconds on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl class on_const on_nl class on_const on_nl def append_to on_lparen bld # @api private
class on_const on_nl class on_const on_nl def append_to on_lparen bld on_comma ts on_rparen on_ignored_nl raise on_const on_comma on_tstring_beg on_tstring_content on_embexpr_beg # Represents a compiled Timestamp format. The format is used both when parsing a timestamp # in string format and when producing a string from a timestamp instance. #
class on_const on_nl def append_to on_lparen bld on_comma ts on_rparen on_ignored_nl raise on_const on_comma on_tstring_beg on_tstring_content on_embexpr_beg self on_period class # A segment is either a string that will be represented literally in the formatted timestamp # or a value that corresponds to one of the possible format characters.
class on_const on_op on_const on_nl def nanoseconds on_lparen group on_rparen on_ignored_nl raise on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen # Class that assumes that leading zeroes are significant and that trailing zeroes are not and left justifies when formatting. # Applicable after a decimal point, and hence to the %L and %N formats.
raise on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen if use_total? on_nl n on_op group on_period to_i on_nl UNK on_op # Using %L or %N to parse a string only makes sense when they are considered to be fractions. Using them # as a total quantity would introduce ambiguities.
n on_op n on_period UNK on_period UNK on_lparen UNK on_tstring_content UNK on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period to_i unless use_total? # Strip trailing zeroes when default format is used
ns on_op on_int on_op on_lparen on_int on_op width on_rparen on_nl ns on_op on_int on_op width unless use_total? on_nl else on_ignored_nl # Truncate digits to the right, i.e. let %6N reflect microseconds
class on_const on_nl UNK on_const on_op on_const on_op on_const on_nl on_ignored_nl def initialize on_nl on_ivar on_op on_const on_period new on_lbrace # Parses a string into a Timestamp::Format instance
on_const on_op on_int on_const on_op on_int on_const on_op on_int on_ignored_nl def UNK on_lparen str on_rparen on_ignored_nl bld on_op on_lbracket on_rbracket # States used by the #internal_parser function
on_const on_op on_int on_const on_op on_int on_ignored_nl def UNK on_lparen str on_rparen on_ignored_nl bld on_op on_lbracket on_rbracket on_nl raise on_const # expects literal or '%'
on_const on_op on_int on_ignored_nl def UNK on_lparen str on_rparen on_ignored_nl bld on_op on_lbracket on_rbracket on_nl raise on_const on_comma _ on_lparen # expects pad, width, or format character
on_ignored_nl def UNK on_lparen str on_rparen on_ignored_nl bld on_op on_lbracket on_rbracket on_nl raise on_const on_comma _ on_lparen on_tstring_beg on_tstring_content on_tstring_end # expects width, or format character
state on_op on_const on_nl fstart on_op position on_nl padchar on_op on_tstring_beg on_tstring_content on_tstring_end on_nl width on_op nil on_nl else on_ignored_nl # '%'
UNK on_lparen bld on_comma codepoint on_rparen on_nl state on_op on_const on_nl when on_int raise on_const on_comma UNK on_lparen str on_comma # '%'
raise on_const on_comma UNK on_lparen str on_comma fstart on_comma position on_rparen unless state on_op on_const on_nl padchar on_op nil on_nl # '-'
raise on_const on_comma UNK on_lparen str on_comma fstart on_comma position on_rparen unless state on_op on_const on_nl padchar on_op on_tstring_beg on_tstring_content # '_'
highest on_op on_const on_nl bld on_op on_const on_op on_const on_period new on_lparen padchar on_comma width on_rparen on_nl state on_op on_const # 'D'
highest on_op on_const unless highest on_op on_const on_nl bld on_op on_const on_op on_const on_period new on_lparen padchar on_comma width on_rparen # 'H'
highest on_op on_const unless highest on_op on_const on_nl bld on_op on_const on_op on_const on_period new on_lparen padchar on_comma width on_rparen # 'M'
highest on_op on_const unless highest on_op on_const on_nl bld on_op on_const on_op on_const on_period new on_lparen padchar on_comma width on_rparen # 'S'
highest on_op on_const unless highest on_op on_const on_nl bld on_op on_const on_op on_const on_period new on_lparen padchar on_comma width on_rparen # 'L'
highest on_op on_const unless highest on_op on_const on_nl bld on_op on_const on_op on_const on_period new on_lparen padchar on_comma width on_rparen # 'N'
raise on_const on_comma UNK on_lparen str on_comma fstart on_comma position on_rparen unless codepoint on_op on_int on_op codepoint on_op on_int on_nl # only digits allowed at this point
