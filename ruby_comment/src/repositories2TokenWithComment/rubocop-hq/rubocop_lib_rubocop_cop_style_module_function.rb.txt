on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl on_const # frozen_string_literal: true
UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_op on_ignored_nl on_tstring_beg # This cop checks for use of `extend self` or `module_function` in a # module. # # Supported styles are: module_function, extend_self, forbidden. # # @example EnforcedStyle: module_function (default) # # bad # module Test # extend self # # ... # end # # # good # module Test # module_function # # ... # end # # In case there are private methods, the cop won't be activated. # Otherwise, it forces to change the flow of the default code. # # @example EnforcedStyle: module_function (default) # # good # module Test # extend self # # ... # private # # ... # end # # @example EnforcedStyle: extend_self # # bad # module Test # module_function # # ... # end # # # good # module Test # extend self # # ... # end # # The option `forbidden` prohibits the usage of both styles. # # @example EnforcedStyle: forbidden # # bad # module Test # module_function # # ... # end # # # bad # module Test # extend self # # ... # end # # # bad # module Test # extend self # # ... # private # # ... # end # # These offenses are not safe to auto-correct since there are different # implications to each approach.
