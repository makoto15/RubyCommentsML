on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl on_const on_op on_ignored_nl on_lparen on_const on_op on_const # frozen_string_literal: true
UNK on_const on_nl on_const on_op on_ignored_nl on_lparen on_const on_op on_const on_rparen on_period UNK on_nl on_ignored_nl UNK on_symbeg UNK on_comma on_symbeg # A Variable represents existence of a local variable. # This holds a variable declaration node and some states of the variable.
def UNK on_lparen node on_rparen on_ignored_nl UNK on_op on_const on_period UNK on_lparen node on_comma on_ivar on_rparen on_nl on_ivar on_op UNK # rubocop:disable Metrics/AbcSize, Metrics/CyclomaticComplexity
UNK UNK UNK on_lparen assignment on_rparen on_nl on_ignored_nl UNK UNK on_op assignment on_period branch on_op assignment on_period branch on_op UNK # Modifier if/unless conditions are special. Assignments made in # them do not put the assigned variable in scope to the left of the # if/unless keyword. A preceding assignment is needed to put the # variable in scope. For this reason we skip to the next assignment # here.
on_ignored_nl def UNK on_lparen assignment on_rparen on_ignored_nl parent on_op assignment on_period node on_period parent on_nl parent on_op parent on_period parent # rubocop:enable Metrics/AbcSize, Metrics/CyclomaticComplexity
def UNK on_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_period UNK on_period UNK on_lparen UNK # This is a convenient way to check whether the variable is used # in its entire variable lifetime. # For more precise usage check, refer Assignment#used?. # # Once the variable is captured by a block, we have no idea # when, where, and how many times the block would be invoked. # This means we cannot track the usage of the variable. # So we consider it's used to suppress false positive offenses.
