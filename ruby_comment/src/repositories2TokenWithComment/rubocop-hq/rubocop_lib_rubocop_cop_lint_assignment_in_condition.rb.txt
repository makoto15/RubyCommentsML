on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl on_const # frozen_string_literal: true
UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op on_ignored_nl UNK UNK UNK UNK UNK UNK UNK UNK # This cop checks for assignments in the conditions of # if/while/until. # # `AllowSafeAssignment` option for safe assignment. # By safe assignment we mean putting parentheses around # an assignment to indicate "I know I'm using an assignment # as a condition. It's not a mistake." # # @example # # bad # if some_var = true # do_something # end # # # good # if some_var == true # do_something # end # # @example AllowSafeAssignment: true (default) # # good # if (some_var = true) # do_something # end # # @example AllowSafeAssignment: false # # bad # if (some_var = true) # do_something # end #
def UNK on_lparen node on_comma UNK on_comma on_op UNK on_rparen on_ignored_nl UNK on_op UNK node if UNK on_period UNK on_lparen # each_node/visit_descendants_with_types with :skip_children
