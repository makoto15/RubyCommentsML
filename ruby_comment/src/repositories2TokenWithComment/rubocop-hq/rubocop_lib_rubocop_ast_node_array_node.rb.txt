on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl on_const on_op UNK on_ignored_nl UNK UNK UNK UNK # frozen_string_literal: true
UNK on_const on_op on_const on_nl on_const on_op UNK on_ignored_nl UNK UNK UNK UNK UNK on_ignored_nl UNK UNK UNK UNK on_nl # A node extension for `array` nodes. This will be used in place of a plain # node when the builder constructs the AST, making its methods available # to all `array` nodes within RuboCop.
UNK UNK on_nl UNK on_period UNK on_nl end on_nl on_ignored_nl UNK UNK on_lparen on_op UNK on_rparen on_ignored_nl UNK UNK on_lparen # Returns an array of all value nodes in the `array` literal. # # @return [Array<Node>] an array of value nodes
UNK UNK on_lparen on_op UNK on_rparen on_ignored_nl UNK UNK on_lparen UNK on_rparen UNK UNK on_nl on_ignored_nl UNK on_period UNK on_lparen # Calls the given block for all values in the `array` literal. # # @yieldparam [Node] node each node # @return [self] if a block is given # @return [Enumerator] if no block is given
UNK UNK on_nl UNK on_period UNK on_op UNK on_lparen UNK UNK UNK on_rparen on_nl end on_nl on_ignored_nl UNK UNK on_lparen # Checks whether the `array` literal is delimited by square brackets. # # @return [Boolean] whether the array is enclosed in square brackets
UNK UNK on_lparen UNK on_op UNK on_rparen on_ignored_nl UNK UNK on_nl UNK on_period UNK on_op UNK on_period UNK on_period UNK # Checks whether the `array` literal is delimited by percent brackets. # # @overload percent_literal? # Check for any percent literal. # # @overload percent_literal?(type) # Check for percent literal of type `type`. # # @param type [Symbol] an optional percent literal type # # @return [Boolean] whether the array is enclosed in percent brackets
UNK UNK on_nl UNK on_op UNK on_nl end on_nl end on_nl end on_nl end on_nl EMP EMP EMP EMP EMP # Checks whether the `array` literal is delimited by either percent or # square brackets # # @return [Boolean] whether the array is enclosed in percent or square # brackets
