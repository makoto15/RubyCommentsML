on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl UNK on_const # frozen_string_literal: true
UNK on_const on_op on_const on_nl UNK on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_op # This cop check for usages of not (`not` or `!`) called on a method # when an inverse of that method can be used instead. # Methods that can be inverted by a not (`not` or `!`) should be defined # in `InverseMethods` # Methods that are inverted by inverting the return # of the block that is passed to the method should be defined in # `InverseBlocks` # # @example # # bad # !foo.none? # !foo.any? { |f| f.even? } # !foo.blank? # !(foo == bar) # foo.select { |f| !f.even? } # foo.reject { |f| f != 7 } # # # good # foo.none? # foo.blank? # foo.any? { |f| f.even? } # foo != bar # foo == bar # !!('foo' =~ /^\w+$/) # !(foo.class < Numeric) # Checking class hierarchy is allowed # # Blocks with guard clauses are ignored: # foo.select do |f| # next if f.zero? # f != 1 # end
UNK on_lparen block on_rparen on_nl UNK on_lparen node on_comma on_ignored_nl on_label UNK on_lparen on_const on_comma on_label method on_comma on_ignored_nl on_label # Inverse method offenses inside of the block of an inverse method # offense, such as `y.reject { |key, _value| !(key =~ /c\d/) }`, # can cause auto-correction to apply improper corrections.
def UNK on_lparen UNK on_comma UNK on_comma method on_rparen on_ignored_nl on_const on_period UNK on_lparen method on_rparen on_op on_ignored_nl on_lparen UNK # When comparing classes, `!(Integer < Numeric)` is not the same as # `Integer > Numeric`.
