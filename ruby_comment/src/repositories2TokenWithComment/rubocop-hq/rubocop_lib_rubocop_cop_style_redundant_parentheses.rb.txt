on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl def_node_matcher # frozen_string_literal: true
UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl def_node_matcher on_symbeg UNK on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_nl def_node_matcher on_symbeg # This cop checks for redundant parentheses. # # @example # # # bad # (x) if ((y.z).nil?) # # # good # x if y.z.nil? #
UNK on_lparen node on_rparen on_op UNK on_lparen node on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen node on_rparen on_ignored_nl UNK # Don't flag `break(1)`, etc
UNK on_lparen node on_rparen on_op on_op parentheses? on_lparen node on_period parent on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen node # Don't flag `method (arg) { }`
node on_period children on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen node on_rparen on_ignored_nl UNK on_lparen node on_period children # Don't flag `()`
UNK on_lparen node on_period children on_period first on_rparen on_op on_ignored_nl UNK on_lparen node on_rparen on_op on_ignored_nl on_op parentheses? on_lparen node # Don't flag `method ({key: value})` or `method ({key: value}.method)`
on_lparen UNK on_lparen node on_rparen on_op UNK on_lparen node on_rparen on_rparen on_op on_ignored_nl UNK on_lparen node on_rparen on_nl end on_nl # Don't flag # ``` # { a: (1 # ), } # ```
