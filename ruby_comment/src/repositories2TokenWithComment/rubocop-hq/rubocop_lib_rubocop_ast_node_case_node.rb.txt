on_ignored_nl UNK UNK on_nl UNK UNK on_nl UNK UNK on_op UNK on_nl UNK UNK on_nl on_ignored_nl UNK UNK on_nl UNK # frozen_string_literal: true
UNK UNK on_op UNK on_nl UNK UNK on_nl on_ignored_nl UNK UNK on_nl UNK UNK UNK on_nl end on_nl on_ignored_nl UNK # A node extension for `case` nodes. This will be used in place of a plain # node when the builder constructs the AST, making its methods available # to all `case` nodes within RuboCop.
UNK UNK on_nl UNK UNK UNK on_nl end on_nl on_ignored_nl UNK UNK on_nl UNK UNK UNK UNK UNK UNK UNK # Returns the keyword of the `case` statement as a string. # # @return [String] the keyword of the `case` statement
UNK UNK on_nl UNK UNK UNK UNK UNK UNK UNK UNK UNK on_nl on_ignored_nl UNK UNK UNK UNK on_op UNK # Calls the given block for each `when` node in the `case` statement. # If no block is given, an `Enumerator` is returned. # # @return [self] if a block is given # @return [Enumerator] if no block is given
UNK UNK on_nl UNK UNK UNK on_op on_op UNK UNK on_nl end on_nl on_ignored_nl UNK UNK on_nl UNK UNK on_op # Returns an array of all the when branches in the `case` statement. # # @return [Array<WhenNode>] an array of `when` nodes
UNK UNK on_nl UNK UNK on_op UNK UNK on_nl end on_nl on_ignored_nl UNK UNK on_nl UNK UNK UNK on_nl end # Returns the else branch of the `case` statement, if any. # # @return [Node] the else branch node of the `case` statement # @return [nil] if the case statement does not have an else branch.
UNK UNK on_nl UNK UNK UNK on_nl end on_nl end on_nl end on_nl end on_nl EMP EMP EMP EMP EMP # Checks whether this case statement has an `else` branch. # # @return [Boolean] whether the `case` statement has an `else` branch
