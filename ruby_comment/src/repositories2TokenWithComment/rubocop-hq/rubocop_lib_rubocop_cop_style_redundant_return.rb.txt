on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl on_const # frozen_string_literal: true
UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end # This cop checks for redundant `return` expressions. # # @example # # These bad cases should be extended to handle methods whose body is # # if/else or a case expression with a default branch. # # # bad # def test # return something # end # # # bad # def test # one # two # three # return something # end # # # good # def test # return something if something_else # end # # # good # def test # if x # elsif y # else # end # end # # @example AllowMultipleReturnValues: false (default) # # bad # def test # return x, y # end # # @example AllowMultipleReturnValues: true # # good # def test # return x, y # end #
def check_branch on_lparen node on_rparen on_ignored_nl UNK UNK node on_nl on_ignored_nl UNK node on_period UNK on_nl when on_symbeg UNK UNK # rubocop:disable Metrics/CyclomaticComplexity
on_ignored_nl def UNK on_lparen node on_rparen on_ignored_nl UNK if UNK UNK on_tstring_beg on_tstring_content on_tstring_end UNK on_op on_ignored_nl node on_period children # rubocop:enable Metrics/CyclomaticComplexity
