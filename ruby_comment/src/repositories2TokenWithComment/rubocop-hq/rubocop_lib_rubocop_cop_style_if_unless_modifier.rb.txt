on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl UNK on_const # frozen_string_literal: true
UNK on_const on_op on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end # Checks for `if` and `unless` statements that would fit on one line if # written as modifier `if`/`unless`. The cop also checks for modifier # `if`/`unless` lines that exceed the maximum line length. # # The maximum line length is configured in the `Layout/LineLength` # cop. The tab size is configured in the `IndentationWidth` of the # `Layout/IndentationStyle` cop. # # @example # # bad # if condition # do_stuff(bar) # end # # unless qux.empty? # Foo.do_something # end # # do_something_in_a_method_with_a_long_name(arg) if long_condition # # # good # do_stuff(bar) if condition # Foo.do_something unless qux.empty? # # if long_condition # do_something_in_a_method_with_a_long_name(arg) # end
UNK node on_op on_op node on_period UNK on_nl UNK on_op node on_period UNK on_nl node on_op node on_period UNK on_nl # traverse the AST upwards until we find a 'begin' node # we want to look at the following child and see if it is on the # same line as this 'if' node
return false if node on_period UNK on_period UNK on_nl return UNK if on_const on_period UNK on_lparen node on_period UNK on_period # Parenthesize corrected expression if changing to modifier-if form # would change the meaning of the parent expression # (due to the low operator precedence of modifier-if)
