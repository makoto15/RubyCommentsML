on_ignored_nl UNK UNK on_nl UNK UNK on_nl UNK UNK on_nl UNK on_nl on_ignored_nl UNK UNK on_lparen collection on_rparen on_ignored_nl collection # frozen_string_literal: true
UNK UNK on_nl UNK on_nl on_ignored_nl UNK UNK on_lparen collection on_rparen on_ignored_nl collection on_period UNK on_op UNK on_op collection on_period # Common functionality for dealing with duplication.
UNK UNK on_lparen collection on_rparen on_ignored_nl collection on_period UNK on_op UNK on_op collection on_period UNK on_op collection on_period UNK on_period # Whether the `collection` contains any duplicates. # # @param [Array] collection an array to check for duplicates # @return [Boolean] whether the array contains any duplicates
UNK UNK on_lparen collection on_rparen on_ignored_nl UNK on_lparen collection on_rparen on_period UNK on_nl end on_nl on_ignored_nl UNK UNK on_lparen collection # Returns all duplicates, including the first instance of the duplicated # elements. # # @param [Array] collection an array to return duplicates for # @return [Array] all the duplicates
UNK UNK on_lparen collection on_rparen on_ignored_nl UNK on_lparen collection on_rparen on_period UNK UNK on_op UNK on_op UNK UNK UNK on_op # Returns the consecutive duplicates, leaving out the first instance of # the duplicated elements. # # @param [Array] collection an array to return consecutive duplicates for # @return [Array] the consecutive duplicates
UNK UNK on_lparen collection on_rparen on_ignored_nl collection on_period UNK UNK on_op UNK on_op UNK UNK on_period UNK on_period UNK on_lparen # Returns a hash of grouped duplicates. The key will be the first # instance of the element, and the value an `array` of the initial # element and all duplicate instances. # # @param [Array] collection an array to group duplicates for # @return [Array] the grouped duplicates
