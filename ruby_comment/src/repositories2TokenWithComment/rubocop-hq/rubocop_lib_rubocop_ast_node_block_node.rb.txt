on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op UNK UNK # frozen_string_literal: true
UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op UNK UNK UNK UNK UNK on_period UNK on_nl on_ignored_nl # A node extension for `block` nodes. This will be used in place of a plain # node when the builder constructs the AST, making its methods available # to all `send` nodes within RuboCop. # # A `block` node is essentially a method send with a block. Parser nests # the `send` node inside the `block` node.
def UNK on_nl UNK UNK UNK UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK UNK on_nl UNK UNK UNK # The `send` node associated with this block. # # @return [SendNode] the `send` node associated with the `block` node
def UNK on_nl UNK UNK on_nl UNK UNK UNK on_ignored_nl UNK UNK UNK UNK on_nl end on_nl end on_nl on_ignored_nl # The arguments of this block. # # @return [Array<Node>]
UNK on_ignored_nl UNK UNK UNK UNK on_nl end on_nl end on_nl on_ignored_nl def UNK on_nl UNK UNK UNK UNK on_nl # Numbered parameters have no block arguments.
def UNK on_nl UNK UNK UNK UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_period UNK on_nl end on_nl # The body of this block. # # @return [Node, nil] the body of the `block` node or `nil`
def UNK on_nl UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_op UNK on_period UNK on_nl end on_nl # The name of the dispatched method as a symbol. # # @return [Symbol] the name of the dispatched method
def UNK on_nl on_op UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl loc on_period end on_op UNK UNK # Checks whether this block takes any arguments. # # @return [Boolean] whether this `block` node takes any arguments
def UNK on_nl loc on_period end on_op UNK UNK UNK UNK UNK UNK on_nl end on_nl on_ignored_nl def UNK on_nl # Checks whether the `block` literal is delimited by curly braces. # # @return [Boolean] whether the `block` literal is enclosed in braces
def UNK on_nl loc on_period end on_op UNK UNK UNK UNK UNK UNK on_nl end on_nl on_ignored_nl def UNK on_nl # Checks whether the `block` literal is delimited by `do`-`end` keywords. # # @return [Boolean] whether the `block` literal is enclosed in `do`-`end`
def UNK on_nl UNK loc on_period UNK on_period UNK UNK loc on_period end on_period UNK UNK on_period UNK on_nl end # The delimiters for this `block` literal. # # @return [Array<String>] the delimiters for the `block` literal
def UNK on_nl UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_period UNK on_nl end on_nl on_ignored_nl # The opening delimiter for this `block` literal. # # @return [String] the opening delimiter for the `block` literal
def UNK on_nl UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl loc on_period UNK on_period UNK on_op loc # The closing delimiter for this `block` literal. # # @return [String] the closing delimiter for the `block` literal
def UNK on_nl loc on_period UNK on_period UNK on_op loc on_period end on_period UNK on_nl end on_nl on_ignored_nl def UNK # Checks whether this is a single line block. This is overridden here # because the general version in `Node` does not work for `block` nodes. # # @return [Boolean] whether the `block` literal is on a single line
def UNK on_nl on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_period UNK UNK UNK UNK UNK on_nl # Checks whether this is a multiline block. This is overridden here # because the general version in `Node` does not work for `block` nodes. # # @return [Boolean] whether the `block` literal is on a several lines
def UNK on_nl UNK on_period UNK UNK UNK UNK UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_const on_period UNK # Checks whether this `block` literal belongs to a lambda. # # @return [Boolean] whether the `block` literal belongs to a lambda
def UNK on_nl on_const on_period UNK UNK UNK UNK on_nl end on_nl end on_nl end on_nl end on_nl EMP EMP # Checks whether this node body is a void context. # # @return [Boolean] whether the `block` node body is a void context
