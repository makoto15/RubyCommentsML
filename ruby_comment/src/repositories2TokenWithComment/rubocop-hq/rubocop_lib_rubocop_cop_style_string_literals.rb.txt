on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl UNK on_const # frozen_string_literal: true
UNK on_const on_op on_const on_nl UNK on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl def # Checks if uses of quotes match the configured preference. # # @example EnforcedStyle: single_quotes (default) # # bad # "No special symbols" # "No string interpolation" # "Just text" # # # good # 'No special symbols' # 'No string interpolation' # 'Just text' # "Wait! What's #{this}!" # # @example EnforcedStyle: double_quotes # # bad # 'Just some text' # 'No special chars or interpolation' # # # good # "Just some text" # "No special chars or interpolation" # "Every string in #{project} uses double_quotes"
UNK UNK UNK on_nl UNK if node on_period UNK on_nl on_ignored_nl children on_op node on_period children on_nl UNK UNK UNK # Strings which are continued across multiple lines using \ # are parsed as a `dstr` node with `str` children # If one part of that continued string contains interpolations, # then it will be parsed as a nested `dstr` node
UNK UNK node on_period UNK on_period UNK on_period UNK UNK if UNK on_period UNK on_lparen on_op UNK UNK on_rparen on_nl # For multi-line strings that only have quote marks # at the beginning of the first line and the end of # the last, the begin and end region of each child # is nil. The quote marks are in the parent node.
UNK UNK if UNK on_lparen node on_rparen on_nl on_ignored_nl UNK on_lparen node on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl # If it's a string within an interpolation, then it's not an offense # for this cop.
