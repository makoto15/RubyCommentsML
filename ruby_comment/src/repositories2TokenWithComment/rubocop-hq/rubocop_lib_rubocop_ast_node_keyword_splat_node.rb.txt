on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const UNK on_const on_nl UNK on_const on_nl on_ignored_nl on_const UNK UNK UNK # frozen_string_literal: true
UNK on_const UNK on_const on_nl UNK on_const on_nl on_ignored_nl on_const UNK UNK UNK UNK on_nl on_ignored_nl UNK UNK on_nl UNK # A node extension for `kwsplat` nodes. This will be used in place of a # plain node when the builder constructs the AST, making its methods # available to all `kwsplat` nodes within RuboCop.
UNK UNK on_nl UNK on_nl end on_nl on_ignored_nl UNK UNK on_nl UNK on_nl end on_nl on_ignored_nl UNK UNK on_nl on_const # This is used for duck typing with `pair` nodes which also appear as # `hash` elements. # # @return [false]
UNK UNK on_nl UNK on_nl end on_nl on_ignored_nl UNK UNK on_nl on_const on_nl end on_nl on_ignored_nl UNK UNK on_nl UNK # This is used for duck typing with `pair` nodes which also appear as # `hash` elements. # # @return [false]
UNK UNK on_nl on_const on_nl end on_nl on_ignored_nl UNK UNK on_nl UNK UNK UNK UNK UNK on_nl end on_nl end # Returns the operator for the `kwsplat` as a string. # # @return [String] the double splat operator
UNK UNK on_nl UNK UNK UNK UNK UNK on_nl end on_nl end on_nl end on_nl end on_nl EMP EMP EMP # Custom destructuring method. This is used to normalize the branches # for `pair` and `kwsplat` nodes, to add duck typing to `hash` elements. # # @return [Array<KeywordSplatNode>] the different parts of the `kwsplat`
