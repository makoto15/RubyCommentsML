on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl on_const # frozen_string_literal: true
UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op UNK on_tstring_content UNK on_nl on_ignored_nl UNK on_symbeg UNK on_comma # This cop checks for missing top-level documentation of classes and # modules. Classes with no body are exempt from the check and so are # namespace modules - modules that have nothing in their bodies except # classes, other modules, constant definitions or constant visibility # declarations. # # The documentation requirement is annulled if the class or module has # a "#:nodoc:" comment next to it. Likewise, "#:nodoc: all" does the # same for all its children. # # @example # # bad # class Person # # ... # end # # module Math # end # # # good # # Description/Explanation of Person class # class Person # # ... # end # # # allowed # # Class without body # class Person # end # # # Namespace - A namespace can be a class or a module # # Containing a class # module Namespace # # Description/Explanation of Person class # class Person # # ... # end # end # # # Containing constant visibility declaration # module Namespace # class Private # end # # private_constant :Private # end # # # Containing constant definition # module Namespace # Public = Class.new # end #
def UNK on_lparen node on_comma UNK on_op UNK on_rparen on_ignored_nl return UNK UNK node on_op UNK on_op UNK on_nl on_ignored_nl # First checks if the :nodoc: comment is associated with the # class/module. Unless the element is tagged with :nodoc:, the search # proceeds to check its ancestors for :nodoc: all. # Note: How end-of-line comments are associated with code changed in # parser-2.2.0.4.
