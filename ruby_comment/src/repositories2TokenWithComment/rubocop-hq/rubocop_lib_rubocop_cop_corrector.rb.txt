on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl def UNK on_lparen source_buffer on_comma UNK on_op UNK UNK on_rparen # frozen_string_literal: true
UNK on_const on_nl def UNK on_lparen source_buffer on_comma UNK on_op UNK UNK on_rparen on_ignored_nl on_ivar on_op source_buffer on_nl raise on_tstring_beg # This class takes a source buffer and rewrite its source # based on the different correction rules supplied. # # Important! # The nodes modified by the corrections should be part of the # AST of the source_buffer.
def UNK on_lparen source_buffer on_comma UNK on_op UNK UNK on_rparen on_ignored_nl on_ivar on_op source_buffer on_nl raise on_tstring_beg on_tstring_content on_tstring_end UNK # # @param source_buffer [Parser::Source::Buffer] # @param corrections [Array(#call)] # Array of Objects that respond to #call. They will receive the # corrector itself and should use its method to modify the source. # # @example # # class AndOrCorrector # def initialize(node) # @node = node # end # # def call(corrector) # replacement = (@node.type == :and ? '&&' : '||') # corrector.replace(@node.loc.operator, replacement) # end # end # # corrections = [AndOrCorrector.new(node)] # corrector = Corrector.new(source_buffer, corrections)
on_ivar on_period UNK on_period UNK on_op UNK UNK on_op UNK on_op on_ignored_nl on_ivar on_op UNK on_nl end on_nl end on_nl # Don't print warnings to stderr if corrections conflict with each other
def UNK on_nl on_ivar on_period UNK UNK on_op UNK on_op on_ignored_nl UNK on_ignored_nl on_ivar on_period UNK UNK on_ignored_nl UNK on_period # Does the actual rewrite and returns string corresponding to # the rewritten source. # # @return [String]
def UNK on_lparen node_or_range on_rparen on_ignored_nl range on_op to_range on_lparen node_or_range on_rparen on_nl on_ivar on_period UNK on_lparen range on_rparen on_nl # Removes the source range. # # @param [Parser::Source::Range, Rubocop::AST::Node] range or node
def UNK on_lparen node_or_range on_comma content on_rparen on_ignored_nl range on_op to_range on_lparen node_or_range on_rparen on_nl range on_op range on_period UNK # Inserts new code before the given source range. # # @param [Parser::Source::Range, Rubocop::AST::Node] range or node # @param [String] content
range on_op range on_period UNK on_lparen UNK on_ivar on_period UNK on_period size on_rparen UNK range on_period UNK on_op on_ivar on_period # TODO: Fix Cops using bad ranges instead
def UNK on_lparen node_or_range on_comma content on_rparen on_ignored_nl range on_op to_range on_lparen node_or_range on_rparen on_nl on_ivar on_period UNK on_lparen range # Inserts new code after the given source range. # # @param [Parser::Source::Range, Rubocop::AST::Node] range or node # @param [String] content
def UNK on_lparen node_or_range on_comma UNK on_comma UNK on_rparen on_ignored_nl range on_op to_range on_lparen node_or_range on_rparen on_nl on_ivar on_period UNK # Wraps the given source range with the given before and after texts # # @param [Parser::Source::Range, Rubocop::AST::Node] range or node # @param [String] before # @param [String] after
def UNK on_lparen node_or_range on_comma content on_rparen on_ignored_nl range on_op to_range on_lparen node_or_range on_rparen on_nl on_ivar on_period UNK on_lparen range # Replaces the code of the source range `range` with `content`. # # @param [Parser::Source::Range, Rubocop::AST::Node] range or node # @param [String] content
def UNK on_lparen node_or_range on_comma size on_rparen on_ignored_nl range on_op to_range on_lparen node_or_range on_rparen on_nl to_remove on_op on_const on_op on_const # Removes `size` characters prior to the source range. # # @param [Parser::Source::Range, Rubocop::AST::Node] range or node # @param [Integer] size
def UNK on_lparen node_or_range on_comma size on_rparen on_ignored_nl range on_op to_range on_lparen node_or_range on_rparen on_nl to_remove on_op on_const on_op on_const # Removes `size` characters from the beginning of the given range. # If `size` is greater than the size of `range`, the removed region can # overrun the end of `range`. # # @param [Parser::Source::Range, Rubocop::AST::Node] range or node # @param [Integer] size
def UNK on_lparen node_or_range on_comma size on_rparen on_ignored_nl range on_op to_range on_lparen node_or_range on_rparen on_nl to_remove on_op on_const on_op on_const # Removes `size` characters from the end of the given range. # If `size` is greater than the size of `range`, the removed region can # overrun the beginning of `range`. # # @param [Parser::Source::Range, Rubocop::AST::Node] range or node # @param [Integer] size
def to_range on_lparen node_or_range on_rparen on_ignored_nl range on_op UNK node_or_range on_nl UNK on_op on_const on_op on_const on_op on_const on_comma on_op # :nodoc:
raise on_tstring_beg on_tstring_content on_tstring_end on_tstring_beg on_tstring_content on_embexpr_beg buffer on_period UNK on_embexpr_end on_tstring_end on_nl end on_nl raise on_tstring_beg on_tstring_content on_embexpr_beg buffer # actually this should be enforced by parser gem
