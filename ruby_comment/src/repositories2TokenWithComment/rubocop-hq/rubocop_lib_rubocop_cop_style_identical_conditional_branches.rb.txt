on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl on_const on_op UNK UNK UNK # frozen_string_literal: true
UNK on_const on_op on_const on_nl on_const on_op UNK UNK UNK on_nl on_ignored_nl def UNK on_lparen node on_rparen on_ignored_nl UNK UNK # This cop checks for identical lines at the beginning or end of # each branch of a conditional statement. # # @example # # bad # if condition # do_x # do_z # else # do_y # do_z # end # # # good # if condition # do_x # else # do_y # end # do_z # # # bad # if condition # do_z # do_x # else # do_z # do_y # end # # # good # do_z # if condition # do_x # else # do_y # end # # # bad # case foo # when 1 # do_x # when 2 # do_x # else # do_x # end # # # good # case foo # when 1 # do_x # do_y # when 2 # # nothing # else # do_x # do_z # end
UNK UNK branches on_period UNK on_lparen on_op UNK UNK on_rparen on_nl on_ignored_nl UNK on_op branches on_period UNK UNK on_op branch # return if any branch is empty. An empty branch can be an `if` # without an `else` or a branch that contains only comments.
def UNK on_lparen branch on_rparen on_ignored_nl UNK branch on_period UNK on_nl UNK UNK UNK on_nl UNK branch on_period UNK on_nl # `elsif` branches show up in the if node as nested `else` branches. We # need to recursively iterate over all `else` branches.
