on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl UNK on_const # frozen_string_literal: true
UNK on_const on_op on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op UNK UNK UNK # Checks for spaces inside ordinary round parentheses. # # @example EnforcedStyle: no_space (default) # # The `no_space` style enforces that parentheses do not have spaces. # # # bad # f( 3) # g = (a + 3 ) # # # good # f(3) # g = (a + 3) # # @example EnforcedStyle: space # # The `space` style enforces that parentheses have a space at the # # beginning and end. # # Note: Empty parentheses should not have spaces. # # # bad # f(3) # g = (a + 3) # y( ) # # # good # f( 3 ) # g = ( a + 3 ) # y() #
UNK if token2 on_period UNK on_nl UNK UNK UNK on_lparen token1 on_comma token2 on_rparen on_op token1 on_period UNK on_nl on_ignored_nl # If the second token is a comment, that means that a line break # follows, and that the rules for space inside don't apply.
UNK UNK if token2 on_period UNK on_nl on_ignored_nl UNK UNK UNK UNK on_lparen token1 on_comma token2 on_rparen on_op on_op token1 # If the second token is a comment, that means that a line break # follows, and that the rules for space inside don't apply.
