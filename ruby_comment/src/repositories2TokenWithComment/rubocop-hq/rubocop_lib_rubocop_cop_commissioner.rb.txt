on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_op on_const on_nl on_ignored_nl UNK on_symbeg # frozen_string_literal: true
UNK on_const on_nl UNK on_const on_op on_const on_op on_const on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen UNK # Commissioner class is responsible for processing the AST and delegating # work to the specified cops.
on_const on_op on_const on_op on_const on_period UNK do on_op UNK on_op on_ignored_nl UNK on_op on_symbeg UNK UNK UNK UNK UNK # Create methods like :on_send, :on_super, etc. They will be called # during AST traversal and try to call corresponding methods on cops. # A call to `super` is used # to continue iterating over the children of a node. # However, if we know that a certain node type (like `int`) never has # child nodes, there is no reason to pay the cost of calling `super`.
def UNK on_lparen processed_source on_rparen on_ignored_nl on_ivar on_period UNK UNK on_op cop on_op cop on_period processed_source on_op processed_source UNK on_nl # TODO: Bad design.
def UNK on_lparen UNK on_comma processed_source on_rparen on_ignored_nl UNK on_period UNK do on_op cop on_op on_ignored_nl UNK unless cop on_period # There are cops/forces that require their own custom processing. # If they define the #investigate method, all input parameters passed # to the commissioner will be passed to the cop too in order to do # its own processing. # # These custom processors are invoked before the AST traversal, # so they can build initial state that is later used by callbacks # during the AST traversal.
def UNK on_lparen UNK on_comma processed_source on_rparen on_ignored_nl UNK on_period UNK do on_op cop on_op on_ignored_nl UNK unless cop on_period # There are cops that require their own custom processing **after** # the AST traversal. By performing the walk before invoking these # custom processors, we allow these cops to build their own # state during the primary AST traversal instead of performing their # own AST traversals. Minimizing the number of walks is more efficient. # # If they define the #investigate_post_walk method, all input parameters # passed to the commissioner will be passed to the cop too in order to do # its own processing.
def UNK on_lparen cop on_comma node on_op UNK on_rparen on_ignored_nl UNK on_nl UNK on_const on_op UNK on_nl UNK UNK UNK # Allow blind rescues here, since we're absorbing and packaging or # re-raising exceptions that can be raised from within the individual # cops' `#investigate` methods.
