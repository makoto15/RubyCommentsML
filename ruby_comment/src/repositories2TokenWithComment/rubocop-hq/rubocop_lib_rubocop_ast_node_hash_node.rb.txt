on_ignored_nl UNK UNK on_nl UNK UNK on_nl UNK UNK on_op UNK on_nl def pairs on_nl UNK on_period UNK on_nl end # frozen_string_literal: true
UNK UNK on_op UNK on_nl def pairs on_nl UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_period # A node extension for `hash` nodes. This will be used in place of a plain # node when the builder constructs the AST, making its methods available # to all `hash` nodes within RuboCop.
def pairs on_nl UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_period UNK on_nl end on_nl on_ignored_nl # Returns an array of all the key value pairs in the `hash` literal. # # @return [Array<PairNode>] an array of `pair` nodes
def UNK on_nl UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK UNK on_lparen on_symbeg UNK on_rparen on_period # Checks whether the `hash` node contains any `pair`- or `kwsplat` nodes. # # @return[Boolean] whether the `hash` is empty
def UNK on_nl UNK UNK on_lparen on_symbeg UNK on_rparen on_period UNK UNK UNK on_nl on_ignored_nl UNK on_lparen on_symbeg UNK on_rparen # Calls the given block for each `pair` node in the `hash` literal. # If no block is given, an `Enumerator` is returned. # # @return [self] if a block is given # @return [Enumerator] if no block is given
def UNK on_nl UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK pairs on_period map on_lparen on_op on_symbeg # Returns an array of all the keys in the `hash` literal. # # @return [Array<Node>] an array of keys in the `hash` literal
def UNK on_nl UNK pairs on_period map on_lparen on_op on_symbeg UNK on_rparen on_period UNK UNK UNK on_nl on_ignored_nl pairs on_period # Calls the given block for each `key` node in the `hash` literal. # If no block is given, an `Enumerator` is returned. # # @return [self] if a block is given # @return [Enumerator] if no block is given
def UNK on_nl UNK on_period map on_lparen on_op on_symbeg UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl UNK pairs # Returns an array of all the values in the `hash` literal. # # @return [Array<Node>] an array of values in the `hash` literal
def UNK on_nl UNK pairs on_period map on_lparen on_op on_symbeg UNK on_rparen on_period UNK UNK UNK on_nl on_ignored_nl pairs on_period # Calls the given block for each `value` node in the `hash` literal. # If no block is given, an `Enumerator` is returned. # # @return [self] if a block is given # @return [Enumerator] if no block is given
def UNK on_nl pairs on_period UNK on_lparen UNK on_rparen on_period UNK UNK on_op UNK UNK UNK on_op UNK on_period UNK # Checks whether any of the key value pairs in the `hash` literal are on # the same line. # # @note A multiline `pair` is considered to be on the same line if it # shares any of its lines with another `pair` # # @return [Boolean] whether any `pair` nodes are on the same line
def UNK on_nl pairs on_period map on_lparen on_op on_symbeg UNK on_rparen on_period UNK on_period UNK on_op UNK on_nl end on_nl # Checks whether this `hash` uses a mix of hash rocket and colon # delimiters for its pairs. # # @return [Boolean] whether the `hash` uses mixed delimiters
def UNK on_nl UNK on_period end on_op UNK on_lparen UNK UNK UNK on_rparen on_nl end on_nl end on_nl end on_nl # Checks whether the `hash` literal is delimited by curly braces. # # @return [Boolean] whether the `hash` literal is enclosed in braces
