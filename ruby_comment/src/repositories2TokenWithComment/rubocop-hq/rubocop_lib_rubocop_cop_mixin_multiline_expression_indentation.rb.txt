on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_const on_op UNK on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep # frozen_string_literal: true
UNK on_const on_const on_op UNK on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_tstring_end on_period UNK on_nl on_const on_op # Common functionality for checking multiline method calls and binary # operations.
on_const on_op UNK on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_tstring_end on_period UNK on_nl on_const on_op UNK on_tstring_content # rubocop:disable Metrics/ModuleLength
def UNK on_lparen lhs on_rparen on_ignored_nl lhs on_op lhs on_period UNK UNK lhs on_period UNK on_op UNK on_nl lhs on_nl # In a chain of method calls, we regard the top send node as the base # for indentation of all lines following the first. For example: # a. # b c { block }. <-- b is indented relative to a # d <-- d is indented relative to a
else on_ignored_nl UNK on_lparen send_node on_rparen on_nl end on_nl end on_nl on_ignored_nl def UNK on_lparen send_node on_rparen on_ignored_nl UNK on_op # not used for method calls
def UNK on_lparen node on_rparen on_ignored_nl UNK on_op UNK on_lparen node on_rparen on_nl if UNK on_op on_op UNK on_lparen UNK # The correct indentation of `node` is usually `IndentationWidth`, with # one exception: prefix keywords. # # ``` # while foo && # Here, `while` is called a "prefix keyword" # bar # This is called "special indentation" # baz # end # ``` # # Note that *postfix conditionals* do *not* get "special indentation". # # ``` # next if foo && # bar # normal indentation, not special # ```
UNK on_op on_ignored_nl UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen UNK on_tstring_beg on_tstring_content on_tstring_end UNK on_nl else on_ignored_nl UNK # This cop could have its own IndentationWidth configuration
UNK UNK if UNK on_period UNK on_nl on_ignored_nl UNK if UNK on_period UNK on_nl UNK UNK UNK on_op on_symbeg UNK # If the node is inside a block, it makes no difference if that block # is an argument in a method call. It doesn't count.
def UNK on_lparen candidate on_comma node on_rparen on_ignored_nl node on_period UNK on_op on_ignored_nl UNK on_lparen candidate on_comma node on_period UNK # The []= operator and setters (a.b = c) are parsed as :send nodes.
def UNK on_lparen node on_rparen on_ignored_nl node on_period UNK on_op node on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen # Returns true if `node` is a conditional whose `body` and `condition` # begin on the same line.
