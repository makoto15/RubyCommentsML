on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl on_ignored_nl on_const # frozen_string_literal: true
UNK on_const on_nl UNK on_const on_op on_const on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end # Helper module to provide common methods to classes needed for the # ConditionalAssignment Cop.
def UNK on_lparen branch on_rparen on_ignored_nl elsif_branches on_op UNK on_lparen branch on_rparen on_nl else_branch on_op elsif_branches on_period UNK on_op elsif_branches # `elsif` branches show up in the `node` as an `else`. We need # to recursively iterate over all `else` branches and consider all # but the last `node` an `elsif` branch and consider the last `node` # the actual `else` branch.
def UNK on_lparen when_branches on_rparen on_ignored_nl when_branches on_period UNK on_lbrace on_op branch on_op branch on_period children on_lbracket on_int on_rbracket on_rbrace # `when` nodes contain the entire branch including the condition. # We only need the contents of the branch, not the condition.
def lhs on_lparen node on_rparen on_ignored_nl UNK node on_period UNK on_nl UNK on_symbeg UNK on_nl UNK on_lparen node on_rparen on_nl # rubocop:disable Metrics/AbcSize
on_ignored_nl def UNK on_lparen cop on_comma source on_rparen on_ignored_nl UNK on_op cop on_period UNK on_period UNK on_lparen on_const on_rparen on_nl # rubocop:enable Metrics/AbcSize
class on_const on_op on_const on_nl include on_const on_nl include on_const on_nl include on_const on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end # Check for `if` and `case` statements where each branch is used for # assignment to the same variable when using the return of the # condition can be used instead. # # @example EnforcedStyle: assign_to_condition (default) # # bad # if foo # bar = 1 # else # bar = 2 # end # # case foo # when 'a' # bar += 1 # else # bar += 2 # end # # if foo # some_method # bar = 1 # else # some_other_method # bar = 2 # end # # # good # bar = if foo # 1 # else # 2 # end # # bar += case foo # when 'a' # 1 # else # 2 # end # # bar << if foo # some_method # 1 # else # some_other_method # 2 # end # # @example EnforcedStyle: assign_inside_condition # # bad # bar = if foo # 1 # else # 2 # end # # bar += case foo # when 'a' # 1 # else # 2 # end # # bar << if foo # some_method # 1 # else # some_other_method # 2 # end # # # good # if foo # bar = 1 # else # bar = 2 # end # # case foo # when 'a' # bar += 1 # else # bar += 2 # end # # if foo # some_method # bar = 1 # else # some_other_method # bar = 2 # end
UNK on_symbeg UNK on_comma UNK on_nl UNK on_tstring_content UNK on_tstring_content on_embexpr_beg on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_embexpr_end # The shovel operator `<<` does not have its own type. It is a `send` # type.
return if node on_period parent on_op UNK on_nl on_ignored_nl assignment on_comma on_op on_op assignment if assignment on_period UNK on_op assignment # ignore pseudo-assignments without rhs in for nodes
def UNK on_lparen node on_comma branches on_rparen on_ignored_nl return UNK unless UNK on_nl on_ignored_nl assignment on_op lhs on_lparen tail on_lparen # If `Layout/LineLength` is enabled, we do not want to introduce an # offense by auto-correcting this cop. Find the max configured line # length. Find the longest line of condition. Remove the assignment # from lines that contain the offending assignment because after # correcting, this will not be on the line anymore. Check if the length # of the longest line + the length of the corrected assignment is # greater than the max configured line length
UNK on_const on_nl def UNK on_lparen corrector on_comma branch on_comma condition on_comma column on_rparen on_ignored_nl branch on_period UNK do on_op # Helper module to provide common methods to ConditionalAssignment # correctors
class on_const on_nl class on_op UNK on_nl include on_const on_nl include on_const on_nl on_ignored_nl def correct on_lparen node on_rparen on_ignored_nl # Corrector to correct conditional assignment in ternary conditions.
class on_const on_nl class on_op UNK on_nl include on_const on_nl include on_const on_nl on_ignored_nl def correct on_lparen cop on_comma node # Corrector to correct conditional assignment in `if` statements.
class on_const on_nl class on_op UNK on_nl include on_const on_nl include on_const on_nl on_ignored_nl def correct on_lparen cop on_comma node # Corrector to correct conditional assignment in `case` statements.
