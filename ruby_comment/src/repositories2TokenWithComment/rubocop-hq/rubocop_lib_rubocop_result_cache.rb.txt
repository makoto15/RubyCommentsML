on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl # frozen_string_literal: true
UNK on_const on_nl on_const on_op UNK on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep # Provides functionality for caching rubocop runs.
def UNK on_period UNK on_lparen config_store on_comma UNK on_comma cache_root on_op UNK on_rparen on_ignored_nl return if UNK on_ignored_nl cache_root on_op # Remove old files so that the cache doesn't grow too big. When the # threshold MaxFilesInCache has been exceeded, the oldest 50% of all the # files in the cache are removed. The reason for removing so much is that # cleaning should be done relatively seldom, since there is a slight risk # that some other RuboCop process was just about to read the file, when # there's parallel execution and the cache is shared.
on_ignored_nl cache_root on_op cache_root on_lparen config_store on_rparen on_nl return UNK on_const on_period UNK on_lparen cache_root on_rparen on_nl on_ignored_nl files on_comma # OPTIMIZE: For faster testing
UNK on_op on_int on_op files on_period UNK on_op on_int on_nl UNK on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_content on_embexpr_beg cache_root on_embexpr_end # Add 1 to half the number of files, so that we remove the file if # there's only 1 left.
UNK UNK if UNK on_nl end on_nl on_ignored_nl def UNK on_lparen files on_comma dirs on_comma UNK on_rparen on_ignored_nl files on_lbracket # This can happen if parallel RuboCop invocations try to remove the # same files. No problem.
files on_lbracket on_int on_comma UNK on_rbracket on_period UNK on_lparen on_int on_rparen on_period UNK UNK on_op UNK on_op on_ignored_nl on_const on_period # Batch file deletions, deleting over 130,000+ files will crash # File.delete.
on_const on_period join on_lparen on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_comma on_const on_period UNK on_period UNK on_rparen on_nl UNK on_ignored_nl # Include user ID in the path to make sure the user has write # access.
return if UNK on_lparen dir on_rparen on_nl on_ignored_nl on_const on_period UNK on_lparen UNK on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma UNK on_const # RuboCop must be in control of where its cached data is stored. A # symbolic link anywhere in the cache directory tree can be an # indication that a symlink attack is being waged.
on_const on_period UNK on_lparen UNK on_comma on_ivar on_rparen on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl def UNK on_lparen path on_rparen # The preliminary path is used so that if there are multiple RuboCop # processes trying to save data for the same inspected file # simultaneously, the only problem we run in to is a competition who gets # to write to the final file. The contents are the same, so no corruption # of data should occur.
on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl UNK on_op UNK on_nl UNK UNK UNK on_comma UNK UNK on_nl end on_nl # Spurious files that come and go should not cause a crash, at least not # here.
def UNK on_nl on_const on_period UNK on_op on_ignored_nl UNK on_ignored_nl UNK on_op on_const on_period join on_lparen on_const on_period UNK on_lparen # The checksum of the rubocop program running the inspection.
UNK on_op UNK on_op on_const on_period UNK on_lparen UNK on_rparen on_period UNK on_nl UNK on_op UNK on_ignored_nl on_period UNK on_lbrace # These are all the files we have `require`d plus everything in the # exe directory. A change to any of them could affect the cop output # so we include them in the cache hash.
def UNK on_lparen options on_rparen on_ignored_nl options on_op options on_period UNK on_lbrace on_op UNK on_comma UNK on_op on_const on_period UNK # Return a hash of the options given at invocation, minus the ones that have # no effect on which offenses and disabled line ranges are found, and thus # don't affect caching.
def UNK on_lparen team on_rparen on_ignored_nl on_ivar on_op on_lbrace on_rbrace on_nl on_ivar on_lbracket team on_period UNK on_rbracket on_op team on_period # The external dependency checksums are cached per RuboCop team so that # the checksums don't need to be recomputed for each file.
def UNK on_lparen team on_comma options on_rparen on_ignored_nl on_const on_op on_const on_period UNK on_lparen on_lbracket on_ignored_nl UNK on_lparen team on_rparen # We combine team and options into a single "context" checksum to avoid # making file names that are too long for some filesystems to handle. # This context is for anything that's not (1) the RuboCop executable # checksum or (2) the inspected file checksum.
