on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl on_const on_op UNK on_tstring_content UNK # frozen_string_literal: true
UNK on_const on_op on_const on_nl on_const on_op UNK on_tstring_content UNK on_period UNK on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl # Use `Kernel#loop` for infinite loops. # # @example # # bad # while true # work # end # # # good # loop do # work # end
UNK if UNK on_period UNK UNK on_op var on_op on_ignored_nl UNK on_lparen var on_comma range on_rparen on_op on_ignored_nl on_op UNK # Not every `while true` and `until false` can be turned into a # `loop do` without further modification. The reason is that a # variable that's introduced inside a while/until loop is in scope # outside of that loop too, but a variable that's assigned for the # first time inside a block cannot be accessed after the block. In # those more complicated cases we don't report an offense.
