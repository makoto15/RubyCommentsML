on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const # frozen_string_literal: true
UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_op # This cop makes sure that Ruby source files have snake_case # names. Ruby scripts (i.e. source files with a shebang in the # first line) are ignored. # # The cop also ignores `.gemspec` files, because Bundler # recommends using dashes to separate namespaces in nested gems # (i.e. `bundler-console` becomes `Bundler::Console`). As such, the # gemspec is supposed to be named `bundler-console.gemspec`. # # @example # # bad # lib/layoutManager.rb # # anything/usingCamelCase # # # good # lib/layout_manager.rb # # anything/using_snake_case.rake
basename on_op basename on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl basename on_op on_lparen UNK on_op # special handling for Action Pack Variants file names like # some_file.xlsx+mobile.axlsx
def UNK on_lparen node on_comma namespace on_rparen on_ignored_nl return UNK UNK node on_nl on_ignored_nl name on_op namespace on_period UNK on_nl # rubocop:disable Metrics/CyclomaticComplexity
on_ignored_nl def UNK on_lparen node on_comma namespace on_comma expected on_rparen on_ignored_nl UNK on_op UNK on_lparen expected on_rparen on_nl on_ignored_nl UNK # rubocop:enable Metrics/CyclomaticComplexity
UNK on_op UNK on_tstring_content UNK on_tstring_content UNK on_tstring_content UNK on_tstring_content on_tstring_end on_nl UNK on_op UNK on_nl on_ignored_nl UNK on_period UNK # To convert a pathname to a Ruby namespace, we need a starting point # But RC can be run from any working directory, and can check any path # We can't assume that the working directory, or any other, is the # "starting point" to build a namespace.
UNK on_period UNK on_period UNK do on_op UNK on_comma UNK on_op on_ignored_nl if UNK on_period UNK on_lparen UNK on_rparen on_nl # To find the closest namespace root take the path components, and # then work through them backwards until we find a candidate. This # makes sure we work from the actual root in the case of a path like # /home/user/src/project_name/lib.
