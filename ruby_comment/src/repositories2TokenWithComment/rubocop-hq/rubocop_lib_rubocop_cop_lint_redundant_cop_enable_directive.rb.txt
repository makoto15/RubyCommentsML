on_ignored_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl UNK # frozen_string_literal: true
on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl UNK on_const # The Lint/RedundantCopEnableDirective and Lint/RedundantCopDisableDirective # cops need to be disabled so as to be able to provide a (bad) example of an # unneeded enable.
UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl UNK on_const on_nl # rubocop:disable Lint/RedundantCopEnableDirective # rubocop:disable Lint/RedundantCopDisableDirective
UNK on_const on_op on_const on_nl UNK on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op UNK UNK UNK on_nl on_ignored_nl def # This cop detects instances of rubocop:enable comments that can be # removed. # # When comment enables all cops at once `rubocop:enable all` # that cop checks whether any cop was actually enabled. # @example # # bad # foo = 1 # # rubocop:enable Layout/LineLength # # # good # foo = 1 # @example # # bad # # rubocop:disable Style/StringLiterals # foo = "1" # # rubocop:enable Style/StringLiterals # baz # # rubocop:enable all # # # good # # rubocop:disable Style/StringLiterals # foo = "1" # # rubocop:enable all # baz
