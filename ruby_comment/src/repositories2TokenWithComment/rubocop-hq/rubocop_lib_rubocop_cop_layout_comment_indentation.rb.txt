on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl on_const # frozen_string_literal: true
UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op UNK on_tstring_content UNK UNK on_tstring_content UNK on_nl on_ignored_nl def # This cop checks the indentation of comments. # # @example # # bad # # comment here # def method_name # end # # # comment here # a = 'hello' # # # yet another comment # if true # true # end # # # good # # comment here # def method_name # end # # # comment here # a = 'hello' # # # yet another comment # if true # true # end #
def UNK on_lparen comment on_rparen on_ignored_nl UNK on_op processed_source on_period UNK on_nl UNK on_op UNK on_period UNK on_lparen comment on_rparen # Corrects all comment lines that occur immediately before the given # comment and have the same indentation. This is to avoid a long chain # of correcting, saving the file, parsing and inspecting again, and # then correcting one more line, and so on.
correct_comment_indentation on_op UNK on_nl UNK UNK column on_op correct_comment_indentation on_nl end on_nl on_ignored_nl UNK on_lparen on_ignored_nl comment on_comma on_ignored_nl UNK # Try the other
UNK UNK column on_op correct_comment_indentation on_nl end on_nl on_ignored_nl UNK on_lparen on_ignored_nl comment on_comma on_ignored_nl UNK UNK on_lparen column on_comma # We keep @column_delta unchanged so that autocorrect changes to # the preferred style of aligning the comment with the keyword.
