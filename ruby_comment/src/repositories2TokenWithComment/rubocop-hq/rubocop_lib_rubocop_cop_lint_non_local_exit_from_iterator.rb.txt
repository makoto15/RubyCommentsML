on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl on_const on_op UNK UNK UNK # frozen_string_literal: true
UNK on_const on_op on_const on_nl on_const on_op UNK UNK UNK UNK UNK UNK UNK UNK UNK on_nl on_ignored_nl UNK UNK # This cop checks for non-local exits from iterators without a return # value. It registers an offense under these conditions: # # - No value is returned, # - the block is preceded by a method chain, # - the block has arguments, # - the method which receives the block is not `define_method` # or `define_singleton_method`, # - the return is not contained in an inner scope, e.g. a lambda or a # method definition. # # @example # # class ItemApi # rescue_from ValidationError do |e| # non-iteration block with arg # return { message: 'validation error' } unless e.errors # allowed # error_array = e.errors.map do |error| # block with method chain # return if error.suppress? # warned # return "#{error.param}: invalid" unless error.message # allowed # "#{error.param}: #{error.message}" # end # { message: 'validation error', errors: error_array } # end # # def update_items # transaction do # block without arguments # return unless update_necessary? # allowed # find_each do |item| # block without method chain # return if item.stock == 0 # false-negative... # item.update!(foobar: true) # end # end # end # end #
UNK UNK UNK on_lparen node on_period UNK on_rparen on_nl on_ignored_nl UNK UNK node on_period UNK on_nl on_ignored_nl UNK UNK on_lparen # if a proc is passed to `Module#define_method` or # `Object#define_singleton_method`, `return` will not cause a # non-local exit error
