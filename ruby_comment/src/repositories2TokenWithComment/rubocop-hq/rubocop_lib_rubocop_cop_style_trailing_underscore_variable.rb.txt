on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl UNK on_const # frozen_string_literal: true
UNK on_const on_op on_const on_nl UNK on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op UNK on_tstring_content on_tstring_end UNK on_tstring_content on_tstring_end # This cop checks for extra underscores in variable assignment. # # @example # # bad # a, b, _ = foo() # a, b, _, = foo() # a, _, _ = foo() # a, _, _, = foo() # # # good # a, b, = foo() # a, = foo() # *a, b, _ = foo() # # => We need to know to not include 2 variables in a # a, *b, _ = foo() # # => The correction `a, *b, = foo()` is a syntax error # # @example AllowNamedUnderscoreVariables: true (default) # # good # a, b, _something = foo() # # @example AllowNamedUnderscoreVariables: false # # bad # a, b, _something = foo() #
UNK on_op UNK on_lparen variables on_comma first_offense on_rparen on_nl on_ignored_nl variables UNK UNK on_op UNK UNK on_period UNK on_lparen on_op # Account for cases like `_, *rest, _`, where we would otherwise get # the index of the first underscore.
