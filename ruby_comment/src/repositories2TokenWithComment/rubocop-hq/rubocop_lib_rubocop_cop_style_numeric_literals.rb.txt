on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl UNK on_const # frozen_string_literal: true
UNK on_const on_op on_const on_nl UNK on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_tstring_beg on_tstring_content on_tstring_end # This cop checks for big numeric literals without _ between groups # of digits in them. # # @example # # # bad # 1000000 # 1_00_000 # 1_0000 # # # good # 1_000_000 # 1000 # # @example Strict: false (default) # # # good # 10_000_00 # typical representation of $10,000 in cents # # @example Strict: true # # # bad # 10_000_00 # typical representation of $10,000 in cents #
UNK on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_op on_regexp_beg on_tstring_content # The parameter is called MinDigits (meaning the minimum number of # digits for which an offense can be registered), but essentially it's # a Max parameter (the maximum number of something that's allowed).
UNK UNK UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl UNK UNK UNK on_period UNK on_op UNK on_nl on_ignored_nl # TODO: handle non-decimal literals as well
def UNK on_lparen int_part on_rparen on_ignored_nl int_part on_op on_const on_lparen int_part on_rparen on_nl formatted_int on_op int_part on_ignored_nl on_period UNK on_ignored_nl # @param int_part [String]
