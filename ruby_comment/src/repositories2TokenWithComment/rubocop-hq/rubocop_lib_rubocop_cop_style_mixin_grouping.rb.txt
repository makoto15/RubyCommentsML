on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl on_const # frozen_string_literal: true
UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op UNK on_tstring_content UNK on_tstring_content UNK on_tstring_content on_tstring_end on_period UNK # This cop checks for grouping of mixins in `class` and `module` bodies. # By default it enforces mixins to be placed in separate declarations, # but it can be configured to enforce grouping them in one declaration. # # @example EnforcedStyle: separated (default) # # bad # class Foo # include Bar, Qox # end # # # good # class Foo # include Qox # include Bar # end # # @example EnforcedStyle: grouped # # bad # class Foo # extend Bar # extend Qox # end # # # good # class Foo # extend Qox, Bar # end
UNK UNK on_tstring_content UNK on_period UNK on_lparen UNK on_period UNK on_rparen on_nl range on_op range on_period UNK on_lparen UNK on_rparen # if separated from previous mixin with only whitespace?
end on_nl range on_nl end on_nl on_ignored_nl def UNK on_lparen send_node on_rparen on_ignored_nl if UNK on_nl UNK on_lparen send_node on_rparen # then remove that too
