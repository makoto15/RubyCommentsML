on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end # frozen_string_literal: true
UNK on_const on_op on_const on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op # This cop checks for every useless assignment to local variable in every # scope. # The basic idea for this cop was from the warning of `ruby -cw`: # # assigned but unused variable - foo # # Currently this cop has advanced logic that detects unreferenced # reassignments and properly handles varied cases such as branch, loop, # rescue, ensure, etc. # # @example # # # bad # # def some_method # some_var = 1 # do_something # end # # @example # # # good # # def some_method # some_var = 1 # do_something(some_var) # end
def UNK on_lparen scope on_rparen on_ignored_nl UNK on_op scope on_period UNK on_nl on_ignored_nl if UNK on_period UNK on_nl UNK on_period # TODO: More precise handling (rescue, ensure, nested begin, etc.)
