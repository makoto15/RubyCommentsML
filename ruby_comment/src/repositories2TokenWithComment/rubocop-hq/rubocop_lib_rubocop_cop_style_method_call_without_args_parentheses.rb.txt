on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl on_const # frozen_string_literal: true
UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op UNK UNK UNK UNK UNK UNK on_nl on_ignored_nl def # This cop checks for unwanted parentheses in parameterless method calls. # # @example # # bad # object.some_method() # # # good # object.some_method
if asgn_node on_period UNK on_nl asgn_node UNK UNK on_op on_op asgn_node on_nl UNK if asgn_node on_period UNK on_nl end on_nl # `obj.method = value` parses as (send ... :method= ...), and will # not be returned as an `asgn_node` here, however, # `obj.method ||= value` parses as (or-asgn (send ...) ...) # which IS an `asgn_node`. Similarly, `obj.method += value` parses # as (op-asgn (send ...) ...), which is also an `asgn_node`.
