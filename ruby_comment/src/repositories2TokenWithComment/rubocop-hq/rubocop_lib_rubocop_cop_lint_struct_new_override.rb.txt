on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl on_const on_op UNK on_tstring_content UNK # frozen_string_literal: true
UNK on_const on_op on_const on_nl on_const on_op UNK on_tstring_content UNK UNK on_tstring_content UNK on_nl on_ignored_nl on_const on_op on_const on_period UNK # This cop checks unexpected overrides of the `Struct` built-in methods # via `Struct.new`. # # @example # # bad # Bad = Struct.new(:members, :clone, :count) # b = Bad.new([], true, 1) # b.members #=> [] (overriding `Struct#members`) # b.clone #=> true (overriding `Object#clone`) # b.count #=> 1 (overriding `Enumerable#count`) # # # good # Good = Struct.new(:id, :name) # g = Good.new(1, "foo") # g.members #=> [:id, :name] # g.clone #=> #<struct Good id=1, name="foo"> # g.count #=> 2 #
UNK UNK UNK on_period UNK on_op UNK on_period UNK on_nl on_ignored_nl UNK UNK on_const on_period UNK on_lparen UNK on_period UNK # Ignore if the first argument is a class name
UNK UNK on_const on_period UNK on_lparen UNK on_period UNK on_rparen on_nl on_ignored_nl UNK on_op UNK on_period UNK on_nl on_ignored_nl UNK # Ignore if the argument is not a member name
