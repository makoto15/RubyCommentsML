on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl UNK on_const # frozen_string_literal: true
UNK on_const on_op on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end # Use `next` to skip iteration instead of a condition at the end. # # @example EnforcedStyle: skip_modifier_ifs (default) # # bad # [1, 2].each do |a| # if a == 1 # puts a # end # end # # # good # [1, 2].each do |a| # next unless a == 1 # puts a # end # # # good # [1, 2].each do |a| # puts a if a == 1 # end # # @example EnforcedStyle: always # # With `always` all conditions at the end of an iteration needs to be # # replaced by next - with `skip_modifier_ifs` the modifier if like # # this one are ignored: `[1, 2].each { |a| puts a if a == 1 }` # # # bad # [1, 2].each do |a| # puts a if a == 1 # end # # # bad # [1, 2].each do |a| # if a == 1 # puts a # end # end # # # good # [1, 2].each do |a| # next unless a == 1 # puts a # end
UNK on_op on_const on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen node on_rparen on_ignored_nl return UNK # When correcting nested offenses, we need to keep track of how much # we have adjusted the indentation of each line
UNK on_ignored_nl UNK on_period source_range on_period end_pos on_nl end on_nl on_ignored_nl UNK on_lparen node on_period source_range on_period UNK on_comma end_pos # after "then"
lines on_op on_lparen node on_period source_range on_period UNK on_op UNK on_rparen on_op node on_period loc on_period end on_period UNK on_nl # end_range starts with the final newline of the if body
lines on_period UNK UNK on_op lineno on_op buffer on_period UNK on_lparen lineno on_rparen on_op UNK on_tstring_content UNK UNK on_nl end # Skip blank lines
def UNK on_lparen lines on_comma node on_comma corrector on_rparen on_ignored_nl UNK on_op node on_period source_range on_nl buffer on_op UNK on_period # Adjust indentation of `lines` to match `node`
