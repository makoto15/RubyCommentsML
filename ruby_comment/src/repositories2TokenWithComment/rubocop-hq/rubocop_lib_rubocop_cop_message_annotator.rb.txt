on_ignored_nl UNK UNK on_nl UNK UNK on_nl UNK UNK on_nl UNK on_symbeg options on_comma on_symbeg config on_comma on_symbeg UNK on_comma # frozen_string_literal: true
UNK UNK on_nl UNK on_symbeg options on_comma on_symbeg config on_comma on_symbeg UNK on_comma on_symbeg cop_config on_nl on_ignored_nl UNK on_op UNK # Message Annotator class annotates a basic offense message # based on params passed into initializer. # # @see #initialize # # @example # RuboCop::Cop::MessageAnnotator.new( # config, cop_name, cop_config, @options # ).annotate('message') # #=> 'Cop/CopName: message (http://example.org/styleguide)'
def UNK on_lparen config on_comma UNK on_comma cop_config on_comma options on_rparen on_ignored_nl UNK on_op config on_nl UNK on_op UNK on_nl # @param config [RuboCop::Config] Check configs for all cops # @note Message Annotator specifically checks the # following config options for_all_cops # :StyleGuideBaseURL [String] URL for styleguide # :DisplayStyleGuide [Boolean] Include styleguide and reference URLs # :ExtraDetails [Boolean] Include cop details # :DisplayCopNames [Boolean] Include cop name # # @param [String] cop_name for specific cop name # @param [Hash] cop_config configs for specific cop, from config#for_cop # @option cop_config [String] :StyleGuide Extension of base styleguide URL # @option cop_config [String] :Reference Full reference URL # @option cop_config [String] :Details # # @param [Hash, nil] options optional # @option options [Boolean] :display_style_guide # Include style guide and reference URLs # @option options [Boolean] :extra_details # Include cop specific details # @option options [Boolean] :debug # Include debug output # @option options [Boolean] :display_cop_names # Include cop name
def UNK on_lparen message on_rparen on_ignored_nl message on_op on_tstring_beg UNK UNK UNK on_tstring_content UNK message UNK on_tstring_end if UNK on_nl # Returns the annotated message, # based on params passed into initializer # # @return [String] annotated message
