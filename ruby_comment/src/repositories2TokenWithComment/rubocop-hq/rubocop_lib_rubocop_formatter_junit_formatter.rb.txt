on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK UNK # frozen_string_literal: true
UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK UNK on_lparen UNK on_comma UNK on_op UNK UNK # # This code is based on https://github.com/mikian/rubocop-junit-formatter. # # Copyright (c) 2015 Mikko Kokkonen # # MIT License # # https://github.com/mikian/rubocop-junit-formatter/blob/master/LICENSE.txt #
UNK on_const on_op on_const on_nl UNK UNK on_lparen UNK on_comma UNK on_op UNK UNK on_rparen on_ignored_nl UNK on_nl on_ignored_nl UNK # This formatter formats the report data in JUnit format.
on_const on_op on_const on_period UNK on_period UNK do on_op UNK on_op on_ignored_nl on_const on_op on_const on_period new on_lparen on_tstring_beg on_tstring_content # TODO: Returns all cops with the same behavior as # the original rubocop-junit-formatter. # https://github.com/mikian/rubocop-junit-formatter/blob/v0.1.4/lib/rubocop/formatter/junit_formatter.rb#L9 # # In the future, it would be preferable to return only enabled cops.
UNK on_period UNK do on_op UNK on_op on_ignored_nl on_const on_op on_const on_period new on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma testcase on_rparen # One failure per offense. Zero failures is a passing test case, # for most surefire/nUnit parsers.
