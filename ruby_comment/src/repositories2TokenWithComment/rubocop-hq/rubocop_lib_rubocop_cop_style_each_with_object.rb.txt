on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl on_const # frozen_string_literal: true
UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op UNK UNK UNK on_nl on_const on_op UNK UNK UNK # This cop looks for inject / reduce calls where the passed in object is # returned at the end and so could be replaced by each_with_object without # the need to return the object at the end. # # However, we can't replace with each_with_object if the accumulator # parameter is assigned to within the block. # # @example # # bad # [1, 2].inject({}) { |a, e| a[e] = e; a } # # # good # [1, 2].each_with_object({}) { |e, a| a[e] = e }
def UNK on_lparen node on_rparen on_ignored_nl UNK UNK on_op corrector on_op on_ignored_nl corrector on_period UNK on_lparen node on_period UNK on_period # rubocop:disable Metrics/AbcSize
on_ignored_nl UNK on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_nl end on_nl on_ignored_nl def UNK on_lparen # rubocop:enable Metrics/AbcSize
def UNK on_lparen body on_comma args on_rparen on_ignored_nl first_arg on_comma on_op on_op args on_nl UNK on_comma on_op on_op first_arg on_nl # if the accumulator parameter is assigned to in the block, # then we can't convert to each_with_object
