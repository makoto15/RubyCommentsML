on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl UNK on_const # frozen_string_literal: true
UNK on_const on_op on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op UNK on_tstring_content UNK # Checks that operators have space around them, except for ** which # should or shouldn't have surrounding space depending on configuration. # # This cop has `AllowForAlignment` option. When `true`, allows most # uses of extra spacing if the intent is to align with an operator on # the previous or next line, not counting empty lines or comment lines. # # @example # # bad # total = 3*4 # "apple"+"juice" # my_number = 38/4 # # # good # total = 3 * 4 # "apple" + "juice" # my_number = 38 / 4 # # @example AllowForAlignment: true (default) # # good # { # 1 => 2, # 11 => 3 # } # # @example AllowForAlignment: false # # bad # { # 1 => 2, # 11 => 3 # } # # @example EnforcedStyleForExponentOperator: no_space (default) # # bad # a ** b # # # good # a**b # # @example EnforcedStyleForExponentOperator: space # # bad # a**b # # # good # a ** b
if UNK on_nl corrector on_period UNK on_lparen range on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen unless operator on_period UNK on_lparen on_tstring_beg on_tstring_content # If `ForceEqualSignAlignment` is true, `Layout/ExtraSpacing` cop # inserts spaces before operator. If `Layout/SpaceAroundOperators` cop # inserts a space, it collides and raises the infinite loop error.
