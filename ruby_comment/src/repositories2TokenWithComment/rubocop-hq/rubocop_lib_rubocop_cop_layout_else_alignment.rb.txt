on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl UNK on_const # frozen_string_literal: true
UNK on_const on_op on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op UNK UNK UNK # This cop checks the alignment of else keywords. Normally they should # be aligned with an if/unless/while/until/begin/def keyword, but there # are special cases when they should follow the same rules as the # alignment of end. # # @example # # bad # if something # code # else # code # end # # # bad # if something # code # elsif something # code # end # # # good # if something # code # else # code # end
else on_ignored_nl node on_period loc on_period UNK on_nl end on_nl end on_nl on_ignored_nl def UNK on_lparen node on_comma rhs on_rparen # For example "private def ..."
rhs on_op UNK on_lparen rhs on_rparen on_nl return unless rhs on_nl on_ignored_nl UNK on_op UNK on_period UNK on_lparen UNK UNK # If there are method calls chained to the right hand side of the # assignment, we let rhs be the receiver of those method calls before # we check its indentation.
