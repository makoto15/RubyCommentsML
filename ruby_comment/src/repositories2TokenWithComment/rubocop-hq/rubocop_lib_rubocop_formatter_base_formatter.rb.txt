on_ignored_nl UNK UNK on_nl UNK UNK on_nl UNK UNK on_nl UNK UNK UNK on_nl on_ignored_nl UNK UNK UNK on_nl on_ignored_nl # frozen_string_literal: true
UNK UNK on_nl UNK UNK UNK on_nl on_ignored_nl UNK UNK UNK on_nl on_ignored_nl UNK UNK UNK UNK UNK UNK UNK # Abstract base class for formatter, implements all public API methods. # # ## Creating Custom Formatter # # You can create a custom formatter by subclassing # `RuboCop::Formatter::BaseFormatter` and overriding some methods # or by implementing all the methods by duck typing. # # ## Using Custom Formatter in Command Line # # You can tell RuboCop to use your custom formatter with a combination of # `--format` and `--require` option. # For example, when you have defined `MyCustomFormatter` in # `./path/to/my_custom_formatter.rb`, you would type this command: # # rubocop --require ./path/to/my_custom_formatter --format MyCustomFormatter # # Note: The path passed to `--require` is directly passed to # `Kernel.require`. # If your custom formatter file is not in `$LOAD_PATH`, # you need to specify the path as relative path prefixed with `./` # explicitly or absolute path. # # ## Method Invocation Order # # For example, when RuboCop inspects 2 files, # the invocation order should be like this: # # * `#initialize` # * `#started` # * `#file_started` # * `#file_finished` # * `#file_started` # * `#file_finished` # * `#finished` #
UNK UNK UNK on_nl on_ignored_nl UNK UNK UNK on_nl on_ignored_nl UNK UNK UNK UNK UNK UNK UNK UNK UNK UNK # @api public # # @!attribute [r] output # # @return [IO] # the IO object passed to `#initialize` # # @see #initialize
UNK UNK UNK on_nl on_ignored_nl UNK UNK UNK UNK UNK UNK UNK UNK UNK UNK on_ignored_nl UNK UNK UNK on_nl # @api public # # @!attribute [r] options # # @return [Hash]
UNK UNK UNK UNK UNK UNK UNK UNK UNK UNK on_ignored_nl UNK UNK UNK on_nl UNK UNK UNK on_nl end # @api public # # @param output [IO] # `$stdout` or opened file
UNK UNK UNK UNK UNK UNK end on_nl on_ignored_nl UNK UNK UNK UNK UNK UNK UNK UNK end on_nl on_ignored_nl # @api public # # Invoked once before any files are inspected. # # @param target_files [Array(String)] # all target file paths to be inspected # # @return [void]
UNK UNK UNK UNK UNK UNK UNK UNK end on_nl on_ignored_nl UNK UNK UNK UNK UNK UNK UNK UNK end # @api public # # Invoked at the beginning of inspecting each files. # # @param file [String] # the file path # # @param options [Hash] # file specific information, currently this is always empty. # # @return [void]
UNK UNK UNK UNK UNK UNK UNK UNK end on_nl on_ignored_nl UNK UNK UNK UNK UNK UNK end on_nl end # @api public # # Invoked at the end of inspecting each files. # # @param file [String] # the file path # # @param offenses [Array(RuboCop::Cop::Offense)] # all detected offenses for the file # # @return [void] # # @see RuboCop::Cop::Offense
UNK UNK UNK UNK UNK UNK end on_nl end on_nl end on_nl end on_nl EMP EMP EMP EMP EMP EMP # @api public # # Invoked after all files are inspected or interrupted by user. # # @param inspected_files [Array(String)] # the inspected file paths. # This would be same as `target_files` passed to `#started` # unless RuboCop is interrupted by user. # # @return [void]
