on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end # frozen_string_literal: true
UNK on_const on_op on_const on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_tstring_beg # This cop checks for implicit string concatenation of string literals # which are on the same line. # # @example # # # bad # # array = ['Item 1' 'Item 2'] # # @example # # # good # # array = ['Item 1Item 2'] # array = ['Item 1' + 'Item 2'] # array = [ # 'Item 1' \ # 'Item 2' # ]
UNK UNK UNK on_lparen child_node1 on_comma child_node2 on_rparen on_nl UNK UNK child_node1 on_period UNK on_op child_node2 on_period UNK on_nl on_ignored_nl # `'abc' 'def'` -> (dstr (str "abc") (str "def"))
UNK UNK child_node1 on_period UNK UNK on_op UNK UNK on_op UNK on_lparen child_node1 on_rparen on_nl on_ignored_nl UNK child_node1 on_comma child_node2 # Make sure we don't flag a string literal which simply has # embedded newlines # `"abc\ndef"` also -> (dstr (str "abc") (str "def"))
UNK UNK on_period UNK UNK UNK UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_tstring_beg on_tstring_content on_tstring_end on_nl UNK UNK on_period UNK # implicit string concatenation does not work with %{}, etc.
