on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const UNK on_const on_nl on_const UNK UNK UNK UNK # frozen_string_literal: true
UNK on_const UNK on_const on_nl on_const UNK UNK UNK UNK on_nl on_ignored_nl UNK UNK on_lparen node on_rparen on_ignored_nl UNK on_lparen # This cop checks constructors for disjunctive assignments that should # be plain assignments. # # So far, this cop is only concerned with disjunctive assignment of # instance variables. # # In ruby, an instance variable is nil until a value is assigned, so the # disjunction is unnecessary. A plain assignment has the same effect. # # @example # # bad # def initialize # @x ||= 1 # end # # # good # def initialize # @x = 1 # end
UNK UNK on_lparen node on_rparen on_ignored_nl UNK UNK node on_period UNK on_lparen UNK UNK on_rparen on_nl on_ignored_nl UNK on_lparen node # @param [DefNode] node a constructor definition
UNK UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK UNK UNK UNK UNK on_ignored_nl UNK UNK on_period UNK on_nl UNK # @param [Array] lines the logical lines of the constructor
UNK on_nl end on_nl end on_nl end on_nl on_ignored_nl UNK UNK on_lparen node on_rparen on_ignored_nl UNK UNK node on_period UNK # Once we encounter something other than a disjunctive # assignment, we cease our investigation, because we can't be # certain that any future disjunctive assignments are offensive. # You're off the case, detective!
UNK UNK on_lparen node on_rparen on_ignored_nl UNK UNK node on_period UNK on_period UNK on_nl UNK on_lparen node UNK UNK UNK # Add an offense if the LHS of the given disjunctive assignment is # an instance variable. # # For now, we only care about assignments to instance variables. # # @param [Node] node a disjunctive assignment
