on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl on_const on_op UNK on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content # frozen_string_literal: true
UNK on_const on_nl on_const on_op UNK on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep # Common predicates for nodes that reference method identifiers: # `send`, `csend`, `def`, `defs`, `super`, `zsuper` # # @note this mixin expects `#method_name` and `#receiver` to be implemented
on_const on_op UNK on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content # http://phrogz.net/programmingruby/language.html#table_18.4
def UNK on_lparen UNK on_rparen on_ignored_nl method_name on_op UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_const on_period # Checks whether the method name matches the argument. # # @param [Symbol, String] name the method name to check for # @return [Boolean] whether the method name matches the argument
def UNK on_nl on_const on_period UNK on_lparen method_name on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl on_const on_op on_const on_period # Checks whether the method is an operator method. # # @return [Boolean] whether the method is an operator
def UNK on_nl on_const on_op on_const on_period UNK on_lparen method_name on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl on_op UNK # Checks whether the method is a comparison method. # # @return [Boolean] whether the method is a comparison
def UNK on_nl on_op UNK on_op method_name on_period UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl # Checks whether the method is an assignment method. # # @return [Boolean] whether the method is an assignment
def UNK on_nl on_const on_period UNK on_lparen method_name on_rparen on_op on_ignored_nl method_name on_period UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end # Checks whether the method is an enumerator method. # # @return [Boolean] whether the method is an enumerator
def UNK on_nl method_name on_period UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl # Checks whether the method is a predicate method. # # @return [Boolean] whether the method is a predicate method
def UNK on_nl method_name on_period UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl # Checks whether the method is a bang method. # # @return [Boolean] whether the method is a bang method
def UNK on_nl method_name on_period UNK on_op UNK on_tstring_content UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op UNK # Checks whether the method is a camel case method, # e.g. `Integer()`. # # @return [Boolean] whether the method is a camel case method
def UNK on_nl UNK on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op UNK on_nl end on_nl on_ignored_nl # Checks whether the *explicit* receiver of this node is `self`. # # @return [Boolean] whether the receiver of this node is `self`
def UNK on_nl UNK on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op method_name on_op UNK on_op on_nl # Checks whether the *explicit* receiver of node is a `const` node. # # @return [Boolean] whether the receiver of this node is a `const` node
def UNK on_nl UNK on_op method_name on_op UNK on_op on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op UNK on_period # Checks whether this is a negation method, i.e. `!` or keyword `not`. # # @return [Boolean] whether this method is a negation method
def UNK on_nl UNK on_op UNK on_period UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl def # Checks whether this is a prefix not method, e.g. `not foo`. # # @return [Boolean] whether this method is a prefix not
def UNK on_nl UNK on_op UNK on_period UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl end on_nl # Checks whether this is a prefix bang method, e.g. `!foo`. # # @return [Boolean] whether this method is a prefix bang
