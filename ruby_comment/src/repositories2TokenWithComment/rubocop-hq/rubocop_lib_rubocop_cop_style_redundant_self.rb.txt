on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl on_const on_op UNK on_tstring_content UNK # frozen_string_literal: true
UNK on_const on_op on_const on_nl on_const on_op UNK on_tstring_content UNK on_nl on_const on_op on_const on_period UNK on_lparen UNK on_rparen on_nl # This cop checks for redundant uses of `self`. # # The usage of `self` is only needed when: # # * Sending a message to same object with zero arguments in # presence of a method name clash with an argument or a local # variable. # # * Calling an attribute writer to prevent an local variable assignment. # # Note, with using explicit self you can only send messages with public or # protected scope, you cannot send private messages this way. # # Note we allow uses of `self` with operators because it would be awkward # otherwise. # # @example # # # bad # def foo(bar) # self.baz # end # # # good # def foo(bar) # self.bar # Resolves name clash with the argument. # end # # def foo # bar = 1 # self.bar # Resolves name clash with the local variable. # end # # def foo # %w[x y z].select do |bar| # self.bar == bar # Resolves name clash with argument of the block. # end # end
on_ignored_nl def UNK on_lparen node on_rparen on_ignored_nl lhs on_comma UNK on_op on_op node on_nl UNK on_lparen lhs on_rparen on_nl end # Assignment of self.x
on_ignored_nl def UNK on_lparen node on_rparen on_ignored_nl UNK on_lparen node on_rparen on_nl end on_nl UNK UNK UNK on_nl on_ignored_nl def # Using self.x to distinguish from local variable x
