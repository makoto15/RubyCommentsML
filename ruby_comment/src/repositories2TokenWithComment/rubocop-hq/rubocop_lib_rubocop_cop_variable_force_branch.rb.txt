on_ignored_nl module on_const on_nl module on_const on_nl class on_const on_nl module on_const on_nl def self on_period UNK on_lparen target_node on_comma # frozen_string_literal: true
module on_const on_nl def self on_period UNK on_lparen target_node on_comma on_label UNK on_rparen on_ignored_nl on_lparen UNK target_node UNK on_op target_node # Namespace for branch classes for each control structure.
on_ignored_nl on_const on_op on_const on_period UNK on_lparen on_symbeg child_node on_comma on_symbeg UNK on_rparen UNK on_ignored_nl on_ignored_nl def self on_period UNK # rubocop:disable Metrics/BlockLength
on_const on_op on_const on_period UNK on_lparen on_symbeg child_node on_comma on_symbeg UNK on_rparen UNK on_ignored_nl on_ignored_nl def self on_period UNK on_nl # Abstract base class for branch classes. # A branch represents a conditional branch in a scope. # # @example # def some_scope # do_something # no branch # # if foo # do_something # branch A # do_something # branch A # else # do_something # branch B # if bar # do_something # branch C (whose parent is branch B) # end # end # # do_something # no branch # end
on_ignored_nl def self on_period UNK on_nl UNK on_op UNK UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen UNK # rubocop:enable Metrics/BlockLength
if target_node on_period UNK on_lparen on_const on_rparen on_nl target_node on_period UNK UNK on_op node on_op node on_period equal? on_lparen child_node # We don't use Kernel#Array here # because it invokes Node#to_a rather than wrapping with an array.
module on_const on_nl def conditional_clause? on_nl UNK on_const on_nl end on_nl on_ignored_nl def always_run? on_nl conditional_clause? on_nl end on_nl end # Mix-in module for simple conditional control structures.
class on_const on_op on_const on_nl include on_const on_nl on_ignored_nl define_predicate on_symbeg conditional_clause? on_comma on_label on_int on_nl define_predicate on_symbeg UNK on_comma # if conditional_clause # truthy_body # else # falsey_body # end # # unless conditional_clause # falsey_body # else # truthy_body # end
class on_const on_op on_const on_nl include on_const on_nl on_ignored_nl define_predicate on_symbeg conditional_clause? on_comma on_label on_int on_nl define_predicate on_symbeg UNK on_comma # while conditional_clause # loop_body # end
class on_const on_op on_const on_nl include on_const on_nl on_ignored_nl define_predicate on_symbeg conditional_clause? on_comma on_label on_int on_nl define_predicate on_symbeg UNK on_comma # until conditional_clause # loop_body # end
class on_const on_op on_const on_nl include on_const on_nl on_ignored_nl define_predicate on_symbeg conditional_clause? on_comma on_label on_int on_nl define_predicate on_symbeg UNK on_comma # begin # loop_body # end while conditional_clause
class on_const on_op on_const on_nl include on_const on_nl on_ignored_nl define_predicate on_symbeg conditional_clause? on_comma on_label on_int on_nl define_predicate on_symbeg UNK on_comma # begin # loop_body # end until conditional_clause
class on_const on_op on_const on_nl define_predicate on_symbeg UNK on_comma on_label on_int on_nl define_predicate on_symbeg UNK on_comma on_label on_int on_op on_op # case target # when /pattern/ # when_clause # else # else_body # end
class on_const on_op on_const on_nl define_predicate on_symbeg UNK on_comma on_label on_int on_nl define_predicate on_symbeg UNK on_comma on_label on_int on_nl define_predicate # for element in collection # loop_body # end
module on_const on_nl def always_run? on_nl UNK on_nl end on_nl end on_nl on_ignored_nl class on_const on_op on_const on_nl include on_const # Mix-in module for logical operator control structures.
class on_const on_op on_const on_nl include on_const on_nl on_ignored_nl define_predicate on_symbeg UNK on_comma on_label on_int on_nl define_predicate on_symbeg UNK on_comma # left_body && right_body
class on_const on_op on_const on_nl include on_const on_nl on_ignored_nl define_predicate on_symbeg UNK on_comma on_label on_int on_nl define_predicate on_symbeg UNK on_comma # left_body || right_body
module on_const on_nl def UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_nl end on_nl end on_nl # Mix-in module for exception handling control structures.
class on_const on_op on_const on_nl include on_const on_nl on_ignored_nl define_predicate on_symbeg UNK on_comma on_label on_int on_nl define_predicate on_symbeg UNK on_comma # begin # main_body # rescue StandardError => error # rescue_clause # else # else_body # end
class on_const on_op on_const on_nl include on_const on_nl on_ignored_nl define_predicate on_symbeg UNK on_comma on_label on_int on_nl define_predicate on_symbeg UNK on_comma # begin # main_body # ensure # ensure_body # end
