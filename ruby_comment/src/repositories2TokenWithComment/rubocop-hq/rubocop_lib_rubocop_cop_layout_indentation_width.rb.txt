on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const UNK on_const on_nl UNK on_const on_nl # frozen_string_literal: true
UNK on_const on_op on_const UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl on_ignored_nl # This cop checks for indentation that doesn't use the specified number # of spaces. # # See also the IndentationConsistency cop which is the companion to this # one. # # @example # # bad # class A # def test # puts 'hello' # end # end # # # good # class A # def test # puts 'hello' # end # end # # @example IgnoredPatterns: ['^\s*module'] # # bad # module A # class B # def test # puts 'hello' # end # end # end # # # good # module A # class B # def test # puts 'hello' # end # end # end
UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content # rubocop:disable Metrics/ClassLength
return unless UNK on_lparen node on_period loc on_period end on_rparen on_nl on_ignored_nl check_indentation on_lparen node on_period loc on_period end on_comma # Check indentation against end keyword but only if it's first on its # line.
rhs on_op UNK on_lparen rhs on_rparen on_nl return unless rhs on_nl on_ignored_nl UNK on_op UNK on_period UNK on_lparen on_tstring_beg on_tstring_content # If there are method calls chained to the right hand side of the # assignment, we let rhs be the receiver of those method calls before # we check its indentation.
return if UNK on_period UNK on_op UNK on_period UNK on_nl on_ignored_nl check_indentation on_lparen node on_period loc on_period else on_comma UNK # If the else clause is an elsif, it will get its own on_if call so # we don't need to process it here.
body_node on_op body_node on_period children on_period first if body_node on_period UNK on_op on_op UNK on_lparen body_node on_rparen on_nl on_ignored_nl node # This cop only auto-corrects the first statement in a def body, for # example.
node on_op if UNK on_op UNK on_lparen body_node on_rparen on_nl UNK on_nl else on_ignored_nl body_node on_nl end on_nl on_ignored_nl UNK # Since autocorrect changes a number of lines, and not only the line # where the reported offending range is, we avoid auto-correction if # this cop has already found other offenses is the same # range. Otherwise, two corrections can interfere with each other, # resulting in corrupted code.
def UNK on_lparen node on_rparen on_ignored_nl expr on_op node on_period UNK on_nl on_ivar on_op on_lbracket on_rbracket on_nl on_ignored_nl return true # Returns true if the given node is within another node that has # already been marked for auto-correction by this cop.
return true if body_node on_period loc on_period UNK on_op base_loc on_period UNK on_nl on_ignored_nl return true if UNK on_lparen body_node # Don't check if expression is on same line as "then" keyword, etc.
UNK on_op body_node on_period UNK on_period UNK on_op UNK on_tstring_content UNK on_nl return true unless body_node on_period loc on_period UNK # Don't check indentation if the line doesn't start with the body. # For example, lines like "else do_something".
