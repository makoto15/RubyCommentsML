on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op on_ignored_nl on_regexp_beg on_tstring_content on_regexp_end # frozen_string_literal: true
UNK on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op on_ignored_nl on_regexp_beg on_tstring_content on_regexp_end on_period UNK on_nl on_ignored_nl UNK on_nl on_ignored_nl # This module contains a collection of useful utility methods.
on_const on_op on_ignored_nl on_regexp_beg on_tstring_content on_regexp_end on_period UNK on_nl on_ignored_nl UNK on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK # Match literal regex characters, not including anchors, character # classes, alternatives, groups, repetitions, references, etc
def UNK on_lparen node on_rparen on_ignored_nl UNK node on_nl UNK node on_period UNK on_nl UNK on_symbeg UNK on_nl node on_op # Returns, for example, a bare `if` node if the given node is an `if` # with calls chained to the end of it.
def UNK on_lparen string on_rparen on_ignored_nl on_ignored_nl string on_op on_regexp_beg on_tstring_content on_regexp_end on_nl end on_nl on_ignored_nl def UNK on_lparen string # If converting a string to Ruby string literal source code, must # double quotes be used?
on_ignored_nl string on_op on_regexp_beg on_tstring_content on_regexp_end on_nl end on_nl on_ignored_nl def UNK on_lparen string on_rparen on_ignored_nl UNK on_lparen UNK on_lparen # Double quotes are required for strings which either: # - Contain single quotes # - Contain non-printable characters, which must use an escape
string on_op on_regexp_beg on_tstring_content on_regexp_end on_nl end on_nl on_ignored_nl def UNK on_lparen string on_rparen on_ignored_nl UNK on_lparen UNK on_lparen string # Regex matches IF there is a ' or there is a \\ in the string that is # not preceded/followed by another \\ (e.g. "\\x34") but not "\\\\".
