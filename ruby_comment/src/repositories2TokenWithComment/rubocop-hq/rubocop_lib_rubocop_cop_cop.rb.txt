on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl class on_const on_nl UNK on_const on_op on_const # frozen_string_literal: true
class on_const on_nl UNK on_const on_op on_const on_op on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_op on_const on_op # A scaffold for concrete cops. # # The Cop class is meant to be extended. # # Cops track offenses and can autocorrect them on the fly. # # A commissioner object is responsible for traversing the AST and invoking # the specific callbacks on each cop. # If a cop needs to do its own processing of the AST or depends on # something else, it should define the `#investigate` method and do # the processing there. # # @example # # class CustomCop < Cop # def investigate(processed_source) # # Do custom processing # end # end
on_ignored_nl on_ivar on_op on_const on_period new on_nl on_ignored_nl class on_op self on_nl UNK on_symbeg UNK on_nl end on_nl on_ignored_nl def # TODO: Bad design.
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl return UNK unless UNK on_nl on_ignored_nl UNK on_period UNK on_lparen cop_name on_rparen # Returns true if the cop name or the cop namespace matches any of the # given names.
def self on_period UNK on_nl on_lbracket on_rbracket on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_op nil on_comma UNK on_op # List of cops that should not try to autocorrect at the same # time as this cop # # @return [Array<RuboCop::Cop::Cop>] # # @api public
on_ivar on_op on_ivar on_period UNK on_lparen self on_period class on_period UNK on_period UNK on_rparen on_ignored_nl on_period UNK on_lparen on_ivar on_period # Use department configuration as basis, but let individual cop # configuration override.
loc on_period UNK on_lparen on_const on_rparen on_op node on_period loc on_period UNK on_lparen loc on_rparen on_op loc on_nl end on_nl # Location can be provided as a symbol, e.g.: `:keyword`
def UNK on_nl nil on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl def UNK on_lparen node on_comma message on_rparen on_ignored_nl UNK # This method should be overridden when a cop's behavior depends # on state that lives outside of these locations: # # (1) the file under inspection # (2) the cop's source code # (3) the config (eg a .rubocop.yml file) # # For example, some cops may want to look at other parts of # the codebase being inspected to find violations. A cop may # use the presence or absence of file `foo.rb` to determine # whether a certain violation exists in `bar.rb`. # # Overriding this method allows the cop to indicate to RuboCop's # ResultCache system when those external dependencies change, # ie when the ResultCache should be invalidated.
UNK UNK if UNK on_lparen UNK on_comma file on_rparen on_nl on_ignored_nl UNK on_op UNK on_period UNK on_lparen file on_rparen on_nl # Try to match the absolute path, as Exclude properties are absolute.
UNK on_op UNK on_period UNK on_lparen file on_rparen on_nl UNK on_lparen UNK on_comma UNK on_rparen on_nl end on_nl end on_nl # Try with relative path.
