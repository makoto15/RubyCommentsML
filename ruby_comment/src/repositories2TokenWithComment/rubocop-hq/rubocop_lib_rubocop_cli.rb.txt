on_ignored_nl UNK on_const on_nl UNK on_const on_nl on_const on_op UNK on_nl on_const on_op UNK on_nl on_const on_op UNK on_nl on_const # frozen_string_literal: true
UNK on_const on_nl on_const on_op UNK on_nl on_const on_op UNK on_nl on_const on_op UNK on_nl on_const on_op UNK on_op on_const # The CLI is a class responsible of handling all the command line interface # logic.
def UNK on_lparen UNK on_op on_const on_rparen on_ignored_nl on_ivar on_comma UNK on_op on_const on_period UNK on_period UNK on_lparen UNK on_rparen # @api public # # Entry point for the application logic. Here we # do the command line arguments processing and inspect # the target files. # # @param args [Array<String>] command line arguments # @return [Integer] UNIX exit code # # rubocop:disable Metrics/MethodLength, Metrics/AbcSize
on_ignored_nl UNK on_nl on_ignored_nl def run_command on_lparen UNK on_rparen on_ignored_nl on_ivar on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl # rubocop:enable Metrics/MethodLength, Metrics/AbcSize
on_const on_period UNK on_op UNK on_nl UNK on_ivar on_lbracket on_symbeg UNK on_rbracket on_op UNK on_nl on_const on_period UNK on_op UNK # color output explicitly forced on
on_const on_period UNK on_op UNK on_nl end on_nl end on_nl on_ignored_nl def UNK on_nl on_const on_period UNK on_op on_ivar on_lbracket # color output explicitly forced off
on_ivar on_lbracket on_symbeg UNK on_rbracket on_op UNK on_ignored_nl if on_ivar on_lbracket on_symbeg UNK on_rbracket on_nl UNK on_op on_tstring_beg on_tstring_content on_tstring_end # This must be done after the options have already been processed, # because they can affect how ConfigStore behaves
