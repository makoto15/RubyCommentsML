on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl UNK on_const # frozen_string_literal: true
UNK on_const on_op on_const on_nl UNK on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op UNK UNK UNK on_nl on_ignored_nl def # This cop checks for a rescued exception that get shadowed by a # less specific exception being rescued before a more specific # exception is rescued. # # @example # # # bad # # begin # something # rescue Exception # handle_exception # rescue StandardError # handle_standard_error # end # # # good # # begin # something # rescue StandardError # handle_standard_error # rescue Exception # handle_exception # end # # # good, however depending on runtime environment. # # # # This is a special case for system call errors. # # System dependent error code depends on runtime environment. # # For example, whether `Errno::EAGAIN` and `Errno::EWOULDBLOCK` are # # the same error code or different error code depends on environment. # # This good case is for `Errno::EAGAIN` and `Errno::EWOULDBLOCK` with # # the same error code. # begin # something # rescue Errno::EAGAIN, Errno::EWOULDBLOCK # handle_standard_error # end #
UNK UNK if group on_period UNK on_op on_int on_op group on_period UNK on_lparen on_const on_rparen on_nl on_ignored_nl group on_period UNK # Always treat `Exception` as the highest level exception.
exception on_period UNK on_lparen UNK on_const on_rparen on_op other_exception on_period UNK on_lparen UNK on_const on_rparen on_op on_ignored_nl exception on_op other_exception # This condition logic is for special case. # System dependent error code depends on runtime environment. # For example, whether `Errno::EAGAIN` and `Errno::EWOULDBLOCK` are # the same error code or different error code depends on runtime # environment. This checks the error code for that.
UNK on_op UNK on_nl UNK on_op UNK on_nl UNK on_nl UNK on_ignored_nl UNK on_op UNK on_nl end on_nl on_ignored_nl def # Replaces Kernel::silence_warnings since it hides any warnings, # including the RuboCop ones
UNK on_op on_const on_period UNK on_lparen exception on_rparen on_nl end on_nl UNK on_const on_nl UNK on_op UNK on_nl end on_nl # Avoid printing deprecation warnings about constants
UNK on_const UNK on_nl end on_nl end on_nl on_ignored_nl def UNK on_lparen rescued_groups on_rparen on_ignored_nl rescued_groups on_period UNK on_lparen on_int # treat an empty `rescue` as `rescue StandardError`
UNK on_nl UNK on_ignored_nl on_lparen UNK on_op UNK on_op on_int on_rparen on_op on_int on_nl end on_nl end on_nl end on_nl # consider sorted if a group is empty or only contains # `nil`s
def UNK on_lparen rescue_group on_rparen on_ignored_nl UNK on_op on_op rescue_group on_nl UNK on_period UNK do on_op UNK on_op on_ignored_nl UNK # @param [RuboCop::AST::Node] rescue_group is a node of array_type
