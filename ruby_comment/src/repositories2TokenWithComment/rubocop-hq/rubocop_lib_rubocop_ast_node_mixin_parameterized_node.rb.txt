on_ignored_nl UNK UNK on_nl UNK UNK on_nl UNK UNK on_nl def UNK on_nl UNK on_period end on_op UNK UNK UNK # frozen_string_literal: true
UNK UNK on_nl def UNK on_nl UNK on_period end on_op UNK UNK UNK UNK UNK UNK on_nl end on_nl on_ignored_nl # Common functionality for nodes that are parameterized: # `send`, `super`, `zsuper`, `def`, `defs`
def UNK on_nl UNK on_period end on_op UNK UNK UNK UNK UNK UNK on_nl end on_nl on_ignored_nl def UNK on_nl # Checks whether this node's arguments are wrapped in parentheses. # # @return [Boolean] whether this node's arguments are # wrapped in parentheses
def UNK on_nl UNK UNK UNK UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK UNK on_op UNK UNK on_nl # A shorthand for getting the first argument of the node. # Equivalent to `arguments.first`. # # @return [Node, nil] the first argument of the node, # or `nil` if there are no arguments
def UNK on_nl UNK UNK on_op UNK UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_op UNK on_period UNK on_nl # A shorthand for getting the last argument of the node. # Equivalent to `arguments.last`. # # @return [Node, nil] the last argument of the node, # or `nil` if there are no arguments
def UNK on_nl on_op UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op on_ignored_nl UNK UNK on_period # Checks whether this node has any arguments. # # @return [Boolean] whether this node has any arguments
def UNK on_nl UNK on_op on_ignored_nl UNK UNK on_period UNK UNK on_op UNK UNK UNK on_op UNK on_period UNK UNK # Checks whether any argument of the node is a splat # argument, i.e. `*splat`. # # @return [Boolean] whether the node is a splat argument
def UNK on_nl UNK on_op on_ignored_nl UNK UNK on_period UNK on_op UNK on_period UNK UNK on_nl end on_nl end on_nl # Whether the last argument of the node is a block pass, # i.e. `&block`. # # @return [Boolean] whether the last argument of the node is a block pass
