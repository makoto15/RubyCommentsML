on_ignored_nl on_const on_period describe on_const on_op on_const on_comma on_symbeg UNK do on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_lparen # frozen_string_literal: true
on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_rparen on_nl create_file on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end # Faulty configuration
create_file on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end # The disable comment should not be reported as unnecessary (even if # it is) since --only overrides configuration.
on_ignored_nl expect on_lparen cli on_period run on_lparen on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end # IfUnlessModifier depends on the configuration of LineLength.
output on_op on_ignored_nl on_backtick on_tstring_content on_embexpr_beg rubocop on_embexpr_end on_tstring_content on_tstring_end on_nl UNK on_op on_ignored_nl output on_period split on_lparen on_tstring_beg on_tstring_content # Since we define a new cop class, we have to do this in a separate # process. Otherwise, the extra cop will affect other specs.
UNK on_op on_ignored_nl output on_period split on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period UNK on_lparen on_int on_rparen on_period join on_lparen on_tstring_beg # Excludes a warning when new `Enabled: pending` status cop is specified # in config/default.yml.
let on_lparen on_symbeg output on_rparen do on_ignored_nl on_backtick on_tstring_content on_embexpr_beg rubocop on_embexpr_end on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl let on_lparen # Since we define a new cop class, we have to do this in a separate # process. Otherwise, the extra cop will affect other specs.
on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_rparen on_nl on_ignored_nl create_file on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_heredoc_beg on_rparen # Disabling comments still apply.
create_file on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end # The disable comment should not be reported as unnecessary (even if # it is) since --except overrides configuration.
expect on_lparen on_gvar on_period string on_rparen on_ignored_nl on_period to eq on_lparen on_heredoc_beg on_rparen on_nl on_tstring_content on_ignored_sp on_tstring_content on_ignored_sp on_tstring_content on_ignored_sp # Note: No Lint/UselessAssignment offense.
on_ignored_nl expect on_lparen cli on_period run on_lparen on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma # IfUnlessModifier depends on the configuration of LineLength.
UNK on_op on_lparen arguments on_lbracket on_int on_rbracket on_op on_tstring_beg on_tstring_end on_rparen on_period split on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl UNK # rubocop:disable Security/YAMLLoad
cli on_period run on_lparen on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op arguments on_rparen on_nl end on_nl on_ignored_nl context on_tstring_beg on_tstring_content on_tstring_end # expect(cli.run(['--show-cops'] + arguments)).to eq(0)
def UNK on_lparen cop on_rparen on_ignored_nl UNK on_op UNK on_lparen cop on_rparen on_nl UNK on_op UNK on_period lines on_period UNK # Extracts the first line out of the description
def UNK on_lparen cop on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_lparen cop on_rparen on_nl UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end # Gets the full description of the cop or nil if no description is set.
expect on_lparen stdout on_rparen on_period to include UNK on_lparen cop on_rparen on_lbracket on_int on_op on_int on_rbracket on_nl end on_nl end # Because of line breaks, we will only find the beginning.
registry on_period UNK on_lparen UNK on_rparen on_period each do on_op cop on_op on_ignored_nl expect on_lparen UNK on_period UNK on_lbrace on_op # all cops in their department listing
UNK on_period each do on_op UNK on_op on_ignored_nl registry on_period UNK on_lparen UNK on_rparen on_period each do on_op cop on_op # no cop in wrong department listing
UNK on_lparen on_const on_rparen on_period to UNK on_lparen on_symbeg UNK on_rparen on_period UNK on_lparen UNK on_rparen on_nl on_ignored_nl on_int on_period # Stub out the JSON.load call used by the cache mechanism, so # we can test what happens when an offense message has # ASCII-8BIT encoding and contains a non-7bit-ascii character.
expect on_lparen cli on_period run on_lparen on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma UNK on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content # The second run (and possibly the first) should hit the # cache.
create_file on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_heredoc_beg on_rparen on_nl on_ignored_sp on_tstring_content on_ignored_sp on_tstring_content on_heredoc_end on_const on_period UNK on_lparen on_tstring_beg on_tstring_content # Make Style/EndOfLine give same output regardless of platform.
on_gvar on_op file on_nl argv on_op on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end # We must use a File object to simulate the behavior of # STDIN, which is an IO object. StringIO won't do in this # case, as its read() method doesn't handle line endings the # same way IO#read() does.
