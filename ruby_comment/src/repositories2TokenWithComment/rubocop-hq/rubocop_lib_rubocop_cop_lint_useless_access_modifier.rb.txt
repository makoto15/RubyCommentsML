on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl on_const # frozen_string_literal: true
UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op UNK on_tstring_content UNK on_nl on_ignored_nl def UNK on_lparen node # This cop checks for redundant access modifiers, including those with no # code, those which are repeated, and leading `public` modifiers in a # class or module body. Conditionally-defined methods are considered as # always being defined, and thus access modifiers guarding such methods # are not redundant. # # This cop has `ContextCreatingMethods` option. The default setting value # is an empty array that means no method is specified. # This setting is an array of methods which, when called, are known to # create its own context in the module's current access context. # # It also has `MethodCreatingMethods` option. The default setting value # is an empty array that means no method is specified. # This setting is an array of methods which, when called, are known to # create other methods in the module's current access context. # # @example # # bad # class Foo # public # this is redundant (default access is public) # # def method # end # end # # # bad # class Foo # # The following is redundant (methods defined on the class' # # singleton class are not affected by the public modifier) # public # # def self.method3 # end # end # # # bad # class Foo # protected # # define_method(:method2) do # end # # protected # this is redundant (repeated from previous modifier) # # [1,2,3].each do |i| # define_method("foo#{i}") do # end # end # end # # # bad # class Foo # private # this is redundant (no following methods are defined) # end # # # good # class Foo # private # this is not redundant (a method is defined) # # def method2 # end # end # # # good # class Foo # # The following is not redundant (conditionally defined methods are # # considered as always defining a method) # private # # if condition? # def method # end # end # end # # # good # class Foo # protected # this is not redundant (a method is defined) # # define_method(:method2) do # end # end # # @example ContextCreatingMethods: concerning # # Lint/UselessAccessModifier: # # ContextCreatingMethods: # # - concerning # # # good # require 'active_support/concern' # class Foo # concerning :Bar do # def some_public_method # end # # private # # def some_private_method # end # end # # # this is not redundant because `concerning` created its own context # private # # def some_other_private_method # end # end # # @example MethodCreatingMethods: delegate # # Lint/UselessAccessModifier: # # MethodCreatingMethods: # # - delegate # # # good # require 'active_support/core_ext/module/delegation' # class Foo # # this is not redundant because `delegate` creates methods # private # # delegate :method_a, to: :method_b # end
end on_nl on_ignored_nl def UNK on_lparen node on_rparen on_ignored_nl UNK on_lparen node on_period UNK on_lbracket UNK on_rbracket on_rparen end on_nl # class body
end on_nl on_ignored_nl def UNK on_lparen node on_rparen on_ignored_nl UNK UNK UNK on_lparen node on_rparen on_nl on_ignored_nl UNK on_lparen node # module body
end on_nl on_ignored_nl def UNK on_lparen node on_rparen on_ignored_nl UNK UNK on_op UNK on_op on_ignored_nl UNK on_op UNK on_lparen on_ignored_nl # singleton class body
if UNK on_op cur_vis on_nl UNK on_lparen node on_comma on_label UNK on_lparen on_const on_comma on_label cur_vis on_rparen on_rparen on_nl UNK # does this modifier just repeat the existing visibility?
UNK on_lparen unused on_comma on_label UNK on_lparen on_const on_comma on_label cur_vis on_rparen on_rparen if unused on_nl unused on_op node on_nl # was the previous modifier never applied to any defs?
unused on_op node on_nl end on_nl on_ignored_nl on_lbracket UNK on_comma unused on_rbracket on_nl end on_nl on_ignored_nl def UNK on_lparen child # once we have already warned about a certain modifier, don't # warn again even if it is never applied to any method defs
