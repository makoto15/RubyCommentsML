on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op UNK on_tstring_content UNK on_tstring_content # frozen_string_literal: true
UNK on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op UNK on_tstring_content UNK on_tstring_content UNK on_tstring_content UNK on_tstring_content UNK on_tstring_content UNK # An offense represents a style violation detected by RuboCop.
on_const on_op UNK on_tstring_content UNK on_tstring_content UNK on_tstring_content UNK on_tstring_content UNK on_tstring_content UNK on_period UNK on_nl on_ignored_nl UNK on_symbeg UNK # @api private
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg location on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl # @api public # # @!attribute [r] severity # # @return [RuboCop::Cop::Severity]
UNK on_symbeg location on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl # @api public # # @!attribute [r] location # # @return [Parser::Source::Range] # the location where the violation is detected. # # @see https://www.rubydoc.info/gems/parser/Parser/Source/Range # Parser::Source::Range
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen UNK on_comma # @api public # # @!attribute [r] message # # @return [String] # human-readable message # # @example # 'Line is too long. [90/80]'
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen UNK on_comma location on_comma UNK on_comma UNK # @api public # # @!attribute [r] cop_name # # @return [String] # a cop class name without department. # i.e. type of the violation. # # @example # 'LineLength'
UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen UNK on_comma location on_comma UNK on_comma UNK on_comma on_ignored_nl UNK on_op on_symbeg # @api private
def UNK on_lparen UNK on_comma location on_comma UNK on_comma UNK on_comma on_ignored_nl UNK on_op on_symbeg UNK on_rparen on_ignored_nl on_ivar on_op # @api private
def UNK on_nl on_ivar on_op on_symbeg UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op on_symbeg UNK on_op on_ivar # @api public # # @!attribute [r] correctable? # # @return [Boolean] # whether this offense can be automatically corrected via # autocorrect or a todo.
def UNK on_nl on_ivar on_op on_symbeg UNK on_op on_ivar on_op on_symbeg UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar # @api public # # @!attribute [r] corrected? # # @return [Boolean] # whether this offense is automatically corrected via # autocorrect or a todo.
def UNK on_nl on_ivar on_op on_symbeg UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op on_symbeg UNK on_op on_ivar # @api public # # @!attribute [r] corrected_with_todo? # # @return [Boolean] # whether this offense is automatically disabled via a todo.
def UNK on_nl on_ivar on_op on_symbeg UNK on_op on_ivar on_op on_symbeg UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_const # @api public # # @!attribute [r] disabled? # # @return [Boolean] # whether this offense was locally disabled with a # disable or todo where it occurred.
def UNK on_nl on_const on_op on_const on_op on_const on_period UNK on_lparen UNK on_comma on_ignored_nl column on_comma on_ignored_nl column on_op UNK # @api public # # @return [Parser::Source::Range] # the range of the code that is highlighted
def UNK on_nl UNK on_lparen UNK on_tstring_content UNK on_comma on_ignored_nl UNK UNK on_period UNK on_comma UNK UNK on_comma on_ignored_nl UNK # @api private # This is just for debugging purpose.
def UNK on_nl location on_period UNK on_nl end on_nl on_ignored_nl def column on_nl location on_period column on_nl end on_nl on_ignored_nl # @api private
def column on_nl location on_period column on_nl end on_nl on_ignored_nl def UNK on_nl location on_period UNK on_nl end on_nl on_ignored_nl # @api private
def UNK on_nl location on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK UNK on_op UNK on_nl UNK on_period # @api private
def UNK on_nl UNK UNK on_op UNK on_nl UNK on_period UNK on_nl UNK on_ignored_nl UNK on_period UNK on_op column on_nl # @api private
def UNK on_nl location on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl location on_period UNK on_nl end on_nl on_ignored_nl # @api private
def UNK on_nl location on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl location on_period UNK on_nl end on_nl on_ignored_nl # @api private
def UNK on_nl location on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl location on_period UNK on_nl end on_nl on_ignored_nl # @api private
def UNK on_nl location on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl column on_op UNK on_nl end on_nl on_ignored_nl # @api private
def UNK on_nl column on_op UNK on_nl end on_nl on_ignored_nl def on_op on_lparen UNK on_rparen on_ignored_nl on_const on_period UNK UNK # @api private # # Internally we use column number that start at 0, but when # outputting column numbers, we want them to start at 1. One # reason is that editors, such as Emacs, expect this.
def on_op on_lparen UNK on_rparen on_ignored_nl on_const on_period UNK UNK on_op attribute on_op on_ignored_nl UNK on_lparen attribute on_rparen on_op UNK # @api public # # @return [Boolean] # returns `true` if two offenses contain same attributes
def on_op on_lparen UNK on_rparen on_ignored_nl on_const on_period UNK UNK on_op attribute on_op on_ignored_nl UNK on_op UNK on_lparen attribute on_rparen # @api public # # Returns `-1`, `0`, or `+1` # if this offense is less than, equal to, or greater than `other`. # # @return [Integer] # comparison result
