on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const UNK on_const UNK on_const UNK on_const on_nl on_const UNK UNK on_ignored_nl # frozen_string_literal: true
UNK on_const UNK on_const UNK on_const UNK on_const on_nl on_const UNK UNK on_ignored_nl on_label on_const on_comma on_ignored_nl on_label on_const on_comma # `RuboCop::AST::Builder` is an AST builder that is utilized to let `Parser` # generate ASTs with {RuboCop::AST::Node}. # # @example # buffer = Parser::Source::Buffer.new('(string)') # buffer.source = 'puts :foo' # # builder = RuboCop::AST::Builder.new # require 'parser/ruby25' # parser = Parser::Ruby25.new(builder) # root_node = parser.parse(buffer)
UNK UNK on_lparen UNK on_comma UNK on_comma UNK on_rparen on_ignored_nl UNK on_lparen UNK on_rparen UNK UNK on_lparen UNK on_comma UNK # Generates {Node} from the given information. # # @return [Node] the generated node
UNK UNK on_lparen UNK on_rparen on_ignored_nl UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl UNK UNK on_lparen # TODO: Figure out what to do about literal encoding handling... # More details here https://github.com/whitequark/parser/issues/283
