on_ignored_nl UNK UNK UNK UNK on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const # frozen_string_literal: true
UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op on_int on_const on_op UNK UNK UNK on_nl on_ignored_nl def # This cop checks for hardcoded IP addresses, which can make code # brittle. IP addresses are likely to need to be changed when code # is deployed to a different server or environment, which may break # a deployment if forgotten. Prefer setting IP addresses in ENV or # other configuration. # # @example # # # bad # ip_address = '127.59.241.29' # # # good # ip_address = ENV['DEPLOYMENT_IP_ADDRESS']
on_const on_op UNK UNK UNK on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl contents on_op UNK on_period UNK UNK on_int # IPv4-mapped IPv6 is the longest
UNK UNK UNK UNK on_lparen contents on_rparen on_nl on_ignored_nl contents on_op on_op on_const on_op on_const on_op on_const on_op contents on_op # To try to avoid doing two regex checks on every string, # shortcut out if the string does not look like an IP address
def UNK UNK end on_nl on_ignored_nl def UNK UNK end on_nl on_ignored_nl UNK on_nl on_ignored_nl def UNK on_nl UNK on_op # Dummy implementation of method in ConfigurableEnforcedStyle that is # called from StringHelp.
def UNK UNK end on_nl on_ignored_nl UNK on_nl on_ignored_nl def UNK on_nl UNK on_op UNK UNK UNK UNK UNK UNK # Dummy implementation of method in ConfigurableEnforcedStyle that is # called from StringHelp.
UNK UNK UNK UNK on_lparen str on_rparen on_nl on_ignored_nl UNK on_lparen str on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen # If the string is too long, it can't be an IP
UNK on_lparen str on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen str on_rparen on_ignored_nl str on_period UNK on_op on_const on_nl # If the string doesn't start with a colon or hexadecimal char, # we know it's not an IP address
