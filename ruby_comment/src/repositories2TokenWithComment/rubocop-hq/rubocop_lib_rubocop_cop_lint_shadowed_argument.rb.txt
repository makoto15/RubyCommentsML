on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl on_const on_op UNK UNK UNK # frozen_string_literal: true
UNK on_const on_op on_const on_nl on_const on_op UNK UNK UNK UNK UNK UNK on_nl on_ignored_nl UNK UNK UNK on_comma UNK # This cop checks for shadowed arguments. # # This cop has `IgnoreImplicitReferences` configuration option. # It means argument shadowing is used in order to pass parameters # to zero arity `super` when `IgnoreImplicitReferences` is `true`. # # @example # # # bad # do_something do |foo| # foo = 42 # puts foo # end # # def do_something(foo) # foo = 42 # puts foo # end # # # good # do_something do |foo| # foo = foo + 42 # puts foo # end # # def do_something(foo) # foo = foo + 42 # puts foo # end # # def do_something(foo) # puts foo # end # # @example IgnoreImplicitReferences: false (default) # # # bad # def do_something(foo) # foo = 42 # super # end # # def do_something(foo) # foo = super # bar # end # # @example IgnoreImplicitReferences: true # # # good # def do_something(foo) # foo = 42 # super # end # # def do_something(foo) # foo = super # bar # end #
UNK if argument on_period UNK on_nl on_ignored_nl UNK on_lparen argument on_rparen do on_op node on_op on_ignored_nl UNK on_op UNK on_lparen # Block local variables, i.e., variables declared after ; inside # |...| aren't really arguments.
UNK if UNK on_period UNK do on_op UNK on_op on_ignored_nl UNK UNK if on_op UNK on_period UNK on_op UNK on_nl # If argument was referenced before it was reassigned # then it's not shadowed
def UNK on_lparen argument on_rparen on_ignored_nl argument on_period UNK on_period UNK on_lparen UNK on_rparen do on_op UNK on_comma UNK on_op # Find the first argument assignment, which doesn't reference the # argument at the rhs. If the assignment occurs inside a branch or # block, it is impossible to tell whether it's executed, so precise # shadowing location is not known. #
UNK UNK if UNK on_period UNK on_nl on_ignored_nl UNK on_op on_ignored_nl UNK on_lparen UNK on_period UNK on_comma on_ignored_nl argument on_period # Shorthand assignments always use their arguments
UNK UNK if UNK on_nl on_ignored_nl UNK on_lparen UNK on_period node on_comma UNK on_rparen on_nl UNK on_nl end on_nl on_ignored_nl # It's impossible to decide whether a branch or block is executed, # so the precise reassignment location is undecidable.
def UNK on_lparen node on_comma UNK on_rparen on_ignored_nl UNK UNK if node on_op UNK on_nl on_ignored_nl node on_period UNK on_op # Check whether the given node is nested into block or conditional. #
def UNK on_lparen argument on_rparen on_ignored_nl UNK on_op argument on_ignored_nl on_period UNK on_ignored_nl on_period UNK on_lparen on_op UNK UNK on_rparen # Get argument references without assignments' references #
