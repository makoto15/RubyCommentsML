on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op UNK UNK # frozen_string_literal: true
UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op UNK UNK UNK on_nl on_const on_op UNK UNK UNK # A node extension for `pair` nodes. This will be used in place of a plain # node when the builder constructs the AST, making its methods available # to all `pair` nodes within RuboCop.
UNK UNK on_nl UNK on_period UNK on_period UNK UNK on_const UNK on_nl end on_nl on_ignored_nl UNK UNK on_nl UNK on_period # Checks whether the `pair` uses a hash rocket delimiter. # # @return [Boolean] whether this `pair` uses a hash rocket delimiter
UNK UNK on_nl UNK on_period UNK on_period UNK UNK on_const UNK on_nl end on_nl on_ignored_nl UNK UNK UNK UNK on_op # Checks whether the `pair` uses a colon delimiter. # # @return [Boolean] whether this `pair` uses a colon delimiter
UNK UNK UNK UNK on_op UNK UNK on_ignored_nl UNK UNK on_nl UNK on_op on_const on_op on_const on_nl UNK on_ignored_nl UNK # Returns the delimiter of the `pair` as a string. Returns `=>` for a # colon delimited `pair` and `:` for a hash rocket delimited `pair`. # # @param [Boolean] with_spacing whether to include spacing # @return [String] the delimiter of the `pair`
UNK UNK UNK UNK on_op UNK UNK on_ignored_nl UNK UNK on_nl UNK on_op on_const on_op on_const on_nl UNK on_ignored_nl UNK # Returns the inverse delimiter of the `pair` as a string. # # @param [Boolean] with_spacing whether to include spacing # @return [String] the inverse delimiter of the `pair`
UNK UNK on_nl UNK on_period UNK on_period UNK on_op UNK on_period UNK on_period UNK on_nl end on_nl end on_nl end # Checks whether the value starts on its own line. # # @return [Boolean] whether the value in the `pair` starts its own line
