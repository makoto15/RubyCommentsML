on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl UNK on_const # frozen_string_literal: true
UNK on_const on_op on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end # This cop is designed to help you transition from mutable string literals # to frozen string literals. # It will add the comment `# frozen_string_literal: true` to the top of # files to enable frozen string literals. Frozen string literals may be # default in future Ruby. The comment will be added below a shebang and # encoding comment. The frozen string literal comment is only valid in # Ruby 2.3+. # # Note that the cop will ignore files where the comment exists but is set # to `false` instead of `true`. # # @example EnforcedStyle: always (default) # # The `always` style will always add the frozen string literal comment # # to a file, regardless of the Ruby version or if `freeze` or `<<` are # # called on a string literal. # # bad # module Bar # # ... # end # # # good # # frozen_string_literal: true # # module Bar # # ... # end # # # good # # frozen_string_literal: false # # module Bar # # ... # end # # @example EnforcedStyle: never # # The `never` will enforce that the frozen string literal comment does # # not exist in a file. # # bad # # frozen_string_literal: true # # module Baz # # ... # end # # # good # module Baz # # ... # end # # @example EnforcedStyle: always_true # # The `always_true` style enforces that the frozen string literal # # comment is set to `true`. This is a stricter option than `always` # # and forces projects to use frozen string literals. # # bad # # frozen_string_literal: false # # module Baz # # ... # end # # # bad # module Baz # # ... # end # # # good # # frozen_string_literal: true # # module Bar # # ... # end
UNK on_lparen processed_source on_rparen on_nl UNK UNK on_lparen processed_source on_rparen on_nl end on_nl end on_nl on_ignored_nl def last_special_comment on_lparen processed_source # The comment exists, but is not enabled.
UNK on_lparen processed_source on_rparen on_nl end on_nl end on_nl on_ignored_nl def last_special_comment on_lparen processed_source on_rparen on_ignored_nl UNK on_op on_int on_nl # The comment doesn't exist at all.
