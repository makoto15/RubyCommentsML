on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl UNK on_const # frozen_string_literal: true
UNK on_const on_op on_const on_nl UNK on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_tstring_beg on_tstring_content on_tstring_end # This cop checks the indentation of the here document bodies. The bodies # are indented one step. # In Ruby 2.3 or newer, squiggly heredocs (`<<~`) should be used. If you # use the older rubies, you should introduce some library to your project # (e.g. ActiveSupport, Powerpack or Unindent). # Note: When `Layout/LineLength`'s `AllowHeredoc` is false (not default), # this cop does not add any offenses for long here documents to # avoid `Layout/LineLength`'s offenses. # # @example EnforcedStyle: squiggly (default) # # bad # <<-RUBY # something # RUBY # # # good # # When EnforcedStyle is squiggly, bad code is auto-corrected to the # # following code. # <<~RUBY # something # RUBY # # @example EnforcedStyle: active_support # # good # # When EnforcedStyle is active_support, bad code is auto-corrected to # # the following code. # <<-RUBY.strip_heredoc # something # RUBY # # @example EnforcedStyle: powerpack # # good # # When EnforcedStyle is powerpack, bad code is auto-corrected to # # the following code. # <<-RUBY.strip_indent # something # RUBY # # @example EnforcedStyle: unindent # # good # # When EnforcedStyle is unindent, bad code is auto-corrected to # # the following code. # <<-RUBY.unindent # something # RUBY #
def UNK on_lparen node on_rparen on_ignored_nl node on_period UNK on_lbracket UNK on_tstring_content UNK on_comma UNK on_rbracket on_nl end on_nl on_ignored_nl # Returns '~', '-' or nil
