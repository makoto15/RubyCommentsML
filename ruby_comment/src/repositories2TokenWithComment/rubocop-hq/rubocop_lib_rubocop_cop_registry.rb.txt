on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_op on_const on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_tstring_beg # frozen_string_literal: true
UNK on_const on_op on_const on_op on_const on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl def UNK on_lparen # Error raised when an unqualified cop name is used that could # refer to two or more cops under different departments
UNK on_const on_nl def UNK on_lparen cops on_op on_lbracket on_rbracket on_comma UNK on_op on_lbrace on_rbrace on_rparen on_ignored_nl on_ivar on_op on_lbrace # Registry that tracks all cops by their badge and department.
def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen department on_rparen on_ignored_nl UNK on_lparen on_ivar on_period # @return [Array<Symbol>] list of departments for current cops.
def UNK on_lparen department on_rparen on_ignored_nl UNK on_lparen on_ivar on_period UNK on_lparen department on_comma on_lbracket on_rbracket on_rparen on_rparen on_nl end # @return [Registry] Cops for that specific department.
def UNK on_lparen department on_rparen on_ignored_nl UNK on_op on_ivar on_period UNK on_nl UNK on_period UNK on_lparen department on_rparen on_nl on_ignored_nl # @return [Registry] Cops not for a specific department.
def UNK on_lparen name on_comma path on_comma UNK on_op UNK on_rparen on_ignored_nl badge on_op on_const on_period UNK on_lparen name on_rparen # Convert a user provided cop name into a properly namespaced name # # @example gives back a correctly qualified cop name # # cops = RuboCop::Cop::Cop.all # cops. # qualified_cop_name('Layout/EndOfLine') # => 'Layout/EndOfLine' # # @example fixes incorrect namespaces # # cops = RuboCop::Cop::Cop.all # cops.qualified_cop_name('Lint/EndOfLine') # => 'Layout/EndOfLine' # # @example namespaces bare cop identifiers # # cops = RuboCop::Cop::Cop.all # cops.qualified_cop_name('EndOfLine') # => 'Layout/EndOfLine' # # @example passes back unrecognized cop names # # cops = RuboCop::Cop::Cop.all # cops.qualified_cop_name('NotACop') # => 'NotACop' # # @param name [String] Cop name extracted from config # @param path [String, nil] Path of file that `name` was extracted from # # @raise [AmbiguousCopName] # if a bare identifier with two possible namespaces is provided # # @note Emits a warning if the provided name has an incorrect namespace # # @return [String] Qualified cop name
UNK UNK UNK UNK on_lparen badge on_comma UNK on_period UNK on_comma path on_rparen on_nl UNK UNK on_const on_period UNK on_lparen # No namespace found. Deal with it later in caller.
def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def cops on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK # @return [Hash{String => Array<Class>}]
def UNK on_lparen cop_name on_rparen on_ignored_nl on_ivar on_lbracket cop_name on_rbracket on_period UNK on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl def # @param [String] cop_name # @return [Class, nil]
