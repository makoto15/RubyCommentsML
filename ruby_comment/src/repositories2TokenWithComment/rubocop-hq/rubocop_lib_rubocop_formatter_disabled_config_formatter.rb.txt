on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl on_const on_op UNK on_nl on_ignored_sp on_tstring_content on_ignored_sp on_tstring_content # frozen_string_literal: true
UNK on_const on_op on_const on_nl on_const on_op UNK on_nl on_ignored_sp on_tstring_content on_ignored_sp on_tstring_content on_ignored_sp on_tstring_content on_embexpr_beg on_const on_period UNK on_embexpr_end # This formatter displays a YAML configuration file where all cops that # detected any offenses are configured to not detect the offense.
on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ignored_nl UNK on_nl on_ignored_nl puts on_tstring_beg on_tstring_content on_embexpr_beg UNK on_period UNK # Syntax isn't a real cop and it can't be disabled.
output_buffer on_op on_const on_period new on_nl UNK on_lparen output_buffer on_comma cfg on_comma cop_name on_comma offense_count on_rparen on_nl UNK on_lparen output_buffer # To avoid malformed YAML when potentially reading the config in # #excludes, we use an output buffer and append it to the actual output # only when it results in valid YAML.
if on_op on_ivar on_lbracket on_symbeg UNK on_rbracket on_op on_ignored_nl on_ivar on_lbracket cop_name on_rbracket on_period UNK on_op on_ivar on_nl cfg on_period # In case auto_gen_only_exclude is set, only modify the maximum if the # files are not excluded one by one.
cfg on_period UNK on_lbrace on_op key on_op key on_op on_symbeg UNK on_rbrace on_nl end on_nl on_ignored_nl def UNK on_lparen output_buffer # Remove already used exclude_limit.
UNK on_op cfg on_period UNK on_lbrace on_op key on_op key on_op on_tstring_beg on_tstring_content on_tstring_end on_rbrace on_nl on_ignored_nl output_buffer on_period puts # 'Enabled' option will be put into file only if exclude # limit is exceeded.
UNK on_op on_const on_period new on_period UNK on_lparen parent on_rparen on_nl cfg on_op UNK on_lbracket cop_name on_rbracket on_op on_lbrace on_rbrace # Exclude properties in .rubocop_todo.yml override default ones, as well # as any custom excludes in .rubocop.yml, so in order to retain those # excludes we must copy them. # There can be multiple .rubocop.yml files in subdirectories, but we # just look at the current working directory
UNK on_op on_const on_period new on_lparen exclude_path on_rparen on_nl UNK on_op UNK on_period UNK on_lparen parent on_rparen on_nl output_buffer on_period # exclude_path is either relative path, an absolute path, or a regexp.
