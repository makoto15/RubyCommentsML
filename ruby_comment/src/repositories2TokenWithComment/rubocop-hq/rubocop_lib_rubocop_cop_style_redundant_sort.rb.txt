on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl on_const # frozen_string_literal: true
UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK # This cop is used to identify instances of sorting and then # taking only the first or last element. The same behavior can # be accomplished without a relatively expensive sort by using # `Enumerable#min` instead of sorting and taking the first # element and `Enumerable#max` instead of sorting and taking the # last element. Similarly, `Enumerable#min_by` and # `Enumerable#max_by` can replace `Enumerable#sort_by` calls # after which only the first or last element is used. # # @example # # bad # [2, 1, 3].sort.first # [2, 1, 3].sort[0] # [2, 1, 3].sort.at(0) # [2, 1, 3].sort.slice(0) # # # good # [2, 1, 3].min # # # bad # [2, 1, 3].sort.last # [2, 1, 3].sort[-1] # [2, 1, 3].sort.at(-1) # [2, 1, 3].sort.slice(-1) # # # good # [2, 1, 3].max # # # bad # arr.sort_by(&:foo).first # arr.sort_by(&:foo)[0] # arr.sort_by(&:foo).at(0) # arr.sort_by(&:foo).slice(0) # # # good # arr.min_by(&:foo) # # # bad # arr.sort_by(&:foo).last # arr.sort_by(&:foo)[-1] # arr.sort_by(&:foo).at(-1) # arr.sort_by(&:foo).slice(-1) # # # good # arr.max_by(&:foo) #
UNK on_period UNK on_lparen on_ignored_nl UNK on_lparen on_ignored_nl UNK on_lparen node on_rparen on_comma on_ignored_nl node on_period loc on_period UNK on_period # Remove accessor, e.g. `first` or `[-1]`.
UNK on_period UNK on_lparen on_ignored_nl UNK on_period loc on_period UNK on_comma on_ignored_nl UNK on_lparen sorter on_comma accessor on_comma UNK on_lparen # Replace "sort" or "sort_by" with the appropriate min/max method.
def UNK on_lparen node on_rparen on_ignored_nl UNK node on_period loc on_period UNK on_nl node on_period loc on_period UNK on_period UNK # This gets the start of the accessor whether it has a dot # (e.g. `.first`) or doesn't (e.g. `[0]`)
