on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl on_const # frozen_string_literal: true
UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end # This cop enforces consistency between 'return nil' and 'return'. # # Supported styles are: return, return_nil. # # @example EnforcedStyle: return (default) # # bad # def foo(arg) # return nil if arg # end # # # good # def foo(arg) # return if arg # end # # @example EnforcedStyle: return_nil # # bad # def foo(arg) # return if arg # end # # # good # def foo(arg) # return nil if arg # end
node on_period UNK on_lparen on_symbeg UNK on_comma on_symbeg def on_comma on_symbeg UNK on_rparen UNK on_op UNK on_op on_ignored_nl UNK UNK # Check Lint/NonLocalExitFromIterator first before this cop
UNK UNK UNK on_lparen UNK on_rparen on_nl on_ignored_nl UNK UNK UNK on_period UNK on_period UNK on_nl on_ignored_nl UNK UNK UNK # if a proc is passed to `Module#define_method` or # `Object#define_singleton_method`, `return` will not cause a # non-local exit error
