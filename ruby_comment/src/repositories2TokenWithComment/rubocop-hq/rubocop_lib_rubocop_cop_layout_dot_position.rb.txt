on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl def # frozen_string_literal: true
UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl def UNK on_lparen node on_rparen on_ignored_nl UNK UNK node on_period UNK # This cop checks the . position in multi-line method calls. # # @example EnforcedStyle: leading (default) # # bad # something. # method # # # good # something # .method # # @example EnforcedStyle: trailing # # bad # something # .method # # # good # something. # method
UNK UNK UNK selector_line on_op UNK on_nl on_ignored_nl dot_line on_op node on_period loc on_period dot on_period UNK on_nl on_ignored_nl UNK # receiver and selector are on the same line
UNK UNK UNK UNK on_lparen selector_line on_comma dot_line on_rparen on_nl on_ignored_nl UNK on_lparen dot_line on_comma selector_line on_rparen on_nl end on_nl # don't register an offense if there is a line comment between the # dot and the selector otherwise, we might break the code while # "correcting" it (even if there is just an extra blank line, treat # it the same)
node on_period loc on_period UNK on_op node on_period loc on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen node on_rparen # l.(1) has no selector, so we use the opening parenthesis instead
