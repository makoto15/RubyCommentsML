on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end # frozen_string_literal: true
UNK on_const on_op on_const on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_tstring_beg # This cop checks for `private` or `protected` access modifiers which are # applied to a singleton method. These access modifiers do not make # singleton methods private/protected. `private_class_method` can be # used for that. # # @example # # # bad # # class C # private # # def self.method # puts 'hi' # end # end # # @example # # # good # # class C # def self.method # puts 'hi' # end # # private_class_method :method # end # # @example # # # good # # class C # class << self # private # # def method # puts 'hi' # end # end # end
end on_nl on_ignored_nl def UNK on_lparen node on_rparen on_ignored_nl UNK on_lparen node on_period UNK UNK UNK UNK on_rparen end on_nl # class body
end on_nl on_ignored_nl UNK on_nl on_ignored_nl def UNK on_lparen node on_rparen on_ignored_nl UNK UNK node on_op UNK on_nl on_ignored_nl ignored_methods # module body
