on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl on_const # frozen_string_literal: true
UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op UNK on_tstring_content on_tstring_end UNK on_tstring_content on_tstring_end UNK on_tstring_content on_tstring_end # This cop checks whether the rescue and ensure keywords are aligned # properly. # # @example # # # bad # begin # something # rescue # puts 'error' # end # # # good # begin # something # rescue # puts 'error' # end
return UNK unless UNK on_period UNK on_period UNK on_period UNK on_nl on_ignored_nl alignment_node on_op alignment_node on_lparen node on_rparen on_nl return # Some inline node is sitting before current node.
on_ignored_nl def UNK on_lparen node on_rparen on_ignored_nl alignment_node on_op alignment_node on_lparen node on_rparen on_nl return if alignment_node on_period UNK on_nl # Check alignment of node with rescue or ensure modifiers.
def UNK on_lparen node on_comma UNK on_rparen on_ignored_nl UNK on_op on_ignored_nl UNK node on_period UNK on_nl UNK on_symbeg UNK on_comma # rubocop:disable Metrics/AbcSize
node on_period UNK on_period UNK on_period loc on_period UNK on_nl end on_nl on_ignored_nl UNK on_lparen UNK on_period UNK on_comma UNK # It is a wrapper with access modifier.
on_ignored_nl on_ignored_nl def alignment_node on_lparen node on_rparen on_ignored_nl ancestor_node on_op ancestor_node on_lparen node on_rparen on_nl on_ignored_nl return ancestor_node if ancestor_node # rubocop:enable Metrics/AbcSize
on_ignored_nl def alignment_node on_lparen node on_rparen on_ignored_nl ancestor_node on_op ancestor_node on_lparen node on_rparen on_nl on_ignored_nl return ancestor_node if ancestor_node on_period # We will use ancestor or wrapper with access modifier.
