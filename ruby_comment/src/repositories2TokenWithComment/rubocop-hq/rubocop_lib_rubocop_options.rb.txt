on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_op on_const UNK # frozen_string_literal: true
UNK on_const on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_tstring_beg on_tstring_content on_tstring_end on_tstring_beg on_tstring_content on_tstring_end on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_op # This class handles command line options.
raise on_const on_comma on_const if args on_period UNK on_nl on_ignored_nl args on_op on_lbracket on_ivar on_lbracket on_symbeg UNK on_rbracket on_rbracket on_nl # The parser will put the file name given after --stdin into # @options[:stdin]. If it did, then the args array should be empty.
args on_op on_lbracket on_ivar on_lbracket on_symbeg UNK on_rbracket on_rbracket on_nl on_ivar on_lbracket on_symbeg UNK on_rbracket on_op UNK on_period UNK on_period # We want the STDIN contents in @options[:stdin] and the file name in # args to simplify the rest of the processing.
def UNK on_lparen opts on_rparen on_ignored_nl option on_lparen opts on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl option # rubocop:disable Metrics/MethodLength
on_ignored_nl def UNK on_lparen opts on_rparen on_ignored_nl option on_lparen opts on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen do # rubocop:enable Metrics/MethodLength
def option on_lparen opts on_comma on_op args on_rparen on_ignored_nl UNK on_op UNK on_lparen args on_rparen on_nl args on_op on_const on_lparen # Sets a value in the @options hash, based on the given long option and its # value, in addition to calling the block if a block is given.
def UNK on_lparen args on_rparen on_ignored_nl UNK on_op args on_period UNK on_lbrace on_op UNK on_op UNK on_period UNK on_lparen on_tstring_beg # Finds the option in `args` starting with -- and converts it to a symbol, # e.g. [..., '--auto-correct', ...] to :auto_correct.
UNK on_const on_nl UNK on_op UNK on_nl def UNK on_lparen UNK on_rparen on_ignored_nl return UNK UNK on_nl on_ignored_nl UNK on_op # Validates option arguments and the options' compatibility with each other.
def UNK on_lparen UNK on_rparen on_ignored_nl return UNK UNK on_nl on_ignored_nl UNK on_op on_const on_op on_const on_period UNK on_period UNK # Cop name validation must be done later than option parsing, so it's not # called from within Options.
def UNK if UNK on_nl raise on_const on_comma on_tstring_beg on_tstring_content on_tstring_end on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl raise on_const on_comma # rubocop:disable Metrics/AbcSize
if UNK on_nl raise on_const on_comma on_tstring_beg on_tstring_content on_tstring_end on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl raise on_const on_comma on_tstring_beg on_tstring_content # rubocop:disable Metrics/MethodLength
on_ignored_nl def UNK on_nl return if on_ivar on_period key? on_lparen on_symbeg UNK on_rparen on_nl on_ignored_nl message on_op on_tstring_beg on_tstring_content on_tstring_end # rubocop:enable Metrics/AbcSize
raise on_const on_op on_const on_nl end on_nl end on_nl on_ignored_nl UNK on_const on_nl on_const on_op on_const on_op on_const on_op on_const # Emulate OptionParser's behavior to make failures consistent regardless # of option order.
UNK on_const on_nl on_const on_op on_const on_op on_const on_op on_const on_period UNK on_nl on_const on_op on_const on_op on_const on_op on_const # This module contains help texts for command line options.
