on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl on_const on_op UNK on_tstring_content UNK on_tstring_content UNK on_tstring_content UNK on_tstring_content # frozen_string_literal: true
UNK on_const on_nl UNK on_const on_nl on_const on_op UNK on_tstring_content UNK on_tstring_content UNK on_tstring_content UNK on_tstring_content on_tstring_end on_period UNK on_nl # @api private
wait on_op options on_period UNK on_lparen on_symbeg wait on_comma UNK on_rparen on_nl wait on_op UNK if wait on_period UNK on_nl # if no value or nil for the :wait option is passed it should default to the default
def UNK on_nl UNK on_op UNK on_lparen UNK on_rparen on_op UNK on_nl end on_nl on_ignored_nl def UNK on_lparen count on_rparen ## # # Checks if a count of 0 is valid for the query # Returns false if query does not have any count options specified. #
def UNK on_lparen count on_rparen on_ignored_nl UNK on_lparen on_const on_lparen options on_lbracket on_symbeg count on_rbracket on_rparen on_op count on_rparen if ## # # Checks if the given count matches the query count options. # Defaults to true if no count options are specified. If multiple # count options exist, it tests that all conditions are met; # however, if :count is specified, all other options are ignored. # # @param [Integer] count The actual number. Should be coercible via Integer() #
def UNK on_nl on_op on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_end on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_op ## # # Generates a failure message from the query description and count options. #
