on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK UNK handle on_nl on_ignored_nl UNK UNK session on_nl on_ignored_nl def UNK on_lparen # frozen_string_literal: true
UNK on_const on_nl UNK UNK handle on_nl on_ignored_nl UNK UNK session on_nl on_ignored_nl def UNK on_lparen session on_comma handle on_rparen ## # The {Window} class represents a browser window. # # You can get an instance of the class by calling either of: # # * {Capybara::Session#windows} # * {Capybara::Session#current_window} # * {Capybara::Session#window_opened_by} # * {Capybara::Session#switch_to_window} # # Note that some drivers (e.g. Selenium) support getting size of/resizing/closing only # current window. So if you invoke such method for: # # * window that is current, Capybara will make 2 Selenium method invocations # (get handle of current window + get size/resize/close). # * window that is not current, Capybara will make 4 Selenium method invocations # (get handle of current window + switch to given handle + get size/resize/close + switch to original handle) #
UNK UNK handle on_nl on_ignored_nl UNK UNK session on_nl on_ignored_nl def UNK on_lparen session on_comma handle on_rparen on_ignored_nl on_ivar on_op # @return [String] a string that uniquely identifies window within session
UNK UNK session on_nl on_ignored_nl def UNK on_lparen session on_comma handle on_rparen on_ignored_nl on_ivar on_op session on_nl on_ivar on_op session # @return [Capybara::Session] session that this window belongs to
def UNK on_lparen session on_comma handle on_rparen on_ignored_nl on_ivar on_op session on_nl on_ivar on_op session on_period UNK on_nl on_ivar on_op # @api private
def UNK on_nl on_ivar on_period UNK on_period UNK on_lparen on_ivar on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl on_op UNK ## # @return [Boolean] whether the window is not closed
def UNK on_nl on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK on_op on_ivar on_nl UNK on_ivar ## # @return [Boolean] whether the window is closed
def UNK on_nl on_ivar on_period UNK on_op on_ivar on_nl UNK on_ivar on_period UNK on_nl UNK on_nl end on_nl on_ignored_nl def ## # @return [Boolean] whether this window is the window in which commands are being executed
def UNK on_nl on_ivar on_period UNK on_lparen handle on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK on_lparen ## # Close window. # # If this method was called for window that is current, then after calling this method # future invocations of other Capybara methods should raise # {Capybara::Driver::Base#no_such_window_error session.driver.no_such_window_error} until another window will be switched to. # # @!macro about_current # If this method was called for window that is not current, then after calling this method # current window should remain the same as it was before calling this method. #
def UNK on_nl on_ivar on_period UNK on_lparen handle on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_comma UNK on_rparen ## # Get window size. # # @macro about_current # @return [Array<(Integer, Integer)>] an array with width and height #
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK UNK on_ivar on_period UNK on_lparen handle on_comma UNK on_comma UNK on_rparen ## # Resize window. # # @macro about_current # @param width [String] the new window width in pixels # @param height [String] the new window height in pixels #
def UNK on_nl UNK UNK on_ivar on_period UNK on_lparen handle on_rparen UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar ## # Maximize window. # # If a particular driver (e.g. headless driver) doesn't have concept of maximizing it # may not support this method. # # @macro about_current #
def UNK on_nl on_ivar on_period UNK on_lparen handle on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK ## # Fullscreen window. # # If a particular driver doesn't have concept of fullscreen it may not support this method. # # @macro about_current #
