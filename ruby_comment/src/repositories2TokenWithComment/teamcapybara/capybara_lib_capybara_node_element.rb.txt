on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl def UNK on_lparen session on_comma base on_comma UNK # frozen_string_literal: true
UNK on_const on_op on_const on_nl def UNK on_lparen session on_comma base on_comma UNK on_comma UNK on_rparen on_ignored_nl UNK on_lparen session ## # # A {Capybara::Node::Element} represents a single element on the page. It is possible # to interact with the contents of this element the same as with a document: # # session = Capybara::Session.new(:rack_test, my_app) # # bar = session.find('#bar') # from Capybara::Node::Finders # bar.select('Baz', from: 'Quox') # from Capybara::Node::Actions # # {Capybara::Node::Element} also has access to HTML attributes and other properties of the # element: # # bar.value # bar.text # bar[:title] # # @see Capybara::Node #
def UNK on_nl synchronize on_lbrace base on_period UNK on_rbrace on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_op nil on_comma ## # # @return [Object] The native element from the driver, this allows access to driver specific methods #
def UNK on_lparen UNK on_op nil on_comma on_label UNK on_rparen on_ignored_nl UNK on_op on_symbeg UNK UNK UNK on_period UNK on_op ## # # Retrieve the text of the element. If {Capybara.configure ignore_hidden_elements} # is `true`, which it is by default, then this will return only text # which is visible. The exact semantics of this may differ between # drivers, but generally any text within elements with `display:none` is # ignored. This behaviour can be overridden by passing `:all` to this # method. # # @param type [:all, :visible] Whether to return only visible or all text # @return [String] The text of the element #
def on_op on_lparen UNK on_rparen on_ignored_nl synchronize on_lbrace base on_lbracket UNK on_rbracket on_rbrace on_nl end on_nl on_ignored_nl def UNK on_lparen ## # # Retrieve the given attribute. # # element[:title] # => HTML title attribute # # @param [Symbol] attribute The attribute to retrieve # @return [String] The value of the attribute #
def UNK on_lparen on_op styles on_rparen on_ignored_nl styles on_op styles on_period UNK on_period UNK on_lparen on_op on_symbeg UNK on_rparen on_nl ## # # Retrieve the given CSS styles. # # element.style('color', 'font-size') # => Computed values of CSS 'color' and 'font-size' styles # # @param [Array<String>] styles Names of the desired CSS properties # @return [Hash] Hash of the CSS property names to computed values #
def UNK on_nl synchronize on_lbrace base on_period UNK on_rbrace on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_comma on_op options ## # # @return [String] The value of the form element #
def UNK on_lparen UNK on_comma on_op options on_rparen on_ignored_nl if on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op UNK on_nl UNK ## # # Set the value of the form element to the given value. # # @param [String] value The new value # @param [Hash] options Driver specific options for how to set the value. Take default values from {Capybara.configure default_set_options}. # # @return [Capybara::Node::Element] The element
def UNK on_lparen on_label nil on_rparen on_ignored_nl synchronize on_lparen UNK on_rparen on_lbrace base on_period UNK on_rbrace on_nl self on_nl end ## # # Select this node if it is an option element inside a select tag. # # @!macro action_waiting_behavior # If the driver dynamic pages (JS) and the element is currently non-interactable, this method will # continuously retry the action until either the element becomes interactable or the maximum # wait time expires. # # @param [false, Numeric] wait # Maximum time to wait for the action to succeed. Defaults to {Capybara.configure default_max_wait_time}. # @return [Capybara::Node::Element] The element
def UNK on_lparen on_label nil on_rparen on_ignored_nl synchronize on_lparen UNK on_rparen on_lbrace base on_period UNK on_rbrace on_nl self on_nl end ## # # Unselect this node if it is an option element inside a multiple select tag. # # @macro action_waiting_behavior # @return [Capybara::Node::Element] The element
def UNK on_lparen on_op keys on_comma on_op options on_rparen on_ignored_nl UNK on_lparen keys on_comma on_op options on_rparen UNK on_op k ## # # Click the Element. # # @macro action_waiting_behavior # @!macro click_modifiers # Both x: and y: must be specified if an offset is wanted, if not specified the click will occur at the middle of the element. # @overload $0(*modifier_keys, wait: nil, **offset) # @param *modifier_keys [:alt, :control, :meta, :shift] ([]) Keys to be held down when clicking # @option options [Integer] x X coordinate to offset the click location. If {Capybara.configure w3c_click_offset} is `true` the # offset will be from the element center, otherwise it will be from the top left corner of the element # @option options [Integer] y Y coordinate to offset the click location. If {Capybara.configure w3c_click_offset} is `true` the # offset will be from the element center, otherwise it will be from the top left corner of the element # @option options [Float] delay Delay between the mouse down and mouse up events in seconds (0) # @return [Capybara::Node::Element] The element
def UNK on_lparen on_op keys on_comma on_op options on_rparen on_ignored_nl UNK on_lparen keys on_comma on_op options on_rparen UNK on_op k ## # # Right Click the Element. # # @macro action_waiting_behavior # @macro click_modifiers # @option options [Float] delay Delay between the mouse down and mouse up events in seconds (0) # @return [Capybara::Node::Element] The element
def UNK on_lparen on_op keys on_comma on_op options on_rparen on_ignored_nl UNK on_lparen keys on_comma on_op options on_rparen UNK on_op k ## # # Double Click the Element. # # @macro action_waiting_behavior # @macro click_modifiers # @return [Capybara::Node::Element] The element
def UNK on_lparen on_op args on_rparen on_ignored_nl synchronize on_lbrace base on_period UNK on_lparen on_op args on_rparen on_rbrace on_nl self on_nl ## # # Send Keystrokes to the Element. # # @overload send_keys(keys, ...) # @param keys [String, Symbol, Array<String,Symbol>] # # Examples: # # element.send_keys "foo" #=> value: 'foo' # element.send_keys "tet", :left, "s" #=> value: 'test' # element.send_keys [:control, 'a'], :space #=> value: ' ' - assuming ctrl-a selects all contents # # Symbols supported for keys: # * :cancel # * :help # * :backspace # * :tab # * :clear # * :return # * :enter # * :shift # * :control # * :alt # * :pause # * :escape # * :space # * :page_up # * :page_down # * :end # * :home # * :left # * :up # * :right # * :down # * :insert # * :delete # * :semicolon # * :equals # * :numpad0 # * :numpad1 # * :numpad2 # * :numpad3 # * :numpad4 # * :numpad5 # * :numpad6 # * :numpad7 # * :numpad8 # * :numpad9 # * :multiply - numeric keypad * # * :add - numeric keypad + # * :separator - numeric keypad 'separator' key ?? # * :subtract - numeric keypad - # * :decimal - numeric keypad . # * :divide - numeric keypad / # * :f1 # * :f2 # * :f3 # * :f4 # * :f5 # * :f6 # * :f7 # * :f8 # * :f9 # * :f10 # * :f11 # * :f12 # * :meta # * :command - alias of :meta # # @return [Capybara::Node::Element] The element
def UNK on_nl synchronize on_lbrace base on_period UNK on_rbrace on_nl self on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op ## # # Hover on the Element. # # @return [Capybara::Node::Element] The element
def UNK on_nl on_ivar on_op UNK on_lbracket on_symbeg UNK on_rbracket on_op synchronize on_lbrace base on_period UNK on_rbrace on_nl end on_nl ## # # @return [String] The tag name of the element #
on_ivar on_op UNK on_lbracket on_symbeg UNK on_rbracket on_op synchronize on_lbrace base on_period UNK on_rbrace on_nl end on_nl on_ignored_nl def UNK # Element type is immutable so cache it
def UNK on_nl synchronize on_lbrace base on_period UNK on_rbrace on_nl end on_nl on_ignored_nl def UNK on_nl synchronize on_lbrace base on_period ## # # Whether or not the element is visible. Not all drivers support CSS, so # the result may be inaccurate. # # @return [Boolean] Whether the element is visible #
def UNK on_nl synchronize on_lbrace base on_period UNK on_rbrace on_nl end on_nl on_ignored_nl def UNK on_nl synchronize on_lbrace base on_period ## # # Whether or not the element is currently in the viewport and it (or descendants) # would be considered clickable at the elements center point. # # @return [Boolean] Whether the elements center is obscured. #
def UNK on_nl synchronize on_lbrace base on_period UNK on_rbrace on_nl end on_nl on_ignored_nl def UNK on_nl synchronize on_lbrace base on_period ## # # Whether or not the element is checked. # # @return [Boolean] Whether the element is checked #
def UNK on_nl synchronize on_lbrace base on_period UNK on_rbrace on_nl end on_nl on_ignored_nl def UNK on_nl synchronize on_lbrace base on_period ## # # Whether or not the element is selected. # # @return [Boolean] Whether the element is selected #
def UNK on_nl synchronize on_lbrace base on_period UNK on_rbrace on_nl end on_nl on_ignored_nl def UNK on_nl synchronize on_lbrace base on_period ## # # Whether or not the element is disabled. # # @return [Boolean] Whether the element is disabled #
def UNK on_nl synchronize on_lbrace base on_period UNK on_rbrace on_nl end on_nl on_ignored_nl def UNK on_nl synchronize on_lbrace base on_period ## # # Whether or not the element is readonly. # # @return [Boolean] Whether the element is readonly #
def UNK on_nl synchronize on_lbrace base on_period UNK on_rbrace on_nl end on_nl on_ignored_nl def UNK on_nl synchronize on_lbrace base on_period ## # # Whether or not the element supports multiple results. # # @return [Boolean] Whether the element supports multiple results. #
def UNK on_nl synchronize on_lbrace base on_period UNK on_rbrace on_nl end on_nl on_ignored_nl def UNK on_nl synchronize on_lbrace base on_period ## # # An XPath expression describing where on the page the element can be found. # # @return [String] An XPath expression #
def UNK on_lparen UNK on_rparen on_ignored_nl synchronize on_lbrace base on_period UNK on_lparen UNK on_rparen on_rbrace on_nl self on_nl end on_nl ## # # Trigger any event on the current element, for example mouseover or focus # events. Not supported with the Selenium driver, and SHOULDN'T BE USED IN TESTING unless you # fully understand why you're using it, that it can allow actions a user could never # perform, and that it may completely invalidate your test. # # @param [String] event The name of the event to trigger # # @return [Capybara::Node::Element] The element
def UNK on_lparen UNK on_comma on_op options on_rparen on_ignored_nl synchronize on_lbrace base on_period UNK on_lparen UNK on_period base on_comma on_op ## # # Drag the element to the given other element. # # source = page.find('#foo') # target = page.find('#bar') # source.drag_to(target) # # @param [Capybara::Node::Element] node The element to drag to # @param [Hash] options Driver specific options for dragging. May not be supported by all drivers. # @option options [Numeric] :delay (0.05) When using Chrome/Firefox with Selenium and HTML5 dragging this is the number # of seconds between each stage of the drag. # @option options [Boolean] :html5 When using Chrome/Firefox with Selenium enables to force the use of HTML5 # (true) or legacy (false) dragging. If not specified the driver will attempt to # detect the correct method to use. # @option options [Array<Symbol>,Symbol] :drop_modifiers Modifier keys which should be held while the dragged element is dropped. # # # @return [Capybara::Node::Element] The dragged element
def UNK on_lparen on_op args on_rparen on_ignored_nl options on_op args on_period UNK UNK on_op UNK on_op on_ignored_nl UNK UNK on_period ## # # Drop items on the current element. # # target = page.find('#foo') # target.drop('/some/path/file.csv') # # @overload drop(path, ...) # @param [String, #to_path] path Location of the file to drop on the element # # @overload drop(strings, ...) # @param [Hash] strings A hash of type to data to be dropped - `{ "text/url" => "https://www.google.com" }` # # @return [Capybara::Node::Element] The element
def UNK on_lparen pos_or_el_or_x on_comma UNK on_op nil on_comma on_label on_symbeg UNK on_comma on_label nil on_rparen on_ignored_nl UNK pos_or_el_or_x on_nl ## # # Scroll the page or element. # # @overload scroll_to(position, offset: [0,0]) # Scroll the page or element to its top, bottom or middle. # @param [:top, :bottom, :center, :current] position # @param [[Integer, Integer]] offset # # @overload scroll_to(element, align: :top) # Scroll the page or current element until the given element is aligned at the top, bottom, or center of it. # @param [Capybara::Node::Element] element The element to be scrolled into view # @param [:top, :bottom, :center] align Where to align the element being scrolled into view with relation to the current page/element if possible # # @overload scroll_to(x,y) # @param [Integer] x Horizontal scroll offset # @param [Integer] y Vertical scroll offset # # @return [Capybara::Node::Element] The element
def UNK on_lparen script on_comma on_op args on_rparen on_ignored_nl session on_period UNK on_lparen UNK on_comma self on_comma on_op args on_rparen ## # # Execute the given JS in the context of the element not returning a result. This is useful for scripts that return # complex objects, such as jQuery statements. {#execute_script} should be used over # {#evaluate_script} whenever a result is not expected or needed. `this` in the script will refer to the element this is called on. # # @param [String] script A string of JavaScript to execute # @param args Optional arguments that will be passed to the script. Driver support for this is optional and types of objects supported may differ between drivers #
def UNK on_lparen script on_comma on_op args on_rparen on_ignored_nl session on_period UNK on_lparen UNK on_comma self on_comma on_op args on_rparen ## # # Evaluate the given JS in the context of the element and return the result. Be careful when using this with # scripts that return complex objects, such as jQuery statements. {#execute_script} might # be a better alternative. `this` in the script will refer to the element this is called on. # # @param [String] script A string of JavaScript to evaluate # @return [Object] The result of the evaluated JavaScript (may be driver specific) #
def UNK on_lparen script on_comma on_op args on_rparen on_ignored_nl session on_period UNK on_lparen UNK on_comma self on_comma on_op args on_rparen ## # # Evaluate the given JavaScript in the context of the element and obtain the result from a # callback function which will be passed as the last argument to the script. `this` in the # script will refer to the element this is called on. # # @param [String] script A string of JavaScript to evaluate # @return [Object] The result of the evaluated JavaScript (may be driver specific) #
def UNK on_nl UNK on_lparen UNK on_comma UNK on_rparen on_nl on_ignored_sp on_tstring_content on_ignored_sp on_tstring_content on_ignored_sp on_tstring_content on_ignored_sp on_tstring_content on_ignored_sp on_tstring_content ## # # Toggle the elements background color between white and black for a period of time. # # @return [Capybara::Node::Element] The element
def UNK on_nl UNK self UNK on_ivar on_nl on_ignored_nl UNK on_ignored_nl UNK on_op on_ivar on_period UNK on_lparen UNK on_period UNK # @api private
def UNK on_nl on_tstring_beg on_tstring_content on_embexpr_beg base on_period UNK on_embexpr_end on_tstring_content on_embexpr_beg base on_period UNK on_embexpr_end on_tstring_content on_tstring_end on_nl UNK ## # # A human-readable representation of the element. # # @return [String] A string representation
def UNK on_nl base on_period UNK on_lparen on_symbeg UNK on_rparen on_op base on_period UNK on_op on_lbrace on_rbrace on_nl end on_nl # @api private
