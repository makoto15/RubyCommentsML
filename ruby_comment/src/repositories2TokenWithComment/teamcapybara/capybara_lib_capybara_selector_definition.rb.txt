on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end # frozen_string_literal: true
def UNK on_lparen on_op allowed_filters on_comma on_op block on_rparen on_ignored_nl UNK on_lparen on_symbeg UNK on_comma allowed_filters on_comma on_op block on_rparen ## # # Define a selector by an xpath expression # # @overload xpath(*expression_filters, &block) # @param [Array<Symbol>] expression_filters ([]) Names of filters that are implemented via this expression, if not specified the names of any keyword parameters in the block will be used # @yield [locator, options] The block to use to generate the XPath expression # @yieldparam [String] locator The locator string passed to the query # @yieldparam [Hash] options The options hash passed to the query # @yieldreturn [#to_xpath, #to_s] An object that can produce an xpath expression # # @overload xpath() # @return [#call] The block that will be called to generate the XPath expression #
def UNK on_lparen on_op allowed_filters on_comma on_op block on_rparen on_ignored_nl UNK on_lparen on_symbeg UNK on_comma allowed_filters on_comma on_op block on_rparen ## # # Define a selector by a CSS selector # # @overload css(*expression_filters, &block) # @param [Array<Symbol>] expression_filters ([]) Names of filters that can be implemented via this CSS selector # @yield [locator, options] The block to use to generate the CSS selector # @yieldparam [String] locator The locator string passed to the query # @yieldparam [Hash] options The options hash passed to the query # @yieldreturn [#to_s] An object that can produce a CSS selector # # @overload css() # @return [#call] The block that will be called to generate the CSS selector #
def UNK on_lparen on_op block on_rparen on_ignored_nl on_ivar on_op block if block on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK ## # # Automatic selector detection # # @yield [locator] This block takes the passed in locator string and returns whether or not it matches the selector # @yieldparam [String], locator The locator string used to determin if it matches the selector # @yieldreturn [Boolean] Whether this selector matches the locator string # @return [#call] The block that will be used to detect selector match #
def UNK on_lparen UNK on_op nil on_rparen on_ignored_nl on_ivar on_op UNK if UNK on_nl on_ivar on_nl end on_nl on_ignored_nl UNK ## # # Set/get a descriptive label for the selector # # @overload label(label) # @param [String] label A descriptive label for this selector - used in error messages # @overload label() # @return [String] The currently set label #
UNK on_symbeg on_ivar on_comma on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op UNK on_lparen UNK on_rparen ## # # Description of the selector # # @!method description(options) # @param [Hash] options The options of the query used to generate the description # @return [String] Description of the selector when used with the options passed
def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl on_ignored_nl on_ignored_nl UNK on_symbeg ## # # Should this selector be used for the passed in locator # # This is used by the automatic selector selection mechanism when no selector type is passed to a selector query # # @param [String] locator The locator passed to the query # @return [Boolean] Whether or not to use this selector #
on_ignored_nl on_ignored_nl UNK on_symbeg on_ivar on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen on_op ## # # Define a node filter for use with this selector # # @!method node_filter(name, *types, options={}, &block) # @param [Symbol, Regexp] name The filter name # @param [Array<Symbol>] types The types of the filter - currently valid types are [:boolean] # @param [Hash] options ({}) Options of the filter # @option options [Array<>] :valid_values Valid values for this filter # @option options :default The default value of the filter (if any) # @option options :skip_if Value of the filter that will cause it to be skipped # @option options [Regexp] :matcher (nil) A Regexp used to check whether a specific option is handled by this filter. If not provided the filter will be used for options matching the filter name. # # If a Symbol is passed for the name the block should accept | node, option_value |, while if a Regexp # is passed for the name the block should accept | node, option_name, option_value |. In either case # the block should return `true` if the node passes the filer or `false` if it doesn't
on_ignored_nl UNK on_symbeg on_ivar on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen on_op UNK ## # # Define an expression filter for use with this selector # # @!method expression_filter(name, *types, matcher: nil, **options, &block) # @param [Symbol, Regexp] name The filter name # @param [Regexp] matcher (nil) A Regexp used to check whether a specific option is handled by this filter # @param [Array<Symbol>] types The types of the filter - currently valid types are [:boolean] # @param [Hash] options ({}) Options of the filter # @option options [Array<>] :valid_values Valid values for this filter # @option options :default The default value of the filter (if any) # @option options :skip_if Value of the filter that will cause it to be skipped # @option options [Regexp] :matcher (nil) A Regexp used to check whether a specific option is handled by this filter. If not provided the filter will be used for options matching the filter name. # # If a Symbol is passed for the name the block should accept | current_expression, option_value |, while if a Regexp # is passed for the name the block should accept | current_expression, option_name, option_value |. In either case # the block should return the modified expression
def UNK on_lparen UNK on_op nil on_comma on_op block on_rparen on_ignored_nl on_ivar on_op block on_op UNK on_nl end on_nl on_ignored_nl ## # # Set the default visibility mode that shouble be used if no visibile option is passed when using the selector. # If not specified will default to the behavior indicated by Capybara.ignore_hidden_elements # # @param [Symbol] default_visibility Only find elements with the specified visibility: # * :all - finds visible and invisible elements. # * :hidden - only finds invisible elements. # * :visible - only finds visible elements.
def UNK on_nl on_op on_op on_ivar on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK # @api private
def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_nl UNK nil if on_ivar on_period UNK on_period UNK on_nl # @api private
def UNK on_nl UNK nil UNK on_ivar on_nl on_ignored_nl on_const on_lparen on_ivar on_rparen on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl # @api private
