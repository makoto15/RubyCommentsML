UNK on_const def self on_period UNK on_lparen UNK on_rparen on_ignored_nl on_const on_period UNK on_op UNK on_nl on_ignored_nl UNK on_period UNK # The Strategy is the base unit of OmniAuth's ability to # wrangle multiple providers. Each strategy provided by # OmniAuth includes this mixin to gain the default functionality # necessary to be compatible with the OmniAuth library.
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl on_const on_period UNK on_op UNK on_nl on_ignored_nl UNK on_period UNK on_const on_nl # rubocop:disable ModuleLength
def default_options on_nl UNK on_op UNK on_period respond_to? on_lparen on_symbeg default_options on_rparen on_op UNK on_period default_options on_op on_lbrace on_rbrace on_nl # Returns an inherited set of default options set at the class-level # for each strategy.
UNK on_op UNK on_period respond_to? on_lparen on_symbeg default_options on_rparen on_op UNK on_period default_options on_op on_lbrace on_rbrace on_nl on_ivar on_op on_const # existing = superclass.default_options if superclass.respond_to?(:default_options)
def UNK on_lparen options on_op nil on_rparen on_ignored_nl if UNK on_nl UNK default_options on_nl else on_ignored_nl default_options on_period UNK on_lparen # This allows for more declarative subclassing of strategies by allowing # default options to be set using a simple configure call. # # @param options [Hash] If supplied, these will be the default options (deep-merged into the superclass's default options). # @yield [Options] The options Mash that allows you to set your defaults as you'd like. # # @example Using a yield to configure the default options. # # class MyStrategy # include OmniAuth::Strategy # # configure do |c| # c.foo = 'bar' # end # end # # @example Using a hash to configure the default options. # # class MyStrategy # include OmniAuth::Strategy # configure foo: 'bar' # end
def UNK on_lparen name on_comma UNK on_op nil on_rparen on_ignored_nl default_options on_lbracket name on_rbracket on_op UNK on_nl end on_nl on_ignored_nl # Directly declare a default option for your class. This is a useful from # a documentation perspective as it provides a simple line-by-line analysis # of the kinds of options your strategy provides by default. # # @param name [Symbol] The key of the default option in your configuration hash. # @param value [Object] The value your object defaults to. Nil if not provided. # # @example # # class MyStrategy # include OmniAuth::Strategy # # option :foo, 'bar' # option # end
def args on_lparen args on_op nil on_rparen on_ignored_nl if args on_nl on_ivar on_op on_const on_lparen args on_rparen on_nl return on_nl # Sets (and retrieves) option key names for initializer arguments to be # recorded as. This takes care of 90% of the use cases for overriding # the initializer in OmniAuth Strategies.
def UNK on_lparen UNK on_comma on_op args on_comma on_op UNK on_rparen on_ivar on_op UNK on_nl on_ivar on_op nil on_nl on_ivar # Initializes the strategy by passing in the Rack endpoint, # the unique URL segment name for this strategy, and any # additional arguments. An `options` hash is automatically # created from the last argument if it is a hash. # # @param app [Rack application] The application on which this middleware is applied. # # @overload new(app, options = {}) # If nothing but a hash is supplied, initialized with the supplied options # overriding the strategy's default options via a deep merge. # @overload new(app, *args, options = {}) # If the strategy has supplied custom arguments that it accepts, they may # will be passed through and set to the appropriate values. # # @yield [Options] Yields options to block for further configuration.
on_ivar on_op UNK on_nl on_ivar on_op nil on_nl on_ivar on_op self on_period class on_period default_options on_period UNK on_nl on_ignored_nl options # rubocop:disable UnusedMethodArgument
UNK on_lparen on_const on_period new on_lparen on_tstring_beg on_tstring_content on_embexpr_beg args on_period UNK on_embexpr_end on_tstring_end on_rparen on_rparen unless args on_period UNK # Make sure that all of the args have been dealt with, otherwise error out.
def log on_lparen UNK on_comma UNK on_rparen on_ignored_nl on_const on_period UNK on_period UNK on_lparen UNK on_comma on_tstring_beg on_tstring_content on_embexpr_beg name # Direct access to the OmniAuth logger, automatically prefixed # with this strategy's name. # # @example # log :warn, "This is a warning."
def call on_lparen env on_rparen on_ignored_nl UNK on_period UNK on_lparen env on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen env # Duplicates this instance and runs #call! on it. # @param [Hash] The Rack environment.
def UNK on_lparen env on_rparen unless env on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl UNK on_op on_const on_op on_const on_period new # The logic for dispatching any additional actions that need # to be taken. For instance, calling the request phase if # the request path is recognized. # # @param env [Hash] The Rack environment.
unless env on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl UNK on_op on_const on_op on_const on_period new on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen # rubocop:disable CyclomaticComplexity, PerceivedComplexity
def UNK on_nl on_const on_period config on_period UNK on_period call on_lparen env on_rparen if on_const on_period config on_period UNK on_nl # Responds to an OPTIONS request.
def UNK UNK on_nl log on_symbeg info on_comma on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl session on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op # Performs the steps necessary to run the request phase of a strategy.
UNK on_nl log on_symbeg info on_comma on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl session on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op request on_period # rubocop:disable CyclomaticComplexity, MethodLength, PerceivedComplexity
session on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op request on_period on_const on_nl on_const on_period config on_period UNK on_period call on_lparen env # store query params from the request url, extracted in the callback_phase
def UNK on_nl UNK on_nl log on_symbeg info on_comma on_tstring_beg on_tstring_content on_tstring_end on_nl on_ivar on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op # Performs the steps necessary to run the callback phase of a strategy.
def UNK on_nl UNK on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl if options on_lbracket on_symbeg request_path on_rbracket on_period # Returns true if the environment recognizes either the # request or callback path.
def UNK on_lparen on_op on_rparen on_ignored_nl return UNK if UNK on_op on_const on_period config on_period UNK on_period UNK on_lparen request # This is called in lieu of the normal request process # in the event that OmniAuth has been configured to be # in test mode.
def UNK on_nl if options on_lbracket on_symbeg UNK on_rbracket on_period respond_to? on_lparen on_symbeg call on_rparen on_nl log on_symbeg info on_comma # The setup phase looks for the `:setup` option to exist and, # if it is, will call either the Rack endpoint supplied to the # `:setup` option or it will call out to the setup path of the # underlying application. This will default to `/auth/:provider/setup`.
def UNK on_nl UNK on_lparen on_const on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl self on_period class on_period UNK on_lparen # @abstract This method is called when the user is on the request path. You should # perform any information gathering you need to be able to authenticate # the user in this phase.
def UNK on_nl return UNK unless options on_period UNK on_nl return UNK unless options on_period UNK on_period respond_to? on_lparen on_symbeg # Determines whether or not user info should be retrieved. This # allows some strategies to save a call to an external API service # for existing users. You can use it either by setting the `:skip_info` # to true or by setting `:skip_info` to a Proc that takes a uid and # evaluates to true when you would like to skip info. # # @example # # use MyStrategy, :skip_info => lambda{|uid| User.find_by_uid(uid)}
if request on_period UNK on_op request on_period UNK on_period UNK on_lparen on_const on_op on_const on_rparen on_nl uri on_op on_const on_period # in Rack 1.3.x, request.url explodes if scheme is nil
uri on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end if UNK uri on_period UNK on_nl else on_tstring_beg on_tstring_end on_nl end on_nl end # sometimes the url is actually showing http inside rails because the # other layers (like nginx) have handled the ssl termination.
uri on_period UNK on_nl else on_tstring_beg on_tstring_end on_nl end on_nl end on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op # rubocop:disable BlockNesting
