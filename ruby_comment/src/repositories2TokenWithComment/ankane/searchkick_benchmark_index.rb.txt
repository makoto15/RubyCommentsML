on_const on_op on_const on_period UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl on_const on_op on_const on_period UNK on_op UNK on_nl on_ignored_nl UNK # ActiveRecord::Base.establish_connection adapter: "sqlite3", database: "/tmp/searchkick"
on_ignored_nl on_const on_op on_const on_period UNK on_op UNK on_nl on_ignored_nl UNK on_const on_op on_const on_op on_const on_nl UNK on_label UNK # ActiveRecord::Base.logger = Logger.new(STDOUT)
UNK on_op on_const on_period UNK on_ignored_nl end on_nl on_ignored_nl puts on_nl puts on_tstring_beg on_tstring_content UNK UNK on_period UNK on_lparen UNK # result = RubyProf.profile do # report = MemoryProfiler.report do # stats = AllocationStats.trace do
on_ignored_nl end on_nl on_ignored_nl puts on_nl puts on_tstring_beg on_tstring_content UNK UNK on_period UNK on_lparen UNK on_rparen UNK on_tstring_content on_tstring_end on_nl #(async: true) # p reindex # end
end on_nl on_ignored_nl puts on_nl puts on_tstring_beg on_tstring_content UNK UNK on_period UNK on_lparen UNK on_rparen UNK on_tstring_content on_tstring_end on_nl on_ignored_nl # 60.times do |i| # if reindex.is_a?(Hash) # docs = Searchkick::Index.new(reindex[:index_name]).total_docs # else # docs = Product.searchkick_index.total_docs # end # puts "#{i}: #{docs}" # if docs == total_docs # break # end # p Searchkick.reindex_status(reindex[:index_name]) if reindex.is_a?(Hash) # sleep(1) # # Product.searchkick_index.refresh # end
