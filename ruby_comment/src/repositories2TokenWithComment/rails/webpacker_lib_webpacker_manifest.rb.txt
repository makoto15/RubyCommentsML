UNK on_const on_op on_const on_nl UNK on_const on_op on_const UNK end on_nl on_ignored_nl UNK on_symbeg config on_comma on_symbeg UNK on_comma # Singleton registry for accessing the packs path using a generated manifest. # This allows javascript_pack_tag, stylesheet_pack_tag, asset_pack_path to take a reference to, # say, "calendar.js" or "calendar.css" and turn it into "/packs/calendar-1016838bab065ae1e314.js" or # "/packs/calendar-1016838bab065ae1e314.css". # # When the configuration is set to on-demand compilation, with the `compile: true` option in # the webpacker.yml file, any lookups will be preceded by a compilation if one is needed.
def UNK on_lparen name on_comma pack_type on_op on_lbrace on_rbrace on_rparen on_ignored_nl UNK UNK UNK on_nl on_ignored_nl UNK on_lparen UNK on_lparen # Computes the relative path for a given Webpacker asset using manifest.json. # If no asset is found, returns nil. # # Example: # # Webpacker.manifest.lookup('calendar.js') # => "/packs/calendar-1016838bab065ae1e122.js"
def UNK on_lparen name on_comma pack_type on_op on_lbrace on_rbrace on_rparen on_ignored_nl UNK on_lparen name on_comma pack_type on_rparen on_op UNK on_lparen # Like lookup, except that if no asset is found, raises a Webpacker::Manifest::MissingEntryError.
def UNK on_lparen name on_comma pack_type on_rparen on_ignored_nl UNK name UNK on_const on_period UNK on_lparen name on_period UNK on_rparen on_period # The `manifest_name` method strips of the file extension of the name, because in the # manifest hash the entrypoints are defined by their pack name without the extension. # When the user provides a name with a file extension, we want to try to strip it off.
