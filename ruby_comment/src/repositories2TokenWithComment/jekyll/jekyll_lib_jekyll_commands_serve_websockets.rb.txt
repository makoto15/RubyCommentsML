on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const # frozen_string_literal: true
UNK on_const on_op on_const on_op on_const on_op on_const on_nl UNK UNK UNK on_comma UNK UNK on_nl on_ignored_nl UNK UNK on_lparen # The LiveReload protocol requires the server to serve livereload.js over HTTP # despite the fact that the protocol itself uses WebSockets. This custom connection # class addresses the dual protocols that the server needs to understand.
on_ignored_nl on_ignored_nl UNK on_op UNK UNK on_nl UNK on_lparen UNK on_rparen on_nl on_ignored_nl UNK on_op on_const on_period UNK on_lparen on_const # If EventMachine SSL support on Windows ever gets better, the code below will # set up the reactor to handle SSL # # @ssl_enabled = opts["ssl_cert"] && opts["ssl_key"] # if @ssl_enabled # em_opts[:tls_options] = { # :private_key_file => Jekyll.sanitized_path(opts["source"], opts["ssl_key"]), # :cert_chain_file => Jekyll.sanitized_path(opts["source"], opts["ssl_cert"]) # } # em_opts[:secure] = true # end
on_ignored_nl UNK on_op UNK UNK on_nl UNK on_lparen UNK on_rparen on_nl on_ignored_nl UNK on_op on_const on_period UNK on_lparen on_const on_period # This is too noisy even for --verbose, but uncomment if you need it for # a specific WebSockets issue. Adding ?LR-verbose=true onto the URL will # enable logging on the client side. # em_opts[:debug] = true
UNK UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op on_const on_op on_const on_period UNK on_nl UNK on_op UNK on_nl on_ignored_nl UNK # rubocop:disable Metrics/MethodLength
UNK UNK on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_op UNK on_period UNK on_nl UNK on_nl UNK UNK on_period UNK on_period # WebSockets requests will have a Connection: Upgrade header
UNK on_lparen UNK on_rparen on_nl UNK on_nl UNK on_ignored_nl UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_op UNK on_ignored_nl on_tstring_beg # stream_file_data would free us from keeping livereload.js in memory # but JRuby blocks on that call and never returns
end on_nl end on_nl end on_nl end on_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP # rubocop:enable Metrics/MethodLength
