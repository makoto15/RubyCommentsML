on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK # frozen_string_literal: true
def UNK on_lparen input on_rparen on_ignored_nl on_ivar on_period UNK on_lbracket on_symbeg UNK on_rbracket on_period UNK on_lparen on_ignored_nl on_const on_op on_const # Convert a Markdown string into HTML output. # # input - The Markdown String to convert. # # Returns the HTML formatted String.
def UNK on_lparen input on_rparen on_ignored_nl on_ivar on_period UNK on_lbracket on_symbeg UNK on_rbracket on_period UNK on_lparen on_ignored_nl on_const on_op on_const # Convert quotes into smart quotes. # # input - The String to convert. # # Returns the smart-quotified String.
def UNK on_lparen input on_rparen on_ignored_nl on_ivar on_period UNK on_lbracket on_symbeg UNK on_rbracket on_period UNK on_lparen on_ignored_nl on_const on_op on_const # Convert a Sass string into CSS output. # # input - The Sass String to convert. # # Returns the CSS formatted String.
def UNK on_lparen input on_rparen on_ignored_nl on_ivar on_period UNK on_lbracket on_symbeg UNK on_rbracket on_period UNK on_lparen on_ignored_nl on_const on_op on_const # Convert a Scss string into CSS output. # # input - The Scss String to convert. # # Returns the CSS formatted String.
def UNK on_lparen input on_comma UNK on_op UNK on_rparen on_ignored_nl on_const on_period UNK on_lparen input on_comma on_symbeg UNK on_op UNK # Slugify a filename or title. # # input - The filename or title to slugify. # mode - how string is slugified # # Returns the given filename or title as a lowercase URL String. # See Utils.slugify for more detail.
def UNK on_lparen input on_rparen on_ignored_nl input on_period to_s on_period UNK on_lparen on_symbeg UNK on_op on_symbeg UNK on_rparen on_period UNK # XML escape a string for use. Replaces any special characters with # appropriate HTML entity replacements. # # input - The String to escape. # # Examples # # xml_escape('foo "bar" <baz>') # # => "foo &quot;bar&quot; &lt;baz&gt;" # # Returns the escaped String.
def UNK on_lparen input on_rparen on_ignored_nl on_const on_period UNK on_lparen input on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen input # CGI escape a string for use in a URL. Replaces any special characters # with appropriate %XX replacements. # # input - The String to escape. # # Examples # # cgi_escape('foo,bar;baz?') # # => "foo%2Cbar%3Bbaz%3F" # # Returns the escaped String.
def UNK on_lparen input on_rparen on_ignored_nl on_const on_op on_const on_period UNK on_lparen input on_rparen on_nl end on_nl on_ignored_nl def UNK # URI escape a string. # # input - The String to escape. # # Examples # # uri_escape('foo, bar \\baz?') # # => "foo,%20bar%20%5Cbaz?" # # Returns the escaped String.
def UNK on_lparen input on_rparen on_ignored_nl input on_period to_s on_period UNK on_lparen UNK on_tstring_content UNK on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen # Replace any whitespace in the input string with a single space # # input - The String on which to operate. # # Returns the formatted String
def UNK on_lparen input on_rparen on_ignored_nl input on_period UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen array on_comma # Count the number of words in the input string. # # input - The String on which to operate. # # Returns the Integer word count.
def UNK on_lparen array on_comma UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_rparen on_ignored_nl UNK array on_period UNK on_nl when on_int on_nl # Join an array of things into a string by separating with commas and the # word "and" for the last one. # # array - The Array of Strings to join. # connector - Word used to connect the last 2 items in the array # # Examples # # array_to_sentence_string(["apples", "oranges", "grapes"]) # # => "apples, oranges, and grapes" # # Returns the formatted String.
def UNK on_lparen input on_rparen on_ignored_nl UNK on_lparen input on_rparen on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen input # Convert the input into json string # # input - The Array or Hash to be converted # # Returns the converted json string
def UNK on_lparen input on_comma property on_comma UNK on_rparen on_ignored_nl return input if on_op property on_op UNK on_period is_a? on_lparen # Filter an array of objects # # input - the object array. # property - the property within each object to filter by. # value - the desired value. # Cannot be an instance of Array nor Hash since calling #to_s on them returns # their `#inspect` string object. # # Returns the filtered array of objects
on_ivar on_op on_lbrace on_rbrace on_nl on_ivar on_lbracket UNK on_rbracket on_op on_lbrace on_rbrace on_nl on_ivar on_lbracket UNK on_rbracket on_lbracket property on_rbracket # implement a hash based on method parameters to cache the end-result # for given parameters.
on_ivar on_lbracket UNK on_rbracket on_lbracket property on_rbracket on_lbracket UNK on_rbracket on_op UNK on_ignored_nl input on_period UNK do on_op UNK on_op # stash or retrive results to return
def UNK on_lparen input on_comma UNK on_comma UNK on_rparen on_ignored_nl return input unless input on_period respond_to? on_lparen on_symbeg UNK on_rparen # Filters an array of objects against an expression # # input - the object array # variable - the variable to assign each item to in the expression # expression - a Liquid comparison expression passed in as a string # # Returns the filtered array of objects
on_ignored_nl condition on_op UNK on_lparen UNK on_rparen on_nl on_ivar on_period UNK do on_ignored_nl input on_period UNK do on_op UNK on_op # FIXME
def UNK on_lparen input on_rparen on_ignored_nl return on_int if input on_op UNK on_nl return on_int if input on_op UNK on_nl # Convert the input into integer # # input - the object string # # Returns the integer value
def UNK on_lparen input on_comma property on_op UNK on_comma UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_rparen on_ignored_nl UNK on_const on_comma on_tstring_beg # Sort an array of objects # # input - the object array # property - property within each object to filter by # nils ('first' | 'last') - nils appear before or after non-nil values # # Returns the filtered array of objects
def UNK on_lparen input on_rparen on_ignored_nl UNK on_lparen input on_period UNK on_rparen on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl def # Convert an object into its String representation for debugging # # input - The Object to be converted # # Returns a String representation of the object.
def UNK on_lparen input on_comma property on_comma order on_rparen on_ignored_nl input on_period UNK on_lbrace on_op item on_op on_lbracket UNK on_lparen # Sort the input Enumerable by the given property. # If the property doesn't exist, return the sort order respective of # which item doesn't have the property. # We also utilize the Schwartzian transform to make this more efficient.
def UNK on_lparen property on_comma target on_rparen on_ignored_nl UNK target on_nl when on_const on_nl return UNK if property on_period nil? # `where` filter helper # # rubocop:disable Metrics/CyclomaticComplexity # rubocop:disable Metrics/PerceivedComplexity
target on_op target on_period to_s on_nl return UNK if property on_op target on_op on_const on_lparen property on_rparen on_period UNK on_op # `empty` or `blank`
on_ignored_nl def UNK on_lparen item on_comma property on_rparen on_ignored_nl on_ivar on_op on_lbrace on_rbrace on_nl on_ivar on_lbracket property on_rbracket on_op on_lbrace # rubocop:enable Metrics/CyclomaticComplexity # rubocop:enable Metrics/PerceivedComplexity
def UNK on_lparen property on_rparen on_ignored_nl UNK on_op property on_period to_s on_nl return property on_period UNK if on_const on_period UNK # return numeric values as numbers for proper sorting
if UNK on_op item on_nl item on_nl else on_ignored_nl UNK on_lparen UNK on_rparen on_nl end on_nl else on_ignored_nl item on_nl # prevent infinite recursion for simple types (which return `self`)
on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl parser on_op on_const on_op on_const on_period UNK on_lparen UNK on_rparen on_nl condition on_op # ----------- The following set of code was *adapted* from Liquid::If # ----------- ref: https://git.io/vp6K6
def UNK on_lparen UNK on_rparen on_ignored_nl parser on_op on_const on_op on_const on_period UNK on_lparen UNK on_rparen on_nl condition on_op UNK # Parse a string to a Liquid Condition
def UNK on_lparen parser on_rparen on_ignored_nl condition on_op UNK on_lparen parser on_rparen on_nl UNK on_op condition on_nl UNK on_lparen UNK # Generate a Liquid::Condition object from a Liquid::Parser object additionally processing # the parsed expression based on whether the expression consists of binary operations with # Liquid operators `and` or `or` # # - parser: an instance of Liquid::Parser # # Returns an instance of Liquid::Condition
def UNK on_lparen parser on_rparen on_ignored_nl UNK on_op on_const on_op on_const on_period UNK on_lparen parser on_period UNK on_rparen on_nl UNK # Generates a Liquid::Condition object from a Liquid::Parser object based on whether the parsed # expression involves a "comparison" operator (e.g. <, ==, >, !=, etc) # # - parser: an instance of Liquid::Parser # # Returns an instance of Liquid::Condition
return on_const on_op on_const on_period UNK on_lparen UNK on_rparen unless UNK on_nl on_ignored_nl on_const on_op on_const on_period UNK on_lparen UNK # No comparison-operator detected. Initialize a Liquid::Condition using only left operand
on_const on_op on_const on_period UNK on_lparen UNK on_comma UNK on_comma on_const on_op on_const on_period UNK on_lparen parser on_period UNK on_rparen # Parse what remained after extracting the left operand and the `:comparison` operator # and initialize a Liquid::Condition object using the operands and the comparison-operator
