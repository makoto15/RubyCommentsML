on_ignored_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_op UNK on_nl UNK on_symbeg options on_comma on_symbeg UNK on_nl # Frozen-string-literal: true
UNK on_const on_op on_const on_nl UNK on_op UNK on_nl UNK on_symbeg options on_comma on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen # A Kramdown::Document subclass meant to optimize memory usage from initializing # a kramdown document for parsing. # # The optimization is by using the same options Hash (and its derivatives) for # converting all Markdown documents in a Jekyll site.
def UNK on_lparen options on_rparen on_ignored_nl on_ivar on_op on_lbrace on_rbrace on_nl on_ignored_nl UNK on_ivar on_lbracket on_symbeg UNK on_rbracket on_op options # The implementation is basically the core logic in +Kramdown::Document#initialize+ # # rubocop:disable Naming/MemoizedInstanceVariableName
UNK on_ivar on_lbracket on_symbeg UNK on_rbracket on_op options on_period UNK on_nl on_ivar on_op on_ivar on_op UNK on_nl on_ivar on_lbracket on_symbeg # reset variables on a subsequent set up with a different options Hash
on_ignored_nl UNK on_nl on_ignored_nl def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_content on_embexpr_beg # rubocop:enable Naming/MemoizedInstanceVariableName
def UNK on_nl UNK on_comma UNK on_op on_const on_op on_const on_op on_const on_period UNK on_lparen on_ivar on_comma on_ivar on_rparen on_nl # Use Kramdown::Converter::Html class to convert this document into HTML. # # The implementation is basically an optimized version of core logic in # +Kramdown::Document#method_missing+ from kramdown-2.1.0.
on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl on_const on_op on_lbrace on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end #
on_ignored_nl def UNK on_nl on_ivar on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op UNK on_nl on_ivar on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op # Setup and normalize the configuration: # * Create Kramdown if it doesn't exist. # * Set syntax_highlighter, detecting enable_coderay and merging # highlighter if none. # * Merge kramdown[coderay] into syntax_highlighter_opts stripping coderay_. # * Make sure `syntax_highlighter_opts` exists.
UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op on_const on_op on_const on_period UNK on_lparen UNK # XXX: Legacy.
if on_lparen UNK on_op on_ivar on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_rparen on_op UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_op # `mathjax` emgine is bundled within kramdown-2.x and will be handled by # kramdown itself.
def UNK on_nl UNK on_ivar if on_ivar on_nl on_ignored_nl if on_ivar on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl UNK on_ivar on_op # config[kramdown][syntax_higlighter] > # config[kramdown][enable_coderay] > # config[highlighter] # Where `enable_coderay` is now deprecated because Kramdown # supports Rouge now too.
def UNK on_nl UNK on_ivar on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period UNK on_nl on_const on_op on_const on_period UNK on_lparen on_ignored_nl # If our highlighter is CodeRay we go in to merge the CodeRay defaults # with your "coderay" key if it's there, deprecating it in the # process of you using it.
