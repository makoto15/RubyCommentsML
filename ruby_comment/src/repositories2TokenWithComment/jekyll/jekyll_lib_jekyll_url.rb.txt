on_ignored_nl UNK on_const on_nl UNK on_const on_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op UNK on_lbracket UNK template on_rbracket # frozen_string_literal: true
UNK on_const on_nl UNK on_const on_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op UNK on_lbracket UNK template on_rbracket on_nl # Public: Methods that generate a URL for a resource such as a Post or a Page. # # Examples # # URL.new({ # :template => /:categories/:title.html", # :placeholders => {:categories => "ruby", :title => "something"} # }).to_s #
def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op UNK on_lbracket UNK template on_rbracket on_nl on_ivar on_op UNK on_lbracket UNK UNK # options - One of :permalink or :template must be supplied. # :template - The String used as template for URL generation, # for example "/:path/:basename:output_ext", where # a placeholder is prefixed with a colon. # :placeholders - A hash containing the placeholders which will be # replaced when used inside the template. E.g. # { "year" => Time.now.strftime("%Y") } would replace # the placeholder ":year" with the current year. # :permalink - If supplied, no URL will be generated from the # template. Instead, the given permalink will be # used as URL.
def UNK on_nl UNK on_lparen UNK on_op UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl on_lparen on_ivar on_op UNK # The generated relative URL of the resource # # Returns the String URL
def UNK on_nl on_lparen on_ivar on_op UNK on_lparen on_ivar on_rparen on_rparen if on_ivar on_nl end on_nl on_ignored_nl def UNK on_nl # Generates a URL from the permalink # # Returns the _unsanitized String URL
def UNK on_nl on_ivar on_op UNK on_lparen on_ivar on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen template on_rparen on_ignored_nl if # Generates a URL from the template # # Returns the unsanitized String URL
def UNK on_lparen template on_rparen on_ignored_nl if on_ivar on_period UNK on_const on_op on_const on_nl UNK on_lparen template on_rparen on_nl UNK # Internal: Generate the URL by replacing all placeholders with their # respective values in the given template # # Returns the unsanitized String URL
UNK on_period UNK on_lparen on_tstring_beg on_tstring_content UNK UNK on_period UNK UNK on_tstring_end on_comma on_tstring_beg on_tstring_end on_rparen on_nl UNK on_ignored_nl UNK # Remove leading "/" to avoid generating urls with `//`
def UNK on_lparen key on_rparen on_ignored_nl if key on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_lbracket key on_comma key # We include underscores in keys to allow for 'i_month' and so forth. # This poses a problem for keys which are followed by an underscore # but the underscore is not part of the key, e.g. '/:month_:day'. # That should be :month and :day, but our key extraction regexp isn't # smart enough to know that so we have to make it an explicit # possibility.
on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_tstring_beg on_tstring_content UNK UNK UNK on_tstring_end on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma # Returns a sanitized String URL, stripping "../../" and multiples of "/", # as well as the beginning "/" so we can enforce and ensure it.
def UNK on_period UNK on_lparen path on_rparen on_ignored_nl UNK path if path on_period UNK on_op UNK on_tstring_content UNK on_period UNK # Escapes a path to be a valid URL path segment # # path - The path to be escaped. # # Examples: # # URL.escape_path("/a b") # # => "/a%20b" # # Returns the escaped path.
on_const on_op on_const on_period UNK on_lparen path on_rparen on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period UNK on_lparen on_tstring_beg on_tstring_content # Because URI.escape doesn't escape "?", "[" and "]" by default, # specify unsafe string (except unreserved, sub-delims, ":", "@" and "/"). # # URI path segment is defined in RFC 3986 as follows: # segment = *pchar # pchar = unreserved / pct-encoded / sub-delims / ":" / "@" # unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~" # pct-encoded = "%" HEXDIG HEXDIG # sub-delims = "!" / "$" / "&" / "'" / "(" / ")" # / "*" / "+" / "," / ";" / "="
def UNK on_period UNK on_lparen path on_rparen on_ignored_nl path on_op path on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl UNK # Unescapes a URL path segment # # path - The path to be unescaped. # # Examples: # # URL.unescape_path("/a%20b") # # => "/a b" # # Returns the unescaped path.
