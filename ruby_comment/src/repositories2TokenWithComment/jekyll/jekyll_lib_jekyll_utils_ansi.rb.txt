on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK UNK on_nl on_ignored_nl on_const on_op UNK on_lparen on_tstring_beg on_tstring_content # Frozen-string-literal: true
on_ignored_nl UNK UNK on_lparen str on_rparen on_ignored_nl str UNK UNK on_const on_comma on_tstring_beg on_tstring_end on_nl end on_nl on_ignored_nl on_ignored_nl UNK # Strip ANSI from the current string. It also strips cursor stuff, # well some of it, and it also strips some other stuff that a lot of # the other ANSI strippers don't.
on_ignored_nl UNK UNK on_lparen str on_rparen on_ignored_nl on_op on_op on_lparen str on_op on_const on_rparen on_nl end on_nl on_ignored_nl on_ignored_nl UNK #
on_ignored_nl UNK UNK on_lparen str on_op on_tstring_beg on_tstring_end on_rparen on_ignored_nl UNK on_op UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_int on_rparen # Reset the color back to the default color so that you do not leak any # colors when you move onto the next line. This is probably normally # used as part of a wrapper so that we don't leak colors.
on_ignored_nl on_const UNK UNK UNK on_op UNK on_comma UNK on_op on_ignored_nl UNK UNK UNK on_op str on_op on_ignored_nl on_tstring_beg on_embexpr_beg # SEE: `self::COLORS` for a list of methods. They are mostly # standard base colors supported by pretty much any xterm-color, we do # not need more than the base colors so we do not include them. # Actually... if I'm honest we don't even need most of the # base colors.
