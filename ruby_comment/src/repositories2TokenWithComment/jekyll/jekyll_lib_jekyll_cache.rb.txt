on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl on_ivar on_op UNK UNK on_nl on_ignored_nl on_ivar # frozen_string_literal: true
on_ivar on_op UNK UNK on_nl on_ignored_nl on_ivar on_op UNK on_nl on_ignored_nl UNK on_op UNK on_nl UNK UNK UNK on_nl on_ignored_nl # class-wide base cache
on_ivar on_op UNK on_nl on_ignored_nl UNK on_op UNK on_nl UNK UNK UNK on_nl on_ignored_nl UNK UNK UNK on_nl on_ignored_nl UNK # class-wide directive to write cache to disk is enabled by default
UNK UNK UNK on_nl on_ignored_nl UNK UNK UNK on_nl on_ignored_nl UNK UNK UNK on_nl on_ignored_nl def UNK on_nl on_ivar on_op # class-wide cache location
UNK UNK UNK on_nl on_ignored_nl UNK UNK UNK on_nl on_ignored_nl def UNK on_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl # class-wide directive to write cache to disk
UNK UNK UNK on_nl on_ignored_nl def UNK on_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_nl # class-wide base cache reader
def UNK on_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_nl UNK on_period UNK on_lparen on_op # Disable Marshaling cached items to disk
def UNK on_nl UNK on_nl UNK on_period UNK on_lparen on_op UNK UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen # Clear all caches
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_nl UNK on_op on_const on_op on_const on_period UNK on_tstring_beg # Compare the current config to the cached config # If they are different, clear all caches # # Returns nothing.
def UNK on_nl on_const on_period UNK on_lparen on_ivar on_rparen if UNK on_nl end on_nl end on_nl on_ignored_nl on_ignored_nl def UNK # Delete all cached items from all caches # # Returns nothing.
on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op on_const on_op on_const on_period UNK on_lbracket UNK on_rbracket on_op UNK UNK #
def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op on_const on_op on_const on_period UNK on_lbracket UNK on_rbracket on_op UNK UNK on_nl # Get an existing named cache, or create a new one if none exists # # name - name of the cache # # Returns nothing.
def UNK on_nl UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def on_op on_lparen key on_rparen on_ignored_nl return on_ivar # Clear this particular cache
def on_op on_lparen key on_rparen on_ignored_nl return on_ivar on_lbracket key on_rbracket if on_ivar on_period UNK on_lparen key on_rparen on_nl on_ignored_nl # Retrieve a cached item # Raises if key does not exist in cache # # Returns cached value
def on_op on_lparen key on_comma value on_rparen on_ignored_nl on_ivar on_lbracket key on_rbracket on_op value on_nl return UNK disk_cache_enabled? on_nl on_ignored_nl # Add an item to cache # # Returns nothing.
def UNK on_lparen key on_rparen on_ignored_nl UNK on_lbracket key on_rbracket on_nl UNK on_const on_nl value on_op UNK on_nl UNK on_lbracket # If an item already exists in the cache, retrieve it. # Else execute code block, and add the result to the cache, and return that result.
def UNK on_lparen key on_rparen on_ignored_nl on_ivar on_period UNK on_lparen key on_rparen on_nl on_const on_period UNK on_lparen path_to on_lparen hash # Remove one particular item from the cache # # Returns nothing.
def UNK on_lparen key on_rparen on_ignored_nl return UNK if on_ivar on_period UNK on_lparen key on_rparen on_nl return UNK UNK disk_cache_enabled? # Check if `key` already exists in this cache # # Returns true if key exists in the cache, false otherwise
return UNK if on_ivar on_period UNK on_lparen key on_rparen on_nl return UNK UNK disk_cache_enabled? on_nl on_ignored_nl path on_op path_to on_lparen # First, check if item is already cached in memory
return UNK UNK disk_cache_enabled? on_nl on_ignored_nl path on_op path_to on_lparen hash on_lparen key on_rparen on_rparen on_nl on_const on_period UNK on_lparen # Otherwise, it might be cached on disk # but we should not consider the disk cache if it is disabled
def path_to on_lparen hash on_op UNK on_rparen on_ignored_nl on_ivar on_op on_const on_period UNK on_lparen on_const on_op on_const on_period UNK on_comma # Given a hashed key, return the path to where this item would be saved on disk.
def hash on_lparen key on_rparen on_ignored_nl on_const on_op on_const on_period UNK on_lparen key on_rparen on_period UNK on_nl end on_nl on_ignored_nl # Given a key, return a SHA2 hash that can be used for caching this item to disk.
def UNK on_nl on_const on_period UNK on_lparen path_to on_rparen if disk_cache_enabled? on_nl end on_nl on_ignored_nl def UNK on_lparen path on_rparen # Remove all this caches items from disk # # Returns nothing.
def UNK on_lparen path on_rparen on_ignored_nl UNK UNK disk_cache_enabled? on_nl on_ignored_nl UNK on_op on_const on_period UNK on_lparen path on_comma on_tstring_beg # Load `path` from disk and return the result. # This MUST NEVER be called in Safe Mode # rubocop:disable Security/MarshalLoad
on_ignored_nl def UNK on_lparen path on_comma value on_rparen on_ignored_nl return UNK disk_cache_enabled? on_nl on_ignored_nl on_const on_period UNK on_lparen on_const on_period # rubocop:enable Security/MarshalLoad
def UNK on_lparen path on_comma value on_rparen on_ignored_nl return UNK disk_cache_enabled? on_nl on_ignored_nl on_const on_period UNK on_lparen on_const on_period UNK # Given a path and a value, save value to disk at path. # This should NEVER be called in Safe Mode # # Returns nothing.
