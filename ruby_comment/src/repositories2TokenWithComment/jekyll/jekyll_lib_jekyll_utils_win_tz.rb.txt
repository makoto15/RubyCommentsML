on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK UNK on_nl on_ignored_nl UNK UNK on_lparen UNK on_rparen on_ignored_nl # frozen_string_literal: true
UNK UNK on_lparen UNK on_rparen on_ignored_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen UNK UNK on_lparen on_const on_rparen on_nl # Public: Calculate the Timezone for Windows when the config file has a defined # 'timezone' key. # # timezone - the IANA Time Zone specified in "_config.yml" # # Returns a string that ultimately re-defines ENV["TZ"] in Windows
UNK on_op UNK on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_op on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_op UNK on_op on_tstring_beg on_tstring_content # # POSIX style definition reverses the offset sign. # e.g. Eastern Standard Time (EST) that is 5Hrs. to the 'west' of Prime Meridian # is denoted as: # EST+5 (or) EST+05:00 # Reference: http://www.gnu.org/software/libc/manual/html_node/TZ-Variable.html
UNK on_op UNK on_lparen UNK on_lparen UNK on_rparen on_rparen on_nl UNK on_op UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end UNK UNK UNK # # convert the difference (in seconds) to hours, as a rational number, and perform # a modulo operation on it.
UNK on_op UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end UNK UNK UNK on_op UNK on_lparen UNK on_rparen on_period UNK on_rparen on_nl UNK # # Format the hour as a two-digit number. # Establish the minutes based on modulo expression.
on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_embexpr_beg UNK on_embexpr_end on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_end on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl # # Note: The 3-letter-word below doesn't have a particular significance.
UNK UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK on_op UNK on_nl end on_nl on_ignored_nl UNK UNK on_lparen UNK on_rparen # Private: Convert given seconds to an hour as a rational number. # # seconds - supplied as an integer, it is converted to a rational number. # 3600 - no. of seconds in an hour. # # Returns a rational number.
UNK UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK on_op UNK on_nl end on_nl on_ignored_nl UNK UNK on_lparen UNK on_rparen # Private: Convert given seconds to an hour as an absolute number. # # seconds - supplied as an integer, it is converted to its absolute. # 3600 - no. of seconds in an hour. # # Returns an integer.
UNK UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK on_op UNK on_period UNK on_nl end on_nl end on_nl end on_nl # Private: Perform a modulo operation on a given fraction. # # fraction - supplied as a rational number, its numerator is divided # by its denominator and the remainder returned. # # Returns an integer.
