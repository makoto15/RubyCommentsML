on_ignored_nl UNK on_const on_nl UNK on_const on_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl # frozen_string_literal: true
UNK on_const on_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar # This class handles custom defaults for YAML frontmatter settings. # These are set in _config.yml and apply both to internal use (e.g. layout) # and the data available to liquid. # # It is exposed via the frontmatter_defaults method on the site class.
def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op UNK UNK # Initializes a new instance.
def UNK on_lparen path on_comma type on_comma UNK on_rparen on_ignored_nl UNK on_op UNK on_nl old_scope on_op UNK on_nl on_ignored_nl UNK # Finds a default value for a given setting, filtered by path and type # # path - the path (relative to the source) of the page, # post or :draft the default is used in # type - a symbol indicating whether a :page, # a :post or a :draft calls this method # # Returns the default value or nil if none was found
def UNK on_lparen path on_comma type on_rparen on_ignored_nl defaults on_op UNK UNK on_nl old_scope on_op UNK on_nl UNK on_lparen path # Collects a hash with all default values for a page or post # # path - the relative path of the page or post # type - a symbol indicating the type (:post, :page or :draft) # # Returns a hash with all default values (an empty hash if there are none)
def UNK on_lparen scope on_comma path on_comma type on_rparen on_ignored_nl UNK on_lparen scope on_comma type on_rparen on_op UNK on_lparen scope # Checks if a given default setting scope matches the given path and type # # scope - the hash indicating the scope, as defined in _config.yml # path - the path to check for # type - the type (:post, :page or :draft) to check for # # Returns true if the scope applies to the given type and path
def UNK on_lparen scope on_comma type on_rparen on_ignored_nl on_op scope on_period key? on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op scope on_lbracket # Determines whether the scope applies to type. # The scope applies to the type if: # 1. no 'type' is specified # 2. the 'type' in the scope is the same as the type asked about # # scope - the Hash defaults set being asked about application # type - the type of the document being processed / asked about # its defaults. # # Returns true if either of the above conditions are satisfied, # otherwise returns false
def UNK on_lparen set on_rparen on_ignored_nl set on_period UNK on_lparen on_const on_rparen on_op set on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period # Checks if a given set of default values is valid # # set - the default value hash, as defined in _config.yml # # Returns true if the set is valid and can be used in this class
def UNK on_lparen old_scope on_comma UNK on_rparen on_ignored_nl return UNK if old_scope on_period UNK on_nl on_ignored_nl UNK on_op UNK on_lparen # Determines if a new scope has precedence over an old one # # old_scope - the old scope hash, or nil if there's none # new_scope - the new scope hash # # Returns true if the new scope has precedence over the older # rubocop: disable Naming/PredicateName
on_ignored_nl def UNK on_lparen path on_comma type on_rparen on_ignored_nl on_ivar on_op UNK UNK on_nl on_ivar on_lbracket path on_rbracket on_op UNK # rubocop: enable Naming/PredicateName
def UNK on_lparen path on_comma type on_rparen on_ignored_nl on_ivar on_op UNK UNK on_nl on_ivar on_lbracket path on_rbracket on_op UNK UNK # Collects a list of sets that match the given path and type # # Returns an array of hashes
def UNK on_nl UNK on_op on_ivar on_period UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl return on_lbracket on_rbracket UNK UNK on_period # Returns a list of valid sets # # This is not cached to allow plugins to modify the configuration # and have their changes take effect # # Returns an array of hashes
def UNK on_lparen path on_rparen on_ignored_nl if path on_period UNK on_op path on_period UNK on_nl on_tstring_beg on_tstring_end on_nl UNK path # Sanitizes the given path by removing a leading slash
