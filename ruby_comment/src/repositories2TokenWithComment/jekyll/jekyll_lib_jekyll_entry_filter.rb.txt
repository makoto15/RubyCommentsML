on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK UNK site on_nl on_ignored_nl on_const on_op UNK on_tstring_content UNK on_const on_period UNK # frozen_string_literal: true
UNK UNK if e on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl UNK UNK if UNK on_lparen e on_rparen on_nl # Reject this entry if it is just a "dot" representation. # e.g.: '.', '..', '_movies/.', 'music/..', etc
UNK UNK if UNK on_lparen e on_rparen on_nl UNK UNK if UNK on_lparen e on_rparen on_nl on_ignored_nl UNK on_lparen e # Reject this entry if it is a symlink.
UNK UNK if UNK on_lparen e on_rparen on_nl on_ignored_nl UNK on_lparen e on_rparen on_op UNK on_lparen e on_rparen on_op UNK # Do not reject this entry if it is included.
UNK on_lparen e on_rparen on_op UNK on_lparen e on_rparen on_op UNK on_lparen e on_rparen on_nl end on_nl end on_nl on_ignored_nl # Reject this entry if it is special, a backup file, or excluded.
def UNK on_lparen entry on_rparen on_ignored_nl site on_period UNK on_op on_const on_period UNK on_lparen entry on_rparen on_op UNK on_lparen entry # -- # Check if a file is a symlink. # NOTE: This can be converted to allowing even in safe, # since we use Pathutil#in_path? now. # --
def UNK on_lparen entry on_rparen on_ignored_nl on_op on_const on_period UNK on_lparen entry on_rparen on_period UNK on_lparen on_ignored_nl site on_period UNK # -- # NOTE: Pathutil#in_path? gets the realpath. # @param [<Anything>] entry the entry you want to validate. # Check if a path is outside of our given root. # --
def UNK on_lparen UNK on_comma entry on_rparen on_ignored_nl entry_with_source on_op on_const on_period UNK on_lparen site on_period UNK on_comma entry on_rparen # Check if an entry matches a specific pattern. # Returns true if path matches against any glob pattern, else false.
