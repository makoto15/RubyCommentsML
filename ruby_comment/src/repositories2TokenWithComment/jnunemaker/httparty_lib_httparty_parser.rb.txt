UNK on_const on_nl on_const on_op UNK on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op on_symbeg UNK on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op on_symbeg # The default parser used by HTTParty, supports xml, json, html, csv and # plain text. # # == Custom Parsers # # If you'd like to do your own custom parsing, subclassing HTTParty::Parser # will make that process much easier. There are a few different ways you can # utilize HTTParty::Parser as a superclass. # # @example Intercept the parsing for all formats # class SimpleParser < HTTParty::Parser # def parse # perform_parsing # end # end # # @example Add the atom format and parsing method to the default parser # class AtomParsingIncluded < HTTParty::Parser # SupportedFormats.merge!( # {"application/atom+xml" => :atom} # ) # # def atom # perform_atom_parsing # end # end # # @example Only support the atom format # class ParseOnlyAtom < HTTParty::Parser # SupportedFormats = {"application/atom+xml" => :atom} # # def atom # perform_atom_parsing # end # end # # @abstract Read the Custom Parsers section for more information.
UNK on_symbeg body on_nl on_ignored_nl UNK on_symbeg format on_nl on_ignored_nl def self on_period UNK on_lparen body on_comma format on_rparen on_ignored_nl # The response body of the request # @return [String]
UNK on_symbeg format on_nl on_ignored_nl def self on_period UNK on_lparen body on_comma format on_rparen on_ignored_nl UNK on_lparen body on_comma format # The intended parsing format for the request # @return [Symbol] e.g. :json
def self on_period UNK on_lparen body on_comma format on_rparen on_ignored_nl UNK on_lparen body on_comma format on_rparen on_period UNK on_nl end # Instantiate the parser and call {#parse}. # @param [String] body the response body # @param [Symbol] format the response format # @return parsed response
def self on_period UNK on_nl UNK on_lparen on_symbeg on_const on_rparen on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen UNK # @return [Hash] the SupportedFormats hash
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK UNK UNK on_period UNK on_period UNK UNK on_op UNK on_op UNK # @param [String] mimetype response MIME type # @return [Symbol] # @return [nil] mime type not supported
def self on_period UNK on_nl UNK on_period UNK on_period UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen format # @return [Array<Symbol>] list of supported formats
def self on_period UNK on_lparen format on_rparen on_ignored_nl UNK on_period UNK on_lparen format on_rparen on_nl end on_nl on_ignored_nl def UNK # @param [Symbol] format e.g. :json, :xml # @return [Boolean]
def UNK on_nl UNK UNK UNK body on_period UNK on_nl UNK UNK UNK body on_op on_tstring_beg on_tstring_content on_tstring_end on_nl UNK # @return [Object] the parsed body # @return [nil] when the response body is nil, an empty string, spaces only or "null"
