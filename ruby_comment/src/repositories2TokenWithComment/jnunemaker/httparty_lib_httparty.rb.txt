UNK on_const on_nl def self on_period UNK on_lparen base on_rparen on_ignored_nl base on_period UNK on_const on_nl base on_period UNK on_symbeg # @see HTTParty::ClassMethods
on_ignored_nl UNK on_const on_nl def UNK on_lparen UNK on_comma UNK on_op on_symbeg UNK on_comma format on_op on_symbeg UNK on_rparen on_ignored_nl # == Common Request Options # Request methods (get, post, patch, put, delete, head, options) all take a common set of options. These are: # # [:+body+:] Body of the request. If passed an object that responds to #to_hash, will try to normalize it first, by default passing it to ActiveSupport::to_params. Any other kind of object will get used as-is. # [:+http_proxyaddr+:] Address of proxy server to use. # [:+http_proxyport+:] Port of proxy server to use. # [:+http_proxyuser+:] User for proxy server authentication. # [:+http_proxypass+:] Password for proxy server authentication. # [:+limit+:] Maximum number of redirects to follow. Takes precedences over :+no_follow+. # [:+query+:] Query string, or an object that responds to #to_hash representing it. Normalized according to the same rules as :+body+. If you specify this on a POST, you must use an object which responds to #to_hash. See also HTTParty::ClassMethods.default_params. # [:+timeout+:] Timeout for opening connection and reading data. # [:+local_host+:] Local address to bind to before connecting. # [:+local_port+:] Local port to bind to before connecting. # [:+body_stream+:] Allow streaming to a REST server to specify a body_stream. # [:+stream_body+:] Allow for streaming large files without loading them into memory. # [:+multipart+:] Force content-type to be multipart # # There are also another set of options with names corresponding to various class methods. The methods in question are those that let you set a class-wide default, and the options override the defaults on a request-by-request basis. Those options are: # * :+base_uri+: see HTTParty::ClassMethods.base_uri. # * :+basic_auth+: see HTTParty::ClassMethods.basic_auth. Only one of :+basic_auth+ and :+digest_auth+ can be used at a time; if you try using both, you'll get an ArgumentError. # * :+debug_output+: see HTTParty::ClassMethods.debug_output. # * :+digest_auth+: see HTTParty::ClassMethods.digest_auth. Only one of :+basic_auth+ and :+digest_auth+ can be used at a time; if you try using both, you'll get an ArgumentError. # * :+format+: see HTTParty::ClassMethods.format. # * :+headers+: see HTTParty::ClassMethods.headers. Must be a an object which responds to #to_hash. # * :+maintain_method_across_redirects+: see HTTParty::ClassMethods.maintain_method_across_redirects. # * :+no_follow+: see HTTParty::ClassMethods.no_follow. # * :+parser+: see HTTParty::ClassMethods.parser. # * :+uri_adapter+: see HTTParty::ClassMethods.uri_adapter # * :+connection_adapter+: see HTTParty::ClassMethods.connection_adapter. # * :+pem+: see HTTParty::ClassMethods.pem. # * :+query_string_normalizer+: see HTTParty::ClassMethods.query_string_normalizer # * :+ssl_ca_file+: see HTTParty::ClassMethods.ssl_ca_file. # * :+ssl_ca_path+: see HTTParty::ClassMethods.ssl_ca_path.
def UNK on_lparen UNK on_comma UNK on_op on_symbeg UNK on_comma format on_op on_symbeg UNK on_rparen on_ignored_nl default_options on_lbracket on_symbeg UNK # Turns on logging # # class Foo # include HTTParty # logger Logger.new('http_logger'), :info, :apache # end
def UNK on_lparen UNK on_op on_lbracket on_rbracket on_rparen on_ignored_nl default_options on_lbracket on_symbeg UNK on_rbracket on_op on_op UNK on_nl end on_nl # Raises HTTParty::ResponseError if response's code matches this statuses # # class Foo # include HTTParty # raise_on [404, 500] # end
def UNK on_lparen UNK on_op nil on_comma UNK on_op nil on_comma UNK on_op nil on_comma UNK on_op nil on_rparen on_ignored_nl # Allows setting http proxy information to be used # # class Foo # include HTTParty # http_proxy 'http://foo.com', 80, 'user', 'pass' # end
def UNK on_lparen UNK on_op nil on_rparen on_ignored_nl UNK default_options on_lbracket on_symbeg UNK on_rbracket unless UNK on_nl default_options on_lbracket on_symbeg # Allows setting a base uri to be used for each request. # Will normalize uri to include http, etc. # # class Foo # include HTTParty # base_uri 'twitter.com' # end
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl default_options on_lbracket on_symbeg UNK on_rbracket on_op on_lbrace UNK UNK on_comma UNK UNK # Allows setting basic authentication username and password. # # class Foo # include HTTParty # basic_auth 'username', 'password' # end
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl default_options on_lbracket on_symbeg UNK on_rbracket on_op on_lbrace UNK UNK on_comma UNK UNK # Allows setting digest authentication username and password. # # class Foo # include HTTParty # digest_auth 'username', 'password' # end
def UNK on_nl UNK on_const on_op on_const on_nl end on_nl on_ignored_nl def UNK on_lparen h on_op on_lbrace on_rbrace on_rparen on_ignored_nl # Do not send rails style query strings. # Specifically, don't use bracket notation when sending an array # # For a query: # get '/', query: {selected_ids: [1,2,3]} # # The default query string looks like this: # /?selected_ids[]=1&selected_ids[]=2&selected_ids[]=3 # # Call `disable_rails_query_string_format` to transform the query string # into: # /?selected_ids=1&selected_ids=2&selected_ids=3 # # @example # class Foo # include HTTParty # disable_rails_query_string_format # end
def UNK on_lparen h on_op on_lbrace on_rbrace on_rparen on_ignored_nl raise on_const on_comma on_tstring_beg on_tstring_content on_tstring_end unless h on_period UNK on_lparen # Allows setting default parameters to be appended to each request. # Great for api keys and such. # # class Foo # include HTTParty # default_params api_key: 'secret', another: 'foo' # end
def UNK on_lparen value on_rparen on_ignored_nl UNK on_lparen UNK on_comma value on_rparen on_nl default_options on_lbracket on_symbeg UNK on_rbracket on_op value # Allows setting a default timeout for all HTTP calls # Timeout is specified in seconds. # # class Foo # include HTTParty # default_timeout 10 # end
def UNK on_lparen value on_rparen on_ignored_nl UNK on_lparen UNK on_comma value on_rparen on_nl default_options on_lbracket on_symbeg UNK on_rbracket on_op value # Allows setting a default open_timeout for all HTTP calls in seconds # # class Foo # include HTTParty # open_timeout 10 # end
def UNK on_lparen value on_rparen on_ignored_nl UNK on_lparen UNK on_comma value on_rparen on_nl default_options on_lbracket on_symbeg UNK on_rbracket on_op value # Allows setting a default read_timeout for all HTTP calls in seconds # # class Foo # include HTTParty # read_timeout 10 # end
def UNK on_lparen value on_rparen on_ignored_nl UNK on_lparen UNK on_comma value on_rparen on_nl default_options on_lbracket on_symbeg UNK on_rbracket on_op value # Allows setting a default write_timeout for all HTTP calls in seconds # Supported by Ruby > 2.6.0 # # class Foo # include HTTParty # write_timeout 10 # end
def UNK on_lparen UNK on_op UNK on_rparen on_ignored_nl default_options on_lbracket on_symbeg UNK on_rbracket on_op UNK on_nl end on_nl on_ignored_nl def # Set an output stream for debugging, defaults to $stderr. # The output stream is passed on to Net::HTTP#set_debug_output. # # class Foo # include HTTParty # debug_output $stderr # end
def headers on_lparen h on_op nil on_rparen on_ignored_nl if h on_nl raise on_const on_comma on_tstring_beg on_tstring_content on_tstring_end unless h on_period # Allows setting HTTP headers to be used for each request. # # class Foo # include HTTParty # headers 'Accept' => 'text/html' # end
def UNK on_lparen value on_op UNK on_rparen on_ignored_nl default_options on_lbracket on_symbeg UNK on_rbracket on_op value on_nl end on_nl on_ignored_nl def # Proceed to the location header when an HTTP response dictates a redirect. # Redirects are always followed by default. # # @example # class Foo # include HTTParty # base_uri 'http://google.com' # follow_redirects true # end
def format on_lparen UNK on_op nil on_rparen on_ignored_nl if UNK on_period UNK on_nl default_options on_lbracket on_symbeg format on_rbracket on_nl UNK # Allows setting the format with which to parse. # Must be one of the allowed formats ie: json, xml # # class Foo # include HTTParty # format :json # end
def UNK on_lparen value on_op UNK on_rparen on_ignored_nl default_options on_lbracket on_symbeg UNK on_rbracket on_op value on_nl end on_nl on_ignored_nl on_ignored_nl # Declare whether or not to follow redirects. When true, an # {HTTParty::RedirectionTooDeep} error will raise upon encountering a # redirect. You can then gain access to the response object via # HTTParty::RedirectionTooDeep#response. # # @see HTTParty::ResponseError#response # # @example # class Foo # include HTTParty # base_uri 'http://google.com' # no_follow true # end # # begin # Foo.get('/') # rescue HTTParty::RedirectionTooDeep => e # puts e.response.body # end
on_ignored_nl def UNK on_lparen value on_op UNK on_rparen on_ignored_nl default_options on_lbracket on_symbeg UNK on_rbracket on_op value on_nl end on_nl on_ignored_nl # Declare that you wish to maintain the chosen HTTP method across redirects. # The default behavior is to follow redirects via the GET method, except # if you are making a HEAD request, in which case the default is to # follow all redirects with HEAD requests. # If you wish to maintain the original method, you can set this option to true. # # @example # class Foo # include HTTParty # base_uri 'http://google.com' # maintain_method_across_redirects true # end
on_ignored_nl def UNK on_lparen value on_op UNK on_rparen on_ignored_nl default_options on_lbracket on_symbeg UNK on_rbracket on_op value on_nl end on_nl on_ignored_nl # Declare that you wish to resend the full HTTP request across redirects, # even on redirects that should logically become GET requests. # A 303 redirect in HTTP signifies that the redirected url should normally # retrieved using a GET request, for instance, it is the output of a previous # POST. maintain_method_across_redirects respects this behavior, but you # can force HTTParty to resend_on_redirect even on 303 responses. # # @example # class Foo # include HTTParty # base_uri 'http://google.com' # resend_on_redirect # end
def UNK on_lparen UNK on_comma UNK on_op nil on_rparen on_ignored_nl default_options on_lbracket on_symbeg UNK on_rbracket on_op UNK on_nl default_options on_lbracket # Allows setting a PEM file to be used # # class Foo # include HTTParty # pem File.read('/home/user/my.pem'), "optional password" # end
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl default_options on_lbracket on_symbeg UNK on_rbracket on_op UNK on_nl default_options on_lbracket on_symbeg UNK # Allows setting a PKCS12 file to be used # # class Foo # include HTTParty # pkcs12 File.read('/home/user/my.p12'), "password" # end
def UNK on_lparen UNK on_rparen on_ignored_nl default_options on_lbracket on_symbeg UNK on_rbracket on_op UNK on_nl end on_nl on_ignored_nl def UNK on_lparen # Override the way query strings are normalized. # Helpful for overriding the default rails normalization of Array queries. # # For a query: # get '/', query: {selected_ids: [1,2,3]} # # The default query string normalizer returns: # /?selected_ids[]=1&selected_ids[]=2&selected_ids[]=3 # # Let's change it to this: # /?selected_ids=1&selected_ids=2&selected_ids=3 # # Pass a Proc to the query normalizer which accepts the yielded query. # # @example Modifying Array query strings # class ServiceWrapper # include HTTParty # # query_string_normalizer proc { |query| # query.map do |key, value| # value.map {|v| "#{key}=#{v}"} # end.join('&') # } # end # # @param [Proc] normalizer custom query string normalizer. # @yield [Hash, String] query string # @yieldreturn [Array] an array that will later be joined with '&'
def UNK on_lparen UNK on_rparen on_ignored_nl default_options on_lbracket on_symbeg UNK on_rbracket on_op UNK on_nl end on_nl on_ignored_nl def UNK on_lparen # Allows setting of SSL version to use. This only works in Ruby 1.9+. # You can get a list of valid versions from OpenSSL::SSL::SSLContext::METHODS. # # class Foo # include HTTParty # ssl_version :SSLv3 # end
def UNK on_lparen UNK on_rparen on_ignored_nl default_options on_lbracket on_symbeg UNK on_rbracket on_op UNK on_nl end on_nl on_ignored_nl def UNK on_lparen # Allows setting of SSL ciphers to use. This only works in Ruby 1.9+. # You can get a list of valid specific ciphers from OpenSSL::Cipher.ciphers. # You also can specify a cipher suite here, listed here at openssl.org: # http://www.openssl.org/docs/apps/ciphers.html#CIPHER_SUITE_NAMES # # class Foo # include HTTParty # ciphers "RC4-SHA" # end
def UNK on_lparen path on_rparen on_ignored_nl default_options on_lbracket on_symbeg UNK on_rbracket on_op path on_nl end on_nl on_ignored_nl def UNK on_lparen # Allows setting an OpenSSL certificate authority file. The file # should contain one or more certificates in PEM format. # # Setting this option enables certificate verification. All # certificates along a chain must be available in ssl_ca_file or # ssl_ca_path for verification to succeed. # # # class Foo # include HTTParty # ssl_ca_file '/etc/ssl/certs/ca-certificates.crt' # end
def UNK on_lparen path on_rparen on_ignored_nl default_options on_lbracket on_symbeg UNK on_rbracket on_op path on_nl end on_nl on_ignored_nl def parser on_lparen # Allows setting an OpenSSL certificate authority path (directory). # # Setting this option enables certificate verification. All # certificates along a chain must be available in ssl_ca_file or # ssl_ca_path for verification to succeed. # # class Foo # include HTTParty # ssl_ca_path '/etc/ssl/certs/' # end
def parser on_lparen UNK on_op nil on_rparen on_ignored_nl if UNK on_period UNK on_nl default_options on_lbracket on_symbeg parser on_rbracket on_nl UNK # Allows setting a custom parser for the response. # # class Foo # include HTTParty # parser Proc.new {|data| ...} # end
def UNK on_lparen UNK on_rparen on_ignored_nl raise on_const on_comma on_tstring_beg on_tstring_content on_tstring_end unless UNK on_period UNK on_lparen on_symbeg UNK on_rparen # Allows setting a custom URI adapter. # # class Foo # include HTTParty # uri_adapter Addressable::URI # end
def UNK on_lparen UNK on_op nil on_comma options on_op nil on_rparen on_ignored_nl if UNK on_period UNK on_nl default_options on_lbracket on_symbeg # Allows setting a custom connection_adapter for the http connections # # @example # class Foo # include HTTParty # connection_adapter Proc.new {|uri, options| ... } # end # # @example provide optional configuration for your connection_adapter # class Foo # include HTTParty # connection_adapter Proc.new {|uri, options| ... }, {foo: :bar} # end # # @see HTTParty::ConnectionAdapter
def UNK on_lparen path on_comma options on_op on_lbrace on_rbrace on_comma on_op block on_rparen on_ignored_nl perform_request on_const on_op on_const on_op on_const # Allows making a get request to a url. # # class Foo # include HTTParty # end # # # Simple get with full url # Foo.get('http://foo.com/resource.json') # # # Simple get with full url and query parameters # # ie: http://foo.com/resource.json?limit=10 # Foo.get('http://foo.com/resource.json', query: {limit: 10})
def UNK on_lparen path on_comma options on_op on_lbrace on_rbrace on_comma on_op block on_rparen on_ignored_nl perform_request on_const on_op on_const on_op on_const # Allows making a post request to a url. # # class Foo # include HTTParty # end # # # Simple post with full url and setting the body # Foo.post('http://foo.com/resources', body: {bar: 'baz'}) # # # Simple post with full url using :query option, # # which appends the parameters to the URI. # Foo.post('http://foo.com/resources', query: {bar: 'baz'})
def UNK on_lparen path on_comma options on_op on_lbrace on_rbrace on_comma on_op block on_rparen on_ignored_nl perform_request on_const on_op on_const on_op on_const # Perform a PATCH request to a path
def UNK on_lparen path on_comma options on_op on_lbrace on_rbrace on_comma on_op block on_rparen on_ignored_nl perform_request on_const on_op on_const on_op on_const # Perform a PUT request to a path
def UNK on_lparen path on_comma options on_op on_lbrace on_rbrace on_comma on_op block on_rparen on_ignored_nl perform_request on_const on_op on_const on_op on_const # Perform a DELETE request to a path
def UNK on_lparen path on_comma options on_op on_lbrace on_rbrace on_comma on_op block on_rparen on_ignored_nl perform_request on_const on_op on_const on_op on_const # Perform a MOVE request to a path
def UNK on_lparen path on_comma options on_op on_lbrace on_rbrace on_comma on_op block on_rparen on_ignored_nl perform_request on_const on_op on_const on_op on_const # Perform a COPY request to a path
def UNK on_lparen path on_comma options on_op on_lbrace on_rbrace on_comma on_op block on_rparen on_ignored_nl UNK options on_nl perform_request on_const on_op # Perform a HEAD request to a path
def options on_lparen path on_comma options on_op on_lbrace on_rbrace on_comma on_op block on_rparen on_ignored_nl perform_request on_const on_op on_const on_op on_const # Perform an OPTIONS request to a path
def UNK on_lparen path on_comma options on_op on_lbrace on_rbrace on_comma on_op block on_rparen on_ignored_nl perform_request on_const on_op on_const on_op on_const # Perform a MKCOL request to a path
options on_op on_const on_period UNK on_lparen default_options on_rparen on_period UNK on_lparen options on_rparen on_nl on_const on_period UNK on_lparen headers on_comma #:nodoc:
UNK unless options on_lbracket on_symbeg UNK on_rbracket on_op UNK on_period UNK on_nl options on_lbracket on_symbeg headers on_rbracket on_op headers on_period #:nodoc:
normalized_url on_op UNK on_period UNK on_nl UNK on_op on_lparen normalized_url on_op UNK on_tstring_content UNK on_rparen on_op on_lparen normalized_url on_op UNK #:nodoc:
UNK on_const on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen on_op args on_comma on_op block on_rparen on_ignored_nl on_const on_period #:nodoc:
