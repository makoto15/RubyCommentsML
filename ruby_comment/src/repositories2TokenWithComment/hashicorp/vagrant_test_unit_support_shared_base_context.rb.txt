on_ivar on_op on_lbracket on_rbracket on_nl on_ignored_nl on_ivar on_op on_lbracket on_rbracket on_nl on_ignored_nl UNK on_op on_const on_period new on_nl end on_nl # State to store the list of registered plugins that we have to # unregister later.
on_ivar on_op on_lbracket on_rbracket on_nl on_ignored_nl UNK on_op on_const on_period new on_nl end on_nl on_ignored_nl UNK on_lparen UNK each on_rparen # Create a thing to store our temporary files so that they aren't # unlinked right away.
UNK on_op on_const on_period new on_nl end on_nl on_ignored_nl UNK on_lparen UNK each on_rparen do on_ignored_nl on_ivar on_period each do # Roughly simulate the embedded Bundler availability
on_ivar on_period each do on_op plugin on_op on_ignored_nl on_const on_period plugin on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period UNK on_period UNK # Unregister each of the plugins we have may have temporarily # registered for the duration of this test.
def UNK on_nl UNK on_op on_const on_op on_const on_period new on_nl UNK UNK UNK UNK on_nl UNK on_nl end on_nl # This creates an isolated environment so that Vagrant doesn't # muck around with your real system during unit tests. # # The returned isolated environment has a variety of helper # methods on it to easily create files, Vagrantfiles, boxes, # etc.
def UNK on_lparen UNK on_op UNK on_rparen on_ignored_nl UNK on_op on_const on_op on_const on_op on_const on_nl plugin on_op on_const on_period # This registers a Vagrant plugin for the duration of a single test. # This will yield a new plugin class that you can then call the # public plugin methods on. # # @yield [plugin] Yields the plugin class for you to call the public # API that you need to.
def UNK on_lparen UNK on_op UNK on_rparen on_ignored_nl UNK on_op UNK on_nl f on_op UNK on_period UNK on_lparen on_tstring_beg on_tstring_content # This helper creates a temporary file and returns a Pathname # object pointed to it. # # @return [Pathname]
def UNK on_nl UNK on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ivar on_op on_lbracket on_rbracket on_nl on_ivar # This creates a temporary directory and returns a {Pathname} # pointing to it. If a block is given, the pathname is yielded and the # temporary directory is removed at the end of the block. # # @return [Pathname]
UNK on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ivar on_op on_lbracket on_rbracket on_nl on_ivar on_op UNK on_nl # Create a temporary directory and append it to the instance # variable so that it isn't garbage collected and deleted
UNK on_op on_const on_period new on_lparen on_const on_op on_const on_op on_const on_period UNK on_lparen UNK on_rparen on_rparen on_nl UNK UNK # Return the pathname
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_lparen on_const on_rparen on_period UNK UNK on_lparen UNK on_op on_rparen on_period UNK on_nl # Stub the given environment in ENV, without actually touching ENV. Keys and # values are converted to strings because that's how the real ENV works.
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK UNK on_nl UNK on_period each do on_op key UNK value on_op # This helper provides temporary environmental variable changes.
UNK on_op UNK UNK on_nl UNK on_period each do on_op key UNK value on_op on_ignored_nl key on_op key on_period UNK # Build up the new environment, preserving the old values so we # can replace them back in later.
UNK UNK on_nl UNK on_ignored_nl UNK on_period each do on_op key UNK value on_op on_ignored_nl on_const on_lbracket key on_rbracket on_op # Call the block, returning its return value
UNK on_period each do on_op key UNK value on_op on_ignored_nl on_const on_lbracket key on_rbracket on_op value on_nl end on_nl end # Reset the environment no matter what
def UNK on_lparen on_op UNK on_rparen on_ignored_nl UNK on_op on_lbracket on_rbracket on_nl on_ignored_nl UNK on_period UNK on_period UNK do on_ignored_nl # This helper provides a randomly available port(s) for each argument to the # block.
