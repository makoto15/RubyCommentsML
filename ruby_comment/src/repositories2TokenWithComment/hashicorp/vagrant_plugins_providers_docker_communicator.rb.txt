UNK on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg UNK on_rparen on_nl def UNK on_lparen UNK on_rparen # This communicator uses the host VM as proxy to communicate to the # actual Docker container via SSH.
if UNK on_period UNK on_op on_symbeg UNK on_nl UNK on_const on_op on_const on_nl end on_nl end on_nl on_ignored_nl on_ignored_nl def # We only work on the Docker provider
on_ignored_nl def UNK on_nl UNK false if on_op on_ivar on_period communicate on_period UNK on_nl on_ignored_nl command on_op UNK on_nl UNK #------------------------------------------------------------------- # Communicator Methods #-------------------------------------------------------------------
UNK false if on_op on_ivar on_period communicate on_period UNK on_nl on_ignored_nl command on_op UNK on_nl UNK false if on_op command # We can't be ready if we can't talk to the host VM
command on_op UNK on_nl UNK false if on_op command on_nl on_ivar on_period communicate on_period UNK on_lparen on_tstring_beg on_embexpr_beg command on_embexpr_end # We're ready if we can establish an SSH connection to the container
on_ignored_nl UNK on_op on_tstring_beg on_tstring_content on_embexpr_beg on_const on_period UNK on_period UNK on_embexpr_end on_tstring_content on_embexpr_beg UNK on_lparen on_int on_rparen on_embexpr_end on_tstring_end # Same process as upload, but in reverse
UNK on_op on_tstring_beg on_tstring_content on_embexpr_beg on_const on_period UNK on_period UNK on_embexpr_end on_tstring_content on_embexpr_beg UNK on_lparen on_int on_rparen on_embexpr_end on_tstring_end on_nl # First, we use `cat` to copy that file from the Docker container.
on_ivar on_period communicate on_period UNK on_lparen UNK on_comma UNK on_rparen on_nl on_ignored_nl on_ivar on_period communicate on_period execute on_lparen on_tstring_beg on_tstring_content # Then, we download this from the host VM.
on_ivar on_period communicate on_period execute on_lparen on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_end on_comma UNK false on_rparen on_nl end on_nl on_ignored_nl # Remove the temporary file
tf on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl tf on_period UNK on_nl tf on_period UNK on_lparen on_tstring_beg # We want to emulate how the SSH communicator actually executes # things, so we build up the list of commands to execute in a # giant shell script.
UNK on_op on_tstring_beg on_tstring_content on_embexpr_beg on_const on_period UNK on_period UNK on_embexpr_end on_tstring_content on_embexpr_beg UNK on_lparen on_int on_rparen on_embexpr_end on_tstring_end on_nl # Upload the temp file to the remote machine
UNK on_op on_ivar on_period UNK on_period UNK on_period UNK on_nl UNK on_op opts on_lbracket on_symbeg UNK on_rbracket if opts on_lbracket # Determine the shell to execute. Prefer the explicitly passed in shell # over the default configured shell. If we are using `sudo` then we # need to wrap the shell in a `sudo` call.
UNK if on_op block on_nl on_ignored_nl UNK if on_op on_lbracket on_symbeg UNK on_comma on_symbeg UNK on_rbracket on_period UNK on_lparen type # If we don't have a block, we don't care about the data
UNK if on_op on_lbracket on_symbeg UNK on_comma on_symbeg UNK on_rbracket on_period UNK on_lparen type on_rparen on_nl on_ignored_nl if UNK on_lbracket # We only care about stdout and stderr output
if UNK on_lbracket type on_rbracket on_nl block on_period UNK on_lparen type on_comma UNK on_rparen on_nl UNK on_nl end on_nl on_ignored_nl # If we reached our fence, then just output
UNK on_lbracket type on_rbracket on_op UNK on_nl on_ignored_nl UNK on_op UNK on_lbracket type on_rbracket on_period UNK on_lparen fence on_lbracket type # Otherwise, accumulate
UNK on_op UNK on_lbracket type on_rbracket on_period UNK on_lparen fence on_lbracket type on_rbracket on_rparen on_nl UNK if on_op UNK on_nl # Look for the fence
UNK on_op on_tstring_beg on_tstring_content on_embexpr_beg on_const on_period UNK on_period UNK on_embexpr_end on_tstring_content on_embexpr_beg UNK on_lparen on_int on_rparen on_embexpr_end on_tstring_end on_nl # First, we upload this to the host VM to some temporary directory.
on_ivar on_period communicate on_period execute on_lparen on_ignored_nl on_tstring_beg on_embexpr_beg UNK on_embexpr_end on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_end # Then, we use `cat` to get that file into the Docker container.
on_ivar on_period communicate on_period execute on_lparen on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_end on_comma UNK false on_rparen on_nl end on_nl on_ignored_nl # Remove the temporary file
on_ignored_nl def UNK on_nl info on_op on_ivar on_period UNK on_nl UNK UNK if on_op info on_nl info on_lbracket on_symbeg UNK #------------------------------------------------------------------- # Other Methods #-------------------------------------------------------------------
def UNK on_nl info on_op on_ivar on_period UNK on_nl UNK UNK if on_op info on_nl info on_lbracket on_symbeg UNK on_rbracket # This returns the raw SSH command string that can be used to # connect via SSH to the container if you're on the same machine # as the container. # # @return [String]
info on_op on_ivar on_period UNK on_nl UNK UNK if on_op info on_nl info on_lbracket on_symbeg UNK on_rbracket on_op on_int on_nl # Get the container's SSH info
UNK on_op UNK on_lparen info on_rparen on_period UNK UNK on_op path on_op on_ignored_nl on_tstring_beg on_tstring_content on_embexpr_beg path on_embexpr_end on_tstring_end on_nl # Make sure our private keys are synced over to the host VM
if info on_lbracket on_symbeg UNK on_rbracket on_nl UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl UNK on_period UNK on_lparen on_lbracket # Use ad-hoc SSH options for the hop on the docker proxy
on_tstring_beg on_tstring_content on_embexpr_beg info on_lbracket on_symbeg UNK on_rbracket on_embexpr_end on_tstring_content on_embexpr_beg info on_lbracket on_symbeg UNK on_rbracket on_embexpr_end on_tstring_content on_embexpr_beg info # Build the SSH command
UNK on_op on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_content on_embexpr_beg on_const on_op on_const on_period UNK on_lparen path on_period to_s on_rparen on_embexpr_end # We haven't seen this before, upload it!
on_ivar on_period communicate on_period execute on_lparen on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_end on_rparen on_nl on_ignored_nl on_ivar on_lbracket path on_period to_s # Make sure it has the proper chmod
on_ivar on_lbracket path on_period to_s on_rbracket on_op UNK on_nl end on_nl on_ignored_nl UNK on_op on_ivar on_lbracket path on_period to_s on_rbracket # Set it
