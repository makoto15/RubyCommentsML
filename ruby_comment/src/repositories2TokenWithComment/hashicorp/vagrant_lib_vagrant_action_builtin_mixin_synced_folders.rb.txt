def UNK on_lparen machine on_comma plugins on_rparen on_ignored_nl ordered on_op on_lbracket on_rbracket on_nl on_ignored_nl plugins on_period each do on_op key # This goes over all the registered synced folder types and returns # the highest priority implementation that is usable for this machine.
plugins on_period each do on_op key on_comma data on_op on_ignored_nl impl on_op data on_lbracket UNK on_rbracket on_nl UNK on_op data # First turn the plugins into an array
ordered on_op ordered on_period UNK on_lbrace on_op UNK on_comma UNK on_op UNK on_lbracket UNK on_rbracket on_op UNK on_lbracket UNK on_rbracket # Order the plugins by priority. Higher is tried before lower.
ordered on_period each do on_op UNK on_comma key on_comma impl on_op on_ignored_nl UNK key if impl on_period UNK on_period UNK # Find the proper implementation
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl on_lbrace on_rbrace on_period UNK do on_op result on_op on_ignored_nl UNK on_period each # This finds the options in the env that are set for a given # synced folder type.
k on_op k on_period UNK UNK k on_nl v on_op v on_period UNK UNK v on_nl on_ignored_nl result on_lbracket k # While I generally don't like the 'rescue' syntax, # we do this to just fall back to the default value # if it isn't dup-able.
def plugins on_nl UNK on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period UNK on_period UNK on_nl end on_nl # This returns the available synced folder implementations. This # is a separate method so that it can be easily stubbed by tests.
def UNK on_lparen machine on_comma folders on_comma on_op opts on_rparen on_ignored_nl if opts on_lbracket on_symbeg UNK on_rbracket on_nl existing on_op # This saves the synced folders data to the machine data directory. # They can then be retrieved again with `synced_folders` by passing # the `cached` option to it. # # @param [Machine] machine The machine that the folders belong to # @param [Hash] folders The result from a {#synced_folders} call.
existing on_period each do on_op impl on_comma fs on_op on_ignored_nl fs on_period each do on_op id on_comma data on_op on_ignored_nl # Go through and find any cached that were from the # Vagrantfile itself. We remove those if it was requested.
UNK on_op on_const on_op on_const on_period UNK on_lparen UNK on_rparen on_nl on_ignored_nl machine on_period UNK on_period UNK on_lparen on_tstring_beg on_tstring_content # Scrub any register credentials from the synced folders # configuration data to prevent accidental leakage
def UNK on_lparen machine on_comma on_op opts on_rparen on_ignored_nl UNK UNK on_lparen machine on_rparen if opts on_lbracket on_symbeg UNK on_rbracket # This returns the set of shared folders that should be done for # this machine. It returns the folders in a hash keyed by the # implementation class for the synced folders. # # @return [Hash<Symbol, Hash<String, Hash>>]
UNK on_period each do on_op id on_comma data on_op on_ignored_nl UNK if data on_lbracket on_symbeg UNK on_rbracket on_nl on_ignored_nl impl # Determine all the synced folders as well as the implementation # they're going to use.
UNK if data on_lbracket on_symbeg UNK on_rbracket on_nl on_ignored_nl impl on_op on_tstring_beg on_tstring_end on_nl impl on_op data on_lbracket on_symbeg type # Ignore disabled synced folders
UNK on_tstring_beg on_tstring_content UNK data on_lbracket on_symbeg type on_rbracket UNK on_tstring_end on_nl end on_nl on_ignored_nl if on_op opts on_lbracket on_symbeg # This should never happen because configuration validation # should catch this case. But we put this here as an assert
UNK on_const on_op on_const on_comma UNK data on_lbracket on_symbeg type on_rbracket on_period UNK on_nl end on_nl end on_nl end on_nl # Verify that explicitly defined shared folder types are # actually usable.
data on_op data on_period UNK on_nl if UNK on_nl data on_lbracket on_symbeg UNK on_rbracket on_op UNK on_nl end on_nl on_ignored_nl # Get the data to store
data on_lbracket on_symbeg UNK on_rbracket on_op UNK on_nl end on_nl on_ignored_nl folders on_lbracket impl on_rbracket on_op on_lbrace on_rbrace on_nl folders # If these are the root synced folders (attached directly) # to the Vagrantfile, then we mark it as such.
folders on_lbracket impl on_rbracket on_op on_lbrace on_rbrace on_nl folders on_lbracket impl on_rbracket on_lbracket id on_rbracket on_op data on_nl end on_nl # Keep track of this shared folder by the implementation.
if folders on_period UNK on_lparen on_tstring_beg on_tstring_end on_rparen on_op on_op folders on_lbracket on_tstring_beg on_tstring_end on_rbracket on_period UNK on_nl UNK on_op # If we have folders with the "default" key, then determine the # most appropriate implementation for this.
folders on_period UNK on_period each do on_op UNK on_comma fs on_op on_ignored_nl UNK on_op on_lbrace on_rbrace on_nl fs on_period each # Apply the scoped hash overrides to get the options
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK on_op on_lbrace on_rbrace on_nl UNK on_period each do on_op impl on_comma # This finds the difference between two lists of synced folder # definitions. # # This will return a hash with three keys: "added", "removed", # and "modified". These will contain a set of IDs of folders # that were added, removed, or modified, respectively. # # The parameters should be results from the {#synced_folders} call. # # @return [hash]
if existing on_lbracket on_symbeg UNK on_rbracket on_op data on_lbracket on_symbeg UNK on_rbracket on_op on_ignored_nl existing on_lbracket on_symbeg UNK on_rbracket on_op # Exists, so we have to compare the host and guestpath, which # is most important...
r on_period UNK on_period each do on_op k on_op on_ignored_nl r on_lbracket k on_rbracket on_period each do on_op UNK on_comma # We have to do all sorts of things to make the proper things # symbols and
UNK on_lbrace on_rbrace on_nl end on_nl end on_nl end on_nl end on_nl end on_nl EMP EMP EMP EMP EMP EMP # If the file doesn't exist, we probably just have a machine created # by a version of Vagrant that didn't cache shared folders. Report no # shared folders to be safe.
