UNK on_const on_nl UNK UNK on_lparen UNK on_comma env on_comma UNK on_comma on_op UNK on_comma on_op UNK on_rparen on_ignored_nl UNK # This middleware class allows a sort of "conditional" run within # a single middlware sequence. It takes another middleware runnable, # runs it with the same environment, then yields the resulting env to a block, # allowing that block to determine the next course of action in the # middleware sequence. # # The first argument to this middleware sequence is anywhere middleware # runnable, whether it be a class, lambda, or something else that # responds to `call`. This middleware runnable is run with the same # environment as this class. # # After running, {Call} takes the environment and yields it to a block # given to initialize the class, along with an instance of {Builder}. # The result is used to build up a new sequence on the given builder. # This builder is then run.
UNK UNK on_lparen UNK on_comma env on_comma UNK on_comma on_op UNK on_comma on_op UNK on_rparen on_ignored_nl UNK on_const on_comma UNK # For documentation, read the description of the {Call} class. # # @param [Object] callable A valid middleware runnable object. This # can be a class, a lambda, or an object that responds to `call`. # @yield [result, builder] This block is expected to build on `builder` # which is the next middleware sequence that will be run.
UNK on_op on_const on_period UNK on_lparen on_ivar on_comma on_op on_ivar on_rparen on_nl on_ignored_nl UNK on_op UNK on_period UNK on_lparen UNK # Build the callable that we'll run
UNK on_op UNK on_period UNK on_lparen UNK on_comma env on_rparen on_nl on_ignored_nl UNK on_op on_const on_period UNK on_nl on_ivar on_period # Run our callable with our environment
UNK on_op on_const on_period UNK on_nl on_ivar on_period UNK on_lparen UNK on_comma UNK on_rparen on_nl on_ignored_nl UNK on_period UNK on_ivar # Build our new builder based on the result
UNK on_period UNK on_ivar on_nl on_ivar on_op UNK on_period UNK on_lparen UNK on_rparen on_nl UNK on_op UNK on_period UNK on_lparen # Append our own app onto the builder so we slide the new # stack into our own chain...
env on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl UNK UNK on_lparen env on_rparen on_ignored_nl on_ivar on_period UNK on_lparen # Merge the environment into our original environment
on_ivar on_period UNK on_lparen env on_rparen UNK on_ivar on_nl end on_nl end on_nl end on_nl end on_nl end on_nl EMP # Call back into our compiled application and recover it.
