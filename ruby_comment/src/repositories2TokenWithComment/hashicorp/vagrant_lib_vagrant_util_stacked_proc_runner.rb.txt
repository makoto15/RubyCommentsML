UNK UNK on_nl UNK UNK on_nl UNK on_op UNK UNK on_nl end on_nl UNK UNK UNK UNK on_op UNK UNK # Represents the "stacked proc runner" behavior which is used a # couple places within Vagrant. This allows procs to "stack" on # each other, then all execute in a single action. An example of # its uses can be seen in the {Config} class.
UNK UNK on_nl UNK on_op UNK UNK on_nl end on_nl UNK UNK UNK UNK on_op UNK UNK UNK UNK on_op # Returns the proc stack. This should always be called as the # accessor of the stack. The instance variable itself should _never_ # be used. # # @return [Array<Proc>]
UNK UNK UNK on_op UNK UNK UNK UNK on_op UNK on_nl end on_nl UNK UNK UNK UNK on_op UNK UNK # Adds (pushes) a proc to the stack. The actual proc added here is # not executed, but merely stored. # # @param [Proc] block
UNK UNK UNK on_op UNK UNK UNK UNK UNK UNK UNK on_op UNK on_op UNK UNK UNK UNK UNK on_op # Executes all the procs on the stack, passing in the given arguments. # The stack is not cleared afterwards. It is up to the user of this # mixin to clear the stack by calling `proc_stack.clear`.
