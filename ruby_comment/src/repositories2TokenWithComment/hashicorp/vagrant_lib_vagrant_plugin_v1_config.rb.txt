UNK on_const on_nl on_const on_op on_const on_period UNK on_nl on_ignored_nl def UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK # This is the base class for a configuration key defined for # V1. Any configuration key plugins for V1 should inherit from this # class.
on_const on_op on_const on_period UNK on_nl on_ignored_nl def UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK # This constant represents an unset value. This is useful so it is # possible to know the difference between a configuration value that # was never set, and a value that is nil (explicitly). Best practice # is to initialize all variables to this value, then the {#merge} # method below will "just work" in many cases.
def UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_period UNK on_nl # This is called as a last-minute hook that allows the configuration # object to finalize itself before it will be put into use. This is # a useful place to do some defaults in the case the user didn't # configure something or so on. # # An example of where this sort of thing is used or has been used: # the "vm" configuration key uses this to make sure that at least # one sub-VM has been defined: the default VM. # # The configuration object is expected to mutate itself.
end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_period UNK on_nl on_ignored_nl UNK UNK # Default implementation is to do nothing.
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_period UNK on_nl on_ignored_nl UNK UNK on_comma UNK UNK # Merge another configuration object into this one. This assumes that # the other object is the same class as this one. This should not # mutate this object, but instead should return a new, merged object. # # The default implementation will simply iterate over the instance # variables and merge them together, with this object overriding # any conflicting instance variables of the older object. Instance # variables starting with "__" (double underscores) will be ignored. # This lets you set some sort of instance-specific state on your # configuration keys without them being merged together later. # # @param [Object] other The other configuration object to merge from, # this must be the same type of object as this one. # @return [Object] The merged object.
UNK UNK on_comma UNK UNK on_period UNK UNK on_op UNK on_op on_ignored_nl UNK on_period UNK on_period UNK UNK on_op key # Set all of our instance variables on the new class
UNK on_op key on_period UNK on_period UNK on_lparen UNK UNK UNK on_rparen on_nl UNK on_period UNK on_lparen key on_comma UNK # Ignore keys that start with a double underscore. This allows # configuration classes to still hold around internal state # that isn't propagated.
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK UNK on_op key on_comma UNK on_op on_ignored_nl UNK on_lparen UNK UNK # Allows setting options from a hash. By default this simply calls # the `#{key}=` method on the config class with the value, which is # the expected behavior most of the time. # # This is expected to mutate itself. # # @param [Hash] options A hash of options to set on this configuration # key.
def UNK on_lparen on_op UNK on_rparen on_ignored_nl UNK on_period UNK on_lparen on_op UNK on_rparen on_nl end on_nl on_ignored_nl def UNK # Converts this configuration object to JSON.
def UNK on_nl UNK on_period UNK on_lparen UNK UNK on_rparen UNK on_op UNK on_comma UNK on_op on_ignored_nl UNK UNK UNK # Returns the instance variables as a hash of key-value pairs.
def UNK on_lparen UNK on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl end on_nl end # This is called to upgrade this V1 config to V2. The parameter given # is the full V2 configuration object, so you can do anything to it # that you want. # # No return value is expected, modifications should be made directly # to the new V2 object. # # @param [V2::Root] new
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl end on_nl end on_nl end on_nl end on_nl end on_nl EMP EMP # Called after the configuration is finalized and loaded to validate # this object. # # @param [Environment] env Vagrant::Environment object of the # environment that this configuration has been loaded into. This # gives you convenient access to things like the the root path # and so on. # @param [ErrorRecorder] errors
