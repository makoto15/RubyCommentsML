UNK on_const on_nl UNK UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl on_ivar on_op on_const on_op on_const on_period UNK on_lparen on_tstring_beg # This class is responsible for loading Vagrant configuration, # usually in the form of Vagrantfiles. # # Loading works by specifying the sources for the configuration # as well as the order the sources should be loaded. Configuration # set later always overrides those set earlier; this is how # configuration "scoping" is implemented.
UNK UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl on_ivar on_op on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen # Initializes a configuration loader. # # @param [Registry] versions A registry of the available versions and # their associated loaders. # @param [Array] version_order An array of the order of the versions # in the registry. This is used to determine if upgrades are # necessary. Additionally, the last version in this order is always # considered the "current" version.
UNK UNK on_lparen UNK on_comma sources on_rparen on_ignored_nl sources on_op on_lbracket sources on_rbracket if on_op sources on_period UNK on_lparen on_const # Set the configuration data for the given name. # # The `name` should be a symbol and must uniquely identify the data # being given. # # `data` can either be a path to a Ruby Vagrantfile or a `Proc` directly. # `data` can also be an array of such values. # # At this point, no configuration is actually loaded. Note that calling # `set` multiple times with the same name will override any previously # set values. In this way, the last set data for a given name wins.
sources on_op on_lbracket sources on_rbracket if on_op sources on_period UNK on_lparen on_const on_rparen on_nl on_ignored_nl reliably_inspected_sources on_op sources on_period UNK # Sources should be an array
UNK on_op on_lbracket on_rbracket on_nl sources on_period UNK do on_op source on_op on_ignored_nl if on_op on_ivar on_period UNK on_lparen source # Gather the procs for every source, since that is what we care about.
on_ivar on_period debug on_lparen on_tstring_beg on_tstring_content on_embexpr_beg reliably_inspected_sources on_lbracket source on_rbracket on_embexpr_end on_tstring_end on_rparen on_nl on_ivar on_lbracket source on_rbracket on_op # Load the procs for this source and cache them. This caching # avoids the issue where a file may have side effects when loading # and loading it multiple times causes unexpected behavior.
UNK on_period UNK on_lparen on_ivar on_lbracket source on_rbracket on_rparen on_nl end on_nl on_ignored_nl on_ivar on_lbracket UNK on_rbracket on_op UNK on_nl # Add on to the array of procs we're going to use
on_ivar on_lbracket UNK on_rbracket on_op UNK on_nl end on_nl on_ignored_nl UNK UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_period UNK on_lparen # Set this source by name.
UNK UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_content on_embexpr_beg UNK on_period UNK on_embexpr_end on_tstring_end on_rparen on_nl # This loads the configuration sources in the given order and returns # an actual configuration object that is ready to be used. # # @param [Array<Symbol>] order The order of configuration to load. # @return [Object] The configuration object. This is different for # each configuration version.
UNK on_op on_ivar on_period UNK on_nl UNK on_op on_ivar on_period UNK on_lparen UNK on_rparen on_nl on_ignored_nl UNK on_op UNK on_period # Get the current version config class to use
UNK on_op UNK on_period UNK on_nl on_ignored_nl UNK on_op on_lbracket on_rbracket on_nl UNK on_op on_lbracket on_rbracket on_nl on_ignored_nl if on_op # This will hold our result
UNK on_op on_lbracket on_rbracket on_nl UNK on_op on_lbracket on_rbracket on_nl on_ignored_nl if on_op on_ivar on_lbracket UNK UNK on_rbracket on_period UNK # Keep track of the warnings and errors that may come from # upgrading the Vagrantfiles
on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ivar on_period UNK on_lparen UNK UNK on_rparen on_nl on_ivar on_period UNK # Vagrants home dir is set to the same dir as its project directory # so we don't want to load and merge the same Vagrantfile config # and execute its settings/procs twice # # Note: This protection won't work if there are two separate but # identical Vagrantfiles in the home and project dir
UNK on_op on_ivar on_period UNK on_lparen UNK on_rparen on_nl UNK on_ignored_nl UNK on_op UNK on_period UNK on_lparen UNK on_rparen on_nl # Get the proper version loader for this version and load
UNK on_op on_lbracket on_rbracket on_nl UNK on_op on_lbracket on_rbracket on_nl on_ignored_nl if UNK on_op UNK on_nl on_ivar on_period debug on_lparen # Store the errors/warnings associated with loading this # configuration. We'll store these for later.
if UNK on_op UNK on_nl on_ivar on_period debug on_lparen on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_end on_rparen # If this version is not the current version, then we need # to upgrade to the latest version.
UNK on_op on_ivar on_period UNK on_lparen UNK on_rparen on_nl UNK on_op UNK on_period UNK on_lparen UNK on_rparen on_nl on_ignored_nl UNK # Get the loader of this version and ask it to upgrade
UNK on_op UNK on_nl UNK on_op UNK on_nl on_ignored_nl UNK on_op UNK on_lbracket on_int on_rbracket on_nl end on_nl end on_nl # Append loading this to the version warnings and errors
UNK on_op UNK on_lbracket on_int on_rbracket on_nl end on_nl end on_nl on_ignored_nl on_ivar on_lbracket UNK on_rbracket on_op on_lbracket UNK on_comma # Store the new upgraded version
on_ivar on_lbracket UNK on_rbracket on_op on_lbracket UNK on_comma UNK on_comma UNK on_rbracket on_nl UNK on_ignored_nl on_ivar on_period debug on_lparen on_tstring_beg # Cache the loaded configuration along with any warnings # or errors so that they can be retrieved later.
UNK on_op on_ivar on_lbracket UNK on_rbracket on_nl UNK on_op UNK on_period UNK on_lparen UNK on_comma UNK on_lbracket on_int on_rbracket on_rparen # Merge the configurations
UNK on_op UNK on_lbracket on_int on_rbracket on_nl UNK on_op UNK on_lbracket on_int on_rbracket on_nl end on_nl end on_nl on_ignored_nl on_ivar # Append the total warnings/errors
UNK UNK on_lparen source on_comma reliably_inspected_sources on_rparen on_ignored_nl source on_op source on_period UNK if source on_period UNK on_lparen on_const on_rparen # This returns an array of `Proc` objects for the given source. # The `Proc` objects returned will expect a single argument for # the configuration object and are expected to mutate this # configuration object.
source on_op source on_period UNK if source on_period UNK on_lparen on_const on_rparen on_nl on_ignored_nl if source on_period UNK on_lparen on_const # Convert all pathnames to strings so we just have their path
raise on_const on_comma on_tstring_beg on_tstring_content on_tstring_end if source on_period UNK on_op on_int on_nl on_ignored_nl UNK on_lbracket source on_rbracket on_nl UNK # An array must be formatted as [version, proc], so verify # that and then return it
UNK on_lbracket source on_rbracket on_nl UNK source on_period UNK on_lparen on_const on_rparen on_nl UNK UNK on_lparen source on_rparen on_nl UNK # Return it as an array since we're expected to return an array # of [version, proc] pairs, but an array source only has one.
UNK UNK on_lparen source on_rparen on_nl UNK on_ignored_nl raise on_const on_comma on_tstring_beg on_tstring_content on_embexpr_beg reliably_inspected_sources on_lbracket source on_rbracket on_embexpr_end on_tstring_end # Strings are considered paths, so load them
UNK UNK on_lparen path on_rparen on_ignored_nl on_ivar on_period debug on_lparen on_tstring_beg on_tstring_content on_embexpr_beg path on_embexpr_end on_tstring_end on_rparen on_nl on_ignored_nl UNK # This returns an array of `Proc` objects for the given path source. # # @param [String] path Path to the file which contains the proper # `Vagrant.configure` calls. # @return [Array<Proc>]
raise on_const on_op on_const on_comma on_label e on_period UNK on_nl rescue on_const on_nl raise on_nl rescue on_const on_op on_const on_op # Report syntax errors in a nice way.
raise on_nl rescue on_const on_op on_const on_op on_const on_nl raise on_nl rescue on_const on_op e on_nl on_ivar on_period UNK on_lparen # Continue raising that exception...
raise on_nl rescue on_const on_op e on_nl on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_content on_embexpr_beg e on_period UNK on_embexpr_end on_tstring_end on_rparen # Continue raising known Vagrant errors since they already # contain well worded error messages and context.
raise on_const on_op on_const on_comma on_ignored_nl on_label path on_comma on_ignored_nl on_label line on_comma on_ignored_nl on_label e on_period UNK on_comma on_ignored_nl # Report the generic exception
