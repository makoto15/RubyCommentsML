UNK on_const on_op on_const on_nl UNK UNK on_period UNK on_nl UNK on_nl end on_nl on_ignored_nl UNK UNK on_period UNK on_lparen # This is the loader that handles configuration loading for V1 # configurations.
UNK UNK on_period UNK on_nl UNK on_nl end on_nl on_ignored_nl UNK UNK on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period # Returns a bare empty configuration object. # # @return [V1::Root]
UNK UNK on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK on_nl on_ignored_nl UNK on_nl end on_nl on_ignored_nl UNK UNK # Finalizes the configuration by making sure there is at least # one VM defined in it.
UNK on_period UNK on_nl on_ignored_nl UNK on_nl end on_nl on_ignored_nl UNK UNK on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op # Call the `#finalize` method on each of the configuration keys. # They're expected to modify themselves in our case.
UNK on_nl end on_nl on_ignored_nl UNK UNK on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_nl on_ignored_nl UNK on_period # Return the object
UNK UNK on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_nl on_ignored_nl UNK on_period UNK on_lparen UNK on_rparen on_nl # Loads the configuration for the given proc and returns a configuration # object. # # @param [Proc] config_proc # @return [Object]
UNK on_op UNK on_nl on_ignored_nl UNK on_period UNK on_lparen UNK on_rparen on_nl on_ignored_nl UNK on_nl end on_nl on_ignored_nl UNK UNK # Create a root configuration object
UNK on_period UNK on_lparen UNK on_rparen on_nl on_ignored_nl UNK on_nl end on_nl on_ignored_nl UNK UNK on_period UNK on_lparen UNK UNK # Call the proc with the root
UNK on_nl end on_nl on_ignored_nl UNK UNK on_period UNK on_lparen UNK UNK UNK on_rparen on_ignored_nl UNK on_op UNK on_period UNK # Return the root object, which doubles as the configuration object # we actually use for accessing as well.
UNK UNK on_period UNK on_lparen UNK UNK UNK on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_nl UNK on_op UNK on_period # Merges two configuration objects. # # @param [V1::Root] old The older root config. # @param [V1::Root] new The newer root config. # @return [V1::Root]
UNK on_op UNK on_period UNK on_nl UNK on_op UNK on_period UNK on_nl on_ignored_nl config_map on_op UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end # Grab the internal states, we use these heavily throughout the process
config_map on_op UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period UNK on_lparen UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_rparen on_nl on_ignored_nl # The config map for the new object is the old one merged with the # new one.
UNK on_op UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl UNK on_op UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl keys on_op # Merge the keys.
keys on_lbracket key on_rbracket on_op UNK on_period UNK on_lparen UNK on_lbracket key on_rbracket on_rparen on_nl UNK on_ignored_nl keys on_lbracket key # We need to do a merge, which we expect to be available # on the config class itself.
keys on_lbracket key on_rbracket on_op UNK on_period UNK on_nl end on_nl end on_nl on_ignored_nl UNK on_period UNK UNK on_op key # We just take the old value, but dup it so that we can modify.
UNK on_op keys on_period UNK on_lparen key on_rparen on_nl keys on_lbracket key on_rbracket on_op UNK on_period UNK on_nl end on_nl # Add in the keys that the new class has that we haven't merged.
on_const on_op on_const on_period UNK on_lparen config_map UNK keys on_rparen on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl UNK UNK on_period # Return the final root object
config_map on_op UNK on_nl UNK on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period UNK on_nl UNK on_const on_op # Get all the registered configuration objects and use them. If # we're currently on version 1, then we load all the config objects, # otherwise we load only the upgrade safe ones, since we're # obviously being loaded for an upgrade.
on_const on_op on_const on_period UNK on_lparen config_map on_rparen on_nl end on_nl end on_nl end on_nl end on_nl end on_nl EMP # Create the configuration root object
