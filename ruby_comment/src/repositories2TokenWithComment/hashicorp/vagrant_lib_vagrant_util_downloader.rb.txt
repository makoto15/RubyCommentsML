UNK on_const on_nl on_const on_op on_tstring_beg on_tstring_content on_embexpr_beg on_const on_embexpr_end on_tstring_content on_embexpr_beg on_const on_embexpr_end on_embexpr_beg on_const on_embexpr_end on_tstring_content on_embexpr_beg on_const # This class downloads files using various protocols by subprocessing # to cURL. cURL is a much more capable and complete download tool than # a hand-rolled Ruby library, so we defer to its expertise.
on_const on_op on_tstring_beg on_tstring_content on_embexpr_beg on_const on_embexpr_end on_tstring_content on_embexpr_beg on_const on_embexpr_end on_embexpr_beg on_const on_embexpr_end on_tstring_content on_embexpr_beg on_const on_lbracket on_tstring_beg on_tstring_content # Custom user agent provided to cURL so that requests to URL shorteners # are properly tracked. # # Vagrant/1.7.4 (+https://www.vagrantup.com; ruby2.1.0)
on_const on_op on_lbracket on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_period UNK on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_period UNK on_nl on_rbracket on_period UNK # Hosts that do not require notification on redirect
end on_nl on_ignored_nl on_ivar on_op options on_lbracket on_symbeg UNK on_rbracket on_nl on_ivar on_op options on_lbracket on_symbeg UNK on_rbracket on_nl on_ivar # Ignore, since its clearly not HTTP
on_ivar on_op options on_lbracket on_symbeg UNK on_rbracket on_nl on_ivar on_op options on_lbracket on_symbeg UNK on_rbracket on_nl on_ivar on_op options on_lbracket # Get the various optional values
def UNK on_nl UNK on_op UNK on_nl on_ignored_nl UNK on_op UNK UNK on_nl if on_ivar on_nl UNK on_lbracket on_symbeg UNK # This executes the actual download, downloading the source file # to the destination with the given options used to initialize this # class. # # If this method returns without an exception, the download # succeeded. An exception will be raised if the download failed.
UNK on_op UNK on_nl on_ignored_nl UNK on_op UNK UNK on_nl if on_ivar on_nl UNK on_lbracket on_symbeg UNK on_rbracket on_op on_symbeg # This variable can contain the proc that'll be sent to # the subprocess execute.
UNK on_lbracket on_symbeg UNK on_rbracket on_op on_symbeg UNK on_nl on_ignored_nl UNK on_op on_const on_op on_const on_op on_const on_period UNK on_lparen # If we're outputting progress, then setup the subprocess to # tell us output so we can parse it out.
options on_comma subprocess_options on_op UNK on_period options on_nl options on_op on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_ivar on_rbracket on_nl options on_op # Get the command line args and the subprocess opts based # on our downloader settings.
subprocess_options on_period UNK on_lparen UNK on_rparen on_nl on_ignored_nl UNK on_lparen options on_comma subprocess_options on_comma on_op UNK on_rparen on_nl UNK on_const # Merge in any extra options we set
UNK on_lparen options on_comma subprocess_options on_comma on_op UNK on_rparen on_nl UNK on_const on_op on_const on_op UNK on_nl UNK if UNK # Go!
UNK if UNK on_nl on_ignored_nl on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_content on_embexpr_beg UNK on_period UNK on_lbracket on_symbeg UNK on_rbracket on_embexpr_end # If we already retried, raise it.
UNK if UNK on_period UNK on_lbracket on_symbeg UNK on_rbracket on_period UNK on_op UNK on_nl on_ignored_nl on_ivar on_period UNK on_lparen on_tstring_beg # If its any error other than 33, it is an error.
on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ivar on_op UNK on_nl UNK on_op UNK on_nl UNK on_nl UNK # Exit code 33 means that the server doesn't support ranges. # In this case, try again without resume.
if on_ivar on_nl on_ivar on_period UNK on_nl on_ignored_nl on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_end on_rparen if on_const on_period UNK on_nl # If we're outputting to the UI, clear the output to # avoid lingering progress meters.
on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_end on_rparen if on_const on_period UNK on_nl end on_nl end on_nl on_ignored_nl UNK on_lparen on_ivar # Windows doesn't clear properly for some reason, so we just # output one more newline.
UNK on_nl end on_nl on_ignored_nl def UNK on_nl options on_comma subprocess_options on_op UNK on_period options on_nl options on_period UNK on_lparen # Everything succeeded
def UNK on_nl options on_comma subprocess_options on_op UNK on_period options on_nl options on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl # Does a HEAD request of the URL and returns the output.
def UNK on_lparen source on_comma UNK on_comma UNK on_rparen on_ignored_nl UNK on_period UNK UNK on_op UNK on_comma UNK on_op on_ignored_nl # Apply any checksum validations based on provided # options content # # @param source [String] Source of file # @param path [String, Pathname] local file path # @param checksums [Hash] User provided options # @option checksums [String] :md5 Compare MD5 checksum # @option checksums [String] :sha1 Compare SHA1 checksum # @return [Boolean]
UNK on_op UNK on_nl UNK on_op on_const on_period UNK UNK on_ignored_nl on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl # Create the callback that is called if we are interrupted
result on_op on_const on_period UNK on_lparen UNK on_rparen UNK on_ignored_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_op options # Execute!
UNK on_const on_op on_const if UNK on_nl on_ignored_nl if result on_period UNK on_op UNK on_nl on_ivar on_period UNK on_lparen on_tstring_beg # If the download was interrupted, then raise a specific error
if result on_period UNK on_op UNK on_nl on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_content on_embexpr_beg result on_period UNK on_embexpr_end on_tstring_end on_rparen # If it didn't exit successfully, we need to parse the data and # show an error message.
on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl UNK on_ignored_nl if on_op UNK on_nl UNK on_op result on_period UNK # All good actually. 416 means there is no more bytes to download
def options on_nl options on_op on_lbracket on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end # Returns the various cURL and subprocess options. # # @return [Array<Array, Hash>]
options on_op on_lbracket on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content # Build the list of parameters to execute with cURL
subprocess_options on_op UNK UNK on_nl on_ignored_nl if on_const on_period UNK on_nl subprocess_options on_lbracket on_symbeg UNK on_rbracket on_op UNK UNK on_nl # Specify some options for the subprocess
if on_const on_period UNK on_nl subprocess_options on_lbracket on_symbeg UNK on_rbracket on_op UNK UNK on_nl subprocess_options on_lbracket on_symbeg UNK on_rbracket on_lbracket # If we're in Vagrant, then we use the packaged CA bundle
