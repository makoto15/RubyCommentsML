UNK on_const on_nl UNK on_const on_op on_const on_nl on_ignored_nl def UNK on_lparen UNK on_comma env on_rparen on_ignored_nl on_ivar on_op UNK # This middleware class will detect and handle collisions with # forwarded ports, whether that means raising an error or repairing # them automatically. # # Parameters it takes from the environment hash: # # * `:port_collision_repair` - If true, it will attempt to repair # port collisions. If false, it will raise an exception when # there is a collision. # # * `:port_collision_extra_in_use` - An array of ports that are # considered in use. # # * `:port_collision_remap` - A hash remapping certain host ports # to other host ports. #
UNK on_ignored_nl env on_lbracket on_symbeg UNK on_rbracket on_period env on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen do on_ignored_nl UNK on_lparen # Acquire a process-level lock so that we don't choose a port # that someone else also chose.
UNK on_lparen env on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen env on_rparen on_ignored_nl UNK on_nl end on_nl on_ignored_nl UNK # Always run the recover method so that we release leases
extra_in_use on_op env on_lbracket on_symbeg UNK on_rbracket on_op UNK UNK on_nl on_ignored_nl if extra_in_use on_period UNK on_lparen on_const on_rparen on_nl # Get the extra ports we consider in use
if extra_in_use on_period UNK on_lparen on_const on_rparen on_nl extra_in_use on_op on_const on_lbracket extra_in_use on_period UNK UNK on_op UNK on_op on_lbracket # If extras are provided as an Array (previous behavior) convert # to Hash as expected for IP aliasing support
UNK on_op env on_lbracket on_symbeg UNK on_rbracket on_op UNK UNK on_nl on_ignored_nl UNK on_op on_op on_op env on_lbracket on_symbeg UNK # Get the remap
UNK on_op on_op on_op env on_lbracket on_symbeg UNK on_rbracket on_nl on_ignored_nl port_checker on_op env on_lbracket on_symbeg UNK on_rbracket on_nl port_checker # Determine the handler we'll use if we have any port collisions
port_checker on_op env on_lbracket on_symbeg UNK on_rbracket on_nl port_checker on_op UNK on_lparen on_symbeg UNK on_rparen on_nl on_ignored_nl on_ivar on_period debug # The method we'll use to check if a port is open.
on_ivar on_period debug on_lparen on_tstring_beg on_tstring_content on_embexpr_beg extra_in_use on_period UNK on_embexpr_end on_tstring_end on_rparen on_nl on_ivar on_period debug on_lparen on_tstring_beg on_tstring_content # Log out some of our parameters
usable_ports on_op on_const on_period UNK on_lparen env on_lbracket on_symbeg UNK on_rbracket on_period UNK on_period UNK on_period UNK on_rparen on_nl usable_ports # Determine a list of usable ports for repair
UNK on_lparen env on_rparen do on_op options on_op on_ignored_nl usable_ports on_period UNK on_lparen options on_lbracket on_symbeg UNK on_rbracket on_rparen on_nl # Pass one, remove all defined host ports from usable ports
UNK on_lparen env on_rparen do on_op options on_op on_ignored_nl UNK on_op options on_lbracket on_symbeg UNK on_rbracket on_nl host_port on_op options # Pass two, detect/handle any collisions
UNK on_op UNK on_lparen extra_in_use on_comma host_port on_comma host_ip on_rparen on_op on_ignored_nl UNK on_lparen port_checker on_comma host_ip on_comma host_port on_rparen # If the port is open (listening for TCP connections)
repaired_port on_op usable_ports on_period UNK on_period UNK on_lbracket on_int on_rbracket on_nl usable_ports on_period UNK on_lparen repaired_port on_rparen on_nl on_ignored_nl UNK # Attempt to repair the forwarded port
UNK on_op UNK on_lparen extra_in_use on_comma repaired_port on_comma host_ip on_rparen on_op on_ignored_nl UNK on_lparen port_checker on_comma host_ip on_comma repaired_port on_rparen # If the port is in use, then we can't use this either...
UNK on_nl end on_nl on_ignored_nl if on_op repaired_port on_op usable_ports on_period UNK on_nl UNK on_const on_op on_const on_comma on_ignored_nl on_label # We have a port so break out
if on_op repaired_port on_op usable_ports on_period UNK on_nl UNK on_const on_op on_const on_comma on_ignored_nl on_label env on_lbracket on_symbeg UNK on_rbracket # If we have no usable ports then we can't repair
options on_lbracket on_symbeg UNK on_rbracket on_op repaired_port on_nl on_ignored_nl on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_content on_embexpr_beg host_port on_embexpr_end on_tstring_content on_embexpr_beg # Modify the args in place
env on_lbracket on_symbeg UNK on_rbracket on_period UNK on_lparen on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_label host_port on_period # Notify the user
leasedir on_op on_ivar on_period env on_period UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl leasedir on_period UNK on_nl on_ignored_nl # Check if this port is "leased". We use a leasing system of # about 60 seconds to avoid any forwarded port collisions in # a highly parallelized environment.
if UNK on_period UNK on_op UNK on_period UNK on_period UNK on_op UNK on_nl UNK on_period UNK on_nl end on_nl on_ignored_nl # Delete old, invalid leases while we're looking
UNK UNK if UNK on_nl on_ignored_nl leasedir on_period UNK on_lparen UNK on_rparen on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen do # If its invalid, then the port is "open" and in use
leasedir on_period UNK on_lparen UNK on_rparen on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen do on_op UNK on_op on_ignored_nl UNK on_period # Otherwise, create the lease
on_ivar on_op UNK on_nl on_ignored_nl UNK on_nl end on_nl on_ignored_nl def UNK on_nl leasedir on_op on_ivar on_period env on_period UNK # Add to the leased array so we unlease it right away
UNK on_nl end on_nl on_ignored_nl def UNK on_nl leasedir on_op on_ivar on_period env on_period UNK on_period UNK on_lparen on_tstring_beg on_tstring_content # Things look good to us!
def UNK on_lparen extra_in_use on_comma UNK on_comma hostip on_rparen on_ignored_nl hostip on_op on_tstring_beg on_tstring_content on_tstring_end if hostip on_period UNK on_op # This functions checks to see if the current instance's hostport and # hostip for forwarding is in use by the virtual machines created # previously.
UNK UNK if UNK extra_in_use on_period UNK on_lparen UNK on_rparen on_nl on_ignored_nl if hostip on_op on_tstring_beg on_tstring_content on_tstring_end on_nl if # ret. false if none of the VMs we spun up had this port forwarded.
if hostip on_op on_tstring_beg on_tstring_content on_tstring_end on_nl if extra_in_use on_period UNK on_lparen UNK on_rparen on_period UNK on_op on_int on_nl UNK # ret. true if the user has requested to bind on all interfaces but # we already have a rule in one the VMs we spun up.
UNK on_op host_ip on_op on_tstring_beg on_tstring_content on_tstring_end on_nl if on_const on_op on_const on_period UNK on_op UNK on_op on_tstring_beg on_tstring_content on_tstring_end # If no host_ip is specified, intention taken to be listen on all interfaces.
if UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_op UNK on_period UNK UNK on_op UNK on_op UNK on_lbracket on_int on_rbracket on_op UNK # Do a regular check
UNK if UNK on_op on_symbeg UNK on_nl on_ignored_nl UNK options on_nl end on_nl end on_nl on_ignored_nl def UNK on_lparen port_checker # Ignore anything but forwarded ports
UNK on_op UNK on_period UNK on_lparen UNK on_period UNK on_op port_checker on_period UNK on_period UNK on_comma port_checker on_period UNK on_period # Trim args if checker method does not support inclusion of host_ip
