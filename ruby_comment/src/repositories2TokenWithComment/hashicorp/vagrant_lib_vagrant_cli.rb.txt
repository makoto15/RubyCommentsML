UNK on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg UNK on_rparen on_nl on_ignored_nl UNK UNK on_lparen UNK # Manages the command line interface to Vagrant.
UNK on_nl UNK on_int on_nl end on_nl on_ignored_nl if on_ivar on_op on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_period UNK on_tstring_beg on_tstring_content # Help is next in short-circuiting everything. Print # the help and exit.
UNK on_op UNK on_nl if on_ivar on_nl UNK on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period UNK on_period # If we reached this far then we must have a subcommand. If not, # then we also just print the help and exit.
result on_op on_int on_nl UNK on_ignored_nl on_ivar on_period UNK on_lparen on_ivar on_comma on_symbeg UNK on_comma UNK on_comma on_symbeg UNK on_rparen # Initialize and execute the command class, returning the exit status.
UNK UNK on_nl UNK on_op on_const on_period new UNK on_op o on_op on_ignored_nl o on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end # This prints out the help for the CLI.
UNK on_op on_const on_period new UNK on_op o on_op on_ignored_nl o on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl o on_period # We use the optionparser for this. Its just easier. We don't use # an optionparser above because I don't think the performance hits # of creating a whole object are worth checking only a couple flags.
commands on_op UNK UNK on_nl UNK on_op on_int on_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period UNK on_period # Add the available subcommands as separators in order to print them # out as well.
UNK if on_op UNK on_lbracket on_int on_rbracket on_lbracket on_symbeg UNK on_rbracket on_nl on_ignored_nl key on_op key on_period UNK on_nl UNK # Skip non-primary commands. These only show up in extended # help output.
