UNK on_const on_op on_const on_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_const on_op # Update the default formatter within the log4r library to ensure # sensitive values are being properly scrubbed from logger data
UNK on_const on_op on_op on_const on_nl def UNK on_lparen on_op UNK on_rparen on_ignored_nl UNK on_nl on_const on_period UNK on_period UNK # This is a customized OptionParser for Vagrant plugins. It # will automatically add any default CLI options defined # outside of command implementations to the local option # parser instances in use
UNK on_const on_nl on_const on_op on_const on_op on_const on_nl end on_nl on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content # Inject the option parser into the vagrant plugins # module so it is automatically used when defining # command options
if on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op on_tstring_beg on_tstring_end on_nl require on_tstring_beg # Enable logging if it is requested. We do this before # anything else so that we can setup the output before # any logging occurs.
require on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_period UNK on_lparen on_op on_const on_op on_const on_op on_const on_rparen on_nl on_ignored_nl level on_op # Require Log4r and define the levels we'll be using
level on_op nil on_nl end on_nl on_ignored_nl level on_op nil if on_op level on_period UNK on_lparen on_const on_rparen on_nl on_ignored_nl # This means that the logging constant wasn't found, # which is fine. We just keep `level` as `nil`. But # we tell the user.
level on_op nil if on_op level on_period UNK on_lparen on_const on_rparen on_nl on_ignored_nl if on_op level on_nl UNK on_period puts # Some constants, such as "true" resolve to booleans, so the # above error checking doesn't catch it. This will check to make # sure that the log level is an integer, as Log4r requires.
UNK on_period puts on_tstring_beg on_tstring_content on_embexpr_beg on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_embexpr_end on_tstring_end on_nl UNK on_period puts on_tstring_beg on_tstring_end # We directly write to stderr here because the VagrantError system # is not setup yet.
if level on_nl UNK on_const on_op on_const on_op on_const on_nl def on_op on_lparen UNK on_rparen on_ignored_nl UNK on_lparen UNK on_period # Set the logging level on all "vagrant" namespaced # logs as long as we have a valid level.
UNK on_const on_op on_const on_op on_const on_nl def on_op on_lparen UNK on_rparen on_ignored_nl UNK on_lparen UNK on_period UNK on_rparen on_nl # NOTE: We must do this little hack to allow # rest-client to write using the `<<` operator. # See https://github.com/rest-client/rest-client/issues/34#issuecomment-290858 # for more information
require on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_period UNK on_op logger on_nl on_ignored_nl on_const on_op on_const on_period UNK on_period UNK on_op # Vagrant Cloud gem uses RestClient to make HTTP requests, so # log them if debug is enabled and use Vagrants logger
require on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl global_logger on_op on_const on_op on_const on_period new on_lparen on_tstring_beg # OpenSSL must be loaded here since when it is loaded via `autoload` # there are issues with ciphers not being properly loaded.
require on_tstring_beg on_tstring_content on_tstring_end on_nl global_logger on_op on_const on_op on_const on_period new on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_period # Always make the version available
require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl autoload on_symbeg on_const on_comma on_tstring_beg on_tstring_content # We need these components always so instead of an autoload we # just require them explicitly here.
on_const on_op on_const on_period new on_period UNK do on_op c on_op on_ignored_nl c on_period register on_lparen on_symbeg on_tstring_content on_tstring_end on_rparen # These are the various plugin versions and their components in # a lazy loaded Hash-like structure.
def self on_period UNK on_lparen version on_comma on_op UNK on_rparen on_ignored_nl on_const on_period UNK on_lparen version on_comma on_op UNK on_rparen # Configure a Vagrant environment. The version specifies the version # of the configuration that is expected by the block. The block, based # on that version, configures the environment. # # Note that the block isn't run immediately. Instead, the configuration # block is stored until later, and is run when an environment is loaded. # # @param [String] version Version of the configuration
def self on_period UNK on_lparen UNK on_comma version on_op nil on_rparen on_ignored_nl UNK UNK UNK on_const on_period UNK on_nl on_ignored_nl # This checks if a plugin with the given name is available (installed # and enabled). This can be used from the Vagrantfile to easily branch # based on plugin availability.
UNK UNK if UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period UNK on_period UNK on_period UNK on_lbrace on_op UNK on_op UNK # We check the plugin names first because those are cheaper to check
require on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_op on_const on_period UNK on_period UNK on_lparen UNK on_comma version on_rparen on_nl end on_nl # Now check the plugin gem names
def self on_period UNK on_lparen version on_comma UNK on_op nil on_rparen on_ignored_nl key on_op version on_period UNK on_period UNK on_nl # Returns a superclass to use when creating a plugin for Vagrant. # Given a specific version, this returns a proper superclass to use # to register plugins for that version. # # Optionally, if you give a specific component, then it will return # the proper superclass for that component as well. # # Plugins and plugin components should subclass the classes returned by # this method. This method lets Vagrant core control these superclasses # and change them over time without affecting plugins. For example, if # the V1 superclass happens to be "Vagrant::V1," future versions of # Vagrant may move it to "Vagrant::Plugins::V1" and plugins will not be # affected. # # @param [String] version # @param [String] component # @return [Class]
key on_op version on_period UNK on_period UNK on_nl key on_op on_lbracket key on_comma UNK on_period UNK on_period UNK on_rbracket if # Build up the key and return a result
UNK UNK if UNK on_nl on_ignored_nl UNK on_const on_comma on_tstring_beg on_tstring_content on_tstring_end on_op on_ignored_nl on_tstring_beg on_embexpr_beg version on_embexpr_end on_tstring_content on_embexpr_beg # If we found our component then we return that
UNK on_const on_comma on_tstring_beg on_tstring_content on_tstring_end on_op on_ignored_nl on_tstring_beg on_embexpr_beg version on_embexpr_end on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_end on_nl end on_nl # If we didn't find a result, then raise an exception, depending # on if we got a component or not.
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl puts on_tstring_beg on_tstring_content on_tstring_end on_nl puts on_tstring_beg on_tstring_content on_tstring_end on_nl puts on_tstring_beg # @deprecated
def self on_period UNK on_lparen on_op requirements on_rparen on_ignored_nl UNK on_op on_const on_op on_const on_period new on_lparen on_op requirements on_rparen # This checks if Vagrant is installed in a specific version. # # Example: # # Vagrant.version?(">= 2.1.0") #
def self on_period UNK on_lparen on_op requirements on_rparen on_ignored_nl logger on_op on_const on_op on_const on_period new on_lparen on_tstring_beg on_tstring_content on_tstring_end # This allows a Vagrantfile to specify the version of Vagrant that is # required. You can specify a list of requirements which will all be checked # against the running Vagrant version. # # This should be specified at the _top_ of any Vagrantfile. # # Examples are shown below: # # Vagrant.require_version(">= 1.3.5") # Vagrant.require_version(">= 1.3.5", "< 1.4.0") # Vagrant.require_version("~> 1.3.5") #
def self on_period UNK on_nl on_lbrace on_rbrace on_period UNK do on_op UNK on_op on_ignored_nl on_const on_period UNK do on_op k # This allows plugin developers to access the original environment before # Vagrant even ran. This is useful when shelling out, especially to other # Ruby processes. # # @return [Hash]
on_const on_period UNK on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_const on_period UNK on_rparen on_nl on_ignored_nl if on_const # Default I18n to load the en locale
on_const on_period UNK on_period UNK on_op UNK on_nl end on_nl on_ignored_nl if on_const on_period UNK on_nl global_logger on_period info on_lparen # Make sure only available locales are used. This will be the default in the # future but we need this to silence a deprecation warning from 0.6.9
UNK on_op UNK do on_op directory on_op on_ignored_nl UNK UNK if on_op directory on_period UNK on_nl on_ignored_nl UNK on_op directory # A lambda that knows how to load plugins from a single directory.
UNK UNK if on_op directory on_period UNK on_nl on_ignored_nl UNK on_op directory on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl # We only care about directories
UNK on_op directory on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl if UNK on_period UNK on_nl global_logger on_period UNK on_lparen # If there is a plugin file in the top-level directory, then load # that up.
on_const on_period UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period UNK on_lparen UNK on_rparen on_period UNK do on_op directory # Go through the `plugins` directory and attempt to load any plugins. The # plugins are allowed to be in a directory in `plugins` or at most one # directory deep within the plugins directory. So a plugin can be at # `plugins/foo` or also at `plugins/foo/bar`, but no deeper.
UNK if on_op directory on_period UNK on_nl on_ignored_nl UNK if UNK on_period UNK on_lparen directory on_rparen on_nl on_ignored_nl directory on_period # Ignore non-directories
UNK if UNK on_period UNK on_lparen directory on_rparen on_nl on_ignored_nl directory on_period UNK on_lparen UNK on_rparen on_period UNK on_lparen on_op # Load from this directory, and exit if we successfully loaded a plugin
directory on_period UNK on_lparen UNK on_rparen on_period UNK on_lparen on_op UNK on_rparen on_nl end on_nl EMP EMP EMP EMP EMP # Otherwise, attempt to load from sub-directories
