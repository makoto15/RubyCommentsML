UNK on_const on_nl UNK UNK on_lparen UNK on_op UNK on_rparen on_ignored_nl on_ivar on_op on_lbracket on_rbracket on_nl on_ivar on_op UNK on_nl # This class executes multiple actions as a single batch, parallelizing # the action calls if possible.
UNK action on_lparen machine on_comma action on_comma UNK on_op UNK on_rparen on_ignored_nl on_ivar on_op on_lbracket machine on_comma action on_comma UNK # Add an action to the batch of actions that will be run. # # This will **not** run the action now. The action will be run # when {#run} is called. # # @param [Machine] machine The machine to run the action on # @param [Symbol] action The action to run # @param [Hash] options Any additional options to send in.
UNK UNK on_lparen machine on_comma on_op UNK on_rparen on_ignored_nl on_ivar on_op on_lbracket machine on_comma UNK on_comma UNK on_rbracket on_nl end # Custom runs a custom proc against a machine. # # @param [Machine] machine The machine to run against.
UNK UNK on_nl par on_op UNK on_nl on_ignored_nl if on_ivar on_nl par on_op UNK on_nl on_ivar on_period UNK on_lparen on_tstring_beg # Run all the queued up actions, parallelizing if possible. # # This will parallelize if and only if the provider of every machine # supports parallelization and parallelization is possible from # initialization of the class.
thread on_op on_const on_period UNK UNK on_ignored_nl on_const on_period UNK on_lbracket on_symbeg error on_rbracket on_op UNK on_nl on_ignored_nl on_const on_period # Create the new thread to run our action. This is basically just # calling the action but also contains some error handling in it # as well.
on_const on_period UNK on_lbracket on_symbeg UNK on_rbracket on_op par on_nl on_ignored_nl UNK on_op on_const on_period UNK on_nl on_ignored_nl UNK on_ignored_nl # Note that this thread is being used for running # a batch action
UNK on_op on_const on_period UNK on_nl on_ignored_nl UNK on_ignored_nl if action on_period UNK on_lparen on_const on_rparen on_nl action on_period UNK # Record our pid when we started in order to figure out if # we've forked...
UNK if on_op par on_op on_const on_period UNK on_op UNK on_nl on_ignored_nl on_const on_period UNK on_lbracket on_symbeg error on_rbracket on_op # If we're not parallelizing, then raise the error. We also # don't raise the error if we've forked, because it'll hang # the process.
on_const on_period UNK on_lbracket on_symbeg error on_rbracket on_op e on_nl on_ignored_nl if on_const on_period UNK on_op UNK on_nl machine on_period # Store the exception that will be processed later
if on_const on_period UNK on_op UNK on_nl machine on_period UNK on_period error on_lparen on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end # We can only do the things below if we do not fork, otherwise # it'll hang the process.
machine on_period UNK on_period error on_lparen on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_rparen on_nl end on_nl end on_nl # Let the user know that this process had an error early # so that they see it while other things are happening.
if on_const on_period UNK on_op UNK on_nl on_ignored_nl UNK on_op UNK on_nl if on_const on_period UNK on_lbracket on_symbeg error on_rbracket # If we forked during the process run, we need to do a hard # exit here. Ruby's fork only copies the running process (which # would be us), so if we return from this thread, it results # in a zombie Ruby process.
on_ignored_nl UNK on_op UNK on_nl if on_const on_period UNK on_lbracket on_symbeg error on_rbracket on_nl UNK on_op UNK on_nl error on_op # We forked.
UNK on_op UNK on_nl error on_op on_const on_period UNK on_lbracket on_symbeg error on_rbracket on_nl on_ivar on_period error on_lparen error on_period # We had an error, print the stack trace and exit immediately.
thread on_lbracket on_symbeg machine on_rbracket on_op machine on_nl on_ignored_nl if on_op par on_nl thread on_period UNK on_lparen on_const on_rparen UNK # Set some attributes on the thread for later
thread on_period UNK on_lparen on_const on_rparen UNK thread on_period UNK on_nl on_ignored_nl if thread on_lbracket on_symbeg error on_rbracket on_nl e # Wait for the thread to complete
if thread on_lbracket on_symbeg error on_rbracket on_nl e on_op thread on_lbracket on_symbeg error on_rbracket on_nl if on_op thread on_lbracket on_symbeg # If the thread had an error, then store the error to show later
if on_op thread on_lbracket on_symbeg error on_rbracket on_period UNK on_lparen on_const on_op on_const on_rparen on_nl e on_op thread on_lbracket on_symbeg # If the error isn't a Vagrant error, then store the backtrace # as well.
UNK on_period UNK UNK on_op thread on_op on_ignored_nl if thread on_lbracket on_symbeg UNK on_rbracket on_nl on_ivar on_period UNK on_lparen on_tstring_beg # Check if any threads set an exit code and exit if found. If # multiple threads have exit code values set, the first encountered # will be the value used.
