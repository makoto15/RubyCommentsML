attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl # The address of the Atlas server to upload to. By default this will # be the public Atlas server. # # @return [String]
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl attr_accessor # The Atlas token to use. If the user has run `vagrant login`, this will # use that token. If the environment variable `ATLAS_TOKEN` is set, the # uploader will use this value. By default, this is nil. # # @return [String, nil]
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor # The name of the application to push to. This will be created (with # user confirmation) if it doesn't already exist. # # @return [String]
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor # The base directory with file contents to upload. By default this # is the same directory as the Vagrantfile, but you can specify this # if you have a `src` folder or `bin` folder or some other folder # you want to upload. # # @return [String]
attr_accessor on_symbeg UNK on_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl def # Lists of files to include/exclude in what is uploaded. Exclude is # always the last run filter, so if a file is matched in both include # and exclude, it will be excluded. # # The value of the array elements should be a simple file glob relative # to the directory being packaged. # # @return [Array<String>]
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl def UNK on_nl on_ivar on_op on_const on_nl on_ivar on_op on_const # If set to true, Vagrant will automatically use VCS data to determine # the files to upload. As a caveat: uncommitted changes will not be # deployed. # # @return [Boolean]
attr_accessor on_symbeg UNK on_nl on_ignored_nl def UNK on_nl on_ivar on_op on_const on_nl on_ivar on_op on_const on_nl on_ivar on_op on_const on_nl # The path to the uploader binary to shell out to. This usually # is only set for debugging/development. If not set, the uploader # will be looked for within the Vagrant installer dir followed by # the PATH. # # @return [String]
def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl end on_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl # Add the filepath to the list of includes # @param [String] filepath
def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl end on_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl # Add the filepath to the list of excludes # @param [String] filepath
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK on_period UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen # Determine if the given string is "missing" (blank) # @return [true, false]
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op on_const on_op on_const on_op on_const on_period UNK on_lparen UNK on_rparen on_nl UNK # Attempt to load the token from disk using the vagrant-login plugin. If # the constant is not defined, that means the user is operating in some # bespoke and unsupported Ruby environment. # # @param [Vagrant::Environment] env # # @return [String, nil] # the token, or nil if it does not exist
