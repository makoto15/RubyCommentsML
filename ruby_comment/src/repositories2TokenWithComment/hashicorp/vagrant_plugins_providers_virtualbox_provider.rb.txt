on_const on_op on_const on_period UNK on_nl UNK on_nl UNK on_const on_op on_const on_op on_const on_comma on_ignored_nl on_const on_op on_const on_op # Instantiate the driver, which will determine the VirtualBox # version and all that, which checks for VirtualBox being present
UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op on_tstring_beg on_tstring_content UNK UNK UNK on_tstring_end on_nl # This method will load in our driver, so we call it now to # initialize it.
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op on_tstring_beg on_tstring_content UNK UNK UNK on_tstring_end on_nl UNK on_const on_period UNK on_lparen # @see Vagrant::Plugin::V1::Provider#action
UNK on_op on_tstring_beg on_tstring_content UNK UNK UNK on_tstring_end on_nl UNK on_const on_period UNK on_lparen UNK on_rparen if on_const on_period UNK # Attempt to get the action method from the Action class if it # exists, otherwise return nil to show that we don't support the # given action.
def UNK on_nl id on_op on_ivar on_period id on_nl on_ignored_nl UNK on_ignored_nl on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_content UNK on_ivar # If the machine ID changed, then we need to rebuild our underlying # driver.
on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl id on_op UNK on_nl UNK on_nl end on_nl end on_nl on_ignored_nl # The virtual machine doesn't exist, so we probably have a stale # ID. Just clear the id out of the machine and reload it.
def UNK on_nl UNK UNK if UNK on_period id on_op on_symbeg UNK on_nl on_ignored_nl UNK UNK on_ignored_nl UNK on_tstring_beg on_tstring_content # Returns the SSH info for accessing the VirtualBox VM.
UNK UNK if UNK on_period id on_op on_symbeg UNK on_nl on_ignored_nl UNK UNK on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl # If the VM is not running that we can't possibly SSH into it
UNK UNK on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl UNK on_ivar on_period UNK on_lparen on_ivar on_period UNK on_period UNK on_period # Return what we know. The host is always "127.0.0.1" because # VirtualBox VMs are always local. The port we try to discover # by reading the forwarded ports.
def UNK on_nl if on_const on_op on_const on_op on_const on_period UNK on_lparen on_ivar on_period UNK on_rparen on_nl on_ivar on_period UNK # Return the state of VirtualBox virtual machine by actually # querying VBoxManage. # # @return [Symbol]
if on_const on_op on_const on_op on_const on_period UNK on_lparen on_ivar on_period UNK on_rparen on_nl on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_content # We have to check if the UID matches to avoid issues with # VirtualBox.
state_id on_op UNK on_nl state_id on_op on_symbeg UNK if on_op on_ivar on_period UNK on_nl state_id on_op on_ivar on_period UNK if # Determine the ID of the state here.
UNK on_op state_id on_period to_s on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl UNK on_op on_const # Translate into short/long descriptions
if state_id on_op on_symbeg UNK on_nl state_id on_op on_const on_op on_const on_op on_const on_nl end on_nl on_ignored_nl on_const on_op on_const # If we're not created, then specify the special ID flag
on_const on_op on_const on_period UNK on_lparen state_id on_comma UNK on_comma UNK on_rparen on_nl end on_nl on_ignored_nl def to_s on_nl id # Return the state
def to_s on_nl id on_op on_ivar on_period id on_op on_ivar on_period id on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_tstring_beg on_tstring_content UNK # Returns a human-friendly string version of this provider which # includes the machine's ID that this provider represents, if it # has one. # # @return [String]
