UNK on_const on_nl UNK on_const on_nl on_ignored_nl UNK UNK UNK UNK on_comma UNK on_comma UNK UNK on_ignored_nl on_ivar on_op UNK # This class handles guest-OS specific interactions with a machine. # It is primarily responsible for detecting the proper guest OS # implementation and then delegating capabilities. # # Vagrant has many tasks which require specific guest OS knowledge. # These are implemented using a guest/capability system. Various plugins # register as "guests" which determine the underlying OS of the system. # Then, "guest capabilities" register themselves for a specific OS (one # or more), and these capabilities are called. # # Example capabilities might be "mount_virtualbox_shared_folder" or # "configure_networks". # # This system allows for maximum flexibility and pluginability for doing # guest OS specific operations.
UNK UNK on_nl UNK on_op on_ivar on_period UNK on_period UNK on_period UNK on_nl UNK UNK UNK on_comma on_ivar on_comma on_ivar # This will detect the proper guest OS for the machine and set up # the class to actually execute capabilities.
UNK UNK UNK on_op UNK UNK on_ignored_nl UNK on_nl UNK on_const on_op on_const on_op e on_nl UNK on_const on_op on_const # See {CapabilityHost#capability}
UNK UNK on_nl UNK UNK UNK UNK UNK UNK UNK on_nl end on_nl on_ignored_nl UNK UNK on_nl on_op on_op UNK # Returns the specified or detected guest type name. # # @return [Symbol]
UNK UNK on_nl on_op on_op UNK on_nl end on_nl end on_nl end on_nl EMP EMP EMP EMP EMP EMP EMP # This returns whether the guest is ready to work. If this returns # `false`, then {#detect!} should be called in order to detect the # guest OS. # # @return [Boolean]
