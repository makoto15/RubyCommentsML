on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period UNK on_nl on_ignored_nl on_const on_op UNK on_nl on_ignored_nl def self on_period UNK on_nl UNK # This is the default endpoint of the Vagrant Cloud in # use. API calls will be made to this for various functions # of Vagrant that may require remote access. # # @return [String]
on_const on_op UNK on_nl on_ignored_nl def self on_period UNK on_nl UNK on_period UNK UNK on_ignored_nl UNK UNK on_nl end on_nl # Max number of seconds to wait for joining an active thread. # # @return [Integer] # @note This is not the maximum time for a thread to complete.
def self on_period UNK on_nl UNK on_period UNK UNK on_ignored_nl UNK UNK on_nl end on_nl end on_nl on_ignored_nl def self # This holds a global lock for the duration of the block. This should # be invoked around anything that is modifying process state (such as # environmental variables).
def self on_period UNK on_nl on_op on_op on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl end on_nl on_ignored_nl def self on_period # This returns a true/false showing whether we're running from the # environment setup by the Vagrant installers. # # @return [Boolean]
def self on_period UNK on_nl on_op on_op on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op on_ignored_nl on_op UNK on_lparen on_op on_const # This returns a true/false if we are running within a bundler environment # # @return [Boolean]
def self on_period UNK on_nl UNK UNK if on_op on_const on_period UNK on_nl on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl # Returns the path to the embedded directory of the Vagrant installer, # if there is one (if we're running in an installer). # # @return [String]
def self on_period UNK on_nl on_op on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl end on_nl on_ignored_nl def self on_period UNK # Should the plugin system be initialized # # @return [Boolean]
def self on_period UNK on_nl on_op on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl end on_nl on_ignored_nl def self on_period UNK # This returns whether or not 3rd party plugins should and can be loaded. # # @return [Boolean]
def self on_period UNK on_nl on_op on_op on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl end on_nl on_ignored_nl def self on_period # Whether or not super quiet mode is enabled. This is ill-advised. # # @return [Boolean]
def self on_period UNK on_nl on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen # The current log level for Vagrant # # @return [String]
def self on_period UNK on_lparen UNK on_op UNK on_rparen on_ignored_nl UNK on_op on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl UNK # Returns the URL prefix to the server. # # @return [String]
def self on_period UNK on_nl on_ivar on_op on_const on_period UNK on_lparen on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end UNK UNK # The source root is the path to the root directory of the Vagrant source. # # @return [Pathname]
def self on_period UNK on_nl UNK on_op on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl on_ignored_nl if on_op UNK on_op on_const # This returns the path to the ~/.vagrant.d folder where Vagrant's # per-user state is stored. # # @return [Pathname]
UNK on_op on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl on_ignored_nl if on_op UNK on_op on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket # Use user specified env var if available
if on_op UNK on_op on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl UNK on_op on_tstring_beg UNK on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end # On Windows, we default to the USERPROFILE directory if it # is available. This is more compatible with Cygwin and sharing # the home directory across shells.
UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl on_const on_period UNK on_lparen UNK on_rparen on_period UNK on_nl end on_nl on_ignored_nl def # Fallback to the default
def self on_period UNK on_nl on_const on_op on_const on_period UNK on_lparen on_const on_op on_const on_rparen on_period UNK on_nl end on_nl # This returns true/false if the running version of Vagrant is # a pre-release version (development) # # @return [Boolean]
def self on_period UNK on_nl if on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl UNK on_nl UNK on_ignored_nl UNK on_nl end # This allows control over dependency resolution when installing # plugins into vagrant. When true, dependency libraries that Vagrant # core relies upon will be hard constraints. # # @return [Boolean]
def self on_period UNK on_nl if on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl UNK on_nl UNK on_ignored_nl UNK on_nl end # Automatically install locally defined plugins instead of # waiting for user confirmation. # # @return [Boolean]
def self on_period UNK on_nl if on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl if on_op on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end # Use Ruby Resolv in place of libc # # @return [boolean] enabled or not
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_nl # Set the global logger # # @param log Logger # @return [Logger]
def self on_period UNK on_nl if on_ivar on_period UNK on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ivar on_op on_const on_op on_const # Get the global logger instance # # @return [Logger]
def self on_period UNK on_lparen block on_rparen on_ignored_nl if on_op block on_period UNK on_lparen on_const on_rparen on_nl UNK on_const UNK # Add a new block of default CLI options which # should be automatically added to all commands # # @param [Proc] block Proc instance containing OptParser configuration # @return [nil]
def self on_period UNK on_nl on_ivar on_op on_lbracket on_rbracket if on_op on_ivar on_nl on_ivar on_period UNK on_nl end on_nl end # Array of default CLI options to automatically # add to commands. # # @return [Array<Proc>] Default optparse options
