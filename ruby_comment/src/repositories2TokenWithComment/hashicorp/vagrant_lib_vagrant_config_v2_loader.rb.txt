UNK on_const on_op on_const on_nl def self on_period UNK on_nl UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen # This is the loader that handles configuration loading for V2 # configurations.
def self on_period UNK on_nl UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period # Returns a bare empty configuration object. # # @return [V2::Root]
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK on_nl on_ignored_nl UNK on_nl end on_nl on_ignored_nl def self # Finalizes the configuration by making sure there is at least # one VM defined in it.
UNK on_period UNK on_nl on_ignored_nl UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen UNK on_rparen on_ignored_nl root on_op # Call the `#finalize` method on each of the configuration keys. # They're expected to modify themselves in our case.
UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen UNK on_rparen on_ignored_nl root on_op UNK on_nl on_ignored_nl UNK on_period # Return the object
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl root on_op UNK on_nl on_ignored_nl UNK on_period UNK on_lparen root on_rparen on_nl # Loads the configuration for the given proc and returns a configuration # object. # # @param [Proc] config_proc # @return [Object]
root on_op UNK on_nl on_ignored_nl UNK on_period UNK on_lparen root on_rparen on_nl on_ignored_nl root on_nl end on_nl on_ignored_nl def self # Create a root configuration object
UNK on_period UNK on_lparen root on_rparen on_nl on_ignored_nl root on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen old on_comma # Call the proc with the root
root on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen old on_comma UNK on_rparen on_ignored_nl UNK on_op old on_period UNK # Return the root object, which doubles as the configuration object # we actually use for accessing as well.
def self on_period UNK on_lparen old on_comma UNK on_rparen on_ignored_nl UNK on_op old on_period UNK on_nl UNK on_op UNK on_period # Merges two configuration objects. # # @param [V2::Root] old The older root config. # @param [V2::Root] new The newer root config. # @return [V2::Root]
UNK on_op old on_period UNK on_nl UNK on_op UNK on_period UNK on_nl on_ignored_nl UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period # Grab the internal states, we use these heavily throughout the process
UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period each do on_op UNK on_comma UNK on_op on_ignored_nl old on_period UNK on_lparen UNK # Make sure we instantiate every key in the config so that we # merge every key. This avoids issues with the same reference # being part of the config.
UNK on_op UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period UNK on_lparen UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_rparen on_nl on_ignored_nl # The config map for the new object is the old one merged with the # new one.
UNK on_op UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl UNK on_op UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl keys on_op # Merge the keys.
keys on_lbracket key on_rbracket on_op old_value on_period UNK on_lparen UNK on_lbracket key on_rbracket on_rparen on_nl UNK on_ignored_nl keys on_lbracket key # We need to do a merge, which we expect to be available # on the config class itself.
keys on_lbracket key on_rbracket on_op old_value on_period UNK on_nl end on_nl end on_nl on_ignored_nl UNK on_period each do on_op key # We just take the old value, but dup it so that we can modify.
UNK on_op keys on_period UNK on_lparen key on_rparen on_nl keys on_lbracket key on_rbracket on_op UNK on_period UNK on_nl end on_nl # Add in the keys that the new class has that we haven't merged.
UNK on_op on_ignored_nl UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl on_ignored_nl on_const on_op # Merge the missing keys
on_const on_op on_const on_period UNK on_lparen UNK on_rparen on_period UNK do on_op result on_op on_ignored_nl result on_period UNK on_lparen UNK # Return the final root object
def self on_period UNK on_lparen old on_rparen on_ignored_nl root on_op UNK on_nl on_ignored_nl UNK on_op on_lbracket on_rbracket on_nl UNK on_op # Upgrade a V1 configuration to a V2 configuration. We do this by # creating a V2 configuration, and calling "upgrade" on each of the # V1 configurations, expecting them to set the right settings on the # new root. # # @param [V1::Root] old # @return [Array] A 3-tuple result.
root on_op UNK on_nl on_ignored_nl UNK on_op on_lbracket on_rbracket on_nl UNK on_op on_lbracket on_rbracket on_nl on_ignored_nl old on_period UNK on_lbracket # Get a new root
UNK on_op on_lbracket on_rbracket on_nl UNK on_op on_lbracket on_rbracket on_nl on_ignored_nl old on_period UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period # Store the warnings/errors
old on_period UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period each do on_op UNK on_comma old_value on_op on_ignored_nl UNK old_value on_period # Go through the old keys and upgrade them if they can be
UNK result on_period UNK on_lparen on_const on_rparen on_nl UNK on_op result on_lbracket UNK on_rbracket on_nl UNK on_op result on_lbracket UNK # Sanity check to guard against random return values
UNK on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period UNK on_period UNK on_nl on_ignored_nl on_const on_op on_const on_period # Get all the registered plugins for V2
on_const on_op on_const on_period UNK on_lparen UNK on_rparen on_nl end on_nl end on_nl end on_nl end on_nl end on_nl EMP # Create the configuration root object
