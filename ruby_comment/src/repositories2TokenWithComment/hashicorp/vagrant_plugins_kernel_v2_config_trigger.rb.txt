on_ignored_nl def UNK on_nl on_ivar on_op on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ignored_nl on_ivar on_op # The TriggerConfig class is what gets called when a user # defines a new trigger in their Vagrantfile. The two entry points are # either `config.trigger.before` or `config.trigger.after`.
on_ivar on_op UNK UNK on_ivar on_op UNK UNK end on_nl on_ignored_nl on_ignored_nl def UNK on_lparen on_op command on_comma on_op block # Internal State
on_ivar on_op UNK UNK end on_nl on_ignored_nl on_ignored_nl def UNK on_lparen on_op command on_comma on_op block on_rparen on_ignored_nl command on_period # An array of VagrantConfigTrigger objects
end on_nl on_ignored_nl on_ignored_nl def UNK on_lparen on_op command on_comma on_op block on_rparen on_ignored_nl command on_period UNK on_nl blk on_op # An array of VagrantConfigTrigger objects
on_ignored_nl def UNK on_lparen on_op command on_comma on_op block on_rparen on_ignored_nl command on_period UNK on_nl blk on_op block on_nl on_ignored_nl #------------------------------------------------------------------- # Trigger before/after functions #------------------------------------------------------------------- # # Commands are expected to be ether: # - splat # + config.trigger.before :up, :destroy, :halt do |trigger|.... # - array # + config.trigger.before [:up, :destroy, :halt] do |trigger|.... # # Config is expected to be given as a block, or the last parameter as a hash # # - block # + config.trigger.before :up, :destroy, :halt do |trigger| # trigger.option = "option" # end # - hash # + config.trigger.before :up, :destroy, :halt, options: "option"
def UNK on_lparen on_op command on_comma on_op block on_rparen on_ignored_nl command on_period UNK on_nl blk on_op block on_nl on_ignored_nl if # Reads in and parses Vagrant command whitelist and settings for a defined # trigger # # @param [Symbol] command Vagrant command to create trigger on # @param [Block] block The defined before block
blk on_op command on_period UNK on_nl end on_nl UNK on_op UNK on_nl UNK on_const on_op on_const on_op on_const on_comma on_ignored_nl # We were given a hash rather than a block, # so the last element should be the "config block" # and the rest are commands for the trigger
def UNK on_lparen on_op command on_comma on_op block on_rparen on_ignored_nl command on_period UNK on_nl blk on_op block on_nl on_ignored_nl if # Reads in and parses Vagrant command whitelist and settings for a defined # trigger # # @param [Symbol] command Vagrant command to create trigger on # @param [Block] block The defined after block
blk on_op command on_period UNK on_nl end on_nl UNK on_op UNK on_nl UNK on_const on_op on_const on_op on_const on_comma on_ignored_nl # We were given a hash rather than a block, # so the last element should be the "config block" # and the rest are commands for the trigger
on_ignored_nl def UNK on_lparen command on_comma block on_comma extra_cfg on_op UNK on_rparen on_ignored_nl trigger on_op on_const on_period UNK on_lparen command #------------------------------------------------------------------- # Internal methods, don't call these. #-------------------------------------------------------------------
def UNK on_lparen command on_comma block on_comma extra_cfg on_op UNK on_rparen on_ignored_nl trigger on_op on_const on_period UNK on_lparen command on_rparen # Creates a new trigger config. If a block is given, parse that block # by calling it with the created trigger. Otherwise set the options if it's # a hash. # # @param [Symbol] command Vagrant command to create trigger on # @param [Block] block The defined config block # @param [Hash] extra_cfg Extra configurations for a block defined trigger (Optional) # @return [VagrantConfigTrigger]
other_bft on_op bt on_period UNK on_lparen other_bft on_rparen on_nl on_ignored_nl bt on_op other_bft on_nl UNK on_period UNK on_lparen other_bft on_rparen # Override, take it
bt on_op other_bft on_nl UNK on_period UNK on_lparen other_bft on_rparen on_nl end on_nl on_ignored_nl UNK on_op bt on_period UNK on_nl # Preserve order, always
other_aft on_op at on_period UNK on_lparen other_aft on_rparen on_nl on_ignored_nl at on_op other_aft on_nl UNK on_period UNK on_lparen other_aft on_rparen # Override, take it
at on_op other_aft on_nl UNK on_period UNK on_lparen other_aft on_rparen on_nl end on_nl on_ignored_nl UNK on_op at on_period UNK on_nl # Preserve order, always
def UNK on_nl if on_op on_ivar on_period UNK on_nl on_ivar on_period UNK UNK on_op UNK on_op UNK on_period UNK UNK # Iterates over all defined triggers and finalizes their config objects
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_nl on_ivar on_period each do on_op bt on_op on_ignored_nl error on_op # Validate Trigger Arrays
def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_nl on_tstring_beg # return [Array]
def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl end on_nl end # return [Array]
def UNK on_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl end on_nl end on_nl end on_nl EMP EMP EMP EMP EMP # The String representation of this Trigger. # # @return [String]
