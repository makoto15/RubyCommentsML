UNK on_const on_nl on_ignored_nl UNK UNK on_lparen UNK on_comma UNK on_comma options on_op UNK on_rparen on_ignored_nl options on_op UNK UNK # This class uploads files using various protocols by subprocessing # to cURL. cURL is a much more capable and complete download tool than # a hand-rolled Ruby library, so we defer to its expertise.
UNK UNK on_lparen UNK on_comma UNK on_comma options on_op UNK on_rparen on_ignored_nl options on_op UNK UNK on_nl on_ivar on_op on_const # @param [String] destination - valid URL to upload file to # @param [String] file - location of file to upload on disk # @param [Hash] options
UNK on_op UNK on_nl UNK on_op on_const on_period UNK UNK on_ignored_nl on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl # Create the callback that is called if we are interrupted
result on_op on_const on_period UNK on_lparen UNK on_rparen UNK on_ignored_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_op options # Execute!
UNK on_const on_op on_const if UNK on_nl on_ignored_nl if result on_period UNK on_op UNK on_nl on_ivar on_period UNK on_lparen on_tstring_beg # If the upload was interrupted, then raise a specific error
if result on_period UNK on_op UNK on_nl on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_content UNK result on_period UNK UNK on_tstring_end on_rparen # If it didn't exit successfully, we need to parse the data and # show an error message.
on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_end on_rparen if on_const on_period UNK on_nl end on_nl result on_nl end on_nl end on_nl # Windows doesn't clear properly for some reason, so we just # output one more newline.
