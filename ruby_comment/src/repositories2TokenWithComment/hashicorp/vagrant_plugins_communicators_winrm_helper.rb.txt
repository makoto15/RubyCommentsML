UNK on_const on_nl UNK UNK on_period UNK on_lparen machine on_rparen on_ignored_nl info on_op UNK UNK on_nl if machine on_period UNK # This is a helper module that provides some functions to the # communicator. This is extracted into a module so that we can # easily unit test these methods.
UNK UNK on_period UNK on_lparen machine on_rparen on_ignored_nl info on_op UNK UNK on_nl if machine on_period UNK on_period UNK on_lparen # Returns the host and port to access WinRM. # # This asks the provider via the `winrm_info` capability if it # exists, otherwise defaulting to its own heuristics. # # @param [Vagrant::Machine] machine # @return [Hash]
UNK UNK on_period UNK on_lparen machine on_rparen on_ignored_nl UNK on_op machine on_period config on_period winrm on_period host on_nl UNK UNK # Returns the address to access WinRM. This does not contain # the port. # # @param [Vagrant::Machine] machine # @return [String]
UNK UNK on_period UNK on_lparen machine UNK UNK on_op UNK on_rparen on_ignored_nl UNK on_op machine on_period config on_period winrm on_period # Returns the port to access WinRM. # # @param [Vagrant::Machine] machine # @return [Integer]
UNK machine on_period config on_period winrm on_period UNK if on_op UNK on_nl on_ignored_nl port on_op UNK on_nl if machine on_period # If we're not requesting a local port, return # the guest port directly.
port on_op UNK on_nl if machine on_period UNK on_period UNK on_lparen on_symbeg UNK on_rparen on_nl machine on_period UNK on_period UNK # Search by guest port if we can. We use a provider capability # if we have it. Otherwise, we just scan the Vagrantfile defined # ports.
UNK on_op port if port on_nl end on_nl on_ignored_nl UNK on_nl end on_nl end on_nl end on_nl end on_nl EMP # Set it if we found it
