UNK on_const on_nl UNK on_op UNK UNK on_nl UNK on_op on_const on_period UNK on_nl on_ignored_nl UNK on_op UNK on_nl UNK # Utility class which allows blocks of code to be marked as "busy" # with a specified interrupt handler. During busy areas of code, it # is often undesirable for SIGINTs to immediately kill the application. # This class is a helper to cleanly register callbacks to handle this # situation.
UNK UNK on_lparen sig_callback on_rparen on_ignored_nl UNK on_lparen sig_callback on_rparen on_nl UNK UNK on_nl UNK on_ignored_nl UNK on_lparen sig_callback on_rparen # Mark a given block of code as a "busy" block of code, which will # register a SIGINT handler for the duration of the block. When a # SIGINT occurs, the `sig_callback` proc will be called. It is up # to the callback to behave properly and exit the application.
UNK UNK on_lparen sig_callback on_rparen on_ignored_nl UNK on_period UNK UNK on_ignored_nl registered on_op sig_callback on_nl registered on_period UNK on_nl on_ignored_nl # Registers a SIGINT handler. This typically is called from {busy}. # Callbacks are only registered once, so calling this multiple times # with the same callback has no consequence.
on_const on_period UNK on_lparen UNK UNK UNK on_rparen UNK UNK UNK UNK registered on_period UNK on_op UNK on_nl end on_nl # Register the handler if this is our first callback.
UNK UNK on_lparen sig_callback on_rparen on_ignored_nl UNK on_period UNK UNK on_ignored_nl registered on_period UNK on_lparen sig_callback on_rparen on_nl on_ignored_nl on_const # Unregisters a SIGINT handler.
on_const on_period UNK on_lparen UNK UNK UNK UNK UNK UNK UNK on_rparen UNK registered on_period UNK on_nl end on_nl end # Remove the signal trap if no more registered callbacks exist
UNK UNK on_nl registered on_period UNK on_period UNK UNK on_op UNK on_op UNK on_period UNK UNK on_nl end on_nl on_ignored_nl # Fires all the registered callbacks.
UNK registered UNK UNK UNK end on_nl end on_nl end on_nl end on_nl end on_nl EMP EMP EMP EMP EMP # Helper method to get access to the class variable. This is mostly # exposed for tests. This shouldn't be mucked with directly, since it's # structure may change at any time.
