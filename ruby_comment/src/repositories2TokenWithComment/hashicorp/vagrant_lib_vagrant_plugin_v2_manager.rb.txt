UNK on_const on_nl UNK UNK UNK on_nl on_ignored_nl def UNK on_nl on_ivar on_op on_const on_op on_const on_period new on_lparen on_tstring_beg # This class maintains a list of all the registered plugins as well # as provides methods that allow querying all registered components of # those plugins as a single unit.
def UNK on_lparen UNK on_rparen on_ignored_nl result on_op on_lbracket on_rbracket on_nl on_ignored_nl on_ivar on_period each do on_op plugin on_op on_ignored_nl # This returns all the action hooks. # # @return [Array]
def UNK on_lparen key on_rparen on_ignored_nl result on_op on_lbracket on_rbracket on_nl on_ignored_nl UNK on_lparen key on_rparen on_period each do on_op # Find all hooks that are applicable for the given key. This # lookup does not include hooks which are defined for ALL_ACTIONS. # Key lookups will match on either string or symbol values. The # provided keys is broken down into multiple parts for lookups, # which allows defining hooks with an entire namespaced name, # or a short suffx. For example: # # Assume we are given an action class # key = Vagrant::Action::Builtin::SyncedFolders # # The list of keys that will be checked for hooks: # ["Vagrant::Action::Builtin::SyncedFolders", "vagrant_action_builtin_synced_folders", # "Action::Builtin::SyncedFolders", "action_builtin_synced_folders", # "Builtin::SyncedFolders", "builtin_synced_folders", # "SyncedFolders", "synced_folders"] # # @param key [Class, String] key Key for hook lookups # @return [Array<Proc>]
def UNK on_lparen key on_rparen on_ignored_nl UNK key on_period UNK on_lparen on_const on_rparen on_nl key on_op key on_period UNK on_period # Generate all valid lookup keys for given key # # @param [Class, String] key Base key for generation # @return [Array<String>] all valid keys
def UNK on_nl on_const on_period new on_period tap do on_op result on_op on_ignored_nl on_ivar on_period each do on_op plugin on_op # This returns all the registered commands. # # @return [Registry<Symbol, Array<Proc, Hash>>]
def UNK on_nl on_const on_period new on_period tap do on_op result on_op on_ignored_nl on_ivar on_period each do on_op plugin on_op # This returns all the registered communicators. # # @return [Hash]
def UNK on_nl on_const on_period new on_period tap do on_op result on_op on_ignored_nl on_ivar on_period each do on_op plugin on_op # This returns all the registered configuration classes. # # @return [Hash]
def UNK on_nl on_const on_period new on_period tap do on_op result on_op on_ignored_nl on_ivar on_period each do on_op plugin on_op # This returns all the registered guests. # # @return [Hash]
def UNK on_nl results on_op on_const on_period new UNK on_op h on_comma k on_op h on_lbracket k on_rbracket on_op on_const # This returns all the registered guest capabilities. # # @return [Hash]
def UNK on_nl on_const on_period new on_period tap do on_op result on_op on_ignored_nl on_ivar on_period each do on_op plugin on_op # This returns all the registered guests. # # @return [Hash]
def UNK on_nl results on_op on_const on_period new UNK on_op h on_comma k on_op h on_lbracket k on_rbracket on_op on_const # This returns all the registered host capabilities. # # @return [Hash]
def UNK on_nl on_const on_period new on_period tap do on_op result on_op on_ignored_nl on_ivar on_period each do on_op plugin on_op # This returns all registered providers. # # @return [Hash]
def UNK on_nl results on_op on_const on_period new UNK on_op h on_comma k on_op h on_lbracket k on_rbracket on_op on_const # This returns all the registered provider capabilities. # # @return [Hash]
def UNK on_nl on_const on_period new on_period tap do on_op result on_op on_ignored_nl on_ivar on_period each do on_op plugin on_op # This returns all the config classes for the various providers. # # @return [Hash]
def UNK on_nl on_const on_period new on_period tap do on_op result on_op on_ignored_nl on_ivar on_period each do on_op plugin on_op # This returns all the config classes for the various provisioners. # # @return [Registry]
def UNK on_nl on_const on_period new on_period tap do on_op result on_op on_ignored_nl on_ivar on_period each do on_op plugin on_op # This returns all registered provisioners. # # @return [Hash]
def UNK on_nl on_const on_period new on_period tap do on_op result on_op on_ignored_nl on_ivar on_period each do on_op plugin on_op # This returns all registered pushes. # # @return [Registry]
def UNK on_nl on_const on_period new on_period tap do on_op result on_op on_ignored_nl on_ivar on_period each do on_op plugin on_op # This returns all the config classes for the various pushes. # # @return [Registry]
def UNK on_nl on_const on_period new on_period tap do on_op result on_op on_ignored_nl on_ivar on_period each do on_op plugin on_op # This returns all synced folder implementations. # # @return [Registry]
def UNK on_lparen plugin on_rparen on_ignored_nl UNK on_op on_ivar on_period UNK on_lparen plugin on_rparen on_nl on_ivar on_period UNK on_lparen on_tstring_beg # This registers a plugin. This should _NEVER_ be called by the public # and should only be called from within Vagrant. Vagrant will # automatically register V2 plugins when a name is set on the # plugin.
def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen plugin on_rparen on_ignored_nl UNK on_ivar on_period UNK # This clears out all the registered plugins. This is only used by # unit tests and should not be called directly.
def UNK on_lparen plugin on_rparen on_ignored_nl UNK on_ivar on_period UNK on_lparen plugin on_rparen on_nl on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_content # This unregisters a plugin so that its components will no longer # be used. Note that this should only be used for testing purposes.
