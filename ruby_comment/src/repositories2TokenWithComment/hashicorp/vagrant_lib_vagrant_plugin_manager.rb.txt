UNK on_const on_nl def UNK on_period UNK on_nl on_const on_period UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end # The Manager helps with installing, listing, and initializing plugins.
def UNK on_period UNK on_nl on_const on_period UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl def # Returns the path to the [StateFile] for user plugins. # # @return [Pathname]
def UNK on_period UNK on_nl UNK on_op on_const on_period UNK on_nl return nil if on_op UNK on_nl on_const on_period new # Returns the path to the [StateFile] for system plugins.
def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op on_const on_op on_const on_period new on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ivar # @param [Pathname] user_file
def UNK on_nl on_ivar on_op UNK on_nl on_ivar on_period debug on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl plugins on_op installed_plugins on_nl # Enable global plugins # # @return [Hash] list of plugins
def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl if UNK on_period UNK on_nl on_ivar on_period debug on_lparen on_tstring_beg # Enable environment local plugins # # @param [Environment] env Vagrant environment # @return [Hash, nil] list of plugins
def UNK on_nl on_ivar on_op on_ivar on_nl end on_nl on_ignored_nl def UNK on_lparen plugins on_comma on_op opts on_rparen on_ignored_nl if # @return [Boolean] local and global plugins are loaded
def UNK on_lparen plugins on_comma on_op opts on_rparen on_ignored_nl if on_op on_const on_period UNK on_nl on_ivar on_period UNK on_lparen on_tstring_beg # Initialize bundler with given plugins # # @param [Hash] plugins List of plugins # @return [nil]
def UNK on_lparen name on_comma on_op opts on_rparen on_ignored_nl if opts on_lbracket on_symbeg env_local on_rbracket on_op on_ivar on_period nil? on_nl # Installs another plugin into our gem directory. # # @param [String] name Name of the plugin (gem) # @return [Gem::Specification]
UNK on_op on_const on_op on_const on_period instance on_period UNK on_lparen name on_comma opts on_rparen on_nl name on_op UNK on_period name # If this is a gem file, then we install that gem locally.
plugin_file on_op opts on_lbracket on_symbeg env_local on_rbracket on_op on_ivar on_op on_ivar on_nl plugin_file on_period UNK on_lparen on_ignored_nl result on_period name # Add the plugin to the state file
on_const on_op on_const on_period instance on_period UNK on_lparen installed_plugins on_comma on_label on_op on_op opts on_lbracket on_symbeg UNK on_rbracket on_rparen on_nl # After install clean plugin gems to remove any cruft. This is useful # for removing outdated dependencies or other versions of an installed # plugin if the plugin is upgraded/downgraded
def UNK on_lparen name on_comma on_op opts on_rparen on_ignored_nl if on_ivar on_nl if on_op on_ivar on_period UNK on_lparen name on_rparen # Uninstalls the plugin with the given name. # # @param [String] name
on_const on_op on_const on_period instance on_period UNK on_lparen installed_plugins on_rparen on_nl rescue on_const on_op on_const on_op e on_nl raise on_const # Clean the environment, removing any old plugins
def UNK on_lparen UNK on_comma on_op opts on_rparen on_ignored_nl if opts on_lbracket on_symbeg env_local on_rbracket on_op on_ivar on_period nil? on_nl # Updates all or a specific set of plugins.
def installed_plugins on_nl UNK on_op on_lbrace on_rbrace on_nl if on_ivar on_nl on_ivar on_period installed_plugins on_period each do on_op UNK on_comma # This returns the list of plugins that should be enabled. # # @return [Hash]
on_const on_lbracket on_ignored_nl UNK on_period UNK on_lbrace on_op plugin_name on_comma plugin_info on_op on_ignored_nl on_lbracket plugin_name on_comma plugin_info on_rbracket on_nl on_rbrace # Sort plugins by name
def UNK on_nl UNK on_op installed_plugins on_nl UNK on_op on_const on_period new on_lparen UNK on_period UNK on_rparen on_nl UNK on_op # This returns the list of plugins that are installed as # Gem::Specifications. # # @return [Array<Gem::Specification>]
UNK on_op on_lbrace on_rbrace on_nl on_const on_op on_const on_period UNK on_period each do on_op spec on_op on_ignored_nl next if on_op # Go through the plugins installed in this environment and # get the latest version of each.
next if on_op UNK on_period UNK on_lparen spec on_period name on_rparen on_nl on_ignored_nl next if UNK on_lbracket spec on_period name # Ignore specs that aren't in our installed list
next if UNK on_period UNK on_lparen spec on_period name on_rparen on_op on_ignored_nl UNK on_lbracket spec on_period name on_rbracket on_period version # If we already have a newer version in our list of installed, # then ignore it
def UNK on_lparen plugins on_rparen on_ignored_nl if on_op on_const on_period UNK on_nl on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen # Loads the requested plugins into the Vagrant runtime # # @param [Hash] plugins List of plugins to load # @return [nil]
def UNK on_lparen name on_comma version on_op nil on_rparen on_ignored_nl version on_op on_const on_op on_const on_period new on_lparen on_lbracket version # Check if the requested plugin is installed # # @param [String] name Name of plugin # @param [String] version Specific version of the plugin # @return [Boolean]
version on_op on_const on_op on_const on_period new on_lparen on_lbracket version on_period to_s on_rbracket on_rparen if version on_nl on_ignored_nl if UNK # Make the requirement object
if UNK on_nl return UNK on_period UNK do on_op s on_op on_ignored_nl UNK on_op s on_period name on_op name on_nl # If plugins are loaded, check for match in loaded specs
plugin_info on_op installed_plugins on_lbracket name on_rbracket on_nl return UNK if on_op plugin_info on_nl return on_op on_op plugin_info if version on_period # Plugins are not loaded yet so check installed plugin data
