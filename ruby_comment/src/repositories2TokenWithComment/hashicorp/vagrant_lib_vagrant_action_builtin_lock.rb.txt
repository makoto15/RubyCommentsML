UNK on_const on_nl UNK UNK on_lparen UNK UNK env UNK UNK on_op UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl on_ivar # This class creates a multi-process lock using `flock`. The lock # is active for the remainder of the middleware stack.
on_const on_period UNK on_lparen lock_path UNK on_tstring_beg on_tstring_content on_tstring_end on_rparen UNK on_op UNK on_op on_ignored_nl on_ivar on_period UNK on_lparen on_tstring_beg # If we already have the key in our environment we assume the # lock is held by our middleware stack already and we allow # nesting.
on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_content UNK lock_path UNK on_tstring_end on_rparen on_nl if UNK on_period UNK on_lparen on_const on_op on_const # The file locking fails only if it returns "false." If it # succeeds it returns a 0, so we must explicitly check for # the proper error case.
UNK on_ignored_nl env on_lbracket UNK on_rbracket on_op UNK on_nl on_ivar on_period UNK on_lparen env on_rparen on_nl UNK on_ignored_nl on_ivar on_period # Set that we gained the lock and call deeper into the # middleware, but make sure we UNSET the lock when we leave.
on_ivar on_period UNK on_lparen env on_rparen on_nl end on_nl end on_nl end on_nl end on_nl end on_nl end on_nl EMP # Just call up the middleware because we already hold the lock
