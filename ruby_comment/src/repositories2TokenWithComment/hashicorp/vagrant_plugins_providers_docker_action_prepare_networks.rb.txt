def UNK on_lparen options on_rparen on_ignored_nl options on_period UNK do on_op UNK on_comma UNK on_op on_ignored_nl UNK if UNK on_period # Generate CLI arguments for creating the docker network. # # @param [Hash] options Options from the network config # @returns[Array<String>] Network create arguments
UNK if UNK on_period to_s on_op on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_op UNK on_period to_s on_op on_tstring_beg on_tstring_content on_tstring_end on_op # If value is false, option is not set
UNK on_op UNK on_period to_s on_op on_tstring_beg on_tstring_content on_tstring_end on_op on_lbracket on_rbracket on_op on_lbracket UNK on_rbracket on_nl UNK on_period UNK # If value is true, consider feature flag with no value
def UNK on_nl on_const on_period UNK on_period UNK do on_op i on_op on_ignored_nl on_op i on_period addr on_period UNK on_op # @return [Array<Socket::Ifaddr>] interface list
def UNK on_lparen network_name on_comma env on_rparen on_ignored_nl if on_op env on_lbracket on_symbeg machine on_rbracket on_period provider on_period driver on_period # Validates that a network name exists. If it does not # exist, an exception is raised. # # @param [String] network_name Name of existing network # @param [Hash] env Local call env # @return [Boolean]
def UNK on_lparen network_name on_comma root_options on_comma network_options on_comma driver on_rparen on_ignored_nl if root_options on_lbracket on_symbeg ip on_rbracket on_op on_ignored_nl # Validates that the provided options are compatible with a # pre-existing network. Raises exceptions on invalid configurations # # @param [String] network_name Name of the network # @param [Hash] root_options Root networking options # @param [Hash] network_options Docker scoped networking options # @param [Driver] driver Docker driver # @return [Boolean]
def UNK on_lparen root_options on_comma network_options on_comma env on_rparen on_ignored_nl if root_options on_lbracket on_symbeg name on_rbracket on_op UNK on_lparen root_options # Generate configuration for private network # # @param [Hash] root_options Root networking options # @param [Hash] net_options Docker scoped networking options # @param [Hash] env Local call env # @return [String, Hash] Network name and updated network_options
network_options on_lbracket on_symbeg UNK on_rbracket on_op addr on_period UNK on_nl on_ignored_nl if on_op root_options on_lbracket on_symbeg netmask on_rbracket on_op on_op # If address is ipv6, enable ipv6 support
if on_op root_options on_lbracket on_symbeg netmask on_rbracket on_op on_op network_name on_nl network_name on_op env on_lbracket on_symbeg machine on_rbracket on_period provider # If no mask is provided, attempt to locate any existing # network which contains the assigned IP address
if on_op network_name on_nl root_options on_lbracket on_symbeg netmask on_rbracket on_op addr on_period UNK on_op on_int on_op on_int on_nl end on_nl # When no existing network is found, we are creating # a new network. Since no mask was provided, default # to /24 for ipv4 and /64 for ipv6
if on_op network_name on_nl if on_op root_options on_lbracket on_symbeg subnet on_rbracket on_nl subnet on_op on_const on_period new on_lparen on_tstring_beg on_embexpr_beg # With no network name, process options to find or determine # name for new network
subnet on_op on_const on_period new on_lparen on_tstring_beg on_embexpr_beg addr on_embexpr_end on_tstring_content on_embexpr_beg root_options on_lbracket on_symbeg netmask on_rbracket on_embexpr_end on_tstring_end on_rparen # Only generate a subnet if not given one
def UNK on_lparen root_options on_comma UNK on_comma env on_rparen on_ignored_nl if root_options on_lbracket on_symbeg name on_rbracket on_op UNK on_lparen root_options # Generate configuration for public network # # TODO: When the Vagrant installer upgrades to Ruby 2.5.x, # remove all instances of the roundabout way of determining a prefix # and instead just use the built-in `.prefix` method # # @param [Hash] root_options Root networking options # @param [Hash] net_options Docker scoped networking options # @param [Hash] env Local call env # @return [String, Hash] Network name and updated network_options
network_name on_op env on_lbracket on_symbeg machine on_rbracket on_period provider on_period driver on_period on_ignored_nl UNK on_lparen network_options on_lbracket on_symbeg gateway on_rbracket # Check if network already exists for this subnet
if on_op env on_lbracket on_symbeg machine on_rbracket on_period provider on_period driver on_period UNK on_lparen network_name on_rparen on_nl if on_op UNK # If the network doesn't already exist, gather available address range # within subnet which docker can provide addressing
def UNK on_lparen network_options on_comma interface on_comma env on_rparen on_ignored_nl subnet on_op on_const on_period new on_lparen network_options on_lbracket on_symbeg subnet # Request the gateway address for the public network # # @param [Hash] network_options Docker scoped networking options # @param [String] interface The bridge interface used # @param [Hash] env Local call env # @return [String] Gateway address
def UNK on_lparen network_options on_comma interface on_comma env on_rparen on_ignored_nl UNK network_options on_lbracket on_symbeg UNK on_rbracket if network_options on_lbracket on_symbeg # Request the IP range allowed for use by docker when creating a new # public network # # TODO: When the Vagrant installer upgrades to Ruby 2.5.x, # remove all instances of the roundabout way of determining a prefix # and instead just use the built-in `.prefix` method # # @param [Hash] network_options Docker scoped networking options # @param [Socket::Ifaddr] interface The bridge interface used # @param [Hash] env Local call env # @return [String] Address range
def UNK on_lparen env on_rparen on_ignored_nl machine on_op env on_lbracket on_symbeg machine on_rbracket on_nl if machine on_period provider on_period UNK # Execute the action
machine on_op env on_lbracket on_symbeg machine on_rbracket on_nl if machine on_period provider on_period UNK on_nl on_ivar on_period UNK on_lparen on_tstring_beg # If we are using a host VM, then don't worry about it
end on_nl on_ignored_nl if on_op network_name on_nl raise on_const on_op on_const on_comma on_label machine on_period name on_nl end on_nl on_ignored_nl # unsupported type so ignore
