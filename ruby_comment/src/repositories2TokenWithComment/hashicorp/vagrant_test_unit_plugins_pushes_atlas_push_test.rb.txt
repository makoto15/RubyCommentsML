UNK on_lparen on_const on_op on_const on_op on_const on_rparen on_period UNK UNK on_lparen UNK UNK on_rparen on_nl UNK on_nl on_ignored_nl on_ignored_nl # Stub this right away to avoid real execs
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl # DEPRECATED # describe "#push" do # it "pushes with the uploader" do # allow(subject).to receive(:uploader_path).and_return("foo")
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl # expect(subject).to receive(:execute).with("foo")
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl # subject.push # end
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl # it "raises an exception if the uploader couldn't be found" do # expect(subject).to receive(:uploader_path).and_return(nil)
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl # expect { subject.push }.to raise_error( # VagrantPlugins::AtlasPush::Errors::UploaderNotFound) # end # end
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl # describe "#execute" do # let(:app) { "foo/bar" }
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl # before do # config.app = app # end
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl # it "sends the basic flags" do # expect(Vagrant::Util::SafeExec).to receive(:exec). # with("foo", "-vcs", app, env.root_path.to_s)
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl # subject.execute("foo") # end
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl # it "doesn't send VCS if disabled" do # expect(Vagrant::Util::SafeExec).to receive(:exec). # with("foo", app, env.root_path.to_s)
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl # config.vcs = false # subject.execute("foo") # end
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl # it "sends includes" do # expect(Vagrant::Util::SafeExec).to receive(:exec). # with("foo", "-vcs", "-include", "foo", "-include", # "bar", app, env.root_path.to_s)
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl # config.includes = ["foo", "bar"] # subject.execute("foo") # end
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl # it "sends excludes" do # expect(Vagrant::Util::SafeExec).to receive(:exec). # with("foo", "-vcs", "-exclude", "foo", "-exclude", # "bar", app, env.root_path.to_s)
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl # config.excludes = ["foo", "bar"] # subject.execute("foo") # end
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl # it "sends custom server address" do # expect(Vagrant::Util::SafeExec).to receive(:exec). # with("foo", "-vcs", "-address", "foo", app, env.root_path.to_s)
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl UNK # config.address = "foo" # subject.execute("foo") # end
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl UNK on_nl # it "sends custom token" do # expect(Vagrant::Util::SafeExec).to receive(:exec). # with("foo", "-vcs", "-token", "atlas_token", app, env.root_path.to_s)
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl UNK on_nl EMP # config.token = "atlas_token" # subject.execute("foo") # end
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl UNK on_nl EMP EMP # context "when metadata is available" do # let(:env) do # iso_env = isolated_environment # iso_env.vagrantfile <<-EOH # Vagrant.configure("2") do |config| # config.vm.box = "hashicorp/precise64" # config.vm.box_url = "https://atlas.hashicorp.com/hashicorp/precise64" # end # EOH # iso_env.create_vagrant_env # end
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl UNK on_nl EMP EMP EMP # it "sends the metadata" do # expect(Vagrant::Util::SafeExec).to receive(:exec). # with("foo", "-vcs", "-metadata", "box=hashicorp/precise64", # "-metadata", "box_url=https://atlas.hashicorp.com/hashicorp/precise64", # "-token", "atlas_token", app, env.root_path.to_s)
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl UNK on_nl EMP EMP EMP EMP # config.token = "atlas_token" # subject.execute("foo") # end # end # end
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl UNK on_nl EMP EMP EMP EMP EMP # describe "#uploader_path" do # let(:scratch) do # Pathname.new(Dir.mktmpdir("vagrant-test-atlas-push-upload-path")) # end
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl UNK on_nl EMP EMP EMP EMP EMP EMP # after do # FileUtils.rm_rf(scratch) # end
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl UNK on_nl EMP EMP EMP EMP EMP EMP EMP # it "should return the configured path if set" do # config.uploader_path = "foo" # expect(subject.uploader_path).to eq("foo") # end
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl UNK on_nl EMP EMP EMP EMP EMP EMP EMP EMP # it "should look up the uploader via PATH if not set" do # allow(Vagrant).to receive(:in_installer?).and_return(false)
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl UNK on_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP # expect(Vagrant::Util::Which).to receive(:which). # with(described_class.const_get(:UPLOADER_BIN)). # and_return("bar")
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl UNK on_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP # expect(subject.uploader_path).to eq("bar") # end
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl UNK on_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP # it "should look up the uploader in the embedded dir if installer" do # allow(Vagrant).to receive(:in_installer?).and_return(true) # allow(Vagrant).to receive(:installer_embedded_dir).and_return(scratch.to_s)
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl UNK on_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP # bin_path = scratch.join("bin", bin) # bin_path.dirname.mkpath # bin_path.open("w+") { |f| f.write("hi") }
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl UNK on_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP # expect(subject.uploader_path).to eq(bin_path.to_s) # end
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl UNK on_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP # it "should look up the uploader in the PATH if not in the installer" do # allow(Vagrant).to receive(:in_installer?).and_return(true) # allow(Vagrant).to receive(:installer_embedded_dir).and_return(scratch.to_s)
on_ignored_nl on_ignored_nl on_ignored_nl UNK on_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP # expect(Vagrant::Util::Which).to receive(:which). # with(described_class.const_get(:UPLOADER_BIN)). # and_return("bar")
on_ignored_nl on_ignored_nl UNK on_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP # expect(subject.uploader_path).to eq("bar") # end
on_ignored_nl UNK on_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP # it "should return nil if its not found anywhere" do # allow(Vagrant).to receive(:in_installer?).and_return(false) # allow(Vagrant::Util::Which).to receive(:which).and_return(nil)
UNK on_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP # expect(subject.uploader_path).to be_nil # end # end
