on_ignored_nl UNK on_const on_nl UNK on_const on_nl class on_const on_op on_const on_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_period # This file contains all of the internal errors in Vagrant's core # commands, actions, etc.
UNK on_const on_nl class on_const on_op on_const on_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_period error_key on_lparen UNK on_op # This module contains all of the internal errors in Vagrant's core. # These errors are _expected_ errors and as such don't typically represent # bugs in Vagrant itself. These are meant as a way to detect errors and # display them in a user-friendly way. # # # Defining a new Error # # To define a new error, inherit from {VagrantError}, which lets Vagrant # know that this is an expected error, and also gives you some helpers for # providing exit codes and error messages. An example is shown below, then # it is explained: # # class MyError < Vagrant::Errors::VagrantError # error_key "my_error" # end # # This creates an error with an I18n error key of "my_error." {VagrantError} # uses I18n to look up error messages, in the "vagrant.errors" namespace. So # in the above, the error message would be the translation of "vagrant.errors.my_error" # # If you don't want to use I18n, you can override the {#initialize} method and # set your own error message. # # # Raising an Error # # To raise an error, it is nothing special, just raise it like any normal # exception: # # raise MyError.new # # Eventually this exception will bubble out to the `vagrant` binary which # will show a nice error message. And if it is raised in the middle of a # middleware sequence, then {Action::Warden} will catch it and begin the # recovery process prior to exiting.
class on_const on_op on_const on_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_period error_key on_lparen UNK on_op UNK on_comma UNK # Main superclass of any errors in Vagrant. This provides some # convenience methods for setting the status code and error key. # The status code is used by the `vagrant` executable as the # error code, and the error key is used as a default message from # I18n.
UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_period error_key on_lparen UNK on_op UNK on_comma UNK on_op UNK on_rparen on_ignored_nl UNK # This is extra data passed into the message for translation.
def UNK on_semicolon on_tstring_beg on_tstring_content on_tstring_end on_semicolon end on_nl on_ignored_nl def UNK on_semicolon on_tstring_beg on_tstring_content on_tstring_end on_semicolon end on_nl on_ignored_nl # The error message for this error. This is used if no error_key # is specified for a translatable error message.
def UNK on_semicolon on_tstring_beg on_tstring_content on_tstring_end on_semicolon end on_nl on_ignored_nl def error_key on_semicolon UNK on_semicolon end on_nl on_ignored_nl def UNK # The default error namespace which is used for the error key. # This can be overridden here or by calling the "error_namespace" # class method.
def error_key on_semicolon UNK on_semicolon end on_nl on_ignored_nl def UNK on_semicolon UNK on_semicolon end on_nl on_ignored_nl UNK on_nl on_ignored_nl def # The key for the error message. This should be set using the # {error_key} method but can be overridden here if needed.
def UNK on_semicolon UNK on_semicolon end on_nl on_ignored_nl UNK on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK UNK if # This is the exit code that should be used when exiting from # this exception. # # @return [Integer]
