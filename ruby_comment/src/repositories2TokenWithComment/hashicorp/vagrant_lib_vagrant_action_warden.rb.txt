UNK on_const on_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl UNK UNK on_lparen UNK on_comma env on_rparen on_ignored_nl if # The action warden is a middleware which injects itself between # every other middleware, watching for exceptions which are raised # and performing proper cleanup on every action by calling the `recover` # method. The warden therefore allows middlewares to not worry about # exceptional events, and by providing a simple callback, can clean up # in any erroneous case. # # Warden will "just work" behind the scenes, and is not of particular # interest except to those who are curious about the internal workings # of Vagrant.
UNK on_const on_op on_const if env on_lbracket on_symbeg UNK on_rbracket on_nl action on_op on_ivar on_period UNK on_nl on_ivar on_period UNK # Call the next middleware in the sequence, appending to the stack # of "recoverable" middlewares in case something goes wrong!
UNK on_nl UNK on_const on_op e on_nl if e on_op on_ivar on_nl on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_content UNK e # This means that an "exit" or "abort" was called, or we have run out # of memory. In these cases, we just exit immediately.
if e on_op on_ivar on_nl on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_content UNK e UNK on_tstring_end on_rparen on_nl on_ivar on_op e # We guard this so that the Warden only outputs this once for # an exception that bubbles up.
UNK on_lparen env on_rparen on_nl UNK on_nl end on_nl end on_nl on_ignored_nl UNK UNK on_lparen env on_rparen on_ignored_nl on_ivar on_period # Something went horribly wrong. Start the rescue chain then # reraise the exception to properly kick us out of limbo here.
UNK UNK on_lparen env on_rparen on_ignored_nl on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ignored_nl on_ivar on_period UNK UNK # We implement the recover method ourselves in case a Warden is # embedded within another Warden. To recover, we just do our own # recovery process on our stack.
on_ivar on_period UNK on_nl end on_nl on_ignored_nl UNK UNK on_lparen action on_comma env on_rparen on_ignored_nl UNK on_comma UNK on_comma UNK # Clear stack so that warden down the middleware chain doesn't # rescue again.
UNK UNK on_lparen action on_comma env on_rparen on_ignored_nl UNK on_comma UNK on_comma UNK on_op action on_nl on_ignored_nl UNK on_op on_lbracket # A somewhat confusing function which simply initializes each # middleware properly to call the next middleware in the sequence.
UNK on_op on_lbracket on_rbracket on_nl on_ignored_nl if UNK on_period UNK on_lparen on_const on_rparen on_nl UNK on_period UNK on_lparen UNK on_comma # Default the arguments to an empty array. Otherwise in Ruby 1.8 # a `nil` args will actually pass `nil` into the class.
UNK UNK on_op e on_op on_ignored_nl UNK on_period UNK on_lparen e on_rparen on_nl UNK on_period UNK on_lparen e on_rparen on_nl # Make it a lambda which calls the item then forwards # up the chain
