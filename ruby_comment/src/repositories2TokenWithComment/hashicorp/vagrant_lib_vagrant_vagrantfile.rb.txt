UNK on_const on_nl UNK on_symbeg config on_nl on_ignored_nl def UNK on_lparen UNK on_comma keys on_rparen on_ignored_nl on_ivar on_op keys on_nl # This class provides a way to load and access the contents # of a Vagrantfile. # # This class doesn't actually load Vagrantfiles, parse them, # merge them, etc. That is the job of {Config::Loader}. This # class, on the other hand, has higher-level operations on # a loaded Vagrantfile such as looking up the defined machines, # loading the configuration of a specific machine/provider combo, # etc.
UNK on_symbeg config on_nl on_ignored_nl def UNK on_lparen UNK on_comma keys on_rparen on_ignored_nl on_ivar on_op keys on_nl on_ivar on_op UNK # This is the configuration loaded as-is given the loader and # keys to #initialize.
def UNK on_lparen UNK on_comma keys on_rparen on_ignored_nl on_ivar on_op keys on_nl on_ivar on_op UNK on_nl on_ivar on_comma UNK on_op # Initializes by loading a Vagrantfile. # # @param [Config::Loader] loader Configuration loader that should # already be configured with the proper Vagrantfile locations. # This usually comes from {Vagrant::Environment} # @param [Array<Symbol>] keys The Vagrantfiles to load and the # order to load them in (keys within the loader).
def UNK on_lparen name on_comma provider on_comma boxes on_comma data_path on_comma UNK on_rparen on_ignored_nl results on_op UNK on_lparen name on_comma # Returns a {Machine} for the given name and provider that # is represented by this Vagrantfile. # # @param [Symbol] name Name of the machine. # @param [Symbol] provider The provider the machine should # be backed by (required for provider overrides). # @param [BoxCollection] boxes BoxCollection to look up the # box Vagrantfile. # @param [Pathname] data_path Path where local machine data # can be stored. # @param [Environment] env The environment running this machine # @return [Machine]
results on_op UNK on_lparen name on_comma provider on_comma boxes on_comma data_path on_rparen on_nl box on_op results on_lbracket on_symbeg box on_rbracket # Load the configuration for the machine
if on_op config_warnings on_period UNK on_op on_op config_errors on_period UNK on_nl UNK on_op config_errors on_period UNK on_op on_symbeg UNK on_op # If there were warnings or errors we want to output them
UNK on_op config_errors on_period UNK on_op on_symbeg UNK on_op on_symbeg UNK on_nl UNK on_op on_const on_op on_const on_period UNK on_lparen # The color of the output depends on whether we have warnings # or errors...
UNK on_const on_op on_const if on_op config_errors on_period UNK on_nl end on_nl on_ignored_nl UNK on_op config on_period vm on_period UNK # If we had errors, then we bail
UNK on_op config on_period vm on_period UNK on_lparen provider on_rparen on_nl on_ignored_nl on_const on_period UNK on_lparen data_path on_rparen on_nl on_ignored_nl # Get the provider configuration from the final loaded configuration
on_const on_period UNK on_lparen data_path on_rparen on_nl on_ignored_nl UNK on_const on_period UNK on_lparen name on_comma provider on_comma provider_cls on_comma UNK # Create machine data directory if it doesn't exist # XXX: Permissions error here.
UNK on_const on_period UNK on_lparen name on_comma provider on_comma provider_cls on_comma UNK on_comma on_ignored_nl provider_options on_comma config on_comma data_path on_comma # Create the machine and cache it for future calls. This will also # return the machine from this method.
def UNK on_lparen name on_comma provider on_comma boxes on_comma data_path on_op nil on_comma UNK on_op UNK on_rparen on_ignored_nl keys on_op # Returns the configuration for a single machine. # # When loading a box Vagrantfile, it will be prepended to the # key order specified when initializing this class. Sub-machine # and provider-specific overrides are appended at the end. The # actual order is: # # - box # - keys specified for #initialize # - sub-machine # - provider # # The return value is a hash with the following keys (symbols) # and values: # # - box: the {Box} backing the machine # - config: the actual configuration # - config_errors: list of errors, if any # - config_warnings: list of warnings, if any # - provider_cls: class of the provider backing the machine # - provider_options: options for the provider # # @param [Symbol] name Name of the machine. # @param [Symbol] provider The provider the machine should # be backed by (required for provider overrides). # @param [BoxCollection] boxes BoxCollection to look up the # box Vagrantfile. # @param [Pathname] data_path Machine data path # @return [Hash<Symbol, Object>] Various configuration parameters for a # machine. See the main documentation body for more info.
UNK on_ignored_nl provider_cls on_period UNK on_lparen UNK on_rparen on_nl UNK on_const on_op on_const on_op UNK on_nl UNK on_const on_op on_const # Test if the provider is usable or not
UNK on_op on_tstring_beg on_embexpr_beg UNK on_embexpr_end on_tstring_content on_embexpr_beg name on_embexpr_end on_tstring_end on_nl on_ivar on_period UNK on_lparen UNK on_comma UNK on_period # Add the sub-machine configuration to the loader and keys
config on_comma config_warnings on_comma config_errors on_op on_ivar on_period UNK on_lparen keys on_rparen on_nl on_ignored_nl box on_op nil on_nl UNK on_op # Load once so that we can get the proper box value
box on_op nil on_nl UNK on_op original_box on_op config on_period vm on_period box on_nl UNK on_op UNK on_op config on_period # Track the original box so we know if we changed
if data_path on_nl UNK on_op data_path on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl if UNK on_period UNK on_nl UNK # Check if this machine has a local box metadata file # describing the existing guest. If so, load it and # set the box name and version to allow the actual # box in use to be discovered.
UNK on_op UNK UNK on_ignored_nl UNK on_op keys on_period UNK on_nl on_ignored_nl if config on_period vm on_period box on_op boxes # The proc below loads the box and provider overrides. This is # in a proc because it may have to recurse if the provider override # changes the box.
if config on_period vm on_period box on_op boxes on_nl box on_op boxes on_period UNK on_lparen config on_period vm on_period box # Load the box Vagrantfile, if there is one
UNK on_op config on_period vm on_period UNK on_lparen provider on_rparen on_nl if on_op UNK on_period UNK on_nl UNK on_op on_ignored_nl # Load provider overrides
if original_box on_op config on_period vm on_period box on_op UNK on_op config on_period vm on_period box_version on_nl on_ignored_nl original_box on_op # If the box changed, then we need to reload
on_ignored_nl original_box on_op config on_period vm on_period box on_nl UNK on_op config on_period vm on_period box_version on_nl UNK on_period UNK # TODO: infinite loop protection?
UNK on_period UNK on_nl on_ignored_nl if box on_period UNK on_nl on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_content on_embexpr_beg config on_period vm # Load the box and provider overrides
if box on_period UNK on_nl on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_content on_embexpr_beg config on_period vm on_period box on_embexpr_end on_tstring_content on_embexpr_beg # NOTE: In cases where the box_meta file contains stale information # and the reference box no longer exists, fall back to initial # configuration and attempt to load that
config on_period vm on_period box on_op original_box on_nl config on_period vm on_period box_version on_op UNK on_nl on_ignored_nl UNK UNK on_ignored_nl # Ensure box attributes are set to original values in # case they were modified by the local box metadata
def UNK on_nl on_ivar on_period vm on_period UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK UNK on_period # Returns a list of the machines that are defined within this # Vagrantfile. # # @return [Array<Symbol>]
def UNK on_nl UNK UNK on_period UNK UNK on_op UNK on_op on_ignored_nl on_ivar on_period vm on_period UNK on_period UNK UNK # Returns a list of the machine names as well as the options that # were specified for that machine. # # @return [Hash<Symbol, Hash>]
def UNK on_nl UNK UNK on_period UNK if UNK on_period UNK on_op UNK on_nl on_ignored_nl on_ivar on_period vm on_period UNK # Returns the name of the machine that is designated as the # "primary." # # In the case of a single-machine environment, this is just the # single machine name. In the case of a multi-machine environment, # then this is the machine that is marked as primary, or nil if # no primary machine was specified. # # @return [Symbol]
UNK UNK on_period UNK if UNK on_period UNK on_op UNK on_nl on_ignored_nl on_ivar on_period vm on_period UNK on_period UNK UNK # If it is a single machine environment, then return the name
on_ivar on_period vm on_period UNK on_period UNK UNK on_op name on_comma UNK on_op on_ignored_nl UNK name if UNK on_period UNK # If it is a multi-machine environment, then return the primary
nil on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg # If no primary was specified, nil it is
