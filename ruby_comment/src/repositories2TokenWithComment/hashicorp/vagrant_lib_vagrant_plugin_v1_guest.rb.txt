UNK on_const on_nl UNK on_const UNK on_const UNK on_const on_nl UNK on_lparen UNK UNK UNK on_rparen on_nl end on_nl on_ignored_nl # The base class for a guest. A guest represents an installed system # within a machine that Vagrant manages. There are some portions of # Vagrant which are OS-specific such as mounting shared folders and # halting the machine, and this abstraction allows the implementation # for these to be separate from the core of Vagrant.
UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK UNK UNK on_nl end on_nl on_ignored_nl def UNK # The VM which this system is tied to.
def UNK on_lparen UNK on_rparen on_ignored_nl UNK UNK UNK on_nl end on_nl on_ignored_nl def UNK on_nl end on_nl on_ignored_nl def # Initializes the system. Any subclasses MUST make sure this # method is called on the parent. Therefore, if a subclass overrides # `initialize`, then you must call `super`.
def UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_const on_comma UNK on_symbeg UNK on_nl end on_nl on_ignored_nl def # This method is automatically called when the system is available (when # Vagrant can successfully SSH into the machine) to give the system a chance # to determine the distro and return a distro-specific system. # # If this method returns nil, then this instance is assumed to be # the most specific guest implementation.
def UNK on_nl UNK on_const on_comma UNK on_symbeg UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_comma UNK on_comma # Halt the machine. This method should gracefully shut down the # operating system. This method will cause `vagrant halt` and associated # commands to _block_, meaning that if the machine doesn't halt # in a reasonable amount of time, this method should just return. # # If when this method returns, the machine's state isn't "powered_off," # Vagrant will proceed to forcefully shut the machine down.
def UNK on_lparen UNK on_comma UNK on_comma UNK on_rparen on_ignored_nl UNK on_const on_comma UNK on_symbeg UNK on_nl end on_nl on_ignored_nl # Mounts a shared folder. # # This method should create, mount, and properly set permissions # on the shared folder. This method should also properly # adhere to any configuration values such as `shared_folder_uid` # on `config.vm`. # # @param [String] name The name of the shared folder. # @param [String] guestpath The path on the machine which the user # wants the folder mounted. # @param [Hash] options Additional options for the shared folder # which can be honored.
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK on_const on_comma UNK on_symbeg UNK on_nl end on_nl on_ignored_nl def UNK # Mounts a shared folder via NFS. This assumes that the exports # via the host are already done.
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_const on_comma UNK on_symbeg UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK # Configures the given list of networks on the virtual machine. # # The networks parameter will be an array of hashes where the hashes # represent the configuration of a network interface. The structure # of the hash will be roughly the following: # # { # type: :static, # ip: "192.168.33.10", # netmask: "255.255.255.0", # interface: 1 # } #
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_const on_comma UNK on_symbeg UNK on_nl end on_nl end on_nl end on_nl end # Called to change the hostname of the virtual machine.
