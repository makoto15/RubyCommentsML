UNK UNK on_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg # This class manages hooks into existing {Builder} stacks, and lets you # add and remove middleware classes. This is the primary method by which # plugins can hook into built-in middleware stacks.
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl # This is a hash of the middleware to prepend to a certain # other middleware. # # @return [Hash<Class, Array<Class>>]
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_nl on_ivar on_op # This is a hash of the middleware to append to a certain other # middleware. # # @return [Hash<Class, Array<Class>>]
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_nl on_ivar on_op UNK on_period new UNK on_op # This is a list of the hooks to just prepend to the beginning # # @return [Array<Class>]
UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_nl on_ivar on_op UNK on_period new UNK on_op UNK on_comma UNK on_op UNK # This is a list of the hooks to just append to the end # # @return [Array<Class>]
def UNK on_lparen UNK on_comma new on_comma on_op args on_comma on_op block on_rparen on_ignored_nl on_ivar on_lbracket UNK on_rbracket on_op on_lbracket # Add a middleware before an existing middleware. # # @param [Class] existing The existing middleware. # @param [Class] new The new middleware.
def UNK on_lparen UNK on_comma new on_comma on_op args on_comma on_op block on_rparen on_ignored_nl on_ivar on_lbracket UNK on_rbracket on_op on_lbracket # Add a middleware after an existing middleware. # # @param [Class] existing The existing middleware. # @param [Class] new The new middleware.
def UNK on_lparen new on_comma on_op args on_comma on_op block on_rparen on_ignored_nl on_ivar on_op on_lbracket new on_comma args on_comma block # Append a middleware to the end of the stack. Note that if the # middleware sequence ends early, then the new middleware won't # be run. # # @param [Class] new The middleware to append.
def UNK on_lparen new on_comma on_op args on_comma on_op block on_rparen on_ignored_nl on_ivar on_op on_lbracket new on_comma args on_comma block # Prepend a middleware to the beginning of the stack. # # @param [Class] new The new middleware to prepend.
def UNK on_nl UNK on_period UNK on_op on_ignored_nl UNK on_period UNK on_op on_ignored_nl UNK on_period UNK on_op on_ignored_nl UNK on_period # @return [Boolean]
def UNK on_lparen builder on_comma options on_op UNK on_rparen on_ignored_nl options on_op UNK UNK on_nl on_ignored_nl UNK on_op options on_lbracket # This applies the given hook to a builder. This should not be # called directly. # # @param [Builder] builder
on_ivar on_period each do on_op klass on_comma args on_comma block on_op on_ignored_nl UNK options on_lbracket on_symbeg UNK on_rbracket on_nl UNK # Prepends first
on_ivar on_period each do on_op klass on_comma args on_comma block on_op on_ignored_nl UNK options on_lbracket on_symbeg UNK on_rbracket on_nl UNK # Appends
on_ivar on_period each do on_op key on_comma UNK on_op on_ignored_nl UNK UNK on_op builder on_period UNK on_lparen key on_rparen on_nl # Before hooks
on_ivar on_period each do on_op key on_comma UNK on_op on_ignored_nl UNK UNK on_op builder on_period UNK on_lparen key on_rparen on_nl # After hooks
