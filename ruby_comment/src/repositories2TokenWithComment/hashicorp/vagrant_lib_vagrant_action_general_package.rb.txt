UNK on_const on_nl UNK on_const on_nl on_ignored_nl def UNK on_period UNK on_lparen output on_comma UNK on_rparen on_ignored_nl UNK on_op on_const # A general packaging (tar) middleware. Given the following options, # it will do the right thing: # # * package.output - The filename of the outputted package. # * package.include - An array of files to include in the package. # * package.directory - The directory which contains the contents to # compress into the package. # # This middleware always produces the final file in the current working # directory (FileUtils.pwd)
def UNK on_period UNK on_lparen output on_comma UNK on_rparen on_ignored_nl UNK on_op on_const on_period UNK on_lparen output on_period UNK on_rparen # Perform sanity validations that the provided output filepath is sane. # In particular, this function validates: # # - The output path is a regular file (not a directory or symlink) # - No file currently exists at the given path # - A directory of package files was actually provided (internal) # # @param [String] output path to the output file # @param [String] directory path to a directory containing the files
def UNK on_period fullpath on_lparen output on_rparen on_ignored_nl on_const on_period UNK on_lparen output on_comma on_const on_period UNK on_rparen on_nl end # Calculate the full path of the given path, relative to the current # working directory (where the command was run). # # @param [String] output the relative path
UNK on_symbeg fullpath on_nl on_ignored_nl def UNK on_lparen UNK on_comma env on_rparen on_ignored_nl on_ivar on_op UNK on_nl on_ignored_nl env on_lbracket # The path to the final output file. # @return [String]
UNK on_op on_lbracket on_const on_op on_const on_comma on_const on_op on_const on_rbracket on_nl UNK on_period UNK UNK on_op UNK on_op on_ignored_nl # There are certain exceptions that we don't delete the file for.
on_const on_period UNK on_lparen fullpath on_rparen if on_const on_period UNK on_lparen fullpath on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl # Cleanup any packaged files if the packaging failed at some point.
def UNK on_nl UNK on_op on_const on_period UNK on_lparen on_ivar on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_rparen on_period join on_lparen on_tstring_beg # This method copies the include files (passed in via command line) # to the temporary directory so they are included in a sub-folder within # the actual box
UNK on_op UNK on_period join on_lparen UNK on_rparen on_nl on_ignored_nl on_ivar on_lbracket on_symbeg UNK on_rbracket on_period UNK on_const on_period UNK # We place the file in the include directory
if on_const on_period UNK on_lparen UNK on_rparen on_nl on_const on_period UNK on_lparen on_const on_period UNK on_lparen UNK on_rparen on_comma UNK # Copy directory contents recursively.
raise on_const on_op on_const on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op fullpath on_period UNK on_nl on_ignored_nl on_const on_op # The directory contains symlinks. Show a nicer error.
def UNK on_nl UNK on_op fullpath on_period UNK on_nl on_ignored_nl on_const on_op on_const on_period UNK on_lparen on_ivar on_lbracket on_tstring_beg on_tstring_content # Compress the exported file into a package
UNK on_op fullpath on_period UNK on_nl on_ignored_nl on_const on_op on_const on_period UNK on_lparen on_ivar on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_rparen # Get the output path. We have to do this up here so that the # pwd returns the proper thing.
on_const on_op on_const on_period UNK on_lparen on_ivar on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_rparen UNK on_ignored_nl UNK on_op on_const on_period UNK # Switch into that directory and package everything up
UNK on_op on_const on_period UNK on_lparen on_const on_period join on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_rparen on_nl # Find all the files in our current directory and tar it up!
on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma UNK on_comma on_op UNK on_rparen on_nl # Package!
def UNK on_nl UNK on_op on_const on_period join on_lparen on_ivar on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen # Write the metadata file into the box so that the provider # can be automatically detected when adding the box
def UNK on_nl return if on_op on_ivar on_lbracket on_symbeg machine on_rbracket on_nl on_ignored_nl return if on_op on_ivar on_lbracket on_symbeg machine # This will copy the generated private key into the box and use # it for SSH by default. We have to do this because we now generate # random keypairs on boot, so packaged boxes would stop working # without this.
return if on_op on_ivar on_lbracket on_symbeg machine on_rbracket on_nl on_ignored_nl return if on_op on_ivar on_lbracket on_symbeg machine on_rbracket on_period UNK # If we don't have machine, we do nothing (weird)
return if on_op on_ivar on_lbracket on_symbeg machine on_rbracket on_period UNK on_nl on_ignored_nl UNK on_op on_ivar on_lbracket on_symbeg machine on_rbracket on_period # If we don't have a data dir, we also do nothing (base package)
UNK on_op on_ivar on_lbracket on_symbeg machine on_rbracket on_period UNK on_period join on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl if on_op UNK # If we don't have a generated private key, we do nothing
on_lparen on_ivar on_lbracket on_symbeg machine on_rbracket on_period UNK on_period UNK on_period UNK on_op on_lbracket on_rbracket on_rparen on_period UNK UNK on_op # If we have a private key that was copied into this box, # then we copy that. This is a bit of a heuristic and can be a # security risk if the key is named the correct thing, but # we'll take that risk for dev environments.
if on_const on_period UNK on_lparen UNK on_rparen on_op on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_op on_const on_period UNK on_lparen UNK on_rparen # If we have the correctly named key, copy it
return if on_op UNK on_period UNK on_nl on_ignored_nl UNK on_op on_const on_period UNK on_lparen on_ivar on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket # If we still have no matching key, do nothing
UNK on_op on_const on_period UNK on_lparen on_ivar on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_rparen on_nl UNK on_op UNK on_period join on_lparen # Copy it into our box directory
UNK on_op UNK on_period join on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_op on_tstring_beg # Append it to the Vagrantfile (or create a Vagrantfile)
