class on_const on_nl class on_const on_nl attr_reader on_symbeg plugin_file on_nl attr_reader on_symbeg solution_file on_nl attr_reader on_symbeg dependency_list on_nl on_ignored_nl def # This class manages Vagrant's interaction with Bundler. Vagrant uses # Bundler as a way to properly resolve all dependencies of Vagrant and # all Vagrant-installed plugins.
attr_reader on_symbeg plugin_file on_nl attr_reader on_symbeg solution_file on_nl attr_reader on_symbeg dependency_list on_nl on_ignored_nl def UNK on_lparen on_label on_comma on_label nil # @return [Pathname] path to plugin file
attr_reader on_symbeg solution_file on_nl attr_reader on_symbeg dependency_list on_nl on_ignored_nl def UNK on_lparen on_label on_comma on_label nil on_rparen on_ignored_nl on_ivar on_op # @return [Pathname] path to solution file
attr_reader on_symbeg dependency_list on_nl on_ignored_nl def UNK on_lparen on_label on_comma on_label nil on_rparen on_ignored_nl on_ivar on_op on_const on_op on_const on_period # @return [Array<Gem::Dependency>] list of required dependencies
def UNK on_lparen on_label on_comma on_label nil on_rparen on_ignored_nl on_ivar on_op on_const on_op on_const on_period new on_lparen on_tstring_beg on_tstring_content on_tstring_end # @param [Pathname] plugin_file Path to plugin file # @param [Pathname] solution_file Custom path to solution file
def UNK on_lparen dependency_list on_rparen on_ignored_nl on_const on_lparen dependency_list on_rparen on_period each do on_op d on_op on_ignored_nl if on_op d # Set the list of dependencies for this solution # # @param [Array<Gem::Dependency>] dependency_list List of dependencies for the solution
def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period debug on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl # @return [Boolean] contained solution is valid
def UNK on_nl on_ivar on_period debug on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ivar on_op false on_nl end on_nl on_ignored_nl def # @return [FalseClass] invalidate this solution file
def UNK on_nl if on_op solution_file on_period exist? on_nl on_ivar on_period debug on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl return false # Delete the solution file # # @return [Boolean] true if file was deleted
def UNK on_nl if on_op plugin_file on_period exist? on_nl on_ivar on_period debug on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl return on_nl # Store the solution file
on_tstring_beg on_tstring_content on_embexpr_beg plugin_file on_embexpr_end on_tstring_content on_tstring_end on_tstring_beg on_embexpr_beg solution_file on_embexpr_end on_tstring_content on_embexpr_beg UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_op on_tstring_beg # :nodoc:
def load on_nl if on_op plugin_file on_period exist? on_op on_op solution_file on_period exist? on_nl on_ivar on_period debug on_lparen on_tstring_beg on_tstring_content # Load the solution file for the plugin path provided # if it exists. Validate solution is still applicable # before injecting dependencies.
def UNK on_lparen on_label on_comma on_label on_rparen on_ignored_nl UNK on_op UNK on_nl on_ivar on_period debug on_lparen on_tstring_beg on_tstring_content on_embexpr_beg UNK # Validate the given checksum matches the plugin file # checksum # # @param [String] checksum Checksum value to validate # @return [Boolean]
def UNK on_nl UNK on_op on_const on_op on_const on_period new on_nl UNK on_period UNK on_lparen plugin_file on_period to_s on_rparen on_nl # @return [String] checksum of plugin file
def UNK on_nl on_ivar on_period debug on_lparen on_tstring_beg on_tstring_content on_embexpr_beg solution_file on_embexpr_end on_tstring_end on_rparen on_nl UNK on_ignored_nl UNK on_op on_const # Read contents of solution file and parse # # @return [Hash]
on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_ignored_nl on_const on_op on_lbracket on_ignored_nl on_const on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_period # Location of HashiCorp gem repository
on_const on_op on_lbracket on_ignored_nl on_const on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_rbracket on_period freeze on_nl on_ignored_nl def UNK # Default gem repositories
attr_reader on_symbeg plugin_gem_path on_nl attr_reader on_symbeg UNK on_nl attr_reader on_symbeg env_plugin_gem_path on_nl attr_reader on_symbeg UNK on_nl on_ignored_nl def UNK on_nl # @return [Pathname] Global plugin path
attr_reader on_symbeg UNK on_nl attr_reader on_symbeg env_plugin_gem_path on_nl attr_reader on_symbeg UNK on_nl on_ignored_nl def UNK on_nl on_ivar on_op on_const on_period # @return [Pathname] Global plugin solution set path
attr_reader on_symbeg env_plugin_gem_path on_nl attr_reader on_symbeg UNK on_nl on_ignored_nl def UNK on_nl on_ivar on_op on_const on_period UNK on_period join on_lparen # @return [Pathname] Vagrant environment specific plugin path
attr_reader on_symbeg UNK on_nl on_ignored_nl def UNK on_nl on_ivar on_op on_const on_period UNK on_period join on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma # @return [Pathname] Vagrant environment data path
def UNK on_lparen UNK on_rparen on_ignored_nl if on_op UNK on_period is_a? on_lparen on_const on_rparen on_nl raise on_const on_comma on_tstring_beg on_tstring_content # Enable Vagrant environment specific plugins at given data path # # @param [Pathname] Path to Vagrant::Environment data directory # @return [Pathname] Path to environment specific gem directory
def UNK on_lparen opts on_op on_lbrace on_rbrace on_rparen on_ignored_nl return if on_op opts on_lbracket on_symbeg UNK on_rbracket on_op on_op opts # Use the given options to create a solution file instance # for use during initialization. When a Vagrant environment # is in use, solution files will be stored within the environment's # data directory. This is because the solution for loading global # plugins is dependent on any solution generated for local plugins. # When no Vagrant environment is in use (running Vagrant without a # Vagrantfile), the Vagrant user data path will be used for solution # storage since only the global plugins will be used. # # @param [Hash] opts Options passed to #init! # @return [SolutionFile]
def UNK on_lparen plugins on_comma UNK on_op false on_comma on_op opts on_rparen on_ignored_nl if on_op on_ivar on_nl on_ivar on_op on_const # Initializes Bundler and the various gem paths so that we can begin # loading gems.
if on_op on_const on_period sources on_period include? on_lparen on_const on_rparen on_nl sources on_op on_lbracket on_const on_rbracket on_op on_const on_period sources # Add HashiCorp RubyGems source
plugin_deps on_op plugins on_period map do on_op name on_comma info on_op on_ignored_nl on_const on_op on_const on_period new on_lparen name on_comma # Generate dependencies for all registered plugins
request_set on_op on_const on_op on_const on_period new on_lparen on_op plugin_deps on_rparen on_nl request_set on_period UNK on_op false on_nl on_ignored_nl UNK # Load dependencies into a request set for resolution
request_set on_period UNK on_op false on_nl on_ignored_nl UNK on_op nil on_nl UNK on_ignored_nl on_ivar on_period debug on_lparen on_tstring_beg on_tstring_content on_tstring_end # Never allow dependencies to be remotely satisfied during init
solution on_op request_set on_period UNK on_lparen UNK on_rparen on_nl on_ivar on_period debug on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl UNK on_const # Resolve the request set to ensure proper activation order
on_ivar on_period debug on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl UNK on_lparen solution on_rparen on_nl on_ignored_nl if solution_file on_op on_op solution_file # Activate the gems
def UNK on_nl end on_nl on_ignored_nl def UNK on_lparen plugins on_comma UNK on_op false on_rparen on_ignored_nl UNK on_lparen plugins on_comma # Removes any temporary files created by init
end on_nl on_ignored_nl def UNK on_lparen plugins on_comma UNK on_op false on_rparen on_ignored_nl UNK on_lparen plugins on_comma nil on_comma on_label # no-op
def UNK on_lparen plugins on_comma UNK on_op false on_rparen on_ignored_nl UNK on_lparen plugins on_comma nil on_comma on_label UNK on_rparen on_nl # Installs the list of plugins. # # @param [Hash] plugins # @param [Boolean] env_local Environment local plugin install # @return [Array<Gem::Specification>]
def UNK on_lparen path on_comma opts on_op on_lbrace on_rbrace on_rparen on_ignored_nl plugin_source on_op on_const on_op on_const on_op on_const on_period new # Installs a local '*.gem' file so that Bundler can find it. # # @param [String] path Path to a local gem file. # @return [Gem::Specification]
def update on_lparen plugins on_comma UNK on_comma on_op opts on_rparen on_ignored_nl UNK on_op on_lbracket on_rbracket on_nl update on_op opts on_period # Update updates the given plugins, or every plugin if none is given. # # @param [Hash] plugins # @param [Array<String>] specific Specific plugin names to update. If # empty or nil, all plugins will be updated.
def UNK on_lparen plugins on_comma on_op opts on_rparen on_ignored_nl on_ivar on_period debug on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl plugin_deps on_op # Clean removes any unused gems.
plugin_deps on_op plugins on_period map do on_op name on_comma info on_op on_ignored_nl gem_version on_op info on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket # Generate dependencies for all registered plugins
request_set on_op on_const on_op on_const on_period new on_lparen on_op plugin_deps on_rparen on_nl request_set on_period UNK on_op false on_nl on_ignored_nl UNK # Load dependencies into a request set for resolution
request_set on_period UNK on_op false on_nl on_ignored_nl UNK on_op UNK on_nl on_ignored_nl plugin_specs on_op on_const on_period UNK on_lparen plugin_gem_path on_period # Never allow dependencies to be remotely satisfied during cleaning
UNK on_op UNK on_nl on_ignored_nl plugin_specs on_op on_const on_period UNK on_lparen plugin_gem_path on_period join on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period # Sets that we can resolve our dependencies from. Note that we only # resolve from the current set as all required deps are activated during # init.
plugin_specs on_op on_const on_period UNK on_lparen plugin_gem_path on_period join on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period to_s on_rparen on_period map do # Collect all plugin specifications
if env_plugin_gem_path on_nl plugin_specs on_op on_const on_period UNK on_lparen env_plugin_gem_path on_period join on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period to_s on_rparen # Include environment specific specification if enabled
solution on_op request_set on_period UNK on_lparen UNK on_rparen on_nl UNK on_op solution on_period map on_lparen on_op on_symbeg full_spec on_rparen on_nl # Resolve the request set to ensure proper activation order
plugin_specs on_period delete_if do on_op spec on_op on_ignored_nl UNK on_period include? on_lparen spec on_period full_name on_rparen on_nl end on_nl on_ignored_nl # Find all specs installed to plugins directory that are not # found within the solution set.
if opts on_lbracket on_symbeg UNK on_rbracket on_nl on_ivar on_period debug on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl plugin_specs on_period delete_if do # If we are cleaning locally, remove any global specs. If # not, remove any local specs
plugin_specs on_period each do on_op spec on_op on_ignored_nl on_ivar on_period debug on_lparen on_tstring_beg on_tstring_content on_embexpr_beg spec on_period full_name on_embexpr_end on_tstring_end # Now delete all unused specs
def UNK on_nl if UNK on_nl UNK on_op on_ivar on_nl on_ivar on_op true on_nl UNK on_nl on_ivar on_op UNK on_nl # During the duration of the yielded block, Bundler loud output # is enabled.
plugin_deps on_op plugins on_period map do on_op name on_comma info on_op on_ignored_nl gem_version on_op info on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket # Generate all required plugin deps
if on_op on_const on_period UNK on_op on_op on_const on_period UNK on_nl UNK if on_op spec on_period UNK on_nl end on_nl # If we are not running within the installer and # we are not within a bundler environment then we # only want activated specs
on_const on_period sources on_period UNK on_nl on_ignored_nl on_ivar on_period debug on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl UNK on_period each do # Only allow defined Gem sources
request_set on_op on_const on_op on_const on_period new on_lparen on_op plugin_deps on_rparen on_nl request_set on_period UNK on_op on_const on_period UNK on_nl # Create the request set for the new plugins
solution on_op request_set on_period UNK on_lparen installer_set on_rparen on_nl on_ignored_nl UNK on_lparen solution on_rparen on_nl on_ignored_nl request_set on_period UNK on_period # Generate the required solution set for new plugins
request_set on_period UNK on_period delete_if do on_op UNK on_op on_ignored_nl UNK on_op UNK on_period spec on_nl if UNK on_period UNK # Remove gems which are already installed
UNK on_op UNK on_lbracket on_symbeg UNK on_rbracket on_op env_plugin_gem_path on_op plugin_gem_path on_nl result on_op request_set on_period UNK on_lparen UNK on_period # Install all remote gems into plugin path. Set the installer to ignore dependencies # as we know the dependencies are satisfied and it will attempt to validate a gem's # dependencies are satisfied by gems in the install directory (which will likely not # be true)
def UNK on_nl UNK on_op on_lbracket UNK on_comma UNK on_rbracket on_nl if env_plugin_gem_path on_op env_plugin_gem_path on_period exist? on_nl UNK on_op # Generate the composite resolver set totally all of vagrant (builtin + plugin set)
def UNK on_nl self_spec on_op on_const on_op on_const on_period UNK on_lbrace on_op s on_op s on_period name on_op on_tstring_beg on_tstring_content # @return [Array<[Gem::Specification]>] spec list
self_spec on_op on_const on_op on_const on_period UNK on_lbrace on_op s on_op s on_period name on_op on_tstring_beg on_tstring_content on_tstring_end on_op s # activate any dependencies up front so we can always # pin them when resolving
UNK on_op on_lbrace on_rbrace on_nl UNK on_op on_lbracket on_const on_op on_const on_period UNK on_rbracket on_nl on_const on_op on_const on_period find_all # discover all the gems we have available
def UNK on_nl on_const on_period sources on_period UNK do on_op src on_op on_ignored_nl UNK on_ignored_nl src on_period UNK on_lparen on_symbeg # Iterates each configured RubyGem source to validate that it is properly # available. If source is unavailable an exception is raised.
def UNK on_lparen system_plugins on_op on_lbracket on_rbracket on_rparen on_ignored_nl UNK on_op on_const on_period new on_nl on_ivar on_period debug on_lparen on_tstring_beg # Generate the builtin resolver set
def UNK on_lparen on_op UNK on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_lbrace on_op i on_op i on_period is_a? on_lparen # Generate the plugin resolver set. Optionally provide specification names (short or # full) that should be ignored # # @param [Pathname] path to plugins # @param [Array<String>] gems to skip # @return [PluginSet]
if on_op on_const on_period exist? on_lparen UNK on_rparen on_op on_op on_const on_period UNK on_lparen spec on_period UNK on_comma UNK on_rparen # Vendor set requires the spec to be within the gem directory. Some gems will package their # spec file, and that's not what we want to load.
def UNK on_lparen solution on_rparen on_ignored_nl UNK on_op false on_nl UNK on_ignored_nl on_ivar on_period debug on_lparen on_tstring_beg on_tstring_content on_embexpr_beg solution # Activate a given solution
if UNK on_nl on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_content on_embexpr_beg UNK on_period class on_embexpr_end on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_end on_rparen # Depending on the version of Ruby, the ordering of the solution set # will be either 0..n (molinillo) or n..0 (pre-molinillo). Instead of # attempting to determine what's in use, or if it has some how changed # again, just reverse order on failure and attempt again.
class on_const on_op on_const on_op on_const on_op on_const on_nl UNK on_symbeg UNK on_nl UNK on_symbeg system_plugins on_nl on_ignored_nl def UNK # This is a custom Gem::Resolver::InstallerSet. It will prefer sources which are # explicitly provided over default sources when matches are found. This is generally # the entire set used for performing full resolutions on install.
def find_all on_lparen req on_rparen on_ignored_nl result on_op UNK on_nl if system_plugins on_period include? on_lparen req on_period name on_rparen on_nl # Allow InstallerSet to find matching specs, then filter # for preferred sources
class on_const on_op on_const on_op on_const on_op on_const on_nl def UNK on_nl UNK on_nl on_ivar on_op false on_nl on_ivar on_op # This is a custom Gem::Resolver::Set for use with vagrant "system" gems. It # allows the installed set of gems to be used for providing a solution while # enforcing strict constraints. This ensures that plugins cannot "upgrade" # gems that are builtin to vagrant itself.
class on_const on_op on_const on_op on_const on_op on_const on_nl def UNK on_lparen name on_comma UNK on_rparen on_ignored_nl UNK on_op on_const # This is a custom Gem::Resolver::Set for use with Vagrant plugins. It is # a modified Gem::Resolver::VendorSet that supports multiple versions of # a specific gem
def UNK on_lparen name on_comma UNK on_rparen on_ignored_nl UNK on_op on_const on_period join on_lparen UNK on_comma on_tstring_beg on_embexpr_beg name on_embexpr_end ## # Adds a specification to the set with the given +name+ which has been # unpacked into the given +directory+.
def find_all on_lparen req on_rparen on_ignored_nl on_ivar on_period UNK on_period UNK on_period UNK do on_op spec on_op on_ignored_nl req on_period ## # Returns an Array of VendorSpecification objects matching the # DependencyRequest +req+.
def UNK on_lparen name on_comma version on_comma UNK on_comma source on_rparen on_ignored_nl version on_op on_const on_op on_const on_period new on_lparen ## # Loads a spec with the given +name+. +version+, +platform+ and +source+ are # ignored.
if on_const on_op on_const on_period new on_lparen on_const on_rparen on_op on_const on_op on_const on_period new on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen # Patch for Ruby 2.2 and Bundler to behave properly when uninstalling plugins
