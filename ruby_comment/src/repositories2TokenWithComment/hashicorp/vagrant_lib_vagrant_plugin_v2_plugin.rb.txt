UNK on_const on_nl on_const on_op on_symbeg UNK on_nl on_ignored_nl on_const on_op on_const on_op on_const on_period new on_lparen UNK on_tstring_content UNK # This is the superclass for all V2 plugins.
on_const on_op on_symbeg UNK on_nl on_ignored_nl on_const on_op on_const on_op on_const on_period new on_lparen UNK on_tstring_content UNK on_rparen on_nl on_ignored_nl # Special marker that can be used for action hooks that matches # all action sequences.
on_const on_op on_const on_op on_const on_period new on_lparen UNK on_tstring_content UNK on_rparen on_nl on_ignored_nl on_const on_op self on_nl on_ignored_nl def # The logger for this class.
on_const on_op self on_nl on_ignored_nl def self on_period UNK on_nl UNK on_op on_const on_period new on_nl end on_nl on_ignored_nl def # Set the root class up to be ourself, so that we can reference this # from within methods which are probably in subclasses.
def self on_period UNK on_nl UNK on_op on_const on_period new on_nl end on_nl on_ignored_nl def self on_period components on_nl UNK # This returns the manager for all V2 plugins. # # @return [V2::Manager]
def self on_period components on_nl UNK on_op on_const on_period new on_nl end on_nl on_ignored_nl def self on_period name on_lparen name # Returns the {Components} for this plugin. # # @return [Components]
def self on_period name on_lparen name on_op on_const on_rparen on_ignored_nl UNK on_op UNK on_lparen on_symbeg name on_comma name on_rparen on_nl # Set the name of the plugin. The moment that this is called, the # plugin will be registered and available. Before this is called, a # plugin does not exist. The name must be unique among all installed # plugins. # # @param [String] name Name of the plugin. # @return [String] The name of the plugin.
UNK on_op UNK on_lparen on_symbeg name on_comma name on_rparen on_nl on_ignored_nl on_const on_period UNK on_period register on_lparen self on_rparen if # Get or set the value first, so we have a name for logging when # we register.
on_const on_period UNK on_period register on_lparen self on_rparen if name on_op on_const on_nl on_ignored_nl UNK on_nl end on_nl on_ignored_nl def # The plugin should be registered if we're setting a real name on it
UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen UNK on_op on_const on_rparen on_ignored_nl UNK on_lparen on_symbeg UNK on_comma # Return the result
def self on_period UNK on_lparen UNK on_op on_const on_rparen on_ignored_nl UNK on_lparen on_symbeg UNK on_comma UNK on_rparen on_nl end on_nl # Sets a human-friendly description of the plugin. # # @param [String] value Description of the plugin. # @return [String] Description of the plugin.
def self on_period UNK on_lparen name on_comma hook_name on_op nil on_comma on_op block on_rparen on_ignored_nl hook_name on_op hook_name on_period UNK # Registers a callback to be called when a specific action sequence # is run. This allows plugin authors to hook into things like VM # bootup, VM provisioning, etc. # # @param [String] name Name of the action. # @param [Symbol] hook_name The location to hook. If this isn't # set, every middleware action is hooked. # @return [Array] List of the hooks for the given action.
hook_name on_op hook_name on_period UNK if hook_name on_nl on_ignored_nl hook_name on_op on_const on_nl components on_period UNK on_lbracket hook_name on_period to_sym # The name is currently not used but we want it for the future.
def self on_period UNK on_lparen name on_comma on_op UNK on_comma on_op block on_rparen on_ignored_nl if name on_period UNK on_op UNK # Defines additional command line commands available by key. The key # becomes the subcommand, so if you register a command "foo" then # "vagrant foo" becomes available. # # @param [String] name Subcommand key.
if name on_period UNK on_op UNK on_tstring_content UNK on_nl UNK on_const on_comma UNK on_tstring_content UNK on_nl end on_nl on_ignored_nl UNK # Validate the name of the command
UNK on_lbracket on_symbeg UNK on_rbracket on_op UNK if on_op UNK on_period UNK on_lparen on_symbeg UNK on_rparen on_nl on_ignored_nl components on_period # By default, the command is primary
components on_period UNK on_period register on_lparen name on_period to_sym on_rparen do on_ignored_nl on_lbracket block on_comma UNK on_rbracket on_nl end on_nl # Register the command
def self on_period UNK on_lparen name on_op on_const on_comma on_op block on_rparen on_ignored_nl data on_lbracket on_symbeg UNK on_rbracket on_op on_const # Defines additional communicators to be available. Communicators # should be returned by a block passed to this method. This is done # to ensure that the class is lazy loaded, so if your class inherits # from or uses any Vagrant internals specific to Vagrant 1.0, then # the plugin can still be defined without breaking anything in future # versions of Vagrant. # # @param [String] name Communicator name.
data on_lbracket on_symbeg UNK on_rbracket on_period register on_lparen name on_period to_sym on_comma on_op block on_rparen if name on_op on_const on_nl # Register a new communicator class only if a name was given.
data on_lbracket on_symbeg UNK on_rbracket on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen name on_comma UNK on_op nil on_comma # Return the registry
def self on_period UNK on_lparen name on_comma UNK on_op nil on_comma on_op block on_rparen on_ignored_nl UNK on_op on_symbeg UNK on_nl # Defines additional configuration keys to be available in the # Vagrantfile. The configuration class should be returned by a # block passed to this method. This is done to ensure that the class # is lazy loaded, so if your class inherits from any classes that # are specific to Vagrant 1.0, then the plugin can still be defined # without breaking anything in future versions of Vagrant. # # @param [String] name Configuration key.
def self on_period UNK on_lparen name on_comma parent on_op nil on_comma on_op block on_rparen on_ignored_nl components on_period UNK on_period register # Defines an additionally available guest implementation with # the given key. # # @param [String] name Name of the guest. # @param [String] parent Name of the parent guest (if any)
def self on_period UNK on_lparen UNK on_comma cap on_comma on_op block on_rparen on_ignored_nl components on_period UNK on_lbracket UNK on_period to_sym # Defines a capability for the given guest. The block should return # a class/module that has a method with the capability name, ready # to be executed. This means that if it is an instance method, # the block should return an instance of the class. # # @param [String] guest The name of the guest # @param [String] cap The name of the capability
def self on_period UNK on_lparen name on_comma parent on_op nil on_comma on_op block on_rparen on_ignored_nl components on_period UNK on_period register # Defines an additionally available host implementation with # the given key. # # @param [String] name Name of the host. # @param [String] parent Name of the parent host (if any)
def self on_period UNK on_lparen UNK on_comma cap on_comma on_op block on_rparen on_ignored_nl components on_period UNK on_lbracket UNK on_period to_sym # Defines a capability for the given host. The block should return # a class/module that has a method with the capability name, ready # to be executed. This means that if it is an instance method, # the block should return an instance of the class. # # @param [String] host The name of the host # @param [String] cap The name of the capability
def self on_period UNK on_lparen name on_op on_const on_comma options on_op nil on_comma on_op block on_rparen on_ignored_nl options on_op UNK # Registers additional providers to be available. # # @param [Symbol] name Name of the provider.
def self on_period UNK on_lparen UNK on_comma cap on_comma on_op block on_rparen on_ignored_nl components on_period UNK on_lbracket UNK on_period to_sym # Defines a capability for the given provider. The block should return # a class/module that has a method with the capability name, ready # to be executed. This means that if it is an instance method, # the block should return an instance of the class. # # @param [String] provider The name of the provider # @param [String] cap The name of the capability
def self on_period UNK on_lparen name on_op on_const on_comma on_op block on_rparen on_ignored_nl data on_lbracket on_symbeg UNK on_rbracket on_op on_const # Registers additional provisioners to be available. # # @param [String] name Name of the provisioner.
data on_lbracket on_symbeg UNK on_rbracket on_period register on_lparen name on_period to_sym on_comma on_op block on_rparen if name on_op on_const on_nl # Register a new provisioner class only if a name was given
data on_lbracket on_symbeg UNK on_rbracket on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen name on_comma options on_op nil on_comma # Return the registry
def self on_period UNK on_lparen name on_comma options on_op nil on_comma on_op block on_rparen on_ignored_nl components on_period UNK on_period register # Registers additional pushes to be available. # # @param [String] name Name of the push. # @param [Hash] options List of options for the push.
def self on_period UNK on_lparen name on_comma UNK on_op UNK on_comma on_op block on_rparen on_ignored_nl components on_period UNK on_period register # Registers additional synced folder implementations. # # @param [String] name Name of the implementation. # @param [Integer] priority The priority of the implementation, # higher (big) numbers are tried before lower (small) numbers.
def self on_period data on_nl UNK on_op UNK UNK on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl on_const on_op on_const on_period # Returns the internal data associated with this plugin. This # should NOT be called by the general public. # # @return [Hash]
on_const on_op on_const on_period new on_nl on_ignored_nl def self on_period UNK on_lparen UNK on_comma UNK on_op on_const on_rparen on_ignored_nl UNK # Sentinel value denoting that a value has not been set.
def self on_period UNK on_lparen UNK on_comma UNK on_op on_const on_rparen on_ignored_nl UNK data on_lbracket UNK on_rbracket if UNK on_period # Helper method that will set a value if a value is given, or otherwise # return the already set value. # # @param [Symbol] key Key for the data # @param [Object] value Value to store. # @return [Object] Stored value.
UNK data on_lbracket UNK on_rbracket if UNK on_period UNK on_lparen on_const on_rparen on_nl on_ignored_nl data on_lbracket UNK on_rbracket on_op UNK # If no value is to be set, then return the value we have already set
data on_lbracket UNK on_rbracket on_op UNK on_nl end on_nl end on_nl end on_nl end on_nl end on_nl EMP EMP EMP # Otherwise set the value
