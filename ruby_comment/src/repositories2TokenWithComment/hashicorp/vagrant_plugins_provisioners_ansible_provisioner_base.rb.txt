on_ignored_nl UNK on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg UNK on_rparen on_nl on_ignored_nl on_const on_op on_regexp_beg # This class is a base class where the common functionality shared between # both Ansible provisioners are stored. # This is **not an actual provisioner**. # Instead, {Host} (ansible) or {Guest} (ansible_local) should be used.
on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_content on_embexpr_beg UNK on_period to_s on_embexpr_end on_tstring_end on_rparen on_nl end on_nl on_ignored_nl if on_ivar on_nl # Nothing to do here, as the fallback on safe compatibility_mode is done below
UNK on_const on_op on_const on_op on_const on_comma on_ignored_nl on_label on_ivar on_comma on_ignored_nl on_label on_ivar on_comma on_ignored_nl on_label config on_period compatibility_mode # A better version comparator will be needed # when more compatibility modes come... but so far let's keep it simple!
shell_command on_op config on_period UNK if config on_period UNK on_nl on_ignored_nl shell_command on_op config on_period UNK on_nl on_ignored_nl shell_command on_period # Add the raw arguments at the end, to give them the highest precedence
if config on_period UNK on_nl on_ivar on_op on_tstring_beg on_tstring_content on_embexpr_beg on_const on_op UNK on_lparen config on_period UNK on_rparen on_embexpr_end on_tstring_end # By default we limit by the current machine, # but this can be overridden by the `limit` option.
on_ivar on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op on_int on_nl on_ignored_nl on_ivar on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op on_tstring_beg on_tstring_content on_tstring_end # Ensure Ansible output isn't buffered so that we receive output # on a task-by-task basis.
on_ivar on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op on_tstring_beg on_tstring_content on_tstring_end if on_ivar on_period UNK on_period ui on_period UNK on_nl on_ivar # When Ansible output is piped in Vagrant integration, its default colorization is # automatically disabled and the only way to re-enable colors is to use ANSIBLE_FORCE_COLOR.
on_ivar on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op on_tstring_beg on_tstring_content on_tstring_end if on_op on_ivar on_period UNK on_period ui on_period UNK on_nl # Setting ANSIBLE_NOCOLOR is "unnecessary" at the moment, but this could change in the future # (e.g. local provisioner [GH-2103], possible change in vagrant/ansible integration, etc.)
on_ivar on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op UNK if config on_period UNK on_nl on_ignored_nl UNK on_nl end on_nl on_ignored_nl def # Use ANSIBLE_ROLES_PATH to tell ansible-playbook where to look for roles # (there is no equivalent command line argument in ansible-playbook)
def inventory_path on_nl if config on_period inventory_path on_nl config on_period inventory_path on_nl else on_ignored_nl on_ivar on_op UNK on_nl end on_nl # Auto-generate "safe" inventory file based on Vagrantfile, # unless inventory_path is explicitly provided
vars on_op config on_period UNK on_lbracket UNK on_period UNK on_rbracket on_nl if on_op vars on_nl vars on_op config on_period UNK # In Ruby, Symbol and String values are different, but # Vagrant has to unify them for better user experience.
UNK on_op UNK on_nl on_ignored_nl UNK on_op UNK on_nl on_ignored_nl on_ivar on_op UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl # This "abstract" step must fill the @inventory_machines list # and return the list of supported host(s)
on_ivar on_op UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op on_lbrace on_rbrace on_nl defined_groups on_op # This "abstract" step must create the inventory file and # return its location path # TODO: explain possible race conditions, etc.
def UNK on_nl UNK on_op on_lbrace on_rbrace on_nl defined_groups on_op on_lbracket on_rbracket on_nl UNK on_op on_lbrace on_rbrace on_nl inventory_groups on_op # Write out groups information. # All defined groups will be included, but only supported # machines and defined child groups will be included.
if config on_period UNK on_period UNK on_lbrace on_op gm on_op gm on_period to_s on_lbracket on_const on_rbracket on_rbrace on_nl on_ivar on_period # Verify if host range patterns exist and warn
if gm on_lbracket on_const on_rbracket on_nl inventory_groups on_op on_tstring_beg on_embexpr_beg gm on_embexpr_end on_tstring_content on_tstring_end on_nl end on_nl inventory_groups on_op on_tstring_beg # TODO : Expand and validate host range patterns # against @inventory_machines list before adding them # otherwise abort with an error message
config on_period extra_vars on_nl else on_ignored_nl config on_period extra_vars on_period UNK on_nl end on_nl end on_nl on_ignored_nl def UNK on_nl # A JSON or YAML file is referenced.
config on_period extra_vars on_period UNK on_nl end on_nl end on_nl on_ignored_nl def UNK on_nl on_const on_op UNK on_lparen config on_period # Expected to be a Hash after config validation.
on_ivar on_period UNK on_period ui on_period UNK UNK on_nl end on_nl end on_nl on_ignored_nl def UNK on_nl config on_period UNK # Show the ansible command in use
on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl def UNK on_nl if on_op on_ivar on_op config # safe default, in case input strays
