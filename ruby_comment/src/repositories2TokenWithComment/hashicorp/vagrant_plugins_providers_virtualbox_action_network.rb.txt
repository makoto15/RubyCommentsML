UNK on_const on_nl UNK on_const on_op on_const on_op on_const on_nl UNK on_const on_op on_const on_op on_const on_nl on_ignored_nl def UNK # This middleware class sets up all networking for the VirtualBox # instance. This includes host only networks, bridged networking, # forwarded ports, etc. # # This handles all the `config.vm.network` configurations.
on_ivar on_op env on_nl on_ignored_nl UNK on_op env on_lbracket on_symbeg machine on_rbracket on_period UNK on_period UNK on_period UNK on_nl on_ignored_nl # TODO: Validate network configuration prior to anything below
UNK on_op env on_lbracket on_symbeg machine on_rbracket on_period UNK on_period UNK on_period UNK on_nl on_ignored_nl available_slots on_op on_const on_period UNK # Get the list of network adapters from the configuration
available_slots on_op on_const on_period UNK on_lparen on_int on_op on_int on_rparen on_nl UNK on_period each do on_op slot on_comma UNK on_op # Assign the adapter slot for each high-level network
UNK if type on_op on_symbeg UNK on_op type on_op on_symbeg UNK on_nl on_ignored_nl options on_op UNK on_lparen options on_comma on_symbeg # We only handle private and public networks
slot on_op options on_lbracket on_symbeg adapter on_rbracket on_nl if on_op slot on_nl if available_slots on_period UNK on_nl raise on_const on_op # Figure out the slot that this adapter will go into
if type on_op on_symbeg UNK on_op options on_lbracket on_symbeg UNK on_rbracket on_nl type on_op on_symbeg UNK on_nl end on_nl on_ignored_nl # Internal network is a special type
data on_op nil on_nl if type on_op on_symbeg UNK on_nl data on_op on_lbracket on_symbeg UNK on_comma options on_rbracket on_nl UNK # Configure it
data on_op on_lbracket on_symbeg UNK on_comma options on_rbracket on_nl UNK type on_op on_symbeg UNK on_nl data on_op on_lbracket on_symbeg UNK # private_network = hostonly
data on_op on_lbracket on_symbeg UNK on_comma options on_rbracket on_nl UNK type on_op on_symbeg UNK on_nl data on_op on_lbracket on_symbeg UNK # public_network = bridged
on_ivar on_period info on_lparen on_tstring_beg on_tstring_content on_embexpr_beg slot on_embexpr_end on_tstring_content on_embexpr_beg data on_lbracket on_int on_rbracket on_embexpr_end on_tstring_end on_rparen on_nl UNK # Store it!
config on_op UNK on_lparen on_tstring_beg on_embexpr_beg type on_embexpr_end on_tstring_content on_tstring_end on_comma options on_rparen on_nl config on_lbracket on_symbeg adapter on_rbracket on_op # Get the normalized configuration for this type
adapter on_op UNK on_lparen on_tstring_beg on_embexpr_beg type on_embexpr_end on_tstring_content on_tstring_end on_comma config on_rparen on_nl adapters on_op adapter on_nl on_ivar on_period # Get the VirtualBox adapter configuration
network on_op UNK on_lparen on_tstring_beg on_embexpr_beg type on_embexpr_end on_tstring_content on_tstring_end on_comma config on_rparen on_nl network on_lbracket on_symbeg UNK on_rbracket on_op # Get the network configuration
on_ivar on_period info on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl env on_lbracket on_symbeg ui on_rbracket on_period UNK on_lparen on_const on_period t # Enable the adapters
on_ivar on_period UNK on_lparen env on_rparen on_nl on_ignored_nl if on_op adapters on_period UNK on_op on_op networks on_period UNK on_nl UNK # Continue the middleware chain.
if on_op adapters on_period UNK on_op on_op networks on_period UNK on_nl UNK on_lparen networks on_comma adapters on_rparen on_nl on_ignored_nl UNK # If we have networks to configure, then we configure it now, since # that requires the machine to be up and running.
UNK on_op networks on_period UNK on_lbrace on_op UNK on_op UNK on_lbracket on_symbeg UNK on_rbracket on_rbrace on_nl if on_op UNK on_period # Only configure the networks the user requested us to configure
bridgedifs on_op on_ivar on_lbracket on_symbeg machine on_rbracket on_period provider on_period driver on_period UNK on_nl bridgedifs on_period UNK on_lbrace on_op interface # Find the bridged interfaces that are available
chosen_bridge on_op nil on_nl on_ignored_nl if config on_lbracket on_symbeg bridge on_rbracket on_nl on_ivar on_period debug on_lparen on_tstring_beg on_tstring_content on_embexpr_beg config # The name of the chosen bridge interface will be assigned to this # variable.
on_const on_lparen config on_lbracket on_symbeg bridge on_rbracket on_rparen on_period each do on_op bridge on_op on_ignored_nl bridge on_op bridge on_period UNK # Search for a matching bridged interface
if on_op chosen_bridge on_nl on_ivar on_lbracket on_symbeg ui on_rbracket on_period info on_const on_period t on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl # If one wasn't found, then we notify the user here.
if on_op chosen_bridge on_nl if bridgedifs on_period UNK on_op on_int on_nl chosen_bridge on_op bridgedifs on_lbracket on_int on_rbracket on_lbracket on_symbeg name # If we still don't have a bridge chosen (this means that one wasn't # specified in the Vagrantfile, or the bridge specified in the Vagrantfile # wasn't found), then we fall back to the normal means of searching for a # bridged network.
chosen_bridge on_op bridgedifs on_lbracket on_int on_rbracket on_lbracket on_symbeg name on_rbracket on_nl on_ivar on_period debug on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl # One bridgeable interface? Just use it.
on_ivar on_lbracket on_symbeg ui on_rbracket on_period info on_const on_period t on_lparen on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_label UNK on_rparen # More than one bridgeable interface requires a user decision, so # show options to choose from.
UNK on_op on_const on_period UNK on_lparen on_int on_comma bridgedifs on_period UNK on_rparen on_nl on_ignored_nl choice on_op nil on_nl UNK on_op # The range of valid choices
choice on_op nil on_nl UNK on_op UNK on_period UNK on_lparen choice on_rparen on_nl choice on_op on_ivar on_lbracket on_symbeg ui on_rbracket # The choice that the user has chosen as the bridging interface
return on_lbrace on_ignored_nl on_label config on_lbracket on_symbeg adapter on_rbracket on_comma on_ignored_nl on_label on_symbeg UNK on_comma on_ignored_nl on_label chosen_bridge on_comma on_ignored_nl # Given the choice we can now define the adapter we're using
options on_lbracket on_symbeg type on_rbracket on_op options on_lbracket on_symbeg type on_rbracket on_period UNK on_nl on_ignored_nl options on_lbracket on_symbeg ip on_rbracket # Make sure the type is a symbol
options on_lbracket on_symbeg ip on_rbracket on_op on_tstring_beg on_tstring_content on_tstring_end if options on_lbracket on_symbeg type on_rbracket on_op on_symbeg UNK on_op on_op # Default IP is in the 20-bit private network block for DHCP based networks
options on_lbracket on_symbeg type on_rbracket on_op on_tstring_beg on_embexpr_beg options on_lbracket on_symbeg type on_rbracket on_embexpr_end on_tstring_content on_tstring_end on_period UNK on_nl UNK # Append a 6 to the end of the type
UNK on_op on_const on_period UNK on_lparen on_tstring_beg on_embexpr_beg options on_lbracket on_symbeg ip on_rbracket on_embexpr_end on_tstring_content on_embexpr_beg options on_lbracket on_symbeg netmask # Calculate our network address for the given IP/netmask
on_ivar on_lbracket on_symbeg machine on_rbracket on_period provider on_period driver on_period UNK on_period each do on_op interface on_op on_ignored_nl UNK on_op # Verify that a host-only network subnet would not collide # with a bridged networking interface. # # If the subnets overlap in any way then the host only network # will not work because the routing tables will force the # traffic onto the real interface rather than the VirtualBox # interface.
options on_lbracket on_symbeg UNK on_rbracket on_op on_lparen UNK on_op on_int on_rparen on_period to_s on_nl on_ignored_nl UNK on_op on_lbrace on_rbrace on_nl # Calculate the adapter IP which is the network address with # the final bit + 1. Usually it is "x.x.x.1" for IPv4 and # "<prefix>::1" for IPv6
UNK on_op UNK on_period UNK on_nl UNK on_lbracket on_symbeg UNK on_rbracket on_op options on_lbracket on_symbeg UNK on_rbracket on_op on_lparen UNK # Calculate the DHCP server IP and lower & upper bound # Example: for "192.168.22.64/26" network range those are: # dhcp_ip: "192.168.22.66", # dhcp_lower: "192.168.22.67" # dhcp_upper: "192.168.22.126"
if config on_lbracket on_symbeg name on_rbracket on_nl raise on_const on_op on_const on_op on_const on_comma on_label config on_lbracket on_symbeg name on_rbracket # It is an error if a specific host only network name was specified # but the network wasn't found.
interface on_op UNK on_lparen config on_rparen on_nl on_ivar on_period info on_lparen on_tstring_beg on_tstring_content on_embexpr_beg interface on_lbracket on_symbeg name on_rbracket on_embexpr_end # Create a new network
def UNK on_lparen networks on_comma adapters on_rparen on_ignored_nl UNK on_op on_int on_nl UNK on_op on_lbrace on_rbrace on_nl on_ignored_nl UNK on_op #----------------------------------------------------------------- # Misc. helpers #----------------------------------------------------------------- # Assigns the actual interface number of a network based on the # enabled NICs on the virtual machine. # # This interface number is used by the guest to configure the # NIC on the guest VM. # # The networks are modified in place by adding an ":interface" # field to each.
UNK on_op on_ivar on_lbracket on_symbeg machine on_rbracket on_period provider on_period driver on_period UNK on_nl UNK on_period UNK on_period each do # Make a first pass to assign interface numbers by adapter location
UNK on_lbracket UNK on_rbracket on_op UNK on_nl UNK on_op on_int on_nl end on_nl end on_nl on_ignored_nl adapters on_period UNK do # Not used, so assign the interface number and increment
adapters on_period UNK do on_op UNK on_op on_ignored_nl adapter on_op adapters on_lbracket UNK on_rbracket on_nl network on_op networks on_lbracket UNK # Make a pass through the adapters to assign the :interface # key to each network configuration.
network on_lbracket on_symbeg interface on_rbracket on_op UNK on_lbracket adapter on_lbracket on_symbeg adapter on_rbracket on_rbracket on_nl end on_nl end on_nl on_ignored_nl # Figure out the interface number by simple lookup
def UNK on_lparen config on_rparen on_ignored_nl on_ivar on_lbracket on_symbeg machine on_rbracket on_period provider on_period driver on_period UNK on_lparen on_ignored_nl on_label #----------------------------------------------------------------- # Hostonly Helper Functions #----------------------------------------------------------------- # This creates a host only network for the given configuration.
def UNK on_lparen config on_rparen on_ignored_nl UNK on_op UNK on_lparen config on_lbracket on_symbeg ip on_rbracket on_comma config on_lbracket on_symbeg netmask # This finds a matching host only network for the given configuration.
if config on_lbracket on_symbeg name on_rbracket on_period to_s on_op on_tstring_beg on_tstring_end on_nl UNK on_nl end on_nl on_ignored_nl if interface on_lbracket #if a config name is specified, we should only look for that.
on_ignored_nl on_const on_op on_lbrace on_ignored_nl on_label on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_label on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_label on_tstring_beg on_tstring_content #----------------------------------------------------------------- # DHCP Server Helper Functions #-----------------------------------------------------------------
def UNK on_lparen interface on_comma config on_rparen on_ignored_nl UNK on_op UNK on_lparen interface on_rparen on_nl on_ignored_nl if UNK on_nl if # # When a host-only network of type: :dhcp is configured, # this handles the potential creation of a vbox dhcpserver to manage # it. # # @param [Hash<String>] interface hash as returned from read_host_only_interfaces # @param [Hash<String>] config hash as returned from hostonly_config
raise on_const on_op on_const on_op on_const on_nl end on_nl end on_nl on_ignored_nl on_ivar on_period debug on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen # We have an invalid DHCP server that we're not able to # automatically clean up, so we need to give up and tell the user # to sort out their own vbox dhcpservers and hostonlyifs
def UNK on_lparen dhcp_server on_comma config on_rparen on_ignored_nl dhcp_server on_lbracket on_symbeg ip on_rbracket on_op config on_lbracket on_symbeg UNK on_rbracket on_op # Detect when an existing DHCP server matches precisely the # requested config for a hostonly interface. # # @param [Hash<String>] dhcp_server as found by read_dhcp_servers # @param [Hash<String>] config as returned from hostonly_config # @return [Boolean]
def UNK on_lparen interface on_rparen on_ignored_nl on_ivar on_lbracket on_symbeg machine on_rbracket on_period provider on_period driver on_period UNK on_period UNK do # Returns the existing dhcp server, if any, that is attached to the # specified interface. # # @return [Hash<String>] dhcp_server or nil if not found
