class on_const on_nl UNK on_symbeg opts on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg # Vagrant UIs handle communication with the outside world (typically # through a shell). They must respond to the following methods: # # * `info` # * `warn` # * `error` # * `success`
UNK on_symbeg opts on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl # Opts can be used to set some options. These options are implementation # specific. See the implementation for more docs.
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_nl on_ivar on_op # @return [IO] UI input. Defaults to `$stdin`.
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_nl on_ivar on_op on_const on_op on_const on_period new # @return [IO] UI output. Defaults to `$stdout`.
UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_nl on_ivar on_op on_const on_op on_const on_period new on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen # @return [IO] UI error output. Defaults to `$stderr`.
UNK on_ignored_nl on_ivar on_period info on_lbrace on_tstring_beg on_embexpr_beg method on_embexpr_end on_tstring_content on_embexpr_beg message on_embexpr_end on_tstring_end on_rbrace on_nl UNK on_const on_nl # Log normal console messages
on_const on_period new do on_ignored_nl on_ivar on_period info on_lbrace on_tstring_beg on_embexpr_beg method on_embexpr_end on_tstring_content on_embexpr_beg message on_embexpr_end on_tstring_end on_rbrace on_nl # We're being called in a trap-context. Wrap in a thread.
UNK on_lparen method on_rparen on_lbrace on_op on_op args on_op on_rbrace on_nl end on_nl on_ignored_nl def UNK on_nl UNK UNK on_nl # By default do nothing, these aren't logged
def UNK on_nl UNK UNK on_nl end on_nl on_ignored_nl def UNK on_lparen type on_comma on_op data on_rparen on_ignored_nl on_ivar on_period # @return [false]
def UNK on_lparen type on_comma on_op data on_rparen on_ignored_nl on_ivar on_period info on_lparen on_tstring_beg on_tstring_content on_embexpr_beg type on_embexpr_end on_tstring_content on_embexpr_beg # For machine-readable output. # # @param [String] type The type of the data # @param [Array] data The data associated with the type
def UNK on_nl UNK UNK on_nl end on_nl end on_nl on_ignored_nl class on_const on_op on_const on_nl def ask on_lparen on_op # Yields self (UI) # Provides a way for selectively displaying or not displaying # updating content like download progress.
class on_const on_op on_const on_nl def ask on_lparen on_op args on_rparen on_ignored_nl super on_nl on_ignored_nl UNK on_const on_op on_const on_nl # This is a UI implementation that does nothing.
UNK on_const on_op on_const on_nl end on_nl end on_nl on_ignored_nl class on_const on_op on_const on_nl UNK on_const on_op on_const on_nl # Silent can't do this, obviously.
UNK on_const on_op on_const on_nl end on_nl on_ignored_nl on_lbracket on_symbeg detail on_comma on_symbeg warn on_comma on_symbeg error on_comma on_symbeg info # Machine-readable can't ask for input
data on_period UNK do on_op i on_op on_ignored_nl data on_lbracket i on_rbracket on_op data on_lbracket i on_rbracket on_period UNK on_period # Prepare the data by replacing characters that aren't outputted
on_const on_period new do on_ignored_nl on_ivar on_period UNK do on_ignored_nl UNK on_lparen on_tstring_beg on_embexpr_beg on_const on_period UNK on_period UNK on_period # Avoid locks in a trap context introduced from Ruby 2.0
class on_const on_op on_const on_nl UNK on_const on_op on_const on_nl on_ignored_nl def UNK on_nl super on_nl on_ignored_nl on_ivar on_op on_const # This is a UI implementation that outputs the text as is. It # doesn't add any color.
on_lbracket on_symbeg detail on_comma on_symbeg info on_comma on_symbeg warn on_comma on_symbeg error on_comma on_symbeg UNK on_comma on_symbeg UNK on_rbracket on_period # Use some light meta-programming to create the various methods to # output text to the UI. These all delegate the real functionality # to `say`.
UNK on_const on_op on_const if on_op on_ivar on_period UNK on_op on_op on_const on_op on_const on_op on_const on_period UNK on_nl on_ignored_nl # We can't ask questions when the output isn't a TTY.
opts on_op on_lbrace on_rbrace on_nl opts on_lbracket on_symbeg UNK on_rbracket on_op true if on_op opts on_period UNK on_lparen on_symbeg UNK # Setup the options so that the new line is suppressed
UNK on_lparen on_symbeg info on_comma message on_comma opts on_rparen on_nl on_ignored_nl UNK on_op UNK on_nl if opts on_lbracket on_symbeg UNK # Output the data
UNK on_lparen on_symbeg info on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma opts on_rparen on_nl UNK on_const on_op on_const on_nl UNK on_lparen on_symbeg # Output a newline because without echo, the newline isn't # echoed either.
UNK on_lparen on_symbeg info on_comma on_tstring_beg on_tstring_content on_embexpr_beg on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_embexpr_end on_tstring_content on_tstring_end on_comma # This means that stdin doesn't support echoless input.
UNK on_op ask on_lparen message on_comma opts on_period UNK on_lparen on_label true on_rparen on_rparen on_nl end on_nl end on_nl on_ignored_nl # Ask again, with echo enabled
on_lparen UNK on_op on_tstring_beg on_tstring_end on_rparen on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_comma total on_comma UNK # Get the results and chomp off the newline. We do a logical OR # here because `gets` can return a nil, for example in the case # that ctrl-D is pressed on the input.
def UNK on_lparen UNK on_comma total on_comma UNK on_op true on_rparen on_ignored_nl if total on_op total on_op on_int on_nl UNK # This is used to output progress reports to the UI. # Send this method progress/total and it will output it # to the UI. Send `clear_line` to clear the line to show # a continuous progress meter.
UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl info on_lparen UNK on_comma on_label UNK on_rparen on_nl end on_nl on_ignored_nl def UNK # See: https://en.wikipedia.org/wiki/ANSI_escape_code
def UNK on_lparen type on_comma message on_comma on_op opts on_rparen on_ignored_nl UNK on_op on_lbrace on_label true on_comma on_label true on_rbrace # This method handles actually outputting a message of a given type # to the console.
UNK if type on_op on_symbeg detail on_op opts on_lbracket on_symbeg UNK on_rbracket on_nl on_ignored_nl UNK on_op opts on_lbracket on_symbeg UNK # Don't output if we're hiding details
UNK on_op opts on_lbracket on_symbeg UNK on_rbracket on_op on_symbeg UNK on_op on_symbeg UNK on_nl on_ignored_nl UNK on_op type on_op on_symbeg # Determine whether we're expecting to output our # own new line or not.
UNK on_op type on_op on_symbeg error on_op opts on_lbracket on_symbeg UNK on_rbracket on_op on_symbeg error on_op on_ivar on_op on_ivar on_nl # Determine the proper IO channel to send this message # to based on the type of the message
on_const on_period new do on_ignored_nl on_ivar on_period UNK do on_ignored_nl UNK on_lparen UNK on_lparen type on_comma message on_comma on_op opts # Output! We wrap this in a lock so that it safely outputs only # one line at a time. We wrap this in a thread because as of Ruby 2.0 # we can't acquire locks in a trap context (ctrl-c), so we have to # do this.
end on_nl on_ignored_nl def UNK on_lparen UNK on_comma total on_comma UNK on_op true on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK # no-op
end on_nl on_ignored_nl def UNK on_nl on_ivar on_period warn on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl UNK on_lparen on_symbeg info on_comma # no-op
UNK on_const on_op on_const on_nl end on_nl end on_nl on_ignored_nl class on_const on_op on_const on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end # Non interactive can't ask for input
class on_const on_op on_const on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl def UNK on_lparen UNK on_comma prefix on_rparen on_ignored_nl # Prefixed wraps an existing UI and adds a prefix to it.
on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl def UNK on_lparen UNK on_comma prefix on_rparen on_ignored_nl super on_lparen on_rparen on_nl on_ignored_nl # The prefix for `output` messages.
on_lbracket on_symbeg ask on_comma on_symbeg detail on_comma on_symbeg info on_comma on_symbeg warn on_comma on_symbeg error on_comma on_symbeg UNK on_comma on_symbeg # Use some light meta-programming to create the various methods to # output text to the UI. These all delegate the real functionality # to `say`.
UNK on_lparen method on_rparen do on_op on_op args on_op on_ignored_nl on_ivar on_period UNK on_lparen method on_comma on_op args on_rparen on_nl # By default do nothing, these aren't formatted
def UNK on_lparen type on_comma on_op data on_rparen on_ignored_nl opts on_op on_lbrace on_rbrace on_nl opts on_op data on_period UNK if # For machine-readable output, set the prefix in the # options hash and continue it on.
def opts on_nl on_ivar on_period opts on_nl end on_nl on_ignored_nl def UNK on_lparen type on_comma message on_comma on_op opts on_rparen # Return the parent's opts. # # @return [Hash]
UNK message if prefix on_period UNK on_nl on_ignored_nl target on_op on_ivar on_nl target on_op opts on_lbracket on_symbeg target on_rbracket if # Fast-path if there is no prefix
UNK on_period UNK do on_op line on_op on_ignored_nl on_tstring_beg on_embexpr_beg prefix on_embexpr_end on_embexpr_beg target on_embexpr_end on_tstring_content on_embexpr_beg line on_embexpr_end on_tstring_end # Otherwise, make sure to prefix every line properly
class on_const on_op on_const on_nl on_const on_op on_lbrace on_ignored_nl on_label on_int on_comma on_ignored_nl on_label on_int on_comma on_ignored_nl on_label on_int on_comma # This is a UI implementation that outputs color for various types # of messages. This should only be used with a TTY that supports color, # but is up to the user of the class to verify this is the case.
on_const on_op on_lbrace on_ignored_nl on_label on_int on_comma on_ignored_nl on_label on_int on_comma on_ignored_nl on_label on_int on_comma on_ignored_nl on_label on_int on_comma on_ignored_nl # Terminal colors
def UNK on_nl UNK true on_nl end on_nl on_ignored_nl def UNK on_lparen type on_comma message on_comma on_op opts on_rparen on_ignored_nl # @return [true]
def UNK on_lparen type on_comma message on_comma on_op opts on_rparen on_ignored_nl message on_op super on_nl on_ignored_nl opts on_op on_ivar on_period # This is called by `say` to format the message for output.
message on_op super on_nl on_ignored_nl opts on_op on_ivar on_period UNK on_lparen opts on_rparen on_nl on_ignored_nl opts on_lbracket on_symbeg color on_rbracket # Get the format of the message before adding color.
opts on_lbracket on_symbeg color on_rbracket on_op on_symbeg UNK if type on_op on_symbeg error on_nl opts on_lbracket on_symbeg color on_rbracket on_op # Special case some colors for certain message types
UNK on_op on_op on_op opts on_lbracket on_symbeg UNK on_rbracket on_nl UNK on_op on_tstring_beg on_embexpr_beg UNK on_op on_int on_op on_int on_embexpr_end # If it is a detail, it is not bold. Every other message type # is bolded.
on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_content on_embexpr_beg message on_embexpr_end on_tstring_content on_tstring_end on_nl end on_nl end on_nl end on_nl end on_nl # Color the message and make sure to reset the color at the end
