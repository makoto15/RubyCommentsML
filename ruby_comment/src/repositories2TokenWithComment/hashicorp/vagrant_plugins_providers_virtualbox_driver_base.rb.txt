UNK on_const on_nl UNK on_const on_op on_const on_op on_const on_nl on_ignored_nl def UNK on_nl on_ivar on_op on_const on_op on_const on_period # Base class for all VirtualBox drivers. # # This class provides useful tools for things such as executing # VBoxManage and handling SIGINTs and so on.
UNK on_const on_op on_const on_op on_const on_nl on_ignored_nl def UNK on_nl on_ivar on_op on_const on_op on_const on_period UNK on_lparen on_tstring_beg # Include this so we can use `Subprocess` more easily.
on_ivar on_op UNK on_nl on_ignored_nl if on_const on_op on_const on_op on_const on_period UNK on_op on_const on_op on_const on_op on_const on_period # This flag is used to keep track of interrupted state (SIGINT)
if on_op on_ivar on_op on_lparen on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_ignored_nl on_const on_period UNK on_lparen on_tstring_beg # On Windows, we use the VBOX_INSTALL_PATH environmental # variable to find VBoxManage.
path on_op on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl on_ivar on_period UNK on_lparen # Get the path.
path on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period UNK do on_op UNK on_op on_ignored_nl UNK on_op on_tstring_beg on_tstring_content on_tstring_end # There can actually be multiple paths in here, so we need to # split by the separator ";" and see which is a good one.
UNK on_op on_tstring_beg on_tstring_content on_tstring_end if on_op UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ignored_nl UNK on_op on_tstring_beg # Make sure it ends with a \
UNK on_op on_tstring_beg on_embexpr_beg UNK on_embexpr_end on_tstring_content on_tstring_end on_nl if on_const on_period UNK on_lparen UNK on_rparen on_nl on_ivar on_op on_const # If the executable exists, then set it as the main path # and break out
drive on_op on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_lbracket on_ignored_nl on_tstring_beg on_embexpr_beg drive on_embexpr_end on_tstring_content # If we still don't have one, try to find it using common locations
drive on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_lbracket on_ignored_nl on_tstring_beg on_embexpr_beg drive on_embexpr_end on_tstring_content on_tstring_end on_comma on_ignored_nl on_tstring_beg on_embexpr_beg drive on_embexpr_end # If we still don't have one, try to find it using common locations
on_ivar on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ivar on_period info on_lparen on_tstring_beg on_tstring_content on_embexpr_beg on_ivar on_embexpr_end on_tstring_end on_rparen on_nl end on_nl # Fall back to hoping for the PATH to work out
def UNK on_nl end on_nl on_ignored_nl def UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl # Clears the forwarded ports that have been set on the virtual machine.
def UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK on_lparen # Clears the shared folders that have been set on the virtual machine.
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl end on_nl on_ignored_nl # Creates a DHCP server for a host only network. # # @param [String] network Name of the host-only network. # @param [Hash] options Options for the DHCP server.
def UNK on_lparen UNK on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK on_nl end on_nl on_ignored_nl def UNK on_nl end on_nl # Creates a host only network with the given options. # # @param [Hash] options Options to create the host only network. # @return [Hash] The details of the host only network, including # keys `:name`, `:ip`, and `:netmask`
def UNK on_nl end on_nl on_ignored_nl def UNK on_nl end on_nl on_ignored_nl def UNK on_nl end on_nl on_ignored_nl def UNK # Deletes the virtual machine references by this driver.
def UNK on_nl end on_nl on_ignored_nl def UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl end on_nl # Deletes any host only networks that aren't being used for anything.
def UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK on_lparen command on_rparen # Discards any saved state associated with this VM.
def UNK on_lparen UNK on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK on_lparen command on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK # Enables network adapters on the VM. # # The format of each adapter specification should be like so: # # { # type: :hostonly, # hostonly: "vboxnet0", # mac_address: "tubes" # } # # This must support setting up both host only and bridged networks. # # @param [Array<Hash>] adapters Array of adapters to enable.
def UNK on_lparen command on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK on_lparen path on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK # Execute a raw command straight through to VBoxManage. # # Accepts a retryable: true option if the command should be retried # upon failure. # # Raises a VBoxManage error if it fails. # # @param [Array] command Command to execute.
def UNK on_lparen path on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK # Exports the virtual machine to the given path. # # @param [String] path Path to the OVF file. # @yield [progress] Yields the block with the progress of the export.
def UNK on_lparen UNK on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen # Forwards a set of ports for a VM. # # This will not affect any previously set forwarded ports, # so be sure to delete those if you need to. # # The format of each port hash should be the following: # # { # name: "foo", # hostport: 8500, # guestport: 80, # adapter: 1, # protocol: "tcp" # } # # Note that "adapter" and "protocol" are optional and will default # to 1 and "tcp" respectively. # # @param [Array<Hash>] ports An array of ports to set. See documentation # for more information on the format.
def UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK on_nl on_int on_nl # Halts the virtual machine (pulls the plug).
def UNK on_lparen UNK on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK on_nl on_int on_nl end on_nl on_ignored_nl def UNK on_lparen # Imports the VM from an OVF file. # # @param [String] ovf Path to the OVF file. # @return [String] UUID of the imported VM.
def UNK on_nl on_int on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_op UNK on_comma UNK on_op UNK on_rparen on_ignored_nl # Returns the maximum number of network adapters.
def UNK on_lparen UNK on_op UNK on_comma UNK on_op UNK on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK on_nl end on_nl # Returns a list of forwarded ports for a VM. # # @param [String] uuid UUID of the VM to read from, or `nil` if this # VM. # @param [Boolean] active_only If true, only VMs that are running will # be checked. # @return [Array<Array>]
def UNK on_nl end on_nl on_ignored_nl def UNK on_nl end on_nl on_ignored_nl def UNK on_nl end on_nl on_ignored_nl def UNK # Returns a list of bridged interfaces. # # @return [Hash]
def UNK on_nl end on_nl on_ignored_nl def UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl end on_nl # Returns a list of configured DHCP servers # # Each DHCP server is represented as a Hash with the following details: # # { # :network => String, # name of the associated network interface as # # parsed from the NetworkName, e.g. "vboxnet0" # :ip => String, # IP address of the DHCP server, e.g. "172.28.128.2" # :lower => String, # lower IP address of the DHCP lease range, e.g. "172.28.128.3" # :upper => String, # upper IP address of the DHCP lease range, e.g. "172.28.128.254" # } # # @return [Array<Hash>] See comment above for details
def UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK on_nl end on_nl # Returns the guest additions version that is installed on this VM. # # @return [String]
def UNK on_lparen UNK on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK on_nl end on_nl on_ignored_nl def UNK on_nl end on_nl # Returns the value of a guest property on the current VM. # # @param [String] property the name of the guest property to read # @return [String] value of the guest property # @raise [VirtualBoxGuestPropertyNotFound] if the guest property does not have a value
def UNK on_nl end on_nl on_ignored_nl def UNK on_nl end on_nl on_ignored_nl def UNK on_nl end on_nl on_ignored_nl def UNK # Returns a list of available host only interfaces. # # Each interface is represented as a Hash with the following details: # # { # :name => String, # interface name, e.g. "vboxnet0" # :ip => String, # IP address of the interface, e.g. "172.28.128.1" # :netmask => String, # netmask associated with the interface, e.g. "255.255.255.0" # :status => String, # status of the interface, e.g. "Up", "Down" # } # # @return [Array<Hash>] See comment above for details
def UNK on_nl end on_nl on_ignored_nl def UNK on_nl end on_nl on_ignored_nl def UNK on_nl end on_nl on_ignored_nl def UNK # Returns the MAC address of the first network interface. # # @return [String]
def UNK on_nl end on_nl on_ignored_nl def UNK on_nl end on_nl on_ignored_nl def UNK on_nl end on_nl on_ignored_nl def UNK # Returns the folder where VirtualBox places it's VMs. # # @return [String]
def UNK on_nl end on_nl on_ignored_nl def UNK on_nl end on_nl on_ignored_nl def UNK on_nl end on_nl on_ignored_nl def UNK # Returns a list of network interfaces of the VM. # # @return [Hash]
def UNK on_nl end on_nl on_ignored_nl def UNK on_nl end on_nl on_ignored_nl def UNK on_nl end on_nl on_ignored_nl def UNK # Returns the current state of this VM. # # @return [Symbol]
def UNK on_nl end on_nl on_ignored_nl def UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl end on_nl # Returns a list of all forwarded ports in use by active # virtual machines. # # @return [Array]
def UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen # Returns a list of all UUIDs of virtual machines currently # known by VirtualBox. # # @return [Array<String>]
def UNK on_lparen UNK on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK # Reconfigure the hostonly network given by interface (the result # of read_host_only_networks). This is a sad function that only # exists to work around VirtualBox bugs. # # @return nil
def UNK on_lparen UNK on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK # Removes the DHCP server identified by the provided network name. # # @param [String] network_name The the full network name associated # with the DHCP server to be removed, e.g. "HostInterfaceNetworking-vboxnet0"
def UNK on_lparen UNK on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK # Sets the MAC address of the first network adapter. # # @param [String] mac MAC address without any spaces/hyphens.
def UNK on_lparen UNK on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK # Share a set of folders on this VM. # # @param [Array<Hash>] folders
def UNK on_lparen UNK on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK # Reads the SSH port of this VM. # # @param [Integer] expected Expected guest port of SSH.
def UNK on_lparen UNK on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen # Starts the virtual machine. # # @param [String] mode Mode to boot the VM. Either "headless" # or "gui"
def UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK on_nl end on_nl # Suspend the virtual machine.
def UNK on_lparen UNK on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK on_nl end on_nl on_ignored_nl def UNK on_lparen path on_rparen # Unshare folders.
def UNK on_nl end on_nl on_ignored_nl def UNK on_lparen path on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen # Verifies that the driver is ready to accept work. # # This should raise a VagrantError if things are not ready.
def UNK on_lparen path on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK # Verifies that an image can be imported properly. # # @param [String] path Path to an OVF file. # @return [Boolean]
def UNK on_lparen UNK on_rparen on_ignored_nl end on_nl on_ignored_nl def UNK on_nl info on_op UNK UNK on_nl UNK on_lparen on_tstring_beg # Checks if a VM with the given UUID exists. # # @return [Boolean]
def UNK on_nl info on_op UNK UNK on_nl UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_ivar on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma # Returns a hash of information about a given virtual machine # # @param [String] uuid # @return [Hash] info
def UNK on_lparen on_op command on_comma on_op UNK on_rparen on_ignored_nl UNK on_op UNK UNK on_nl UNK on_op command on_period UNK # Execute the given subcommand for VBoxManage and return the output.
UNK on_op UNK UNK on_nl UNK on_op command on_period UNK if command on_period UNK on_period UNK on_lparen on_const on_rparen on_nl # Get the options hash if it exists
r on_op UNK on_nl on_ignored_nl UNK on_lparen on_label on_const on_op on_const on_op on_const on_comma on_label UNK on_comma on_label on_int on_rparen # Variable to store our execution result
UNK on_op UNK on_nl on_ignored_nl r on_op UNK on_lparen on_op command on_comma on_op UNK on_rparen on_nl on_ignored_nl if r on_period # If there is an error with VBoxManage, this gets set to true
r on_op UNK on_lparen on_op command on_comma on_op UNK on_rparen on_nl on_ignored_nl if r on_period UNK on_op on_int on_nl if # Execute the command
if r on_period UNK on_op on_int on_nl if on_ivar on_nl on_ivar on_period info on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl UNK # If the command was a failure, then raise an exception that is # nicely handled by Vagrant.
UNK on_const on_op on_const on_op on_const on_nl UNK on_ignored_nl UNK on_op UNK on_nl end on_nl UNK on_ignored_nl on_ignored_nl if r # This exit code happens if VBoxManage is on the PATH, # but another executable it tries to execute is missing. # This is usually indicative of a corrupted VirtualBox install.
on_ignored_nl if r on_period UNK on_op UNK on_tstring_content UNK on_nl on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl UNK # Sometimes, VBoxManage fails but doesn't actual return a non-zero # exit code. For this we inspect the output and determine if an error # occurred.
on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl UNK on_const on_op on_const on_op on_const on_nl end on_nl on_ignored_nl if # This catches an error message that only shows when kernel # drivers aren't properly installed.
on_ivar on_period info on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl UNK on_op UNK on_nl end on_nl end on_nl on_ignored_nl if UNK # This catches the generic VBoxManage error case.
if UNK on_nl UNK on_const on_op on_const on_op on_const on_comma on_ignored_nl on_label command on_period UNK on_comma on_ignored_nl on_label r on_period # If there was an error running VBoxManage, show the error and the # output.
r on_period UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl def UNK # Return the output, making sure to replace any Windows-style # newlines with Unix-style.
def UNK on_lparen on_op command on_comma on_op UNK on_rparen on_ignored_nl UNK on_op UNK do on_ignored_nl on_ivar on_op UNK on_nl on_ignored_nl # Executes a command and returns the raw result object.
on_const on_period UNK UNK on_ivar on_period info on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen UNK on_period UNK on_nl end on_nl on_ignored_nl command # We have to execute this in a thread due to trap contexts # and locks.
command on_op UNK on_label on_lbracket UNK UNK on_comma UNK UNK on_rbracket UNK on_nl on_ignored_nl on_const on_op on_const on_op on_const on_period # Append in the options for subprocess
