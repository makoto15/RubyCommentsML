UNK on_const on_nl on_const on_op on_const on_period new on_nl on_ignored_nl def UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK # This is the base class for a configuration key defined for # V2. Any configuration key plugins for V2 should inherit from this # class.
on_const on_op on_const on_period new on_nl on_ignored_nl def UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK # This constant represents an unset value. This is useful so it is # possible to know the difference between a configuration value that # was never set, and a value that is nil (explicitly). Best practice # is to initialize all variables to this value, then the {#merge} # method below will "just work" in many cases.
def UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_period new on_nl # This is called as a last-minute hook that allows the configuration # object to finalize itself before it will be put into use. This is # a useful place to do some defaults in the case the user didn't # configure something or so on. # # An example of where this sort of thing is used or has been used: # the "vm" configuration key uses this to make sure that at least # one sub-VM has been defined: the default VM. # # The configuration object is expected to mutate itself.
end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_period new on_nl on_ignored_nl on_lbracket UNK # Default implementation is to do nothing.
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_period new on_nl on_ignored_nl on_lbracket UNK on_comma UNK on_rbracket # Merge another configuration object into this one. This assumes that # the other object is the same class as this one. This should not # mutate this object, but instead should return a new, merged object. # # The default implementation will simply iterate over the instance # variables and merge them together, with this object overriding # any conflicting instance variables of the older object. Instance # variables starting with "__" (double underscores) will be ignored. # This lets you set some sort of instance-specific state on your # configuration keys without them being merged together later. # # @param [Object] other The other configuration object to merge from, # this must be the same type of object as this one. # @return [Object] The merged object.
on_lbracket UNK on_comma UNK on_rbracket on_period UNK UNK on_op UNK on_op on_ignored_nl UNK on_period UNK on_period UNK UNK on_op key # Set all of our instance variables on the new class
UNK on_op key on_period to_s on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl UNK on_op UNK on_period UNK on_lparen key # Ignore keys that start with a double underscore. This allows # configuration classes to still hold around internal state # that isn't propagated.
UNK on_op UNK on_period UNK on_lparen key on_rparen on_nl UNK on_period UNK on_lparen key on_comma UNK on_rparen UNK UNK on_op # Don't set the value if it is the unset value, either.
UNK on_op on_ivar on_op on_const on_period new on_nl UNK on_op UNK on_period UNK on_lparen UNK on_tstring_content on_tstring_end on_rparen on_op on_const # Persist through the set of invalid methods
def UNK on_lparen name on_comma on_op UNK on_comma on_op UNK on_rparen on_ignored_nl UNK UNK UNK on_ivar on_nl on_ignored_nl name on_op # Capture all bad configuration calls and save them for an error # message later during validation.
on_op on_const on_op on_const on_op on_const on_op on_const on_period new on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl # Return the dummy object so that anything else works
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK UNK on_op key on_comma UNK on_op on_ignored_nl UNK on_lparen on_tstring_beg UNK # Allows setting options from a hash. By default this simply calls # the `#{key}=` method on the config class with the value, which is # the expected behavior most of the time. # # This is expected to mutate itself. # # @param [Hash] options A hash of options to set on this configuration # key.
def UNK on_lparen on_op UNK on_rparen on_ignored_nl UNK on_period UNK on_lparen on_op UNK on_rparen on_nl end on_nl on_ignored_nl def to_s # Converts this configuration object to JSON.
def to_s on_nl UNK on_period UNK on_period to_s on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_period UNK on_lparen UNK # A default to_s implementation.
def UNK on_nl UNK on_period UNK on_lparen UNK UNK on_rparen UNK on_op UNK on_comma UNK on_op on_ignored_nl UNK on_lbracket UNK # Returns the instance variables as a hash of key-value pairs.
def UNK on_lparen UNK on_rparen on_ignored_nl UNK UNK UNK on_period to_s on_op UNK UNK on_nl end on_nl on_ignored_nl def UNK # Called after the configuration is finalized and loaded to validate # this object. # # @param [Machine] machine Access to the machine that is being # validated. # @return [Hash]
def UNK on_nl UNK on_lbracket on_rbracket UNK on_op on_ivar on_op on_ivar on_period UNK on_nl UNK on_lbracket on_const on_period UNK on_lparen # This returns any automatically detected errors. # # @return [Array<String>]
def UNK on_nl on_ivar on_op UNK on_nl end on_nl end on_nl end on_nl end on_nl end on_nl EMP EMP EMP # An internal finalize call that no subclass should override.
