UNK on_const on_op on_const on_nl UNK on_const on_op on_const on_op on_const on_nl UNK on_const on_op on_const on_op on_const on_nl UNK # This class implements provisioning via chef-solo.
UNK on_op on_lbracket on_rbracket on_nl on_ivar on_period each do on_op type on_comma local_path on_comma remote_path on_op on_ignored_nl UNK on_op remote_path # Verify that the proper shared folders exist.
UNK on_op remote_path if local_path on_nl end on_nl on_ignored_nl UNK on_nl UNK on_lparen UNK on_rparen on_nl UNK on_lparen UNK on_lparen # We only care about checking folders that have a local path, meaning # they were shared from the local machine, rather than assumed to # exist on the VM.
def expanded_folders on_lparen paths on_comma appended_folder on_op UNK on_rparen on_ignored_nl paths on_op on_lbracket paths on_rbracket if paths on_period UNK on_lparen # Converts paths to a list of properly expanded paths with types.
paths on_op on_lbracket paths on_rbracket if paths on_period UNK on_lparen on_const on_rparen on_op paths on_period UNK on_period UNK on_lparen on_const # Convert the path to an array if it is a string or just a single # path element which contains the folder location (:host or :vm)
local_path on_op UNK on_nl remote_path on_op UNK on_nl if type on_op on_symbeg UNK on_nl local_path on_op on_const on_period UNK on_lparen # Create the local/remote path based on whether this is a host # or VM path.
local_path on_op on_const on_period UNK on_lparen UNK on_comma on_ivar on_period UNK on_period UNK on_rparen on_nl on_ignored_nl if on_const on_period UNK # Get the expanded path that the host path points to
key on_op on_const on_op on_const on_period UNK on_lparen local_path on_rparen on_nl remote_path on_op on_tstring_beg on_embexpr_beg UNK on_embexpr_end on_tstring_content on_embexpr_beg key # Path exists on the host, setup the remote path. We use # the MD5 of the local path so that it is predictable.
on_ignored_nl remote_path on_op on_const on_period UNK on_lparen UNK on_period UNK on_lparen UNK on_tstring_content UNK on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_comma # Path already exists on the virtual machine. Expand it # relative to where we're provisioning.
remote_path on_op on_const on_period UNK on_lparen UNK on_period UNK on_lparen UNK on_tstring_content UNK on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_comma UNK # Remove drive letter if running on a windows host. This is a bit # of a hack but is the most portable way I can think of at the moment # to achieve this. Otherwise, Vagrant attempts to share at some crazy # path like /home/vagrant/c:/foo/bar
if type on_op on_symbeg UNK on_nl remote_path on_op on_tstring_beg on_tstring_content on_embexpr_beg appended_folder on_embexpr_end on_tstring_end if appended_folder on_nl end on_nl on_ignored_nl # If we have specified a folder name to append then append it
UNK on_op on_lbracket type on_comma local_path on_comma remote_path on_rbracket on_nl end on_nl on_ignored_nl UNK on_nl end on_nl on_ignored_nl def share_folders # Append the result
def share_folders on_lparen root_config on_comma UNK on_comma folders on_comma existing on_op UNK on_rparen on_ignored_nl UNK on_op on_const on_period UNK on_nl # Shares the given folders with the given prefix. The folders should # be of the structure resulting from the `expanded_folders` function.
UNK UNK UNK UNK UNK UNK on_ignored_nl key on_op on_const on_op on_const on_period UNK on_lparen remote_path on_rparen on_nl key on_op # If this folder already exists, then we don't share it, it means # it was already put down on disk. # # NOTE: This is currently commented out because it was causing # major bugs (GH-5199). We will investigate why this is in more # detail for 1.8.0, but we wanted to fix this in a patch release # and this was the hammer that did that.
on_ignored_nl on_ivar on_period UNK on_period UNK do on_op UNK on_op on_ignored_nl UNK on_op on_int on_nl UNK UNK on_op on_int on_op #provisioner has asked chef to reboot
UNK on_op type on_op on_symbeg UNK on_op on_symbeg UNK on_op on_symbeg UNK on_nl on_ignored_nl data on_op data on_period UNK on_nl # Output the data with the proper color based on the stream.
UNK if UNK on_op on_int on_nl end on_nl end on_nl on_ignored_nl UNK on_const on_comma on_symbeg UNK on_nl end on_nl on_ignored_nl # There is no need to run Chef again if it converges
UNK on_const on_comma on_symbeg UNK on_nl end on_nl on_ignored_nl def UNK on_lparen folders on_rparen on_ignored_nl folders on_period each do on_op # If we reached this point then Chef never converged! Error.
def guest_paths on_lparen folders on_rparen on_ignored_nl folders on_period UNK UNK on_op UNK on_op UNK on_lbracket on_int on_rbracket UNK on_nl end # Extracts only the remote paths from a list of folders
