UNK on_const on_nl UNK UNK UNK UNK on_comma UNK UNK UNK on_const UNK UNK UNK UNK UNK UNK UNK UNK # Contains the method {#is_port_open?} to check if a port is open # (listening) or closed (not in use). This method isn't completely # fool-proof, but it works enough of the time to be useful.
UNK UNK UNK UNK on_comma UNK UNK UNK on_const UNK UNK UNK UNK UNK UNK UNK UNK on_op on_const UNK # Checks if a port is open (listening) on a given host and port. # # @param [String] host Hostname or IP address. # @param [Integer] port Port to check. # @return [Boolean] `true` if the port is open (listening), `false` # otherwise.
on_const UNK UNK UNK UNK UNK UNK UNK UNK on_op on_const UNK UNK UNK UNK on_comma UNK UNK on_nl UNK # We wrap this in a timeout because once in awhile the TCPSocket # _will_ hang, but this signals that the port is closed.
UNK on_op on_const UNK UNK UNK UNK on_comma UNK UNK on_nl UNK UNK UNK UNK UNK UNK on_nl UNK UNK # Attempt to make a connection
UNK UNK UNK UNK UNK on_nl UNK UNK UNK on_nl UNK on_nl UNK on_const on_op on_const on_comma on_const on_op on_const # A connection was made! Properly clean up the socket, not caring # at all if any exception is raised, because we already know the # result.
UNK UNK on_nl UNK on_nl UNK on_const on_op on_const on_comma on_const on_op on_const on_comma on_const on_op on_const on_comma on_const on_op # The port is open if we reached this point, since we were able # to connect.
UNK UNK on_nl UNK on_nl UNK on_nl UNK on_nl UNK on_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP # Any of the above exceptions signal that the port is closed.
