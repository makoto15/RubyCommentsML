UNK on_const on_nl UNK on_const on_op on_const on_op on_const on_op on_const on_nl on_ignored_nl UNK UNK on_lparen UNK on_comma env on_rparen # This action is responsible for creating the host machine if # we need to. The host machine is where Docker containers will # live.
UNK on_ignored_nl env on_lbracket on_symbeg machine on_rbracket on_period UNK on_period UNK do on_ignored_nl UNK on_lparen host_machine on_comma env on_rparen on_nl # Lock while we make changes
UNK on_op env on_lbracket on_symbeg machine on_rbracket on_period UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl if on_op UNK # Write the host machine SFID if we have one
UNK on_op host_machine on_period UNK on_period UNK on_nl UNK on_period UNK on_lbracket on_symbeg UNK on_rbracket on_op UNK on_nl UNK on_period # Create a UI for this machine that stays at the detail level
UNK on_op UNK on_lparen host_machine on_comma UNK UNK on_rparen on_nl UNK on_op UNK UNK on_nl if UNK on_nl UNK on_period # Read the existing folders that are setup
UNK on_op on_const on_op on_const on_op on_const on_period UNK on_nl UNK on_op UNK on_lparen env on_lbracket on_symbeg machine on_rbracket on_rparen # Sync some folders so that our volumes work later.
data on_period UNK on_lparen on_symbeg UNK on_rparen on_nl end on_nl on_ignored_nl data on_lbracket on_symbeg UNK on_rbracket on_op on_const on_period UNK # We don't use the Docker type explicitly on the host VM
data on_lbracket on_symbeg UNK on_rbracket on_op on_const on_period UNK on_lparen on_ignored_nl data on_lbracket on_symbeg UNK on_rbracket on_comma env on_lbracket on_symbeg # Expand the hostpath relative to _our_ root path. Otherwise, # it expands it relative to the proxy VM, which is not what # we want.
id on_op on_const on_op on_const on_period UNK on_lparen on_ignored_nl on_tstring_beg on_embexpr_beg env on_lbracket on_symbeg machine on_rbracket on_period env on_period UNK # Generate an ID that is deterministic based on our machine # and Vagrantfile path...
data on_lbracket on_symbeg UNK on_rbracket on_op data on_lbracket on_symbeg UNK on_rbracket on_nl data on_lbracket on_symbeg UNK on_rbracket on_op id on_nl # Generate a new guestpath
if on_op data on_lbracket on_symbeg UNK on_rbracket on_nl data on_lbracket on_symbeg UNK on_rbracket on_op on_tstring_beg on_tstring_content on_embexpr_beg id on_embexpr_end on_tstring_end # If we specify exact then we know what we're doing
if on_op UNK on_period UNK on_lparen id on_rparen on_nl data on_lbracket on_symbeg UNK on_rbracket on_op UNK on_nl on_ignored_nl UNK on_period # Add this synced folder onto the new config if we haven't # already shared it before.
data on_lbracket on_symbeg UNK on_rbracket on_op UNK on_nl on_ignored_nl UNK on_period UNK on_lparen on_ignored_nl data on_lbracket on_symbeg UNK on_rbracket on_comma # A bit of a hack for VirtualBox to mount our # folder as transient. This can be removed once # the VirtualBox synced folder mechanism is smarter.
data on_op UNK on_lbracket id on_rbracket on_nl end on_nl on_ignored_nl env on_lbracket on_symbeg machine on_rbracket on_period UNK on_period UNK on_period # We already have the folder, so just load its data
env on_lbracket on_symbeg machine on_rbracket on_period UNK on_period UNK on_period UNK on_period UNK on_lparen id on_rparen on_nl on_ignored_nl data on_op # Remove from our machine
data on_op data on_period UNK on_lparen UNK on_ignored_nl UNK UNK on_comma on_ignored_nl UNK on_symbeg UNK on_comma on_ignored_nl UNK on_rparen on_nl # Add the "fixed" folder to our machine
env on_lbracket on_symbeg machine on_rbracket on_period UNK on_period UNK on_lparen on_const on_period UNK on_lparen on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_rparen on_rparen # Sync the folders!
