UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_nl on_ivar on_op on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen # The executor is responsible for actually executing Docker commands. # This is set by the provider, but defaults to local execution.
def UNK on_lparen UNK on_comma on_op opts on_comma on_op block on_rparen on_ignored_nl UNK on_op on_const on_lparen opts on_lbracket on_symbeg UNK # Returns the id for a new container built from `docker build`. Raises # an exception if the id was unable to be captured from the output # # @return [String] id - ID matched from the docker build output.
UNK on_op result on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end on_rparen on_period UNK on_nl if on_op UNK on_nl if UNK on_nl # Check for the new output format 'writing image sha256...' # In this case, docker builtkit is enabled. Its format is different # from standard docker
UNK on_op result on_period UNK on_period UNK on_lbrace on_op UNK on_op UNK on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end on_rparen on_rbrace # Check for podman format when it is emulating docker CLI. # Podman outputs the full hash of the container on # the last line after a successful build.
UNK on_const on_op on_const on_comma UNK result on_nl end on_nl end on_nl on_ignored_nl UNK on_lbracket on_int on_rbracket on_nl end on_nl # This will cause a stack trace in Vagrant, but it is a bug # if this happens anyways.
UNK on_lbracket on_int on_rbracket on_nl end on_nl on_ignored_nl def UNK on_nl execute on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end # Return the matched group `id`
def UNK on_nl execute on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period include? on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen # Check if podman emulating docker CLI is enabled. # # @return [Bool]
host on_comma UNK on_comma UNK on_op v on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl host on_op on_tstring_beg on_tstring_content on_tstring_end # If we have 2 colons, the host path is an absolute Windows URL # and we need to remove the colon from it
host on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end on_comma on_tstring_beg on_tstring_end on_rparen on_nl v on_op on_lbracket host on_comma UNK on_rbracket on_period # NOTE: Docker does not support UNC style paths (which also # means that there's no long path support). Hopefully this # will be fixed someday and the gsub below can be removed.
on_ivar on_op nil on_nl end on_nl end on_nl on_ignored_nl def UNK on_lparen cid on_comma UNK on_rparen on_ignored_nl if UNK on_lparen # This resets the cached information we have around, allowing `vagrant reload`s # to work properly
def UNK on_lparen cid on_rparen on_ignored_nl on_const on_period UNK on_lparen execute on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma # Inspect the provided container # # @param [String] cid ID or name of container # @return [Hash]
def UNK on_nl execute on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end # @return [Array<String>] list of all container IDs
def UNK on_nl output on_op execute on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg # @return [String] IP address of the docker bridge
UNK on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl end on_nl on_ignored_nl def UNK on_lparen network on_comma cid on_comma opts on_op nil # TODO: Raise an user friendly message
def UNK on_lparen network on_comma cid on_comma opts on_op nil on_rparen on_ignored_nl command on_op on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg # @param [String] network - name of network to connect conatiner to # @param [String] cid - container id # @param [Array] opts - An array of flags used for listing networks
def UNK on_lparen network on_comma opts on_op nil on_rparen on_ignored_nl command on_op on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end # @param [String] network - name of network to create # @param [Array] opts - An array of flags used for listing networks
def UNK on_lparen network on_comma cid on_rparen on_ignored_nl command on_op on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg # @param [String] network - name of network to disconnect container from # @param [String] cid - container id
def UNK on_lparen network on_comma opts on_op nil on_rparen on_ignored_nl command on_op on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end # @param [Array] networks - list of networks to inspect # @param [Array] opts - An array of flags used for listing networks
def UNK on_lparen on_op opts on_rparen on_ignored_nl command on_op on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content # @param [String] opts - Flags used for listing networks
def UNK on_lparen opts on_op nil on_rparen on_ignored_nl command on_op on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg # Will delete _all_ defined but unused networks in the docker engine. Even # networks not created by Vagrant. # # @param [Array] opts - An array of flags used for listing networks
def UNK on_lparen on_op network on_rparen on_ignored_nl command on_op on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content # Delete network(s) # # @param [String] network - name of network to remove
def execute on_lparen on_op cmd on_comma on_op opts on_comma on_op block on_rparen on_ignored_nl on_ivar on_period execute on_lparen on_op cmd on_comma # @param [Array] opts - An array of flags used for listing networks
on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_nl on_ignored_nl UNK on_op UNK on_lparen UNK on_rparen on_nl UNK # ###################### # Docker network helpers # ######################
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_nl on_ignored_nl UNK on_op UNK on_lparen UNK on_rparen on_nl UNK on_period # Determines if a given network has been defined through vagrant with a given # subnet string # # @param [String] subnet_string - Subnet to look for # @return [String] network name - Name of network with requested subnet.`nil` if not found
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_nl UNK on_op UNK on_lparen UNK on_rparen on_nl return if on_op # Locate network which contains given address # # @param [String] address IP address # @return [String] network name
def UNK on_lparen UNK on_rparen on_ignored_nl result on_op UNK on_nl result on_period UNK on_lbrace on_op UNK on_op UNK on_op UNK # Looks to see if a docker network has already been defined # with the given name # # @param [String] network_name - name of network to look for # @return [Bool]
def UNK on_nl UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period map on_lparen on_op # @return [Array<String>] list of all docker networks
def UNK on_lparen network on_rparen on_ignored_nl result on_op UNK on_lparen network on_rparen on_nl return nil if on_op result on_nl return # Returns true or false if network is in use or not. # Nil if Vagrant fails to receive proper JSON from `docker network inspect` # # @param [String] network - name of network to look for # @return [Bool,nil]
