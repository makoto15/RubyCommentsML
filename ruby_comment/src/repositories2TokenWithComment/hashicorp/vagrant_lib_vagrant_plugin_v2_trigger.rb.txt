UNK on_symbeg config on_nl on_ignored_nl def UNK on_lparen UNK on_comma config on_comma UNK on_comma ui on_rparen on_ignored_nl on_ivar on_op UNK # @return [Kernel_V2::Config::Trigger]
def UNK on_lparen UNK on_comma config on_comma UNK on_comma ui on_rparen on_ignored_nl on_ivar on_op UNK on_nl on_ivar on_op config on_nl # This class is responsible for setting up basic triggers that were # defined inside a Vagrantfile. # # @param [Vagrant::Environment] env Vagrant environment # @param [Kernel_V2::TriggerConfig] config Trigger configuration # @param [Vagrant::Machine] machine Active Machine # @param [Vagrant::UI] ui Class for printing messages to user
def UNK on_lparen name on_comma stage on_comma guest on_comma type on_rparen on_ignored_nl if UNK on_nl on_ivar on_period warn on_lparen on_tstring_beg # Fires all triggers, if any are defined for the named type and guest. Returns early # and logs a warning if the community plugin `vagrant-triggers` is installed # # @param [Symbol] name Name of `type` thing to fire trigger on # @param [Symbol] stage :before or :after # @param [String] guest The guest that invoked firing the triggers # @param [Symbol] type Type of trigger to fire (:action, :hook, :command)
triggers on_op UNK on_lparen name on_comma stage on_comma guest on_comma type on_rparen on_nl on_ignored_nl if on_op triggers on_period UNK on_nl # get all triggers matching action
def UNK on_lparen name on_comma stage on_comma guest on_comma type on_rparen on_ignored_nl triggers on_op UNK on_nl name on_op UNK on_lparen # Find all triggers defined for the named type and guest. # # @param [Symbol] name Name of `type` thing to fire trigger on # @param [Symbol] stage :before or :after # @param [String] guest The guest that invoked firing the triggers # @param [Symbol] type Type of trigger to fire # @return [Array]
def UNK on_lparen UNK on_rparen on_ignored_nl if UNK on_period UNK on_lparen on_const on_rparen on_nl UNK on_period name on_period UNK on_nl # Convert object into name # # @param [Object, Class] object Object to name # @return [String]
on_ignored_nl def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK on_op UNK on_lparen UNK on_rparen on_nl on_const on_period UNK on_lparen #------------------------------------------------------------------- # Internal methods, don't call these. #-------------------------------------------------------------------
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK on_op UNK on_lparen UNK on_rparen on_nl on_const on_period UNK on_lparen on_tstring_beg # Generate all valid lookup keys for given action key # # @param [Class, String] key Base key for generation # @return [Array<String>] all valid keys
def UNK on_nl if on_op UNK on_lparen on_ivar on_rparen on_nl UNK on_op on_const on_op on_const on_op on_const on_period UNK on_period # Looks up if the community plugin `vagrant-triggers` is installed # and also caches the result # # @return [Boolean]
def UNK on_lparen triggers on_comma UNK on_comma type on_rparen on_ignored_nl UNK on_op triggers on_period UNK on_nl on_ignored_nl UNK on_period UNK # Filters triggers to be fired based on configured restraints # # @param [Array] triggers An array of triggers to be filtered # @param [String] guest_name The name of the current guest # @param [Symbol] type The type of trigger (:command or :type) # @return [Array] The filtered array of triggers
UNK on_op triggers on_period UNK on_nl on_ignored_nl UNK on_period UNK do on_op trigger on_op on_ignored_nl index on_op UNK on_nl UNK # look for only_on trigger constraint and if it doesn't match guest # name, throw it away also be sure to preserve order
UNK on_op UNK on_nl UNK on_nl end on_nl end on_nl index on_op triggers on_period index on_lparen trigger on_rparen UNK UNK # trigger matches on current guest, so we're fine to use it
index on_op triggers on_period index on_lparen trigger on_rparen UNK UNK on_op UNK on_nl end on_nl on_ignored_nl if trigger on_period type # no matches found, so don't use trigger for guest
def UNK on_lparen triggers on_rparen on_ignored_nl triggers on_period UNK do on_op trigger on_op on_ignored_nl on_ivar on_period debug on_lparen on_tstring_beg on_tstring_content # Execute all triggers in the given array # # @param [Array] triggers An array of triggers to be fired
triggers on_period UNK do on_op trigger on_op on_ignored_nl on_ivar on_period debug on_lparen on_tstring_beg on_tstring_content on_embexpr_beg trigger on_period UNK on_embexpr_end on_tstring_content # ensure on_error is respected by exiting or continuing
def info on_lparen message on_rparen on_ignored_nl on_ivar on_period info on_lparen message on_rparen on_nl end on_nl on_ignored_nl def warn on_lparen message # Prints the given message at info level for a trigger # # @param [String] message The string to be printed
def warn on_lparen message on_rparen on_ignored_nl on_ivar on_period warn on_lparen message on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen config # Prints the given message at warn level for a trigger # # @param [String] message The string to be printed
def UNK on_lparen config on_comma on_error on_comma UNK on_rparen on_ignored_nl if config on_period UNK on_nl if on_const on_op on_const on_op # Runs a script on a guest # # @param [Provisioners::Shell::Config] config A Shell provisioner config
UNK on_op on_const on_op on_const on_op on_const on_period UNK on_lparen on_symbeg UNK on_rparen on_nl on_ignored_nl if on_const on_op on_const on_op # Pick an execution method to run the script or inline string with # Default to Subprocess::Execute
def UNK on_lparen config on_comma on_error on_comma UNK on_rparen on_ignored_nl if on_op on_ivar on_nl if on_error on_op on_symbeg UNK on_nl # Runs a script on the guest # # @param [ShellProvisioner/Config] config A Shell provisioner config
if on_error on_op on_symbeg UNK on_nl raise on_const on_op on_const on_nl else on_ignored_nl on_ivar on_period warn on_lparen on_const on_period t # machine doesn't even exist.
def UNK on_lparen exit_code on_rparen on_ignored_nl if on_const on_period UNK UNK on_symbeg UNK UNK on_nl on_ivar on_period warn on_lparen on_const # Exits Vagrant immediately # # @param [Integer] code Code to exit Vagrant on
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK on_lparen on_ivar on_comma on_ivar on_rparen on_nl end on_nl end on_nl end # Calls the given ruby block for execution # # @param [Proc] ruby_block
