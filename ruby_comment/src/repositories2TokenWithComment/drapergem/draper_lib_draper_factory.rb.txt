def UNK on_lparen options on_op UNK UNK on_rparen on_ignored_nl options on_period UNK on_lparen on_symbeg UNK on_comma on_symbeg UNK on_rparen on_nl # Creates a decorator factory. # # @option options [Decorator, CollectionDecorator] :with (nil) # decorator class to use. If nil, it is inferred from the object # passed to {#decorate}. # @option options [Hash, #call] context # extra data to be stored in created decorators. If a proc is given, it # will be called each time {#decorate} is called and its return value # will be used as the context.
def UNK on_lparen object on_comma options on_op UNK UNK on_rparen on_ignored_nl UNK UNK if object on_period UNK on_nl on_const on_period # Decorates an object, inferring whether to create a singular or collection # decorator from the type of object passed. # # @param [Object] object # object to decorate. # @option options [Hash] context # extra data to be stored in the decorator. Overrides any context passed # to the constructor. # @option options [Object, Array] context_args (nil) # argument(s) to be passed to the context proc. # @return [Decorator, CollectionDecorator] the decorated object.
UNK on_const on_nl def UNK on_lparen decorator_class on_comma object on_rparen on_ignored_nl UNK on_op decorator_class on_nl UNK on_op object on_nl end # @private
