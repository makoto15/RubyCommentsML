UNK on_symbeg object on_nl on_ignored_nl UNK on_symbeg UNK on_symbeg object on_nl on_ignored_nl UNK on_symbeg context on_nl on_ignored_nl def UNK on_lparen # @return the object being decorated.
UNK on_symbeg context on_nl on_ignored_nl def UNK on_lparen object on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl options on_period UNK on_lparen # @return [Hash] extra data to be used in user-defined methods.
def UNK on_lparen object on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl options on_period UNK on_lparen on_symbeg context on_rparen on_nl on_ivar # Wraps an object in a new instance of the decorator. # # Decorators may be applied to other decorators. However, applying a # decorator to an instance of itself will create a decorator with the same # source as the original, rather than redecorating the other instance. # # @param [Object] object # object to decorate. # @option options [Hash] :context ({}) # extra data to be stored in the decorator and used in user-defined # methods.
def self on_period UNK on_nl include on_const on_op on_const on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen object_class on_rparen # Automatically delegates instance methods to the source object. Class # methods will be delegated to the {object_class}, if it is set. # # @return [void]
def self on_period UNK on_lparen object_class on_rparen on_ignored_nl on_ivar on_op object_class on_period UNK on_period UNK on_period UNK on_nl UNK on_nl # Sets the source class corresponding to the decorator class. # # @note This is only necessary if you wish to proxy class methods to the # source (including when using {decorates_finders}), and the source class # cannot be inferred from the decorator class (e.g. `ProductDecorator` # maps to `Product`). # @param [String, Symbol, Class] object_class # source class (or class name) that corresponds to this decorator. # @return [void]
def self on_period object_class on_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_nl object_class on_nl UNK # Returns the source class corresponding to the decorator class, as set by # {decorates}, or as inferred from the decorator class name (e.g. # `ProductDecorator` maps to `Product`). # # @return [Class] the source class that corresponds to this decorator.
def self on_period UNK on_nl object_class on_nl UNK on_const on_op on_const on_nl UNK on_nl end on_nl on_ignored_nl def self on_period # Checks whether this decorator class has a corresponding {object_class}.
def self on_period UNK on_nl UNK on_const on_op on_const on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen association on_comma # Automatically decorates ActiveRecord finder methods, so that you can use # `ProductDecorator.find(id)` instead of # `ProductDecorator.decorate(Product.find(id))`. # # Finder methods are applied to the {object_class}. # # @return [void]
def self on_period UNK on_lparen association on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl options on_period UNK on_lparen on_symbeg UNK on_comma # Automatically decorate an association. # # @param [Symbol] association # name of the association to decorate (e.g. `:products`). # @option options [Class] :with # the decorator to apply to the association. # @option options [Symbol] :scope # a scope to apply when fetching the association. # @option options [Hash, #call] :context # extra data to be stored in the associated decorator. If omitted, the # associated decorator's context will be the same as the parent # decorator's. If a Proc is given, it will be called with the parent's # context and should return a new context hash for the association. # @return [void]
def self on_period UNK on_lparen on_op UNK on_rparen on_ignored_nl options on_op UNK on_period UNK on_nl UNK on_period UNK UNK on_op # @overload decorates_associations(*associations, options = {}) # Automatically decorate multiple associations. # @param [Symbols*] associations # names of the associations to decorate. # @param [Hash] options # see {decorates_association}. # @return [void]
def self on_period UNK on_lparen object on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl options on_period UNK on_lparen on_symbeg UNK on_comma # Decorates a collection of objects. The class of the collection decorator # is inferred from the decorator class if possible (e.g. `ProductDecorator` # maps to `ProductsDecorator`), but otherwise defaults to # {Draper::CollectionDecorator}. # # @param [Object] object # collection to decorate. # @option options [Class, nil] :with (self) # the decorator class used to decorate each item. When `nil`, it is # inferred from each item. # @option options [Hash] :context # extra data to be stored in the collection decorator.
def UNK on_nl UNK on_op object on_period UNK on_lparen on_symbeg UNK on_rparen on_op object on_period UNK on_op UNK UNK on_nl # @return [Array<Class>] the list of decorators that have been applied to # the object.
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl UNK # Checks if a given decorator has been applied to the object. # # @param [Class] decorator_class
def UNK on_nl UNK on_nl end on_nl on_ignored_nl def on_op on_lparen UNK on_rparen on_ignored_nl on_const on_op on_const on_op on_const on_period # Checks if this object is decorated. # # @return [true]
def on_op on_lparen UNK on_rparen on_ignored_nl on_const on_op on_const on_op on_const on_period UNK on_lparen object on_comma UNK on_rparen on_nl end # Compares the source object with a possibly-decorated object. # # @return [Boolean]
def UNK on_lparen UNK on_rparen on_ignored_nl self on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl self on_period class on_period # Delegates equality to :== as expected # # @return [Boolean]
def UNK on_nl self on_period class on_period UNK on_op object on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK # Returns a unique hash for a decorated object based on # the decorator class and the object being decorated. # # @return [Fixnum]
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op object on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl UNK on_symbeg # Checks if `self.kind_of?(klass)` or `object.kind_of?(klass)` # # @param [Class] klass
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op object on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl UNK on_symbeg # Checks if `self.instance_of?(klass)` or `object.instance_of?(klass)` # # @param [Class] klass
UNK on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl def UNK on_nl self on_nl end on_nl on_ignored_nl def UNK on_nl object # In case object is nil
def UNK on_nl self on_nl end on_nl on_ignored_nl def UNK on_nl object on_period UNK on_period UNK on_lbrace on_op UNK on_comma # ActiveModel compatibility # @private
def UNK on_nl object on_period UNK on_period UNK on_lbrace on_op UNK on_comma UNK on_op UNK on_lparen UNK on_rparen on_rbrace on_nl # @return [Hash] the object's attributes, sliced to only include those # implemented by the decorator.
UNK on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl UNK on_period UNK on_symbeg UNK on_comma UNK on_symbeg object_class on_nl on_ignored_nl def # ActiveModel compatibility
UNK on_period UNK on_symbeg UNK on_comma UNK on_symbeg object_class on_nl on_ignored_nl def self on_period UNK on_nl name on_op UNK on_nl # ActiveModel compatibility
def self on_period UNK on_nl name on_op UNK on_nl UNK on_op name on_op UNK on_nl on_ignored_nl UNK on_op on_const on_op # @return [Class] the class created by {decorate_collection}.
