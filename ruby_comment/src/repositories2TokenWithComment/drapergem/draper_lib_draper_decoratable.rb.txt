UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_op on_const on_op on_const on_nl on_ignored_nl def UNK on_lparen UNK # Provides shortcuts to decorate objects directly, so you can do # `@product.decorate` instead of `ProductDecorator.new(@product)`. # # This module is included by default into `ActiveRecord::Base` and # `Mongoid::Document`, but you're using another ORM, or want to decorate # plain old Ruby objects, you can include it manually.
def UNK on_lparen UNK on_op UNK UNK on_rparen on_ignored_nl decorator_class on_period UNK on_lparen UNK UNK UNK on_rparen on_nl end on_nl # Decorates the object using the inferred {#decorator_class}. # @param [Hash] options # see {Decorator#initialize}
def decorator_class on_nl UNK on_period UNK on_period decorator_class on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_period UNK on_period UNK # (see ClassMethods#decorator_class)
def UNK on_nl UNK UNK on_nl end on_nl on_ignored_nl def UNK on_lparen decorator_class on_rparen on_ignored_nl UNK on_nl end on_nl on_ignored_nl # The list of decorators that have been applied to the object. # # @return [Array<Class>] `[]`
def UNK on_lparen decorator_class on_rparen on_ignored_nl UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_nl end on_nl on_ignored_nl UNK # (see Decorator#decorated_with?) # @return [false]
def UNK on_nl UNK on_nl end on_nl on_ignored_nl UNK on_const on_nl def UNK on_lparen UNK on_op UNK UNK on_rparen on_ignored_nl # Checks if this object is decorated. # # @return [false]
def UNK on_lparen UNK on_op UNK UNK on_rparen on_ignored_nl decorator_class on_period UNK on_lparen UNK UNK UNK on_period UNK on_lparen UNK # Decorates a collection of objects. Used at the end of a scope chain. # # @example # Product.popular.decorate # @param [Hash] options # see {Decorator.decorate_collection}.
def decorator_class on_lparen UNK on_op UNK on_rparen on_ignored_nl UNK on_op UNK on_lparen UNK UNK on_rparen on_op UNK on_op UNK on_nl # Infers the decorator class to be used by {Decoratable#decorate} (e.g. # `Product` maps to `ProductDecorator`). # # @return [Class] the inferred decorator class.
def on_op on_lparen UNK on_rparen on_ignored_nl UNK on_op on_lparen UNK on_period UNK on_lparen on_const on_op on_const on_rparen on_op UNK on_lparen # Compares with possibly-decorated objects. # # @return [Boolean]
