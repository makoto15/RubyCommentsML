expect on_lparen on_const on_rparen on_period to receive on_lparen on_symbeg UNK on_rparen do on_op UNK on_comma on_op UNK on_op on_ignored_nl expect # Make a fake child process so we have a valid PID and $? is set correctly
child_process_id on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_label on_const on_op on_const on_rparen on_nl expect on_lparen on_const on_rparen # PTY uses "$?" to get exitcode, which is filled in by Process.wait(), # so we have to spawn a real process unless we want to mock methods # on nil.
expect on_lparen result on_rparen on_period to eq on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl it on_tstring_beg on_tstring_content on_tstring_end # We are implicitly also checking that the error was not rethrown because that would # have crashed the test
child_process_id on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_label on_const on_op on_const on_rparen on_nl expect on_lparen on_const on_rparen # PTY uses "$?" to get exitcode, which is filled in by Process.wait(), # so we have to spawn a real process unless we want to mock methods # on nil.
expect on_lparen result on_rparen on_period to eq on_lparen UNK on_period UNK on_rparen on_nl on_tstring_content UNK end on_nl end on_nl on_ignored_nl # We are implicitly also checking that the error was not rethrown because that would # have crashed the test
