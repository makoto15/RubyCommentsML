UNK UNK on_period UNK on_lparen platform on_comma lane on_comma UNK on_op nil on_comma UNK on_op nil on_comma UNK on_op nil # @param platform The name of the platform to execute # @param lane_name The name of the lane to execute # @param parameters [Hash] The parameters passed from the command line to the lane # @param env Dot Env Information # @param A custom Fastfile path, this is used by fastlane.ci # rubocop:disable Metrics/PerceivedComplexity
end on_nl on_ignored_nl unless UNK on_nl on_ignored_nl unless ff on_period UNK on_period UNK on_period UNK on_lparen lane on_rparen on_nl platform # rescue, because this raises an exception if it can't be found at all
on_ignored_nl unless ff on_period UNK on_period UNK on_period UNK on_lparen lane on_rparen on_nl platform on_op on_const on_period UNK on_lbracket on_const # maybe the user specified a default platform # We'll only do this, if the lane specified isn't a platform, as we want to list all platforms then
unless ff on_period UNK on_period UNK on_period UNK on_lparen lane on_rparen on_nl platform on_op on_const on_period UNK on_lbracket on_const on_op # Make sure that's not a lane without a platform
UNK ff on_period UNK on_lparen lane on_rparen on_nl platform on_op lane on_nl lane on_op nil on_nl end on_nl end on_nl # Either, the user runs a specific lane in root or want to auto complete the available lanes for a platform # e.g. `fastlane ios` should list all available iOS actions
on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op on_tstring_beg on_tstring_content on_tstring_end unless platform on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl on_const on_op # xcodeproj has a bug in certain versions that causes it to change directories # and not return to the original working directory # https://github.com/CocoaPods/Xcodeproj/issues/426 # Setting this environment variable causes xcodeproj to work around the problem
on_ignored_nl UNK on_nl UNK on_lparen ex on_rparen on_nl on_const on_period UNK on_lparen ex on_period UNK on_rparen UNK ex on_period UNK # rubocop:disable Lint/RescueException # We also catch Exception, since the implemented action might send a SystemExit signal # (or similar). We still want to catch that, since we want properly finish running fastlane # Tested with `xcake`, which throws a `Xcake::Informative` object
UNK on_op ex on_nl end on_nl on_ignored_nl on_const on_op on_const on_period UNK on_lparen ff on_rparen unless UNK on_nl on_ignored_nl UNK # we don't want to print things like 'system exit'
on_const on_op on_const on_period UNK on_lparen ff on_rparen unless UNK on_nl on_ignored_nl UNK on_op on_lparen on_lparen on_const on_period UNK on_op # After running the lanes, since skip_docs might be somewhere in-between
on_ignored_nl UNK UNK on_period UNK on_nl on_const on_period UNK on_op on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen # rubocop:enable Metrics/PerceivedComplexity
UNK UNK on_period UNK on_lparen ff on_comma platform on_rparen on_ignored_nl available on_op on_lbracket on_rbracket on_nl on_ignored_nl UNK on_op on_lbracket nil # Lane chooser if user didn't provide a lane # @param platform: is probably nil, but user might have called `fastlane android`, and only wants to list those actions
UNK on_op on_lbracket nil on_rbracket on_op on_const on_op on_const on_period UNK on_nl UNK on_period UNK UNK on_op UNK on_op on_ignored_nl # nil is the key for lanes that are not under a specific platform
UNK on_op platform on_nl platform on_op nil on_nl end on_nl on_ignored_nl UNK platform on_comma UNK UNK on_ignored_nl on_const on_period UNK # no specific platform, just a root lane
UNK on_ignored_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl end on_nl end on_nl end on_nl EMP # yeah
