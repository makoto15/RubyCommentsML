on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_embexpr_beg path on_embexpr_end on_tstring_content on_tstring_end on_rparen on_nl on_ivar on_op path on_nl UNK on_period UNK # we are okay with no config at all
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_ignored_nl on_ivar on_op on_const on_period UNK on_lparen UNK on_rparen on_nl UNK on_op UNK # @param data (String) the JSON data to be parsed
def UNK on_lparen path on_rparen on_ignored_nl UNK on_op on_ivar on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period UNK UNK on_op UNK on_op # Fetches the finished configuration for a given path. This will try to look for a specific value # and fallback to a default value if nothing was found
def UNK on_lparen values on_rparen on_ignored_nl values on_period UNK UNK on_op key on_comma value on_op on_ignored_nl if value on_period kind_of? # Use absolute paths instead of relative
UNK value on_period kind_of? on_lparen on_const on_rparen on_nl value on_period UNK UNK on_op current on_op on_ignored_nl UNK on_lparen current on_rparen # recursive call
end on_nl UNK on_ignored_nl if on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period UNK on_lparen key on_rparen on_nl # recursive call
if on_ivar UNK on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_ivar on_rparen on_nl value on_period UNK on_lparen on_const # Change the paths to relative ones # `replace`: to change the content of the string, so it's actually stored
UNK on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_ivar on_rparen on_nl value on_period UNK on_lparen on_const on_period UNK # where is the config file. We don't have a config file in tests
def UNK on_lparen values on_rparen on_ignored_nl values on_period UNK UNK on_op key on_comma value on_op on_ignored_nl if value on_period kind_of? # Make sure the paths/colors are valid
UNK on_ignored_nl UNK on_lparen key on_comma value on_rparen on_nl end on_nl end on_nl end on_nl on_ignored_nl def UNK on_lparen key # recursive call
