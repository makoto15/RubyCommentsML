UNK on_const on_nl def UNK on_nl on_const on_op on_const on_period UNK on_lparen on_label on_const on_period config on_comma on_label on_lbracket on_symbeg # rubocop:disable Metrics/ClassLength
UNK on_lparen apk_version_codes on_rparen on_nl else on_ignored_nl if on_const on_period config on_lbracket on_symbeg UNK on_rbracket on_nl UNK on_nl UNK on_op # Only update tracks if we have version codes # update_track handle setting rollout if needed # Updating a track with empty version codes can completely clear out a track
if on_const on_period config on_lbracket on_symbeg UNK on_rbracket on_nl UNK on_nl UNK on_op on_const on_period config on_lbracket on_symbeg rollout on_rbracket # Only promote or rollout if we don't have version codes
version_codes on_op on_lbracket on_const on_period config on_lbracket on_symbeg version_code on_rbracket on_rbracket if version_codes on_period empty? on_nl version_codes on_op version_codes on_period # Use version code from config if version codes is empty and no nil or empty string
on_const on_period message on_lparen on_tstring_beg on_tstring_content on_embexpr_beg language on_embexpr_end on_tstring_content on_tstring_end on_rparen on_nl on_ignored_nl UNK on_op client on_period UNK on_lparen # e.g. . or .. or hidden folders
track on_period releases on_period UNK on_lbrace on_op r on_op on_op on_lparen r on_period version_codes on_op on_lbracket on_rbracket on_rparen on_period UNK # Deleted other version codes if completed because only allowed on completed version in a release
apk_paths on_op on_lbracket on_const on_period config on_lbracket on_symbeg UNK on_rbracket on_comma on_const on_period config on_lbracket on_symbeg apk_paths on_rbracket on_rbracket on_period # Can't upload both at apk and aab at same time # Need to error out users when there both apks and aabs are detected
UNK on_period releases on_op on_lbracket release on_rbracket on_nl else on_ignored_nl UNK on_op on_const on_op on_const on_period UNK on_lparen on_ignored_nl on_label # Its okay to set releases to an array containing the newest release # Google Play will keep previous releases there this release is a partial rollout
def UNK on_lparen apk_path on_rparen on_ignored_nl apk_version_code on_op nil on_nl on_ignored_nl if apk_path on_nl on_const on_period message on_lparen on_tstring_beg on_tstring_content ## # Upload binary apk and obb and corresponding change logs with client # # @param [String] apk_path # Path of the apk file to upload. # # @return [Integer] The apk version code returned after uploading, or nil if there was a problem
track on_period releases on_op on_lbracket UNK on_rbracket on_nl else on_ignored_nl track on_op on_const on_op on_const on_period UNK on_lparen on_ignored_nl on_label # Its okay to set releases to an array containing the newest release # Google Play will keep previous releases there this release is a partial rollout
def UNK on_nl on_const on_period UNK on_lparen metadata_path on_rparen on_ignored_nl on_period UNK on_lbrace on_op UNK on_op on_const on_period UNK on_lparen # returns only language directories from metadata_path
def UNK on_lparen apk_path on_comma apk_version_code on_rparen on_ignored_nl expansion_paths on_op UNK on_lparen apk_path on_rparen on_nl on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma # searches for obbs in the directory where the apk is located and # upload at most one main and one patch file. Do nothing if it finds # more than one of either of them.
def UNK on_lparen apk_path on_rparen on_ignored_nl search on_op on_const on_period join on_lparen on_const on_period UNK on_lparen apk_path on_rparen on_comma on_tstring_beg # @return a map of the obb paths for that apk # keyed by their detected expansion file type # E.g. # { 'main' => 'path/to/main.obb', 'patch' => 'path/to/patch.obb' }
end on_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP # rubocop:enable Metrics/ClassLength
