UNK UNK on_lparen on_label nil on_comma on_label nil on_comma on_label nil on_comma on_label nil on_comma on_label nil on_comma on_label UNK # @return The build we waited for. This method will always return a build
if UNK on_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl app_version on_op UNK on_nl end on_nl on_ignored_nl if # Warn about train_version being removed in the future
if UNK on_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl platform on_op on_const on_op on_const # Warn about strict_build_watch being removed in the future
if matched_build on_op on_lparen UNK on_op matched_build on_period UNK on_rparen on_nl if UNK on_nl UNK matched_build on_period UNK on_nl UNK # Processing of builds by AppStoreConnect can be a very time consuming task and will # block the worker running this task until it is completed. In some cases, # having a build resource appear in AppStoreConnect (matched_build) may be enough (i.e. setting a changelog) # so here we may choose to skip the full processing of the build if return_when_build_appears is true
UNK UNK on_lparen on_label nil on_rparen on_ignored_nl UNK version on_period UNK on_lparen on_const on_rparen on_op version on_period UNK on_lparen on_tstring_beg # Remove leading zeros ( https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102364 )
UNK on_op UNK on_lparen on_label UNK on_rparen on_nl UNK on_op UNK on_lparen on_label UNK on_rparen on_nl on_ignored_nl UNK on_op on_const # Get build deliveries (newly uploaded processing builds)
if UNK on_period UNK on_op UNK on_nl UNK on_op UNK on_period UNK UNK on_op build on_op on_ignored_nl on_tstring_beg on_embexpr_beg build # Raise error if more than 1 build is returned # This should never happen but need to inform the user if it does
