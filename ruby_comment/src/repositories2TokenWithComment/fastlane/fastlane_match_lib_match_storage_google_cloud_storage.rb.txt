UNK on_const on_op on_const on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl attr_reader on_symbeg UNK on_nl attr_reader on_symbeg UNK on_nl # Store the code signing identities in on Google Cloud Storage
attr_reader on_symbeg UNK on_nl attr_reader on_symbeg UNK on_nl attr_reader on_symbeg bucket_name on_nl attr_reader on_symbeg google_cloud_keys_file on_nl attr_reader on_symbeg google_cloud_project_id on_nl # User provided values
UNK on_symbeg UNK on_nl on_ignored_nl def self on_period UNK on_lparen params on_rparen on_ignored_nl if params on_lbracket on_symbeg UNK on_rbracket on_period # Managed values
UNK on_op on_const on_period UNK on_lparen on_const on_period UNK on_lparen self on_period google_cloud_keys_file on_rparen on_rparen on_nl if google_cloud_project_id on_period to_s # Extract the Project ID from the `JSON` file # so the user doesn't have to provide it manually
UNK on_ignored_nl self on_period UNK on_op on_const on_op on_const on_op on_const on_period UNK on_lparen on_ignored_nl on_label self on_period google_cloud_keys_file on_comma # Create the Google Cloud Storage client # If the JSON auth file is invalid, this line will # raise an exception
return self on_period team_id on_nl UNK on_ignored_nl UNK on_op on_const on_period UNK on_lparen self on_period UNK on_comma self on_period team_id # In readonly mode, we still want to see if the user provided a team_id # see `prefixed_working_directory` comments for more details
on_ivar on_op UNK on_nl if on_ivar on_period UNK on_nl on_const on_period important on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ivar on_op # We fall back to "*", which means certificates and profiles # from all teams that use this bucket would be installed. This is not ideal, but # unless the user provides a `team_id`, we can't know which one to use # This only happens if `readonly` is activated, and no `team_id` was provided
on_const on_period important on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ivar on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl return on_const on_period # We use a `@_folder_prefix` variable, to keep state between multiple calls of this # method, as the value won't change. This way the warning is only printed once
return if on_ivar on_nl on_ignored_nl self on_period working_directory on_op on_const on_period UNK on_nl on_ignored_nl bucket on_period UNK on_period UNK UNK # Check if we already have a functional working_directory
self on_period working_directory on_op on_const on_period UNK on_nl on_ignored_nl bucket on_period UNK on_period UNK UNK on_op current_file on_op on_ignored_nl UNK # No existing working directory, creating a new one now
UNK on_op on_const on_period UNK on_lparen self on_period working_directory on_comma UNK on_rparen on_nl on_ignored_nl on_const on_period UNK on_lparen on_const on_period # e.g. "N8X438SEU2/certs/distribution/XD9G7QCACF.cer"
on_ignored_nl UNK on_period UNK UNK on_op current_file on_op on_ignored_nl on_ignored_nl target_path on_op current_file on_period UNK on_lparen self on_period working_directory on_op # `files_to_upload` is an array of files that need to be uploaded to Google Cloud # Those doesn't mean they're new, it might just be they're changed # Either way, we'll upload them using the same technique
on_ignored_nl target_path on_op current_file on_period UNK on_lparen self on_period working_directory on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_end on_rparen on_nl on_const # Go from # "/var/folders/px/bz2kts9n69g8crgv4jpjh6b40000gn/T/d20181026-96528-1av4gge/profiles/development/Development_me.mobileprovision" # to # "profiles/development/Development_me.mobileprovision" #
target_path on_op current_file on_period UNK on_lparen self on_period working_directory on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_end on_rparen on_nl on_const on_period # We also have to remove the trailing `/` as Google Cloud doesn't handle it nicely
on_ignored_nl def UNK on_lparen google_cloud_keys_file on_comma google_cloud_project_id on_rparen on_ignored_nl if google_cloud_keys_file on_op on_const on_period UNK on_lparen google_cloud_keys_file on_rparen on_nl return ########################## # Setup related methods ##########################
def UNK on_lparen google_cloud_keys_file on_comma google_cloud_project_id on_rparen on_ignored_nl if google_cloud_keys_file on_op on_const on_period UNK on_lparen google_cloud_keys_file on_rparen on_nl return google_cloud_keys_file # This method will make sure the keys file exists # If it's missing, it will help the user set things up
UNK on_op nil on_nl UNK on_ignored_nl UNK on_op on_const on_op on_const on_period UNK on_nl UNK on_nl end on_nl on_ignored_nl if # Check to see if this system has application default keys installed. # These are the default keys that the Google Cloud APIs use when no other keys are specified. # Users with the Google Cloud SDK installed can generate them by running... # `gcloud auth application-default login` # ...and then they'll be automatically available. # The nice thing about these keys is they can be associated with the user's login in GCP # (e.g. my_account@gmail.com), so teams can control access to the certificate bucket # using a mailing list of developer logins instead of generating service accounts # and keys.
end on_nl on_ignored_nl if UNK on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl return nil on_nl end on_nl # This means no application default keys have been installed. That's perfectly OK, # we can continue and ask the user if they want to use a keys file.
on_const on_period message on_lparen on_tstring_beg on_tstring_content on_embexpr_beg on_const on_period cyan on_embexpr_end on_tstring_content on_tstring_end on_rparen on_nl on_const on_period message on_lparen on_tstring_beg # User doesn't seem to have provided a keys file
return UNK self on_period bucket_name on_period to_s on_period length on_op on_int on_nl on_ignored_nl UNK on_op on_const on_period UNK on_lparen on_tstring_beg # Skip the instructions if the user provided a bucket name
UNK on_ignored_nl UNK on_op on_op self on_period UNK on_period bucket on_lparen bucket_name on_rparen on_period UNK on_nl UNK on_const on_op on_const # Verify if the bucket exists
