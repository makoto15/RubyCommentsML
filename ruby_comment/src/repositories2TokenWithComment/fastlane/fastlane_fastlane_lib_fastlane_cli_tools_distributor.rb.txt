UNK on_const on_nl UNK on_op UNK on_nl def UNK on_nl on_const on_period include? on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_const # This class is responsible for checking the ARGV # to see if the user wants to launch another fastlane # tool or fastlane itself
require on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_op on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma UNK UNK UNK # Usually in the fastlane code base we use # # Helper.show_loading_indicator # longer_taking_task_here # Helper.hide_loading_indicator # # but in this case we haven't required FastlaneCore yet # so we'll have to access the raw API for now
require on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_period UNK on_nl UNK on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl UNK # this might take a long time if there is no Gemfile :( # That's why we show the loading indicator here also
UNK UNK on_op UNK on_nl UNK on_lparen UNK on_lparen on_const on_period UNK on_op UNK on_op UNK on_rparen on_rparen on_nl end # We want to avoid printing output other than the version number if we are running `fastlane -v`
UNK UNK on_nl UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_period UNK on_lparen UNK on_rparen on_nl UNK UNK on_ignored_nl on_const # Try to check UTF-8 with `locale`, fallback to environment variables
on_const on_period UNK on_lparen UNK on_rparen on_nl end on_nl end on_nl on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_op on_const # Repeat warning here so users hopefully see it
require on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_op on_const on_op on_const on_period UNK on_lparen UNK on_rparen on_nl on_ignored_nl on_const on_op on_const # Loading any .env files before any lanes are called since # variables like FASTLANE_HIDE_CHANGELOG and FASTLANE_DISABLE_COLORS # need to be set early on in execution
on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end if on_const on_op on_const # Needs to go after load_dot_env for variable FASTLANE_SKIP_UPDATE_CHECK
require on_tstring_beg on_tstring_content on_tstring_end if on_const on_op on_const on_period UNK on_nl on_ignored_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen # Disabling colors if environment variable set
require tool_name on_nl UNK on_ignored_nl on_const on_period UNK on_nl on_ignored_nl require on_const on_period UNK on_lparen tool_name on_comma on_tstring_beg on_tstring_content on_tstring_end # Triggering a specific tool # This happens when the users uses things like # # fastlane sigh # fastlane snapshot #
on_const on_period UNK on_nl on_ignored_nl require on_const on_period UNK on_lparen tool_name on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ignored_nl UNK on_op # First, remove the tool's name from the arguments # Since it will be parsed by the `commander` at a later point # and it must not contain the binary name
require on_const on_period UNK on_lparen tool_name on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ignored_nl UNK on_op on_const on_period UNK on_lparen tool_name # Import the CommandsGenerator class, which is used to parse # the user input
UNK on_op on_const on_period UNK on_lparen tool_name on_period UNK on_rparen on_op on_const on_nl UNK on_const on_nl UNK on_lparen on_tstring_beg UNK # Call the tool's CommandsGenerator class and let it do its thing
UNK on_lparen on_tstring_beg UNK tool_name UNK on_tstring_content UNK tool_name UNK on_tstring_content UNK tool_name UNK on_tstring_content on_tstring_end on_period UNK on_rparen on_nl # This will only happen if the tool we call here, doesn't provide # a CommandsGenerator class yet # When we launch this feature, this should never be the case
on_const on_period UNK on_nl on_ignored_nl UNK on_period UNK on_nl UNK tool_name on_op on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end # Some of the tools use other actions so need to load all # actions before we start the tool generator # Example: scan uses slack
require on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_op on_const on_period UNK on_nl end on_nl UNK on_ignored_nl on_const on_op on_const on_period UNK # Triggering fastlane to call a lane
def UNK on_lparen tool_name on_rparen on_ignored_nl return UNK on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_tstring_beg on_tstring_content # Since fastlane also supports the rocket and biceps emoji as executable # we need to map those to the appropriate tools
return if on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen return if on_const on_op on_const on_period UNK on_ignored_nl # user is alread using bundler
return if on_const on_op on_const on_period UNK on_ignored_nl UNK on_op on_const on_period UNK on_period UNK on_nl if UNK on_nl on_const # user disabled the warnings
on_ignored_nl UNK on_op on_const on_period UNK on_period UNK on_nl if UNK on_nl on_const on_period important on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen # user uses the bundled fastlane
on_const on_period important on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_period important on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_period # The user has a Gemfile, but forgot to use `bundle exec` # Let's tell the user how to use `bundle exec` # We show this warning no matter if the command is slow or not
on_const on_period important on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_period message on_lparen on_tstring_beg on_tstring_end on_rparen on_nl on_const on_period UNK # fastlane is slow and there is no Gemfile # Let's tell the user how to use `gem cleanup` and how to # start using a Gemfile
def UNK on_nl UNK on_op on_const on_op on_const on_period UNK on_nl return UNK UNK if UNK on_period UNK on_nl UNK # Returns an array of symbols for the available lanes for the Fastfile # This doesn't actually use the Fastfile parser, but only # the available lanes. This way it's much faster, which # is very important in this case, since it will be executed # every time one of the tools is launched # Use this only if performance is :key:
