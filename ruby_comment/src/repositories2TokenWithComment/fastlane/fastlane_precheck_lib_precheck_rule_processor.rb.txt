class on_const on_nl UNK on_symbeg error_results UNK on_symbeg warning_results UNK on_symbeg UNK on_nl UNK on_symbeg items_not_checked on_nl on_ignored_nl def UNK # encapsulated the results of the rule processing, needed to return not just an array of the results of our # checks, but also an array of items we didn't check, just in-case we were expecting to check everything
UNK on_symbeg warning_results UNK on_symbeg UNK on_nl UNK on_symbeg items_not_checked on_nl on_ignored_nl def UNK on_lparen on_label nil on_comma on_ignored_nl on_label # { rule: [result, result, ...] }
UNK on_symbeg UNK on_nl UNK on_symbeg items_not_checked on_nl on_ignored_nl def UNK on_lparen on_label nil on_comma on_ignored_nl on_label nil on_comma on_ignored_nl # { rule: [result, result, ...] }
error_results on_op UNK UNK warning_results on_op UNK UNK UNK on_op on_lbracket on_rbracket on_nl on_ignored_nl UNK on_period each do on_op rule # items we haven't checked by at least one rule
warning_results on_op UNK UNK UNK on_op on_lbracket on_rbracket on_nl on_ignored_nl UNK on_period each do on_op rule on_op on_ignored_nl rule_config on_op # rule to fields map
UNK on_op on_lbracket on_rbracket on_nl on_ignored_nl UNK on_period each do on_op rule on_op on_ignored_nl rule_config on_op on_const on_period UNK on_lbracket # rule to fields map
UNK on_op false on_nl on_ignored_nl items_to_check on_period each do on_op UNK on_op on_ignored_nl result on_op rule on_period UNK on_lparen UNK # if the rule failed at least once, we won't print a success message
UNK if result on_period UNK on_nl on_ignored_nl items_not_checked on_period UNK on_lparen UNK on_rparen on_nl on_ignored_nl UNK UNK result on_period UNK # each rule will determine if it can handle this item, if not, it will just pass nil back
items_not_checked on_period UNK on_lparen UNK on_rparen on_nl on_ignored_nl UNK UNK result on_period UNK on_op on_const on_lbracket on_symbeg UNK on_rbracket on_nl # we've checked this item, remove it from list of items not checked
UNK UNK result on_period UNK on_op on_const on_lbracket on_symbeg UNK on_rbracket on_nl error_results on_op UNK on_lparen on_label error_results on_comma on_label # if we passed, then go to the next item, otherwise, recode the failure
def self on_period UNK on_lparen on_label nil on_comma on_label nil on_rparen on_ignored_nl UNK UNK on_period UNK on_lparen result on_period rule # hash will be { rule: [result, result, result] }
def self on_period collect_text_items_from_language_item on_lparen on_label nil on_comma on_label nil on_comma on_label nil on_comma on_label false on_rparen on_ignored_nl items on_op # a few attributes are LanguageItem this method creates a TextItemToCheck for each pair
UNK on_const on_nl def each on_lparen on_op UNK on_rparen on_ignored_nl UNK on_period each UNK on_op key on_op UNK on_lparen key # we want to get some of the same behavior hashes has, so use this mixin specifically designed for Spaceship::Tunes::LanguageItem # because we use .each
def each on_lparen on_op UNK on_rparen on_ignored_nl UNK on_period each UNK on_op key on_op UNK on_lparen key on_comma UNK on_lparen # this is used to create a hash-like .each method.
