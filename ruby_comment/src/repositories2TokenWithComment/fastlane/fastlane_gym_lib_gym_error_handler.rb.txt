on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_op # coding: utf-8
UNK on_const on_nl UNK on_op UNK on_nl def UNK on_lparen output on_rparen on_ignored_nl UNK output on_nl when on_regexp_beg on_tstring_content on_regexp_end # This classes methods are called when something goes wrong in the building process
def UNK on_lparen output on_rparen on_ignored_nl UNK output on_nl when on_regexp_beg on_tstring_content on_regexp_end on_nl print on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen # @param [String] The output of the errored build # This method should raise an exception in any case, as the return code indicated a failed build
UNK output on_nl when on_regexp_beg on_tstring_content on_regexp_end on_nl print on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl print on_lparen on_tstring_beg on_tstring_content on_tstring_end # The order of the handling below is important
print on_lparen on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_content on_tstring_end on_rparen on_nl print on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl print on_lparen # the . around the (.*) are for the strange "
print on_lparen on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_content on_tstring_end on_rparen on_nl print on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl print on_lparen # the . around the (.*) are for the strange "
when on_regexp_beg on_tstring_content on_regexp_end on_nl print on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl print on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl print # Insert more code signing specific errors here
UNK output on_nl when on_regexp_beg on_tstring_content on_regexp_end on_nl print on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl print on_lparen on_tstring_beg on_tstring_content on_tstring_end # This error is rather common and should be below the other (a little noisy) output
def UNK on_lparen output on_rparen on_ignored_nl UNK output on_nl when on_regexp_beg on_tstring_content on_regexp_end on_nl print on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen # @param [Array] The output of the errored build (line by line) # This method should raise an exception in any case, as the return code indicated a failed build
when on_regexp_beg on_tstring_content on_regexp_end on_nl print on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl print on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end # insert more specific code signing errors here
def print on_lparen UNK on_rparen on_ignored_nl on_const on_period error on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl UNK # Just to make things easier
UNK on_op on_const on_period UNK on_lparen UNK on_rparen on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_lbracket on_op UNK on_op on_op # `xcodebuild` doesn't properly mark lines as failure reason or important information # so we assume that the last few lines show the error message that's relevant # (at least that's what was correct during testing)
UNK UNK on_const on_period config on_lbracket on_symbeg export_options on_rbracket on_period UNK on_lparen on_const on_rparen on_nl on_ignored_nl export_options on_op on_const on_period # prevent crash in case of packaging error AND if you have set export_options to a path.
UNK on_op UNK on_ignored_nl on_label on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_const on_op on_const on_period UNK on_rparen on_comma # lots of the times, the user didn't set the correct Xcode version to their Xcode path # since many users don't look at the table of summary before running a tool, let's make # sure they are aware of the Xcode version and SDK they're using
UNK on_op on_const on_period config on_lbracket on_symbeg UNK on_rbracket on_period to_s on_nl UNK on_op on_const on_period config on_lbracket on_symbeg export_options # We want to tell the user if there is an obvious mismatch between the selected # `export_method` and the selected provisioning profiles
on_ignored_nl UNK on_op UNK on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op on_tstring_beg on_tstring_content # We could go ahead and find all provisioning profiles that match that name # and then get its type, however that's not 100% reliable, as we can't distinguish between # Ad Hoc and Development profiles for example. # As an easier and more obvious alternative, we'll take the provisioning profile names # and see if it contains the export_method name and see if there is a mismatch
UNK on_op UNK on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op on_tstring_beg on_tstring_content on_tstring_end # The reason we have multiple variations of the spelling is that # the provisioning profile might be called anything below # There is no 100% good way to detect the profile type based on the name
on_ignored_nl UNK UNK UNK on_period to_s on_op UNK on_nl on_const on_period message on_lparen on_tstring_beg on_tstring_end on_rparen on_nl on_const on_period error # Check if there is a mismatch between the name and the selected export method # Example # # current_profile_name = "me.themoji.app.beta App Store"" # current_to_try = "app store" # matching_type = :appstore # selected_export_method = "enterprise" # # As seen above, there is obviously a mismatch, the user selected an App Store # profile, but the export method that's being passed to Xcode is "enterprise"
def UNK on_nl on_const on_period message on_lparen on_tstring_beg on_tstring_end on_rparen on_nl on_const on_period error on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl # Indicate that code signing errors are not caused by fastlane # and that fastlane only runs `xcodebuild` commands
