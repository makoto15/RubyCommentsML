expect on_lparen version on_period UNK on_rparen on_period to eq on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl end on_nl on_ignored_nl # Note right now we don't really update the raw_data after the release
expect on_lparen v on_period screenshots on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_rparen on_period to eq on_lparen on_lbracket on_rbracket on_rparen on_nl on_ignored_nl # This app only has screenshots in the English version
expect on_lparen v on_period screenshots on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period count on_lbrace on_op UNK on_op UNK on_period device_type on_op # 2 iPhone 6 Plus Screenshots
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl end on_nl on_ignored_nl describe on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl let on_lparen on_symbeg version on_rparen on_lbrace # describe "AppTrailers", :trailers do # it "properly parses all the trailers" do # v = app.live_version
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl end on_nl on_ignored_nl describe on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl let on_lparen on_symbeg version on_rparen on_lbrace on_const # # This app only has screenshots in the English version # expect(v.trailers["German"]).to eq([])
on_ignored_nl on_ignored_nl on_ignored_nl end on_nl on_ignored_nl describe on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl let on_lparen on_symbeg version on_rparen on_lbrace on_const on_op # s1 = v.trailers["English"].first # expect(s1.device_type).to eq("ipad") # expect(s1.language).to eq("English")
on_ignored_nl on_ignored_nl end on_nl on_ignored_nl describe on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl let on_lparen on_symbeg version on_rparen on_lbrace on_const on_op on_const # expect(s1.preview_frame_time_code).to eq("00:05") # expect(s1.is_portrait).to eq(false)
on_ignored_nl end on_nl on_ignored_nl describe on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl let on_lparen on_symbeg version on_rparen on_lbrace on_const on_op on_const on_period # expect(v.trailers["English"].count).to eq(1)
end on_nl on_ignored_nl describe on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl let on_lparen on_symbeg version on_rparen on_lbrace on_const on_op on_const on_period UNK # expect(v.trailers["English"].count { |s| s.device_type == "iphone6Plus" }).to eq(0) # end # end
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl # describe "Modifying the app trailers", :trailers do # let(:ipad_trailer_path) { "path_to_trailer.mov" } # let(:ipad_trailer_preview_path) { "path_to_trailer_preview.jpg" } # let(:ipad_external_valid_trailer_preview_path) { "path_to_my_screenshot.jpg" } # let(:ipad_external_invalid_trailer_preview_path) { "path_to_my_invalid_screenshot.jpg.jpg" } # before do # allow(Spaceship::UploadFile).to receive(:from_path) do |path| # r = du_uploadtrailer_correct_mov if path == ipad_trailer_path # r = du_uploadtrailer_preview_correct_jpg if path == ipad_trailer_preview_path # r = du_uploadtrailer_preview_correct_jpg if path == ipad_external_valid_trailer_preview_path # r # end
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl # allow(Spaceship::Utilities).to receive(:grab_video_preview) do |path| # r = ipad_trailer_preview_path if path == ipad_trailer_path # r # end
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl describe # allow(Spaceship::Utilities).to receive(:portrait?) do |path| # r = true if path == ipad_trailer_preview_path # r = true if path == ipad_external_invalid_trailer_preview_path # r = true if path == ipad_external_valid_trailer_preview_path # r # end
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl describe on_tstring_beg # allow(Spaceship::Utilities).to receive(:resolution) do |path| # r = [900, 1200] if path == ipad_trailer_path # r = [768, 1024] if path == ipad_trailer_preview_path # r = [700, 1000] if path == ipad_external_invalid_trailer_preview_path # r = [768, 1024] if path == ipad_external_valid_trailer_preview_path # r # end
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl describe on_tstring_beg on_tstring_content # json = JSON.parse(du_read_fixture_file("upload_trailer_response_success.json")) # allow(client.du_client).to receive(:upload_trailer).and_return(json)
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl describe on_tstring_beg on_tstring_content on_tstring_end # json = JSON.parse(du_read_upload_trailer_preview_response_success) # allow(client.du_client).to receive(:upload_trailer_preview).and_return(json) # end
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl describe on_tstring_beg on_tstring_content on_tstring_end on_comma # def trailers(device) # version.trailers["English"].select { |s| s.device_type == device } # end
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl describe on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg # def ipad_trailers # trailers("ipad") # end
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl describe on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg UNK # it "cannot add a trailer to iphone35" do # expect do # version.upload_trailer!(ipad_trailer_path, "English", 'iphone35') # end.to raise_error "No app trailer supported for iphone35" # end
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl describe on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg UNK do # it "requires timestamp with a specific format" do # expect do # version.upload_trailer!(ipad_trailer_path, "English", 'ipad', "00:01.000") # end.to raise_error "Invalid timestamp 00:01.000" # expect do # version.upload_trailer!(ipad_trailer_path, "English", 'ipad', "01.000") # end.to raise_error "Invalid timestamp 01.000" # end
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl describe on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg UNK do on_ignored_nl # it "can add a new trailer" do # # remove existing # version.upload_trailer!(nil, "English", 'ipad')
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl describe on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg UNK do on_ignored_nl before # count = ipad_trailers.count # expect(count).to eq(0) # version.upload_trailer!(ipad_trailer_path, "English", 'ipad') # count_after = ipad_trailers.count # expect(count_after).to eq(count + 1) # expect(count_after).to eq(count + 1) # trailer = ipad_trailers[0] # expect(trailer.video_asset_token).to eq("VideoSource40/v4/e3/48/1a/e3481a8f-ec25-e19f-5048-270d7acaf89a/pr_source.mov") # expect(trailer.picture_asset_token).to eq("Purple69/v4/5f/2b/81/5f2b814d-1083-5509-61fb-c0845f7a9374/pr_source.jpg") # expect(trailer.descriptionXML).to match(/FoghornLeghorn/) # expect(trailer.preview_frame_time_code).to eq("00:00:05:00") # expect(trailer.video_url).to eq(nil) # expect(trailer.preview_image_url).to eq(nil) # expect(trailer.full_sized_preview_image_url).to eq(nil) # expect(trailer.device_type).to eq("ipad") # expect(trailer.language).to eq("English") # end
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl describe on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg UNK do on_ignored_nl before do # it "can modify the preview of an existing trailer and automatically generates a new screenshot preview" do # json = JSON.parse(du_read_upload_trailer_preview_2_response_success) # allow(client.du_client).to receive(:upload_trailer_preview).and_return(json)
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl describe on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg UNK do on_ignored_nl before do on_ignored_nl # count = ipad_trailers.count # expect(count).to eq(1) # version.upload_trailer!(ipad_trailer_path, "English", 'ipad', "06.12") # count_after = ipad_trailers.count # expect(count_after).to eq(count) # trailer = ipad_trailers[0]
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl describe on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg UNK do on_ignored_nl before do on_ignored_nl UNK # expect(trailer.video_asset_token).to eq(nil) # expect(trailer.picture_asset_token).to eq("Purple70/v4/5f/2b/81/5f2b814d-1083-5509-61fb-c0845f7a9374/pr_source.jpg") # expect(trailer.descriptionXML).to eq(nil) # expect(trailer.preview_frame_time_code).to eq("00:00:06:12") # expect(trailer.video_url).to eq("http://a1713.phobos.apple.com/us/r30/PurpleVideo7/v4/be/38/db/be38db8d-868a-d442-87dc-cb6d630f921e/P37134684_default.m3u8") # expect(trailer.preview_image_url).to eq("https://is1-ssl.mzstatic.com/image/thumb/PurpleVideo5/v4/b7/41/5e/b7415e96-5ad5-6cf5-9323-15122145e53f/Job21976428-61a9-456b-af46-26c1303ae607-91524171-PreviewImage_AppTrailer_quicktime-Time1438426738374.png/500x500bb-80.png") # expect(trailer.full_sized_preview_image_url).to eq("https://is1-ssl.mzstatic.com/image/thumb/PurpleVideo5/v4/b7/41/5e/b7415e96-5ad5-6cf5-9323-15122145e53f/Job21976428-61a9-456b-af46-26c1303ae607-91524171-PreviewImage_AppTrailer_quicktime-Time1438426738374.png/900x1200ss-80.png") # expect(trailer.device_type).to eq("ipad") # expect(trailer.language).to eq("English") # end
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl describe on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg UNK do on_ignored_nl before do on_ignored_nl UNK on_op # it "can add a new trailer given a valid externally provided preview screenshot" do # # remove existing # version.upload_trailer!(nil, "English", 'ipad')
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl describe on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg UNK do on_ignored_nl before do on_ignored_nl UNK on_op on_const # expect do # version.upload_trailer!(ipad_trailer_path, "English", 'ipad', '12.34', ipad_external_invalid_trailer_preview_path) # end.to raise_error "Invalid portrait screenshot resolution for device ipad. Should be [768, 1024]" # end
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl describe on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg UNK do on_ignored_nl before do on_ignored_nl UNK on_op on_const on_period # it "can add a new trailer given a valid externally provided preview screenshot" do # # remove existing # version.upload_trailer!(nil, "English", 'ipad')
on_ignored_nl on_ignored_nl on_ignored_nl describe on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg UNK do on_ignored_nl before do on_ignored_nl UNK on_op on_const on_period UNK # count = ipad_trailers.count # expect(count).to eq(0) # version.upload_trailer!(ipad_trailer_path, "English", 'ipad', '12.34', ipad_external_valid_trailer_preview_path) # count_after = ipad_trailers.count # expect(count_after).to eq(count + 1) # trailer = ipad_trailers[0] # expect(trailer.video_asset_token).to eq("VideoSource40/v4/e3/48/1a/e3481a8f-ec25-e19f-5048-270d7acaf89a/pr_source.mov") # expect(trailer.picture_asset_token).to eq("Purple69/v4/5f/2b/81/5f2b814d-1083-5509-61fb-c0845f7a9374/pr_source.jpg") # expect(trailer.descriptionXML).to match(/FoghornLeghorn/) # expect(trailer.preview_frame_time_code).to eq("00:00:12:34") # expect(trailer.video_url).to eq(nil) # expect(trailer.preview_image_url).to eq(nil) # expect(trailer.full_sized_preview_image_url).to eq(nil) # expect(trailer.device_type).to eq("ipad") # expect(trailer.language).to eq("English") # end
on_ignored_nl on_ignored_nl describe on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg UNK do on_ignored_nl before do on_ignored_nl UNK on_op on_const on_period UNK on_lparen # # IDEA: can we detect trailer source change ?
on_ignored_nl describe on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg UNK do on_ignored_nl before do on_ignored_nl UNK on_op on_const on_period UNK on_lparen UNK # it "remove the video trailer" do # count = ipad_trailers.count # expect(count).to eq(1) # version.upload_trailer!(nil, "English", 'ipad') # count_after = ipad_trailers.count # expect(count_after).to eq(count - 1) # end # end
on_ignored_nl it on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl expect do on_ignored_nl version on_period upload_screenshot! on_lparen screenshot_path on_comma on_int on_comma on_tstring_beg on_tstring_content # not really sure if we want to enforce that # it "prevents from letting holes in sort_orders" do # expect do # version.upload_screenshot!(screenshot_path, 4, "English", 'iphone4', false) # end.to raise_error "FIXME" # end
on_const on_period UNK on_nl end on_nl on_ignored_nl UNK UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op on_int on_nl allow on_lparen client # arbitrary stub to prevent mock network failures. We override itc_response
on_const on_period UNK on_nl end on_nl on_ignored_nl it on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl UNK on_lparen on_int on_rparen on_nl on_ignored_nl version # arbitrary stub to prevent mock network failures. We override itc_response
on_ignored_nl expect do on_ignored_nl version on_period save! on_nl end on_period to raise_error on_lparen on_const on_op on_const on_op on_const on_rparen on_nl # set to more than should happen
on_ignored_nl expect do on_ignored_nl version on_period save! on_nl end on_period to raise_error on_lparen on_const on_op on_const on_op on_const on_rparen on_nl # set to more than should happen
end on_nl on_ignored_nl describe on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl it on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl on_const on_period UNK on_nl version # it "allows the creation of a new language" do # version.create_languages!(['German', 'English_CA']) # expect(version.name['German']).to eq("yep, that's the name") # expect(version.name['English_CA']).to eq("yep, that's the name") # end
