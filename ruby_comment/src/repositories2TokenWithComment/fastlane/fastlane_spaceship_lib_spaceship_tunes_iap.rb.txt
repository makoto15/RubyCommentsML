UNK UNK application on_nl on_ignored_nl def UNK on_nl attrs on_op UNK UNK on_nl attrs UNK UNK application UNK on_op self # @return (Spaceship::Tunes::Application) A reference to the application
def UNK on_nl attrs on_op UNK UNK on_nl attrs UNK UNK application UNK on_op self on_period application on_nl on_const on_op # @return (Spaceship::Tunes::IAPFamilies) A reference to the familie list
def UNK on_lparen on_label on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_label nil on_comma on_ignored_nl on_label nil on_comma on_ignored_nl on_label nil on_comma # Creates a new In-App-Purchese on App Store Connect # if the In-App-Purchase already exists an exception is raised. Spaceship::TunesClient::ITunesConnectError # @param type (String): The Type of the in-app-purchase (Spaceship::Tunes::IAPType::CONSUMABLE,Spaceship::Tunes::IAPType::NON_CONSUMABLE,Spaceship::Tunes::IAPType::RECURRING,Spaceship::Tunes::IAPType::NON_RENEW_SUBSCRIPTION) # @param versions (Hash): a Hash of the languages # @example: { # 'de-DE': { # name: "Name shown in AppStore", # description: "Description of the In app Purchase" # # } # } # @param reference_name (String): iTC Reference Name # @param product_id (String): A unique ID for your in-app-purchase # @param bundle_id (String): The bundle ID must match the one you used in Xcode. It # @param cleared_for_sale (Boolean): Is this In-App-Purchase Cleared for Sale # @param review_notes (String): Review Notes # @param review_screenshot (String): Path to the screenshot (should be 640x940 PNG) # @param pricing_intervals (Hash): a Hash of the languages # @example: # [ # { # country: "WW", # begin_date: nil, # end_date: nil, # tier: 1 # } # ] # @param family_id (String) Only used on RECURRING purchases, assigns the In-App-Purchase to a specific familie # @param subscription_free_trial (String) Free Trial duration (1w,1m,3m....) # @param subscription_duration (String) 1w,1m..... # @param subscription_price_target (Hash) Only used on RECURRING purchases, used to set the # price of all the countries to be roughly the same as the price calculated from the price # tier and currency given as input. # @example: # { # currency: "EUR", # tier: 2 # }
UNK UNK on_op on_const on_op on_const on_op on_const on_op on_const on_op on_ignored_nl on_lparen UNK on_op UNK on_rparen on_nl product on_op # Update pricing for a recurring subscription.
product on_op UNK on_lparen product_id on_comma UNK on_rparen on_nl UNK on_op on_ignored_nl client on_period UNK on_lparen application on_period apple_id on_comma # There are cases where the product that was just created is not immediately found, # and in order to update its pricing the purchase_id is needed. Therefore polling is done # for 4 times until it is found. If it's not found after 6 tries, a PotentialServerError # exception is raised.
def UNK on_lparen on_label UNK on_rparen on_ignored_nl UNK on_op client on_period UNK on_lparen on_label self on_period application on_period apple_id on_rparen # return all available In-App-Purchase's of current app # this is not paged inside iTC-API so if you have a lot if IAP's (2k+) # it might take some time to load, same as it takes when you load the list via App Store Connect
def UNK on_lparen product_id on_rparen on_ignored_nl UNK on_period UNK UNK on_op product on_op on_ignored_nl UNK product on_period product_id on_op product_id # find a specific product # @param product_id (String) Product Id
def UNK on_nl client on_period UNK on_lparen on_label self on_period application on_period apple_id on_rparen on_nl end on_nl on_ignored_nl def UNK # generate app-specific shared secret (or regenerate if exists)
def UNK on_lparen on_label UNK on_rparen on_ignored_nl UNK on_op client on_period UNK on_lparen on_label self on_period application on_period apple_id on_rparen # retrieve app-specific shared secret # @param create (Boolean) Create new shared secret if does not exist
