attr_accessor on_symbeg key on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg description on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl # [Symbol] the key which is used as command parameters or key in the fastlane tools
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg description on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg default_value on_nl on_ignored_nl # [String] the name of the environment variable, which is only used if no other values were found
attr_accessor on_symbeg description on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg default_value on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl # [String] A description shown to the user
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg default_value on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl # [String] A string of length 1 which is used for the command parameters (e.g. -f)
attr_accessor on_symbeg default_value on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl # the value which is used if there was no given values and no environment values
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg optional on_nl on_ignored_nl # [Boolean] Set if the default value is generated dynamically
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg optional on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl # the value which is used during Swift code generation # if the default_value reads from ENV or a file, or from local credentials, we need # to provide a different default or it might be included in our autogenerated Swift # as a built-in default for the fastlane gem. This is because when we generate the # Swift API at deployment time, it fetches the default_value from the config_items
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg optional on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl # An optional block which is called when a new value is set. # Check value is valid. This could be type checks or if a folder/file exists # You have to raise a specific exception if something goes wrong. Use `user_error!` for the message: UI.user_error!("your message")
attr_accessor on_symbeg optional on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl # [Boolean] is false by default. If set to true, also string values will not be asked to the user
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg deprecated on_nl on_ignored_nl # [Boolean] is false by default. If set to true, type of the parameter will not be validated.
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg deprecated on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl # [Array] array of conflicting option keys(@param key). This allows to resolve conflicts intelligently
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg deprecated on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl # An optional block which is called when options conflict happens
attr_accessor on_symbeg deprecated on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl # [String] Set if the option is deprecated. A deprecated option should be optional and is made optional if the parameter isn't set, and fails otherwise
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl # [Boolean] Set if the variable is sensitive, such as a password or API token, to prevent echoing when prompted for the parameter # If a default value exists, it won't be used during code generation as default values can read from environment variables.
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen on_label nil # [Boolean] Set if the default value should never be used during code generation for Swift # We generate the Swift API at deployment time, and if there is a value that should never be # included in the Fastlane.swift or other autogenerated classes, we need to strip it out. # This includes things like API keys that could be read from ENV[]
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen on_label nil on_comma on_ignored_nl on_label nil on_comma # [Boolean] Set if the variable is to be converted to a shell-escaped String when provided as a Hash or Array # Allows items expected to be strings used in shell arguments to be alternatively provided as a Hash or Array for better readability and auto-escaped for us.
attr_accessor on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen on_label nil on_comma on_ignored_nl on_label nil on_comma on_ignored_nl on_label nil on_comma on_ignored_nl # [Boolean] Set if the variable can be used from shell
def UNK on_lparen on_label nil on_comma on_ignored_nl on_label nil on_comma on_ignored_nl on_label nil on_comma on_ignored_nl on_label nil on_comma on_ignored_nl on_label # Creates a new option # @param key (Symbol) the key which is used as command parameters or key in the fastlane tools # @param env_name (String) the name of the environment variable, which is only used if no other values were found # @param description (String) A description shown to the user # @param short_option (String) A string of length 1 which is used for the command parameters (e.g. -f) # @param default_value the value which is used if there was no given values and no environment values # @param default_value_dynamic (Boolean) Set if the default value is generated dynamically # @param verify_block an optional block which is called when a new value is set. # Check value is valid. This could be type checks or if a folder/file exists # You have to raise a specific exception if something goes wrong. Append .red after the string # @param is_string *DEPRECATED: Use `type` instead* (Boolean) is that parameter a string? Defaults to true. If it's true, the type string will be verified. # @param type (Class) the data type of this config item. Takes precedence over `is_string`. Use `:shell_string` to allow types `String`, `Hash` and `Array` that will be converted to shell-escaped strings # @param skip_type_validation (Boolean) is false by default. If set to true, type of the parameter will not be validated. # @param optional (Boolean) is false by default. If set to true, also string values will not be asked to the user # @param conflicting_options ([]) array of conflicting option keys(@param key). This allows to resolve conflicts intelligently # @param conflict_block an optional block which is called when options conflict happens # @param deprecated (Boolean|String) Set if the option is deprecated. A deprecated option should be optional and is made optional if the parameter isn't set, and fails otherwise # @param sensitive (Boolean) Set if the variable is sensitive, such as a password or API token, to prevent echoing when prompted for the parameter # @param display_in_shell (Boolean) Set if the variable can be used from shell # rubocop:disable Metrics/ParameterLists
optional on_op true if optional on_period nil? on_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen unless optional on_nl on_ignored_nl # deprecated options are automatically optional
description on_op UNK on_lparen description on_comma deprecated on_rparen on_nl end on_nl on_ignored_nl optional on_op false if optional on_period nil? on_nl # deprecated options are marked deprecated in their description
on_ignored_nl on_ivar on_op UNK on_nl on_ignored_nl UNK on_nl end on_nl on_ignored_nl def UNK on_nl if on_ivar on_op on_symbeg UNK on_nl # sometimes we allow multiple types which causes type validation failures, e.g.: export_options in gym
on_ignored_nl def UNK on_nl if on_ivar on_op on_symbeg UNK on_nl on_ivar on_op nil on_nl return on_nl end on_nl on_ignored_nl if # rubocop:enable Metrics/ParameterLists
def UNK on_nl if on_ivar on_op on_symbeg UNK on_nl on_ivar on_op nil on_nl return on_nl end on_nl on_ignored_nl if on_ivar # if code_gen_default_value is nil, use the default value if it isn't a `code_gen_sensitive` value
if on_ivar on_op on_symbeg UNK on_nl on_ivar on_op nil on_nl return on_nl end on_nl on_ignored_nl if on_ivar on_period nil? on_nl # we don't support default values for procs
if value on_period UNK on_op on_const on_op value on_period UNK on_op on_const on_nl on_const on_period user_error! on_lparen on_tstring_beg on_tstring_content on_embexpr_beg # We need to explicitly test against Fastlane::Boolean, TrueClass/FalseClass
def UNK on_lparen value on_rparen on_ignored_nl return true if value on_period nil? on_nl on_ignored_nl if data_type on_op on_const on_op on_const # Make sure, the value is valid (based on the verify block) # Raises an exception if the value is invalid
return true if value on_period nil? on_nl on_ignored_nl if data_type on_op on_const on_op on_const on_nl UNK on_lparen value on_rparen on_nl # we also allow nil values, which do not have to be verified.
if data_type on_op on_const on_op on_const on_nl UNK on_lparen value on_rparen on_nl UNK on_ignored_nl UNK on_lparen value on_rparen on_nl end # Verify that value is the type that we're expecting, if we are expecting a type
def UNK on_lparen value on_rparen on_ignored_nl return nil if value on_period nil? on_nl on_ignored_nl if data_type on_op on_const on_nl return # rubocop:disable Metrics/PerceivedComplexity # Returns an updated value type (if necessary)
if UNK on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_tstring_end on_period UNK on_lparen value on_rparen on_nl return true on_nl elsif # Special treatment if the user specified true, false or YES, NO # There is no boolean type, so we just do it here
on_ignored_nl return value end on_nl on_ignored_nl def data_type on_nl if on_ivar on_period kind_of? on_lparen on_const on_rparen on_nl nil on_nl elsif # rubocop:enable Metrics/PerceivedComplexity
end on_nl on_ignored_nl def data_type on_nl if on_ivar on_period kind_of? on_lparen on_const on_rparen on_nl nil on_nl elsif on_ivar on_nl on_ivar # fallback to not doing anything
def data_type on_nl if on_ivar on_period kind_of? on_lparen on_const on_rparen on_nl nil on_nl elsif on_ivar on_nl on_ivar on_nl UNK on_ignored_nl # Determines the defined data type of this ConfigItem
def UNK on_nl data_type on_op on_const on_nl end on_nl on_ignored_nl def UNK on_nl return on_ivar on_nl end on_nl on_ignored_nl def # Replaces the attr_accessor, but maintains the same interface
def UNK on_nl return on_ivar on_nl end on_nl on_ignored_nl def to_s on_nl UNK on_ivar on_comma on_ivar UNK on_period UNK on_lparen # it's preferred to use self.string? In most cases, except in commander_generator.rb, cause... reasons
