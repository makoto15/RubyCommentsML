UNK on_const on_nl def self on_period UNK on_nl config on_op on_const on_period config on_nl on_ignored_nl config on_period UNK on_lparen on_const # This class detects all kinds of default values
def self on_period UNK on_nl config on_op on_const on_period config on_nl on_ignored_nl config on_period UNK on_lparen on_const on_period UNK on_rparen # This is needed as these are more complex default values # Returns the finished config object
config on_period UNK on_lparen on_const on_period UNK on_rparen on_nl on_ignored_nl UNK on_nl on_ignored_nl on_const on_op on_const on_period UNK on_lparen config # First, try loading the Scanfile from the current directory
on_const on_op on_const on_period UNK on_lparen config on_rparen on_nl on_const on_period project on_op on_const on_op on_const on_period new on_lparen config # Detect the project
UNK on_op on_const on_period UNK on_lparen on_const on_period UNK on_rparen on_nl on_const on_period UNK on_lparen on_const on_period UNK on_lparen on_tstring_beg # Go into the project's folder, as there might be a Snapfile there
if devices on_period count on_op on_int on_nl UNK on_lparen devices on_comma on_tstring_beg on_tstring_end on_comma on_tstring_beg on_tstring_end on_comma on_tstring_beg on_tstring_end on_comma # important to use Array(nil) for when the value is nil
UNK on_lparen devices on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma UNK on_rparen on_nl UNK # An iPhone 5s is a reasonably small and useful default for tests
config_value on_op config_value on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen UNK config_value on_period UNK on_lparen on_const on_rparen on_nl on_const on_period # splitting on comma allows us to support comma-separated lists of values # from the command line, even though the ConfigItem is not defined as an # Array type
UNK on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma UNK on_rparen on_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_embexpr_beg # => /Users/.../Library/Developer/Xcode/DerivedData/app-bqrfaojicpsqnoglloisfftjhksc/Build/Products/Release-iphoneos # We got 3 folders up to point to ".../DerivedData/app-[random_chars]/"
end on_nl end on_nl end on_nl on_ignored_nl def self on_period UNK on_nl UNK on_tstring_content UNK on_nl end on_nl on_ignored_nl def # this will show an error message in the detect_simulator method
UNK on_tstring_content UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen devices on_comma UNK on_comma UNK on_comma UNK on_comma # %r{ # \s # a whitespace character # (?= # followed by -- using lookahead # \( # open parenthesis # [\d\.]+ # our version -- one or more digits or full stops # \) # close parenthesis # $ # end of line # ) # end of lookahead # }
on_ignored_nl on_ignored_nl UNK on_op UNK do on_ignored_nl UNK on_op devices on_period UNK on_lparen on_ignored_nl on_const on_period new on_rparen do on_op # At this point we have all simulators for the given deployment target (or higher)
on_ignored_nl UNK on_op UNK do on_ignored_nl UNK on_op devices on_period UNK on_lparen on_ignored_nl on_const on_period new on_rparen do on_op UNK # We create 2 lambdas, which we iterate over later on # If the first lambda `matches` found a simulator to use # we'll never call the second one
on_rparen do on_op UNK on_comma UNK on_op on_ignored_nl pieces on_op UNK on_period UNK on_lparen UNK on_rparen on_nl on_ignored_nl UNK on_op # of simulators
UNK pieces on_period count on_op on_int on_nl simulators on_ignored_nl on_period UNK on_lparen on_op UNK on_rparen on_ignored_nl on_ignored_nl on_period UNK on_period # empty array
on_period UNK UNK on_op sim on_op on_const on_op on_const on_period new on_lparen sim on_period UNK on_rparen on_rbrace on_ignored_nl on_period UNK # more efficient, because `simctl` prints higher versions first
UNK on_op pieces on_lbracket on_int on_rbracket on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_end on_rparen on_nl UNK on_op UNK # pieces.count == 2 -- mathematically, because of the 'end of line' part of our regular expression
on_period UNK UNK on_op sim on_op on_const on_op on_const on_period new on_lparen sim on_period UNK on_rparen on_rbrace on_ignored_nl on_period UNK # more efficient, because `simctl` prints higher versions first
if UNK on_nl on_const on_period devices on_op on_lbracket UNK on_comma UNK on_rbracket on_period UNK on_period UNK UNK on_op UNK on_op # grab the first unempty evaluated array
if on_const on_period devices on_op on_const on_period devices on_period count on_op on_int on_nl on_const on_period config on_lbracket on_symbeg UNK on_rbracket # building up the destination now
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl on_const on_period config on_lbracket on_symbeg deployment_target_version on_rbracket on_op on_const on_period project on_period # get deployment target version
