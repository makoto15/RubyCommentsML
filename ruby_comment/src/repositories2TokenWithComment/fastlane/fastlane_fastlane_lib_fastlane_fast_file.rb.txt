UNK on_symbeg runner on_nl on_ignored_nl UNK on_symbeg current_platform on_nl on_ignored_nl on_const on_op on_const on_op on_const on_op on_const on_nl on_ignored_nl def # Stores all relevant information from the currently running process
UNK on_symbeg current_platform on_nl on_ignored_nl on_const on_op on_const on_op on_const on_op on_const on_nl on_ignored_nl def UNK on_lparen path on_op nil # the platform in which we're currently in when parsing the Fastfile # This is used to identify the platform in which the lane is in
def UNK on_lparen path on_op nil on_rparen on_ignored_nl return unless on_lparen path on_op on_tstring_beg on_tstring_end on_rparen on_period UNK on_op on_int # @return The runner which can be executed to trigger the given actions
if UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content # From https://github.com/orta/danger/blob/master/lib/danger/Dangerfile.rb
on_ignored_nl UNK on_ignored_nl UNK on_lparen gem_name on_rparen on_nl UNK on_const on_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_embexpr_beg gem_name on_embexpr_end # these are local gems
UNK on_op path on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_op on_const on_period new on_lparen path on_rparen on_period UNK on_lparen on_const # context: fastlane subfolder # create nice path that we want to print in case of some problem
on_ignored_nl UNK on_lparen UNK on_comma UNK on_comma UNK on_rparen UNK on_const on_op UNK on_nl UNK on_op UNK on_period UNK on_period # We have to use #get_binding method, because some test files defines method called `path` (for example SwitcherFastfile) # and local variable has higher priority, so it causes to remove content of original Fastfile for example. With #get_binding # is this always clear and safe to declare any local variables we want, because the eval function uses the instance scope # instead of local.
UNK on_lparen UNK on_comma UNK on_comma UNK on_rparen UNK on_const on_op UNK on_nl UNK on_op UNK on_period UNK on_period UNK # rubocop:disable Security/Eval
UNK on_const on_op UNK on_nl UNK on_op UNK on_period UNK on_period UNK on_lparen UNK on_embexpr_beg on_const on_period UNK on_lparen UNK # using eval is ok for this case # rubocop:enable Security/Eval
on_ignored_nl def UNK on_lparen lane_name on_comma on_op block on_rparen on_ignored_nl on_const on_period user_error! on_lparen on_tstring_beg on_tstring_content on_embexpr_beg lane_name on_embexpr_end on_tstring_content ##################################################### # @!group DSL #####################################################
def UNK on_lparen lane_name on_comma on_op block on_rparen on_ignored_nl on_const on_period user_error! on_lparen on_tstring_beg on_tstring_content on_embexpr_beg lane_name on_embexpr_end on_tstring_content on_tstring_end # User defines a new lane
end on_nl on_ignored_nl def UNK on_lparen lane_name on_comma on_op block on_rparen on_ignored_nl on_const on_period user_error! on_lparen on_tstring_beg on_tstring_content on_embexpr_beg lane_name # reset the collected description again for the next lane
def UNK on_lparen lane_name on_comma on_op block on_rparen on_ignored_nl on_const on_period user_error! on_lparen on_tstring_beg on_tstring_content on_embexpr_beg lane_name on_embexpr_end on_tstring_content on_tstring_end # User defines a new private lane, which can't be called from the CLI
end on_nl on_ignored_nl def UNK on_lparen lane_name on_comma on_op block on_rparen on_ignored_nl on_const on_period user_error! on_lparen on_tstring_beg on_tstring_content on_embexpr_beg lane_name # reset the collected description again for the next lane
def UNK on_lparen lane_name on_comma on_op block on_rparen on_ignored_nl on_const on_period user_error! on_lparen on_tstring_beg on_tstring_content on_embexpr_beg lane_name on_embexpr_end on_tstring_content on_tstring_end # User defines a lane that can overwrite existing lanes. Useful when importing a Fastfile
end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_const on_period UNK on_lparen UNK on_rparen on_nl on_ignored_nl self on_period current_platform # reset the collected description again for the next lane
def UNK on_lparen UNK on_rparen on_ignored_nl on_const on_period UNK on_lparen UNK on_rparen on_nl on_ignored_nl self on_period current_platform on_op UNK on_nl # User defines a platform block
def UNK on_lparen on_op block on_rparen on_ignored_nl on_ivar on_period UNK on_lparen on_ivar on_comma block on_rparen on_nl end on_nl on_ignored_nl def # Is executed before each test run
def UNK on_lparen on_op block on_rparen on_ignored_nl on_ivar on_period UNK on_lparen on_ivar on_comma block on_rparen on_nl end on_nl on_ignored_nl def # Is executed before each lane
def UNK on_lparen on_op block on_rparen on_ignored_nl on_ivar on_period UNK on_lparen on_ivar on_comma block on_rparen on_nl end on_nl on_ignored_nl def # Is executed after each test run
def UNK on_lparen on_op block on_rparen on_ignored_nl on_ivar on_period UNK on_lparen on_ivar on_comma block on_rparen on_nl end on_nl on_ignored_nl def # Is executed before each lane
def UNK on_lparen on_op block on_rparen on_ignored_nl on_ivar on_period UNK on_lparen on_ivar on_comma block on_rparen on_nl end on_nl on_ignored_nl def # Is executed if an error occurred during fastlane execution
def UNK on_lparen UNK on_comma on_op UNK on_comma on_op UNK on_rparen on_ignored_nl self on_period runner on_period UNK on_lparen UNK on_comma # Is used to look if the method is implemented as an action
on_ignored_nl def UNK on_lparen key on_rparen on_ignored_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen unless key on_nl on_ignored_nl return ##################################################### # @!group Other things #####################################################
def UNK on_lparen key on_rparen on_ignored_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen unless key on_nl on_ignored_nl return UNK # Is the given key a platform block or a lane?
UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_op on_const on_period UNK on_lparen on_label on_tstring_beg on_tstring_content on_tstring_end on_comma on_label on_lbrace on_rbrace on_rparen # The user ran `fastlane update`, instead of `fastlane update_fastlane` # We're gonna be nice and understand what the user is trying to do
def sh on_lparen on_op UNK on_comma on_op UNK on_rparen on_ignored_nl if UNK on_period UNK on_op on_int on_op UNK on_period UNK # Execute shell command # Accepts arguments with with and without the command named keyword so that sh # behaves like other actions with named keywords # https://github.com/fastlane/fastlane/issues/14930 # # Example: # sh("ls") # sh("ls", log: false) # sh(command: "ls") # sh(command: "ls", step_name: "listing the files") # sh(command: "ls", log: false)
if UNK on_period UNK on_op on_int on_op UNK on_period UNK on_period UNK on_lparen on_const on_rparen on_nl UNK on_op UNK on_period # First accepts hash (or named keywords) like other actions # Otherwise uses sh method that doesn't have an interface like an action
path on_op on_const on_period join on_lparen on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_ivar on_rparen on_comma path on_rparen on_nl # unless an absolute path
UNK on_op on_const on_period join on_lparen on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma path on_rparen on_comma on_tstring_beg on_tstring_content on_tstring_end # First check if there are local actions to import in the same directory as the Fastfile
def UNK on_lparen on_label nil on_comma on_label on_tstring_beg on_tstring_content on_tstring_end on_comma on_label on_tstring_beg on_tstring_content on_tstring_end on_comma on_label nil on_comma on_label # @param url [String] The git URL to clone the repository from # @param branch [String] The branch to checkout in the repository # @param path [String] The path to the Fastfile # @param version [String, Array] Version requirement for repo tags
UNK on_op UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period UNK on_nl UNK on_op UNK on_nl on_ignored_nl on_const on_period # Checkout the repo
UNK on_op path on_period UNK on_lparen on_const on_op on_const on_rparen on_lbracket on_int on_op on_op on_int on_rbracket on_nl UNK on_op on_tstring_beg # We also want to check out all the local actions of this fastlane setup
end on_nl on_ignored_nl return_value on_op nil on_nl if UNK on_period UNK on_nl return_value on_op on_lbracket UNK on_lparen on_const on_period join # We don't care about a failure here, as local actions are optional
on_ignored_nl def UNK on_lparen on_label nil on_rparen on_ignored_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_period UNK ##################################################### # @!group Versioning helpers #####################################################
UNK on_op on_const on_period sh on_lparen on_tstring_beg on_tstring_content on_embexpr_beg UNK on_period shellescape on_embexpr_end on_tstring_content on_tstring_end on_rparen on_nl UNK on_op UNK # Fetch all possible tags
return UNK on_ignored_nl on_period UNK on_lbrace on_op UNK on_op on_const on_op on_const on_period UNK on_lparen UNK on_rparen on_rbrace on_ignored_nl on_period # Sort tags based on their version number
on_ignored_nl def UNK on_lparen value on_rparen on_ignored_nl value on_op UNK on_nl on_ignored_nl value on_op on_lbrace on_label value on_rbrace if value ##################################################### # @!group Overwriting Ruby methods #####################################################
def UNK on_lparen value on_rparen on_ignored_nl value on_op UNK on_nl on_ignored_nl value on_op on_lbrace on_label value on_rbrace if value on_period # Speak out loud
value on_op UNK on_nl on_ignored_nl value on_op on_lbrace on_label value on_rbrace if value on_period UNK on_lparen on_const on_rparen on_op value # Overwrite this, since there is already a 'say' method defined in the Ruby standard library
value on_op UNK if UNK on_nl on_ignored_nl UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl return_value on_op on_const on_op on_const on_op # Overwrite this, since there is already a 'puts' method defined in the Ruby standard library
self on_period runner on_period UNK on_lparen on_symbeg UNK on_comma on_lbracket UNK on_rbracket on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen # Overwrite this, since there is already a 'test' method defined in the Ruby standard library
