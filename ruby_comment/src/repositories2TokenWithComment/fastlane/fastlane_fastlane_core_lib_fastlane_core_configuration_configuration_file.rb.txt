UNK on_const on_nl UNK on_const on_op on_const on_nl UNK UNK UNK on_nl UNK UNK UNK on_nl on_ignored_nl def UNK on_lparen # Responsible for loading configuration files
UNK UNK UNK on_nl on_ignored_nl UNK UNK options on_nl on_ignored_nl UNK UNK configfile_path on_nl on_ignored_nl def UNK on_lparen UNK on_comma # Available keys from the config file
UNK UNK options on_nl on_ignored_nl UNK UNK configfile_path on_nl on_ignored_nl def UNK on_lparen UNK on_comma path on_comma UNK on_comma UNK # After loading, contains all the found options
UNK UNK configfile_path on_nl on_ignored_nl def UNK on_lparen UNK on_comma path on_comma UNK on_comma UNK on_op UNK on_rparen on_ignored_nl self # Path to the config file represented by the current object
def UNK on_lparen UNK on_comma path on_comma UNK on_comma UNK on_op UNK on_rparen on_ignored_nl self on_period UNK on_op UNK on_period # @param config [FastlaneCore::Configuration] is used to gather required information about the configuration # @param path [String] The path to the configuration file to use
if UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content # From https://github.com/orta/danger/blob/master/lib/danger/Dangerfile.rb
UNK on_lparen UNK on_rparen on_ignored_nl UNK UNK UNK UNK on_const on_op UNK on_nl UNK on_op UNK on_period UNK on_period UNK # rubocop:disable Security/Eval
on_ignored_nl UNK UNK UNK UNK on_const on_op UNK on_nl UNK on_op UNK on_period UNK on_period UNK on_lparen UNK on_tstring_content UNK # this is okay in this case # rubocop:enable Security/Eval
UNK on_const on_op UNK on_nl UNK on_op UNK on_period UNK on_period UNK on_lparen UNK on_tstring_content UNK on_rparen on_lbracket UNK on_rbracket # only on success
if self on_period UNK on_period UNK on_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_embexpr_beg self on_period configfile_path on_embexpr_end on_tstring_content on_tstring_end # Show message when self.modified_values is empty
def UNK on_nl on_ivar on_op UNK UNK on_nl end on_nl on_ignored_nl def UNK on_lparen method_sym on_comma on_op UNK on_comma on_op # This is used to display only the values that have changed in the summary table
UNK if self on_period options on_period UNK on_lparen method_sym on_rparen on_nl on_ignored_nl if self on_period UNK on_period UNK on_lparen method_sym # First, check if the key is actually available
UNK on_op on_lbracket on_tstring_beg on_tstring_content on_embexpr_beg self on_period configfile_path on_embexpr_end on_tstring_content on_tstring_end on_rbracket on_nl UNK on_op on_tstring_beg on_tstring_content on_embexpr_beg method_sym # The config file has something like this: # # clean # # without specifying a value for the method call # or a block. This is most likely a user error # So we tell the user that they can provide a value
UNK on_ignored_nl value on_op value on_period UNK on_nl UNK on_const on_nl end on_nl self on_period options on_lbracket method_sym on_rbracket on_op # to support frozen strings (e.g. ENV variables) too # we have to dupe the value # in < Ruby 2.4.0 `.dup` is not support by boolean values # and there is no good way to check if a class actually # responds to `dup`, so we have to rescue the exception
end on_nl self on_period options on_lbracket method_sym on_rbracket on_op value on_nl UNK on_ignored_nl if on_ivar on_nl on_ivar on_period UNK on_lparen # Nothing specific to do here, if we can't dupe, we just # deal with it (boolean values can't be from env variables anyway)
if on_ivar on_nl on_ivar on_period UNK on_lparen method_sym on_comma UNK on_comma UNK on_rparen on_nl UNK on_ignored_nl self on_period options on_lbracket # We can't set this value, maybe the tool using this configuration system has its own # way of handling this block, as this might be a special block (e.g. ipa block) that's only # executed on demand
end on_nl end on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl if on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket # important, since this will raise a good exception for free
def UNK on_lparen UNK on_rparen on_ignored_nl if on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op UNK on_period UNK on_nl UNK UNK # Override configuration for a specific lane. If received lane name does not # match the lane name available as environment variable, no changes will # be applied. # # @param lane_name Symbol representing a lane name. # @yield Block to run for overriding configuration values. #
def UNK on_lparen UNK on_rparen on_ignored_nl if on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op UNK on_period UNK on_nl UNK UNK # Override configuration for a specific platform. If received platform name # does not match the platform name available as environment variable, no # changes will be applied. # # @param platform_name Symbol representing a platform name. # @yield Block to run for overriding configuration values. #
def UNK on_nl UNK on_op self on_period options on_period UNK on_nl self on_period options on_op UNK UNK on_nl UNK on_ignored_nl # Allows a configuration block (for_lane, for_platform) to get a clean # configuration for applying values, so that values can be overridden # (once) again. Those values are then merged into the surrounding # configuration as the block completes
