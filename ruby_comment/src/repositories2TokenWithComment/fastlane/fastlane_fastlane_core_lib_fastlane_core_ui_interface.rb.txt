UNK on_const on_nl on_ignored_nl def UNK on_lparen _message on_rparen on_ignored_nl not_implemented on_lparen __method__ on_rparen on_nl end on_nl on_ignored_nl def UNK # Abstract super class
on_ignored_nl def UNK on_lparen _message on_rparen on_ignored_nl not_implemented on_lparen __method__ on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen _message on_rparen ##################################################### # @!group Messaging: show text to the user #####################################################
def UNK on_lparen _message on_rparen on_ignored_nl not_implemented on_lparen __method__ on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen _message on_rparen on_ignored_nl # Level Error: Can be used to show additional error # information before actually raising an exception # or can be used to just show an error from which # fastlane can recover (much magic) # # By default those messages are shown in red
def UNK on_lparen _message on_rparen on_ignored_nl not_implemented on_lparen __method__ on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen _message on_rparen on_ignored_nl # Level Important: Can be used to show warnings to the user # not necessarily negative, but something the user should # be aware of. # # By default those messages are shown in yellow
def UNK on_lparen _message on_rparen on_ignored_nl not_implemented on_lparen __method__ on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen _message on_rparen on_ignored_nl # Level Success: Show that something was successful # # By default those messages are shown in green
def UNK on_lparen _message on_rparen on_ignored_nl not_implemented on_lparen __method__ on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen _message on_rparen on_ignored_nl # Level Message: Show a neutral message to the user # # By default those messages shown in white/black
def UNK on_lparen _message on_rparen on_ignored_nl not_implemented on_lparen __method__ on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen _message on_rparen on_ignored_nl # Level Deprecated: Show that a particular function is deprecated # # By default those messages shown in strong blue
def UNK on_lparen _message on_rparen on_ignored_nl not_implemented on_lparen __method__ on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen _message on_rparen on_ignored_nl # Level Command: Print out a terminal command that is being # executed. # # By default those messages shown in cyan
def UNK on_lparen _message on_rparen on_ignored_nl not_implemented on_lparen __method__ on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen _message on_rparen on_ignored_nl # Level Command Output: Print the output of a command with # this method # # By default those messages shown in magenta
def UNK on_lparen _message on_rparen on_ignored_nl not_implemented on_lparen __method__ on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen _message on_rparen on_ignored_nl # Level Verbose: Print out additional information for the # users that are interested. Will only be printed when # FastlaneCore::Globals.verbose? = true # # By default those messages are shown in white
def UNK on_lparen _message on_rparen on_ignored_nl not_implemented on_lparen __method__ on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_comma UNK # Print a header = a text in a box # use this if this message is really important
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl not_implemented on_lparen __method__ on_rparen on_nl end on_nl on_ignored_nl on_ignored_nl def UNK on_nl # Print lines of content around specific line where # failed to parse. # # This message will be shown as error
on_ignored_nl def UNK on_nl not_implemented on_lparen __method__ on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen _message on_rparen on_ignored_nl not_implemented on_lparen ##################################################### # @!group Errors: Inputs #####################################################
def UNK on_nl not_implemented on_lparen __method__ on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen _message on_rparen on_ignored_nl not_implemented on_lparen __method__ # Is is possible to ask the user questions?
def UNK on_lparen _message on_rparen on_ignored_nl not_implemented on_lparen __method__ on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen _message on_rparen on_ignored_nl # get a standard text input (single line)
def UNK on_lparen _message on_rparen on_ignored_nl not_implemented on_lparen __method__ on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen _message on_comma UNK # A simple yes or no question
def UNK on_lparen _message on_comma UNK on_rparen on_ignored_nl not_implemented on_lparen __method__ on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen _message # Let the user select one out of x items # return value is the value of the option the user chose
def UNK on_lparen _message on_rparen on_ignored_nl not_implemented on_lparen __method__ on_rparen on_nl end on_nl on_ignored_nl on_ignored_nl def UNK on_lparen UNK on_rparen # Password input for the user, text field shouldn't show # plain text
on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl raise on_const on_period new on_comma UNK on_period UNK on_nl end on_nl on_ignored_nl def ##################################################### # @!group Abort helper methods #####################################################
def UNK on_lparen UNK on_rparen on_ignored_nl raise on_const on_period new on_comma UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK # Pass an exception to this method to exit the program # using the given exception # Use this method instead of user_error! if this error is # unexpected, e.g. an invalid server response that shouldn't happen
def UNK on_lparen error_message on_comma options UNK UNK UNK on_rparen on_ignored_nl raise on_const on_period new on_lparen options on_rparen on_comma error_message # Use this method to exit the program because of an user error # e.g. app doesn't exist on the given Developer Account # or invalid user credentials # or scan tests fail # This will show the error message, but doesn't show the full # stack trace # Basically this should be used when you actively catch the error # and want to show a nice error message to the user
def UNK on_lparen error_message on_comma options UNK UNK UNK on_rparen on_ignored_nl raise on_const on_period new on_lparen options on_rparen on_comma error_message # Use this method to exit the program because of a shell command # failure -- the command returned a non-zero response. This does # not specify the nature of the error. The error might be from a # programming error, a user error, or an expected error because # the user of the Fastfile doesn't have their environment set up # properly. Because of this, when these errors occur, it means # that the caller of the shell command did not adequate error # handling and the caller error handling should be improved.
def UNK on_lparen error_message on_comma options UNK UNK UNK on_rparen on_ignored_nl raise on_const on_period new on_lparen options on_rparen on_comma error_message # Use this method to exit the program because of a build failure # that's caused by the source code of the user. Example for this # is that gym will fail when the code doesn't compile or because # settings for the project are incorrect. # By using this method we'll have more accurate results about # fastlane failures
def UNK on_lparen error_message on_rparen on_ignored_nl raise on_const on_period new on_comma error_message on_nl end on_nl on_ignored_nl def UNK on_lparen UNK # Use this method to exit the program because of a test failure # that's caused by the source code of the user. Example for this # is that scan will fail when the tests fail. # By using this method we'll have more accurate results about # fastlane failures
def UNK on_lparen UNK on_rparen on_ignored_nl raise on_const on_period new on_comma UNK on_nl end on_nl on_ignored_nl def not_implemented on_lparen UNK # Use this method to exit the program because of terminal state # that is neither the fault of fastlane, nor a problem with the # user's input. Using this method instead of user_error! will # avoid tracking this outcome as a fastlane failure. # # e.g. tests ran successfully, but no screenshots were found # # This will show the message, but hide the full stack trace.
def not_implemented on_lparen UNK on_rparen on_ignored_nl UNK UNK on_tstring_content UNK on_nl on_const on_period UNK on_lparen UNK on_tstring_content UNK UNK UNK ##################################################### # @!group Helpers #####################################################
