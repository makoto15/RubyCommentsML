UNK on_const on_nl def self on_period UNK on_lparen key on_rparen on_ignored_nl UNK on_ignored_nl UNK self on_period UNK on_period data on_lbracket # Access the content of the app file (e.g. app identifier and Apple ID)
UNK on_ignored_nl UNK self on_period UNK on_period data on_lbracket key on_rbracket on_nl UNK on_op UNK on_nl puts on_lparen UNK on_period # We need to load the file every time we call this method # to support the `for_lane` keyword
UNK on_op on_const on_period UNK on_lparen path on_rparen on_nl on_const on_period UNK on_lparen on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end # it might not exist, we still want to use the default values
if UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl puts on_lparen on_tstring_beg on_tstring_content on_embexpr_beg on_const # From https://github.com/orta/danger/blob/master/lib/danger/danger_core/dangerfile.rb
UNK on_lparen UNK on_rparen on_nl on_ignored_nl UNK on_lparen UNK UNK on_rparen if on_const on_op on_const on_period UNK on_nl end on_nl # rubocop:disable Security/Eval
on_ignored_nl UNK on_lparen UNK UNK on_rparen if on_const on_op on_const on_period UNK on_nl end on_nl end on_nl on_ignored_nl UNK on_nl # rubocop:enable Security/Eval
on_ignored_nl puts on_lparen on_tstring_beg on_tstring_content on_embexpr_beg path on_embexpr_end on_tstring_content on_tstring_end on_period UNK on_rparen on_nl on_ignored_nl self on_period data on_period UNK # self.class.already_printed_debug_information is a hash, we use to detect if we already printed this data # this is necessary, as on the course of a fastlane run, the values might change, e.g. when using # the `for_lane` keyword.
on_ignored_nl def UNK on_lparen on_op args on_comma on_op block on_rparen on_ignored_nl setter on_lparen on_symbeg UNK on_comma on_op args on_comma on_op # Setters
def UNK on_lparen on_op args on_comma on_op block on_rparen on_ignored_nl setter on_lparen on_symbeg UNK on_comma on_op args on_comma on_op block # iOS
def UNK on_lparen on_op args on_comma on_op block on_rparen on_ignored_nl setter on_lparen on_symbeg UNK on_comma on_op args on_comma on_op block # Developer Portal
def UNK on_lparen on_op args on_comma on_op block on_rparen on_ignored_nl setter on_lparen on_symbeg UNK on_comma on_op args on_comma on_op block # App Store Connect
def UNK on_lparen on_op args on_comma on_op block on_rparen on_ignored_nl setter on_lparen on_symbeg UNK on_comma on_op args on_comma on_op block # Android
def UNK on_lparen lane_name on_rparen on_ignored_nl if lane_name on_period to_s on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period UNK on_op # Override Appfile configuration for a specific lane. # # lane_name - Symbol representing a lane name. (Can be either :name, 'name' or 'platform name') # block - Block to execute to override configuration values. # # Discussion If received lane name does not match the lane name available as environment variable, no changes will # be applied.
puts on_lparen on_tstring_beg on_tstring_content on_embexpr_beg lane_name on_embexpr_end on_tstring_content on_tstring_end on_period UNK on_rparen on_nl puts on_lparen on_tstring_beg on_tstring_content on_tstring_end on_period UNK # That's the legacy syntax 'platform name'
end on_nl on_ignored_nl if on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op lane_name on_period to_s on_nl UNK on_nl end on_nl end # the lane name will be verified below
def UNK on_lparen UNK on_rparen on_ignored_nl if on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op UNK on_period to_s on_nl UNK on_nl # Override Appfile configuration for a specific platform. # # platform_name - Symbol representing a platform name. # block - Block to execute to override configuration values. # # Discussion If received platform name does not match the platform name available as environment variable, no changes will # be applied.
