UNK UNK on_period UNK on_lparen on_op command on_comma on_label true on_comma on_label UNK on_comma on_op UNK on_rparen on_ignored_nl UNK on_lparen # Execute a shell command # This method will output the string and execute it # Just an alias for sh_no_action # When running this in tests, it will return the actual command instead of executing it # @param log [Boolean] should fastlane print out the executed command # @param error_callback [Block] a callback invoked with the command output if there is a non-zero exit status
UNK UNK on_period UNK on_lparen on_op command on_comma on_label true on_comma on_label true on_comma on_label UNK on_rparen on_ignored_nl UNK on_op # @param command The command to be executed (variadic) # @param print_command [Boolean] Should we print the command that's being executed # @param print_command_output [Boolean] Should we print the command output during execution # @param error_callback [Block] A block that's called if the command exits with a non-zero status # @yield [status, result, cmd] The return status of the command, all output from the command and an equivalent shell command # @yieldparam [Process::Status] status A Process::Status indicating the status of the completed command # @yieldparam [String] result The complete output to stdout and stderr of the completed command # @yieldparam [String] cmd A shell command equivalent to the arguments passed # rubocop: disable Metrics/PerceivedComplexity
UNK on_op UNK on_const on_period UNK on_comma on_const on_period UNK UNK on_nl on_const on_period UNK on_op on_const on_op on_const on_nl # Set the encoding first, the user might have set it wrong
command on_op UNK command on_period first on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen UNK if command on_period UNK on_op UNK # Workaround to support previous Fastlane syntax. # This has some limitations. For example, it requires the caller to shell escape # everything because of usages like ["ls -la", "/tmp"] instead of ["ls", "-la", "/tmp"].
on_const on_period UNK on_lparen on_op command on_rparen UNK on_op UNK on_comma UNK on_comma UNK on_op on_ignored_nl UNK on_period UNK on_op # The argument list is passed directly to Open3.popen2e, which # handles the variadic argument list in the same way as Kernel#spawn. # (http://ruby-doc.org/core-2.4.2/Kernel.html#method-i-spawn) or # Process.spawn (http://ruby-doc.org/core-2.4.2/Process.html#method-c-spawn). # # sh "ls -la /Applications/Xcode\ 7.3.1.app" # sh "ls", "-la", "/Applications/Xcode 7.3.1.app" # sh({ "FOO" => "Hello" }, "echo $FOO")
if exit_status on_period UNK on_op UNK on_nl UNK on_op if UNK on_nl on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_content on_embexpr_beg exit_status # Checking Process::Status#exitstatus instead of #success? makes for more # testable code. (Tests mock exitstatus only.) This is also consistent # with previous implementations of sh and... probably portable to all # relevant platforms.
UNK on_op UNK on_period UNK on_lparen result on_rparen on_nl UNK on_ignored_nl on_const on_period UNK on_lparen UNK on_rparen on_nl end on_nl # block notified below, on success or failure
end on_nl on_ignored_nl if UNK on_nl UNK UNK on_lparen exit_status on_op UNK on_comma result on_comma UNK on_rparen on_nl end on_nl # only for the tests
UNK UNK on_lparen exit_status on_op UNK on_comma result on_comma UNK on_rparen on_nl end on_nl result on_nl UNK on_op UNK on_nl # Avoid yielding nil in tests. $? will be meaningless, but calls to # it will not crash. There is no Process::Status.new. The alternative # is to move this inside the sh_enabled? check and not yield in tests.
on_ignored_nl UNK UNK on_period UNK on_lparen on_op args on_rparen on_ignored_nl UNK on_const on_comma on_tstring_beg on_tstring_content on_tstring_end UNK args on_period UNK # rubocop: enable Metrics/PerceivedComplexity
UNK UNK on_period UNK on_lparen on_op args on_rparen on_ignored_nl UNK on_const on_comma on_tstring_beg on_tstring_content on_tstring_end UNK args on_period UNK on_op # Used to produce a shell command string from a list of arguments that may # be passed to methods such as Kernel#system, Kernel#spawn and Open3.popen2e # in order to print the command to the terminal. The same *args are passed # directly to a system call (Open3.popen2e). This interpretation is not # used when executing a command. # # @param args Any number of arguments used to construct a command # @raise [ArgumentError] If no arguments passed # @return [String] A shell command representing the arguments passed in
if args on_period first on_period UNK on_lparen on_const on_rparen on_nl command on_op args on_period UNK on_period UNK UNK on_op UNK # Optional initial environment Hash
if args on_period first on_period UNK on_lparen on_const on_rparen on_nl command on_op args on_period UNK on_period first on_period UNK on_op # Support [ "/usr/local/bin/foo", "foo" ], "-x", ...
