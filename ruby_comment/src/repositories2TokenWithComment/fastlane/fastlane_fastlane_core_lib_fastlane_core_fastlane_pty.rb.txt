on_ignored_nl UNK on_const on_nl UNK UNK on_nl UNK on_op UNK on_nl end on_nl end on_nl on_ignored_nl UNK on_const on_nl UNK # Source: Mix of https://github.com/fastlane/fastlane/pull/7202/files, # https://github.com/fastlane/fastlane/pull/11384#issuecomment-356084518 and # https://github.com/DragonBox/u3d/blob/59e471ad78ac00cb629f479dbe386c5ad2dc5075/lib/u3d_core/command_runner.rb#L88-L96
UNK on_ignored_nl UNK on_ignored_nl on_const on_period UNK on_lparen UNK on_rparen on_nl UNK on_const on_op on_const on_comma on_const on_op on_const on_nl # Exception ignored intentionally. # https://stackoverflow.com/questions/10238298/ruby-on-linux-pty-goes-away-without-eof-raises-errnoeio # This is expected on some linux systems, that indicates that the subcommand finished # and we kept trying to read, ignore it
end on_nl end on_nl end on_nl UNK on_period UNK on_nl UNK on_const on_nl UNK UNK UNK UNK on_nl on_const on_period # The process might have exited.
UNK on_lparen UNK on_comma UNK on_comma UNK on_period UNK on_period UNK on_rparen on_nl on_ignored_nl UNK on_period UNK on_nl UNK on_period # note the inversion
UNK on_const on_period UNK on_lparen e on_comma UNK on_period UNK on_rparen on_nl end on_nl end on_nl end on_nl EMP EMP # Wrapping any error in FastlanePtyError to allow # callers to see and use $?.exitstatus that # would usually get returned
