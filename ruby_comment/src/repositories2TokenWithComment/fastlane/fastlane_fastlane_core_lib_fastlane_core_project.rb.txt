UNK on_const UNK on_op self on_nl def UNK on_lparen config on_rparen on_ignored_nl if config on_lbracket on_symbeg workspace on_rbracket on_period to_s # Represents an Xcode project
UNK on_op self on_nl def UNK on_lparen config on_rparen on_ignored_nl if config on_lbracket on_symbeg workspace on_rbracket on_period to_s on_period length # rubocop:disable Metrics/ClassLength
def UNK on_lparen config on_rparen on_ignored_nl if config on_lbracket on_symbeg workspace on_rbracket on_period to_s on_period length on_op on_int on_op config # Project discovery
UNK on_symbeg path on_nl on_ignored_nl UNK on_symbeg is_workspace on_nl on_ignored_nl UNK on_symbeg options on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl # Path to the project/workspace
UNK on_symbeg is_workspace on_nl on_ignored_nl UNK on_symbeg options on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl # Is this project a workspace?
UNK on_symbeg options on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen options on_comma # The config object containing the scheme, configuration, etc.
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen options on_comma on_label UNK on_comma on_label UNK # Should the output of xcodebuild commands be silenced?
UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen options on_comma on_label UNK on_comma on_label UNK on_rparen on_ignored_nl self on_period options # Should we redirect stderr to /dev/null for xcodebuild commands? # Gets rid of annoying plugin info warnings.
def workspace on_nl return nil UNK workspace? on_nl on_ignored_nl on_ivar on_op on_const on_op on_const on_period UNK on_lparen path on_rparen on_nl # returns the Xcodeproj::Workspace or nil if it is a project
def project on_nl return nil if workspace? on_nl on_ivar on_op on_const on_op on_const on_period UNK on_lparen path on_rparen on_nl end # returns the Xcodeproj::Project or nil if it is a workspace
def schemes on_nl on_ivar on_op if workspace? on_nl workspace on_period schemes on_period UNK do on_op UNK on_comma UNK on_op on_ignored_nl # Get all available schemes in an array
def UNK on_lparen on_label nil on_rparen on_ignored_nl if options on_lbracket on_symbeg scheme on_rbracket on_period to_s on_period length on_op on_int on_nl # Let the user select a scheme # Use a scheme containing the preferred_to_include string when multiple schemes were found
UNK schemes on_period include? on_lparen options on_lbracket on_symbeg scheme on_rbracket on_period to_s on_rparen on_nl on_const on_period error on_lparen on_tstring_beg on_tstring_content # Verify the scheme is available
def UNK on_nl on_ivar on_op if workspace? on_nl workspace on_ignored_nl on_period UNK on_ignored_nl on_period map on_lparen on_op on_symbeg path on_rparen # Get all available configurations in an array
UNK on_ignored_nl on_const on_op on_const on_period UNK on_lparen UNK on_rparen on_period UNK on_nl UNK on_nl on_lbracket on_rbracket on_nl end on_nl # To maintain backwards compatibility, we # silently ignore non-existent projects from # workspaces.
def UNK on_nl UNK on_lparen on_label on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl if is_workspace on_nl # Returns bundle_id and sets the scheme for xcrun
def UNK on_nl if is_workspace on_nl return UNK on_lparen on_label on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl else on_ignored_nl return UNK on_nl # Returns app name and sets the scheme for xcrun
UNK on_op build_settings on_lparen on_label on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ignored_nl return UNK on_period UNK on_lparen build_settings on_lparen on_label on_tstring_beg # WRAPPER_NAME: Example.app # WRAPPER_SUFFIX: .app
end on_nl on_ignored_nl def UNK on_nl on_lparen build_settings on_lparen on_label on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl # default value
on_ignored_nl def UNK on_nl if on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl command on_op on_tstring_beg on_tstring_content ##################################################### # @!group Raw Access #####################################################
if on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl command on_op on_tstring_beg on_tstring_content on_embexpr_beg UNK on_period UNK # We also need to pass the workspace and scheme to this command. # # The 'clean' portion of this command was a workaround for an xcodebuild bug with Core Data projects. # This xcodebuild bug is fixed in Xcode 8.3 so 'clean' it's not necessary anymore # See: https://github.com/fastlane/fastlane/pull/5626
def build_settings on_lparen on_label nil on_comma on_label UNK on_rparen on_ignored_nl UNK on_ivar on_nl if is_workspace on_nl if schemes on_period count # Get the build settings for our project # e.g. to properly get the DerivedData folder # @param [String] The key of which we want the value for (e.g. "PRODUCT_NAME")
if on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen # SwiftPM support
UNK on_ignored_nl UNK on_op on_const on_op on_const on_period UNK on_nl UNK on_op on_const on_op on_const on_period UNK on_nl on_ivar on_op # Xcode might hang here and retrying fixes the problem, see fastlane#4059
on_ignored_nl on_const on_period error on_lparen UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_rparen on_nl on_const on_period error on_lparen on_tstring_beg # an optional value, we really don't care if something goes wrong
def UNK on_lparen on_label nil on_comma on_label UNK on_rparen on_ignored_nl options on_lbracket on_symbeg scheme on_rbracket on_op schemes on_period first if # Returns the build settings and sets the default scheme to the options hash
def self on_period UNK on_nl on_lparen on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op on_int on_rparen on_period UNK on_nl end on_nl # @internal to module
def self on_period UNK on_nl on_lparen on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op on_int on_rparen on_period UNK on_nl end on_nl # @internal to module
def self on_period UNK on_lparen command on_comma on_label on_int on_comma on_label on_int on_comma on_label UNK on_rparen on_ignored_nl UNK on_tstring_beg on_tstring_content # @internal to module # runs the specified command with the specified number of retries, killing each run if it times out. # the first run times out after specified timeout elapses, and each successive run times out after # a doubling of the previous timeout has elapsed. # @raises Timeout::Error if all tries result in a timeout # @returns the output of the command # Note: - currently affected by https://github.com/fastlane/fastlane/issues/1504 # - retry feature added to solve https://github.com/fastlane/fastlane/issues/4059
UNK on_op UNK on_embexpr_beg command on_embexpr_end on_tstring_end on_period to_s on_nl end on_nl UNK on_const on_op on_const on_nl UNK on_op UNK # Using Helper.backticks didn't work here. `Timeout` doesn't time out, and the command hangs forever
UNK on_op UNK on_op on_int on_nl on_ignored_nl UNK on_op on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_content on_embexpr_beg # Try harder on each iteration
def UNK on_nl return on_ivar if on_ivar on_nl if self on_period workspace? on_nl on_ignored_nl UNK on_op on_const on_period UNK on_lparen # Array of paths to all project files # (might be multiple, because of workspaces)
on_ignored_nl UNK on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma self on_period path on_rparen on_nl UNK on_op workspace on_period # Find the xcodeproj file, as the information isn't included in the workspace file # We have a reference to the workspace, let's find the xcodeproj file # Use Xcodeproj gem here to # * parse the contents.xcworkspacedata XML file # * handle different types (group:, container: etc.) of file references and their paths # for details see https://github.com/CocoaPods/Xcodeproj/blob/e0287156d426ba588c9234bb2a4c824149889860/lib/xcodeproj/workspace/file_reference.rb```
UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_period UNK do on_op UNK on_op on_ignored_nl UNK on_period UNK # Xcode workspaces can contain loose files now, so let's filter non-xcodeproj files.
UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl return on_ivar on_nl else on_ignored_nl return on_ivar on_op # We're not interested in a `Pods` project, as it doesn't contain any relevant information about code signing
return on_ivar on_op on_lbracket path on_rbracket on_nl end on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl def UNK on_nl on_const on_op # Return the path as an array
def UNK on_nl on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl end on_nl end on_nl # If scheme not specified, do we want the scheme # matching project name?
