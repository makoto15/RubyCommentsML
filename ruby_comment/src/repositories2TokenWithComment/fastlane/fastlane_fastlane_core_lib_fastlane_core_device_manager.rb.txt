UNK on_op stdout on_period UNK on_period UNK on_period UNK on_lbrace on_op UNK on_op UNK on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end # This regex outputs the version info in the format "<platform> <version><exact version>"
UNK on_op line on_period UNK on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end on_rparen on_period UNK on_period UNK on_lparen on_op on_symbeg UNK # " iPad (5th generation) (852A5796-63C3-4641-9825-65EBDC5C4259) (Shutdown)" # This line will turn the above string into # ["iPad (5th generation)", "(852A5796-63C3-4641-9825-65EBDC5C4259)", "(Shutdown)"]
UNK on_op on_const on_period new on_lparen on_label name on_comma on_label os_type on_comma on_label on_lparen UNK on_lbracket os_type on_rbracket on_lbracket os_version # This is disabled here because the Device is defined later in the file, and that's a problem for the cop
if device_types on_period UNK on_op on_int on_nl return UNK on_nl end on_nl on_ignored_nl UNK on_op on_tstring_beg on_tstring_end on_nl on_const on_period # Return early if no supported devices are being searched for
UNK on_op on_tstring_beg on_tstring_end on_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen do on_op UNK on_comma stdout on_comma UNK # instruments takes a little while to return so skip it if we have no devices
def UNK on_lparen UNK on_comma device_types on_comma UNK on_rparen on_ignored_nl on_lparen UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op on_lbracket on_rbracket # Recursively handle all USB items, discovering devices that match the # desired types.
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl end on_nl on_ignored_nl on_ignored_nl class on_const on_nl attr_accessor on_symbeg name on_nl attr_accessor on_symbeg udid on_nl # The code below works from Xcode 7 on # def all # UI.verbose("Fetching available devices")
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl end on_nl on_ignored_nl on_ignored_nl class on_const on_nl attr_accessor on_symbeg name on_nl attr_accessor on_symbeg udid on_nl attr_accessor # @devices = [] # output = '' # Open3.popen3('xcrun simctl list devices --json') do |stdin, stdout, stderr, wait_thr| # output = stdout.read # end
on_ignored_nl on_ignored_nl on_ignored_nl end on_nl on_ignored_nl on_ignored_nl class on_const on_nl attr_accessor on_symbeg name on_nl attr_accessor on_symbeg udid on_nl attr_accessor on_symbeg # begin # data = JSON.parse(output) # rescue => ex # UI.error(ex) # UI.error("xcrun simctl CLI broken, run `xcrun simctl list devices` and make sure it works") # UI.user_error!("xcrun simctl not working.") # end
on_ignored_nl on_ignored_nl end on_nl on_ignored_nl on_ignored_nl class on_const on_nl attr_accessor on_symbeg name on_nl attr_accessor on_symbeg udid on_nl attr_accessor on_symbeg os_type # data["devices"].each do |os_version, l| # l.each do |device| # next if device['availability'].include?("unavailable") # next unless os_version.include?(requested_os_type)
on_ignored_nl end on_nl on_ignored_nl on_ignored_nl class on_const on_nl attr_accessor on_symbeg name on_nl attr_accessor on_symbeg udid on_nl attr_accessor on_symbeg os_type on_nl # os = os_version.gsub(requested_os_type + " ", "").strip # @devices << Device.new(name: device['name'], os_type: requested_os_type, os_version: os, udid: device['udid']) # end # end
end on_nl on_ignored_nl on_ignored_nl class on_const on_nl attr_accessor on_symbeg name on_nl attr_accessor on_symbeg udid on_nl attr_accessor on_symbeg os_type on_nl attr_accessor # return @devices # end
on_ignored_nl class on_const on_nl attr_accessor on_symbeg name on_nl attr_accessor on_symbeg udid on_nl attr_accessor on_symbeg os_type on_nl attr_accessor on_symbeg os_version on_nl # Use the UDID for the given device when setting the destination # Why? Because we might get this error message # > The requested device could not be found because multiple devices matched the request. # # This happens when you have multiple simulators for a given device type / iOS combination # { platform:iOS Simulator, id:1685B071-AFB2-4DC1-BE29-8370BA4A6EBD, OS:9.0, name:iPhone 5 } # { platform:iOS Simulator, id:A141F23B-96B3-491A-8949-813B376C28A7, OS:9.0, name:iPhone 5 } # # We don't want to deal with that, so we just use the UDID
attr_accessor on_symbeg state on_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen on_label nil on_comma on_label nil on_comma on_label nil # Preserved for backwards compatibility
def UNK on_nl all on_period each on_lparen on_op on_symbeg UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen on_label nil # Reset all simulators of this type
def UNK on_lparen on_label nil on_comma on_label nil on_comma on_label nil on_rparen on_ignored_nl match on_op all on_period UNK on_lbrace on_op # Reset simulator by UDID or name and OS version # Latter is useful when combined with -destination option of xcodebuild
def UNK on_nl all on_period each on_lparen on_op on_symbeg delete on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen on_label nil # Delete all simulators of this type
def UNK on_lparen on_label nil on_comma on_label nil on_comma on_label nil on_rparen on_ignored_nl match on_op all on_period UNK on_lbrace on_op # Disable 'Slide to Type' by UDID or name and OS version # Latter is useful when combined with -destination option of xcodebuild
