def UNK on_lparen UNK UNK on_comma UNK UNK on_comma UNK UNK on_rparen on_ignored_nl final_mapping on_op on_lparen UNK on_op UNK UNK # @param primary_mapping [Hash] The preferred mapping (e.g. whatever the user provided) # @param secondary_mapping [Hash] (optional) The secondary mapping (e.g. whatever is detected from the Xcode project) # @param export_method [String] The method that should be preferred in case there is a conflict
UNK on_op self on_period UNK on_ignored_nl final_mapping on_op on_const on_lbracket final_mapping on_period UNK UNK on_op UNK on_comma v on_op on_lbracket # for verbose output at the end of the method
on_ignored_nl final_mapping on_op on_const on_lbracket final_mapping on_period UNK UNK on_op UNK on_comma v on_op on_lbracket UNK on_period UNK on_comma v # default to Xcode project
on_ignored_nl UNK on_period UNK UNK on_op bundle_identifier on_comma UNK on_op on_ignored_nl if final_mapping on_lbracket bundle_identifier on_rbracket on_period UNK on_nl final_mapping # Now it's time to merge the (potentially) existing mapping # (e.g. coming from `provisioningProfiles` of the `export_options` or from previous match calls) # with the secondary hash we just created (or was provided as parameter). # Both might include information about what profile to use # This is important as it might not be clear for the user that they have to call match for each app target # before adding this code, we'd only either use whatever we get from match, or what's defined in the Xcode project # With the code below, we'll make sure to take the best of it: # # 1) A provisioning profile is defined in the `primary_mapping` # 2) A provisioning profile is defined in the `secondary_mapping` # 3) On a conflict (app identifier assigned both in xcode and match) # 3.1) we'll choose whatever matches what's defined as the `export_method` # 3.2) If both include the right `export_method`, we'll prefer the one from `primary_mapping` # 3.3) If none has the right export_method, we'll use whatever is defined in the Xcode project # # To get a better sense of this, check out code_signing_spec.rb for some test cases
UNK self on_period UNK on_lparen UNK on_comma UNK on_rparen on_nl final_mapping on_lbracket bundle_identifier on_rbracket on_op UNK on_nl UNK on_ignored_nl final_mapping # 3.1 + 3.2 nothing to do in this case
final_mapping on_lbracket bundle_identifier on_rbracket on_op UNK on_nl UNK on_ignored_nl final_mapping on_lbracket bundle_identifier on_rbracket on_op UNK on_nl end on_nl end on_nl # Also 3.1 (3.1 is "implemented" twice, as it could be either the primary, or the secondary being the one that matches)
final_mapping on_lbracket bundle_identifier on_rbracket on_op UNK on_nl end on_nl end on_nl end on_nl on_ignored_nl on_const on_period verbose on_lparen on_tstring_beg on_tstring_content # 3.3
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl return UNK on_period UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg # Helper method to remove "-" and " " and downcase app identifier # and compare if an app identifier includes a certain string # We do some `gsub`bing, because we can't really know the profile type, so we'll just look at the name and see if it includes # the export method (which it usually does, but with different notations)
if on_const on_period UNK on_nl return UNK on_nl end on_nl on_ignored_nl return UNK on_period UNK on_lparen UNK on_rparen on_nl end # Catalyst projects will always have an "iphoneos" sdkroot # Need to force a same platform when trying to build as macos
UNK on_op on_lbracket on_rbracket on_nl on_ignored_nl project on_op on_const on_op on_const on_period UNK on_lparen project_path on_rparen on_nl project on_period UNK # Storing bundle identifiers with duplicate profiles # for informing user later on
UNK on_op on_const on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_op on_tstring_beg on_tstring_end on_nl on_ignored_nl bundle_identifier on_op build_configuration on_period resolve_build_setting on_lparen # Catalyst apps will have some build settings that will have a configuration # that is specfic for macos so going to do our best to capture those # # There are other platform filters besides "[sdk=macosx*]" that we could use but # this is the default that Xcode will use so this will also be our default
bundle_identifier on_op build_configuration on_period resolve_build_setting on_lparen on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_end on_comma target on_rparen on_nl bundle_identifier on_op build_configuration on_period # Look for sdk specific bundle identifier (if set) and fallback to general configuration if none
if on_const on_period UNK on_op build_configuration on_period resolve_build_setting on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma target on_rparen on_op on_tstring_beg on_tstring_content on_tstring_end on_nl # Xcode prefixes "maccatalyst." if building a Catalyst app for mac and # if DERIVE_MACCATALYST_PRODUCT_BUNDLE_IDENTIFIER is set to YES
UNK on_op build_configuration on_period resolve_build_setting on_lparen on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_end on_comma target on_rparen on_nl UNK on_op build_configuration on_period # Look for sdk specific provisioning profile specifier (if set) and fallback to general configuration if none
UNK on_op build_configuration on_period resolve_build_setting on_lparen on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_end on_comma target on_rparen on_nl UNK on_op build_configuration on_period # Look for sdk specific provisioning profile uuid (if set) and fallback to general configuration if none
if UNK on_lbracket bundle_identifier on_rbracket on_op on_lparen UNK on_op UNK on_rparen on_nl UNK on_op bundle_identifier on_nl end on_nl on_ignored_nl if # Stores bundle identifiers that have already been mapped to inform user
if UNK on_nl UNK on_lbracket bundle_identifier on_rbracket on_op UNK on_nl UNK UNK on_nl UNK on_lbracket bundle_identifier on_rbracket on_op UNK on_nl # Creates the mapping for a bundle identifier and profile specifier/uuid
UNK if UNK on_period UNK on_nl on_const on_period error on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_period error on_lparen on_tstring_beg # Alerting user to explicitly specify a mapping if cannot be determined
if on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_period error on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const # We catch errors here, as we might run into an exception on one included project # But maybe the next project actually contains the information we need
end on_nl end on_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP # rubocop:enable Metrics/PerceivedComplexity
