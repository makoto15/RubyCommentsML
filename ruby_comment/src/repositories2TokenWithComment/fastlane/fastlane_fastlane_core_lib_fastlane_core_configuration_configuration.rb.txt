UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg config_file_name on_nl on_ignored_nl UNK on_symbeg config_file_options on_nl on_ignored_nl def self on_period UNK on_lparen # @return [Array] An array of symbols which are all available keys
UNK on_symbeg config_file_name on_nl on_ignored_nl UNK on_symbeg config_file_options on_nl on_ignored_nl def self on_period UNK on_lparen available_options on_comma values on_rparen on_ignored_nl # @return [String] The name of the configuration file (not the path). Optional!
UNK on_symbeg config_file_options on_nl on_ignored_nl def self on_period UNK on_lparen available_options on_comma values on_rparen on_ignored_nl on_const on_period user_error! on_lparen on_tstring_beg # @return [Hash] Options that were set from a config file using load_configuration_file. Optional!
end on_nl on_ignored_nl if v on_period kind_of? on_lparen on_const on_rparen on_op available_options on_period kind_of? on_lparen on_const on_rparen unless available_options on_period # this is necessary when fetching a value from an environment variable
unless available_options on_period UNK on_lbrace on_op UNK on_op UNK on_period kind_of? on_lparen on_const on_rparen on_op UNK on_period key on_op on_symbeg # we only want to deal with the new configuration system # Now see if --verbose would be a valid input # If not, it might be because it's an action and not a tool
end on_nl end on_nl on_const on_period UNK on_lparen available_options on_comma v on_rparen on_nl end on_nl on_ignored_nl on_ignored_nl def self on_period # as this is being processed by commander
on_ignored_nl def self on_period UNK on_nl on_ivar on_op on_lbracket on_rbracket on_nl end on_nl on_ignored_nl def UNK on_lparen available_options on_comma values ##################################################### # @!group Setting up the configuration #####################################################
def self on_period UNK on_nl on_ivar on_op on_lbracket on_rbracket on_nl end on_nl on_ignored_nl def UNK on_lparen available_options on_comma values on_rparen # collect sensitive strings
on_ivar on_op on_lbracket on_rbracket on_nl on_ignored_nl if on_const on_op on_const on_period UNK on_nl available_options on_period each do on_op UNK on_op # used for pushing and popping values to provide nesting configuration contexts
if on_const on_op on_const on_period UNK on_nl available_options on_period each do on_op UNK on_op on_ignored_nl next unless UNK on_period UNK # if we are in captured output mode - keep a array of sensitive option values # those will be later - replaced by ####
on_ivar on_period each do on_op key on_comma value on_op on_ignored_nl next if key on_op on_symbeg UNK option on_op self on_period # Make sure the given value keys exist
option on_op self on_period UNK on_lparen key on_rparen on_nl on_ivar on_lbracket key on_rbracket on_op option on_period UNK on_lparen value on_rparen # special treatment
end on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period each do on_op current on_op on_ignored_nl count on_op on_ivar on_period # Call the verify block for it too
on_ivar on_period each do on_op current on_op on_ignored_nl count on_op on_ivar on_period count on_lbrace on_op option on_op option on_period key # Make sure a key was not used multiple times
next if on_ivar on_lbracket current on_period key on_rbracket on_period nil? on_nl on_ignored_nl next if current on_period UNK on_period nil? on_nl # ignore conflicts because option value is nil
next if on_ivar on_lbracket UNK on_period key on_rbracket on_period nil? on_nl on_ignored_nl if current on_period UNK on_nl UNK on_ignored_nl current # ignore conflicts because value of conflict option is nil
def UNK on_nl on_ivar on_period each do on_op item on_op on_ignored_nl next unless item on_period UNK on_op item on_period UNK # Verifies the default value is also valid
item on_period UNK on_period UNK on_lparen item on_period UNK on_rparen on_nl end on_nl UNK on_op ex on_nl on_const on_period UNK # this is important to not verify if there already is a value there
def UNK on_lparen config_file_name on_op nil on_comma UNK on_op nil on_comma UNK on_op UNK on_rparen on_ignored_nl return unless config_file_name on_nl # This method takes care of parsing and using the configuration file as values # Call this once you know where the config file might be located # Take a look at how `gym` uses this method # # @param config_file_name [String] The name of the configuration file to use (optional) # @param block_for_missing [Block] A ruby block that is called when there is an unknown method # in the configuration file
UNK on_period each do on_op key on_comma UNK on_op on_ignored_nl option on_op self on_period UNK on_lparen key on_rparen on_nl option # Make sure all the values set in the config file pass verification
self on_period config_file_options on_op UNK on_period UNK on_lparen self on_period config_file_options on_rparen on_nl on_ignored_nl UNK on_ignored_nl UNK UNK unless UNK # Merge the new options into the old ones, keeping all previously set keys
on_ignored_nl UNK UNK unless UNK on_period nil? on_nl on_ignored_nl UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen UNK # important, since user can set conflicting options in configuration file
UNK UNK unless UNK on_period nil? on_nl on_ignored_nl UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen UNK nil # Now that everything is verified, re-raise an exception that was raised in the config file
on_ignored_nl def UNK on_lparen key on_comma UNK UNK on_rparen on_ignored_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_embexpr_beg key on_embexpr_end on_tstring_content ##################################################### # @!group Actually using the class #####################################################
def UNK on_lparen key on_comma UNK UNK on_rparen on_ignored_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_embexpr_beg key on_embexpr_end on_tstring_content on_tstring_end # Returns the value for a certain key. fastlane_core tries to fetch the value from different sources # if 'ask' is true and the value is not present, the user will be prompted to provide a value # rubocop:disable Metrics/PerceivedComplexity
value on_op if on_ivar on_period UNK on_lparen key on_rparen on_op on_op on_ivar on_lbracket key on_rbracket on_period nil? on_nl on_ivar on_lbracket # Same order as https://docs.fastlane.tools/advanced/#priorities-of-parameters-and-options
on_const on_lbracket option on_period UNK on_rbracket on_period UNK if option on_period UNK on_lparen option on_period UNK on_lparen on_const on_lbracket option # verify! before using (see https://github.com/fastlane/fastlane/issues/14449)
return value unless value on_period nil? on_op on_op option on_period UNK on_op UNK on_nl on_ignored_nl if on_const on_period UNK on_op # by default boolean flags are false
if on_const on_period UNK on_op on_op on_const on_period UNK on_nl UNK on_lparen key on_comma on_tstring_beg on_tstring_end on_rparen on_nl on_const on_period # fallback to asking
UNK on_lparen key on_comma on_tstring_beg on_tstring_end on_rparen on_nl on_const on_period user_error! on_lparen on_tstring_beg on_tstring_content on_embexpr_beg key on_embexpr_end on_tstring_content on_tstring_end on_rparen # Since we don't want to be asked on tests, we'll just call the verify block with no value # to raise the exception that is shown when the user passes an invalid value
on_const on_period user_error! on_lparen on_tstring_beg on_tstring_content on_embexpr_beg key on_embexpr_end on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl UNK value on_period nil? # If this didn't raise an exception, just raise a default one
UNK on_ignored_nl UNK on_lparen key on_comma value on_rparen on_nl UNK on_op ex on_nl UNK on_lparen ex on_rparen on_nl value on_op # Also store this value to use it from now on
return self on_lbracket key on_rbracket on_nl end on_nl on_ignored_nl def UNK on_lparen key on_comma value on_rparen on_ignored_nl on_const on_period UNK # It's very, very important to use the self[:my_key] notation # as this will make sure to use the `fetch` method # that is responsible for auto converting the values into the right # data type # Found out via https://github.com/fastlane/fastlane/issues/11243
on_ignored_nl def UNK on_lparen key on_comma value on_rparen on_ignored_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_embexpr_beg key on_embexpr_end on_tstring_content on_embexpr_beg # rubocop:enable Metrics/PerceivedComplexity
def UNK on_lparen key on_comma value on_rparen on_ignored_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_embexpr_beg key on_embexpr_end on_tstring_content on_embexpr_beg key # Overwrites or sets a new value for a given key # @param key [Symbol] Must be a symbol
def values on_lparen UNK UNK on_rparen on_ignored_nl on_ivar on_period each do on_op option on_op on_ignored_nl on_ivar on_lbracket option on_period key # see fetch
on_ivar on_period each do on_op option on_op on_ignored_nl on_ivar on_lbracket option on_period key on_rbracket on_op UNK on_lparen option on_period key # As the user accesses all values, we need to iterate through them to receive all the values
def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK on_lparen on_ivar on_rparen on_nl on_ivar on_op # Direct access to the values, without iterating through all items
def UNK on_nl on_ivar on_period UNK on_lparen on_ivar on_rparen on_nl on_ivar on_op on_lbrace on_rbrace on_nl end on_nl on_ignored_nl def UNK # Clears away any current configuration values by pushing them onto a stack. # Values set after calling push_values! will be merged with the previous # values after calling pop_values! # # see: pop_values!
def UNK on_nl return if on_ivar on_period UNK on_nl on_ivar on_op on_ivar on_period UNK on_period UNK on_lparen on_ivar on_rparen on_nl # Restores a previous set of configuration values by merging any current # values on top of them # # see: push_values!
def UNK on_lparen key on_rparen on_ignored_nl on_ivar on_period UNK on_lbrace on_op UNK on_op UNK on_period key on_op key on_rbrace on_nl # Returns the config_item object for a given key
UNK on_op UNK on_nl UNK on_op UNK on_nl on_ignored_nl def UNK on_lparen key on_rparen on_ignored_nl option on_op UNK on_lparen key # Aliases `[key]` to `fetch(key)` because Ruby can do it.
