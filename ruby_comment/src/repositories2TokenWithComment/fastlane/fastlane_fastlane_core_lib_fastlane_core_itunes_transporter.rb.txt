class on_const on_op on_const on_nl end on_nl class on_const on_op on_const on_nl end on_nl on_ignored_nl class on_const on_op on_const on_nl # The TransporterInputError occurs when you passed wrong inputs to the {Deliver::ItunesTransporter}
class on_const on_op on_const on_nl end on_nl on_ignored_nl class on_const on_op on_const on_nl end on_nl on_ignored_nl class on_const on_nl on_const # The TransporterTransferError occurs when some error happens # while uploading or downloading something from/to iTC
class on_const on_op on_const on_nl end on_nl on_ignored_nl class on_const on_nl on_const on_op on_regexp_beg on_tstring_content on_regexp_end on_nl on_const on_op on_regexp_beg # Used internally
class on_const on_nl on_const on_op on_regexp_beg on_tstring_content on_regexp_end on_nl on_const on_op on_regexp_beg on_tstring_content on_regexp_end on_nl on_const on_op on_regexp_beg on_tstring_content on_regexp_end # Base class for executing the iTMSTransporter
on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl # Show a one time message instead
end on_nl end on_nl end on_nl UNK on_op ex on_nl exit_status on_op ex on_period exit_status on_nl on_ivar on_op ex on_period # this is where the parsing happens
exit_status on_op ex on_period exit_status on_nl on_ivar on_op ex on_period to_s on_nl end on_nl on_ignored_nl unless exit_status on_period UNK on_nl # FastlanePty adds exit_status on to StandardError so every error will have a status code
on_ivar on_period UNK on_lparen on_int on_rparen on_period UNK UNK on_op line on_op on_ignored_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_embexpr_beg # Print out the last 15 lines, this is key for non-verbose mode
if on_ivar on_period UNK on_op on_int on_op exit_status on_period UNK on_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl # this is to handle GitHub issue #1896, which occurs when an # iTMSTransporter file transfer fails; iTMSTransporter will log an error # but will then retry; if that retry is successful, we will see the error # logged, but since the status code is zero, we want to return success
on_ignored_nl UNK on_op UNK on_nl on_ignored_nl UNK on_op on_const on_period UNK on_lparen on_const on_rparen on_nl if line on_period UNK on_lparen # Taken from https://github.com/sshaw/itunes_store_transporter/blob/master/lib/itunes/store/transporter/output_parser.rb
on_ignored_nl UNK line on_op on_const on_nl on_ivar on_op on_backref on_nl on_const on_period error on_lparen on_tstring_beg on_tstring_content on_embexpr_beg on_backref on_embexpr_end on_tstring_end # Those lines will not be handled like errors or warnings
if on_backref on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op on_ignored_nl on_backref on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl # Check if it's a login error
unless UNK on_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_embexpr_beg on_backref on_embexpr_end on_tstring_end on_rparen on_nl end on_nl end on_nl end # General logging for debug purposes
if on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period to_s on_period UNK on_op on_int on_nl on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket # Workaround because the traditional transporter broke on 1st March 2018 # More information https://github.com/fastlane/fastlane/issues/11958 # As there was no communication from Apple, we don't know if this is a temporary # server outage, or something they changed without giving a heads-up
class on_const on_op on_const on_nl def UNK on_lparen username on_comma password on_comma UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_comma provider_short_name on_op # Generates commands and executes the iTMSTransporter through the shell script it provides by the same name
on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_lparen on_tstring_beg on_tstring_content on_tstring_end if on_const on_period UNK on_rparen on_comma on_lparen on_tstring_beg on_tstring_content on_embexpr_beg provider_short_name # that's here, because the user might overwrite the -t option
on_lparen on_tstring_beg on_tstring_content on_embexpr_beg provider_short_name on_embexpr_end on_tstring_end unless provider_short_name on_period to_s on_period UNK on_rparen on_nl on_rbracket on_period compact on_period join # Windows only: process instantly returns instead of waiting for key press
unless on_regexp_beg on_tstring_content on_regexp_end on_op password on_nl on_const on_period error on_lparen on_lbracket on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_tstring_beg on_tstring_content # rubocop:disable Style/CaseEquality # rubocop:disable Style/YodaCondition
on_ignored_nl on_const on_period error on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl def UNK on_lparen password # rubocop:enable Style/CaseEquality # rubocop:enable Style/YodaCondition
password on_op password on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen UNK on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl password # because the shell handles passwords with single-quotes incorrectly, use `gsub` to replace `shellescape`'d single-quotes of this form: # \' # with a sequence that wraps the escaped single-quote in double-quotes: # '"\'"' # this allows us to properly handle passwords with single-quotes in them # background: https://stackoverflow.com/questions/1250079/how-to-escape-single-quotes-within-single-quoted-strings/1250098#1250098
on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl password on_op on_tstring_beg on_tstring_content on_tstring_end on_op password on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end # we use the 'do' version of gsub, because two-param version interprets the replace text as a pattern and does the wrong thing
password on_op on_tstring_beg on_tstring_content on_tstring_end on_op password on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl return password on_nl end on_nl end # wrap the fully-escaped password in single quotes, since the transporter expects a escaped password string (which must be single-quoted for the shell's benefit)
class on_const on_op on_const on_nl def UNK on_lparen username on_comma password on_comma UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_comma provider_short_name on_op # Generates commands and executes the iTMSTransporter by invoking its Java app directly, to avoid the crazy parameter # escaping problems in its accompanying shell script.
on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_lparen on_tstring_beg on_tstring_content on_embexpr_beg provider_short_name on_embexpr_end on_tstring_end unless provider_short_name on_period to_s on_period UNK on_rparen on_comma # that's here, because the user might overwrite the -t option
on_rbracket on_period compact on_period join on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen end on_nl on_ignored_nl def UNK on_lparen username on_comma password on_comma # cause stderr to be written to stdout
end on_nl on_ignored_nl def UNK on_lparen username on_comma password on_comma UNK on_comma UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_comma provider_short_name on_op # compact gets rid of the possibly nil ENV value
on_rbracket on_period compact on_period join on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen username on_comma password # cause stderr to be written to stdout
on_rbracket on_period compact on_period join on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl if on_const on_period # cause stderr to be written to stdout
on_const on_period UNK on_lparen on_const on_period UNK on_rparen UNK on_ignored_nl return UNK on_lparen command on_comma hide_output on_rparen on_nl end on_nl # The Java command needs to be run starting in a working directory in the iTMSTransporter # file area. The shell script takes care of changing directories over to there, but we'll # handle it manually here for this strategy.
on_const on_op on_regexp_beg on_tstring_content on_regexp_end on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl def UNK on_period UNK on_nl on_ivar on_op # Matches a line in the provider table: "12 Initech Systems Inc LG89CQY559"
def UNK on_period UNK on_nl on_ivar on_op on_op on_const on_op on_const on_period UNK on_nl end on_nl on_ignored_nl def UNK on_period # This will be called from the Deliverfile, and disables the logging of the transporter output
def UNK on_lparen UNK on_op nil on_comma password on_op nil on_comma UNK on_op UNK on_comma provider_short_name on_op nil on_rparen on_ignored_nl # Returns a new instance of the iTunesTransporter. # If no username or password given, it will be taken from # the #{CredentialsManager::AccountManager} # @param use_shell_script if true, forces use of the iTMSTransporter shell script. # if false, allows a direct call to the iTMSTransporter Java app (preferred). # see: https://github.com/fastlane/fastlane/pull/4003 # @param provider_short_name The provider short name to be given to the iTMSTransporter to identify the # correct team for this work. The provider short name is usually your Developer # Portal team ID, but in certain cases it is different! # see: https://github.com/fastlane/fastlane/issues/1524#issuecomment-196370628 # for more information about how to use the iTMSTransporter to list your provider # short names
UNK on_op on_const on_period UNK on_op on_const on_period UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl UNK on_op on_const # Xcode 6.x doesn't have the same iTMSTransporter Java setup as later Xcode versions, so # we can't default to using the newer direct Java invocation strategy for those versions.
def UNK on_lparen app_id on_comma dir on_op nil on_rparen on_ignored_nl dir on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl on_const on_period UNK # Downloads the latest version of the app metadata package from iTC. # @param app_id [Integer] The unique App ID # @param dir [String] the path in which the package file should be stored # @return (Bool) True if everything worked fine # @raise [Deliver::TransporterTransferError] when something went wrong # when transferring
def UNK on_lparen app_id on_comma dir on_rparen on_ignored_nl UNK on_op on_const on_period join on_lparen dir on_comma on_tstring_beg on_embexpr_beg app_id on_embexpr_end # Uploads the modified package back to App Store Connect # @param app_id [Integer] The unique App ID # @param dir [String] the path in which the package file is located # @return (Bool) True if everything worked fine # @raise [Deliver::TransporterTransferError] when something went wrong # when transferring
UNK on_ignored_nl handle_error on_lparen on_ivar on_rparen on_nl end on_nl on_ignored_nl result on_nl end on_nl on_ignored_nl def UNK on_nl command on_op # we don't need the package any more, since the upload was successful
def UNK on_nl if on_const on_lbracket on_const on_rbracket on_period to_s on_period UNK on_op on_int on_nl on_const on_period UNK on_lparen on_tstring_beg # Returns the password to be used with the transporter
if on_const on_lbracket on_const on_rbracket on_period to_s on_period UNK on_op on_int on_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_embexpr_beg on_const # 3 different sources for the password # 1) ENV variable for application specific password
UNK on_op on_const on_op on_const on_period new on_lparen on_label on_ivar on_comma on_ignored_nl on_label on_const on_comma on_ignored_nl on_label on_tstring_beg on_tstring_content on_tstring_end # 2) TWO_STEP_HOST_PREFIX from keychain
UNK on_op on_const on_op on_const on_period new on_lparen on_label on_ivar on_rparen on_nl return UNK on_period password on_lparen on_label UNK on_rparen # 3) standard iTC password
def UNK on_lparen ex on_rparen on_ignored_nl if on_const on_lbracket on_const on_rbracket on_period to_s on_period UNK on_op on_int on_nl on_const on_period # Tells the user how to get an application specific password
on_const on_period error on_lparen on_tstring_beg on_tstring_end on_rparen on_nl on_const on_period error on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_period error # Password provided, however we already used it
on_const on_period error on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_period error on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl UNK on_period # user already entered one.. delete the old one
on_ignored_nl return UNK on_nl end on_nl on_ignored_nl def handle_error on_lparen password on_rparen on_ignored_nl on_ivar on_period handle_error on_lparen password on_rparen on_nl # to ask the user for the missing value
