on_ivar on_op UNK on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content # rubocop:disable LineLength # class instance?
end on_nl on_ignored_nl def sanitize_reserved_word on_lparen on_label nil on_rparen on_ignored_nl unless on_ivar on_period UNK on_lparen UNK on_rparen on_nl return UNK # rubocop:enable LineLength
type on_op UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_op on_tstring_beg on_tstring_end on_nl UNK on_op # defaulting type to Any if is_string is false so users are allowed to input all allowed types
UNK on_op on_tstring_beg on_tstring_content on_tstring_end if on_lparen optional on_op default_value on_period nil? on_rparen on_op type on_op on_tstring_beg on_tstring_content on_tstring_end on_nl # if we are optional and don't have a default value, we'll need to use ?
if default_value on_period UNK on_op on_const on_nl type on_op on_tstring_beg on_tstring_content on_tstring_end on_nl elsif default_value on_period UNK on_op on_const on_nl # If we have a default value of true or false, we can infer it is a Bool
default_value on_op on_tstring_beg on_tstring_content on_tstring_end on_nl elsif type on_op on_tstring_beg on_tstring_content on_tstring_end on_op type on_op on_tstring_beg on_tstring_content on_tstring_end on_op type # we can't handle default values for Hashes, yet # see method swift_default_implementations for similar behavior
if optional on_op default_value on_period nil? on_nl default_value on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl default_value on_op UNK on_lparen # if we don't have a default value, but the param is optional, set a default value in Swift to be nil
default_value on_op UNK on_lparen on_label type on_comma on_label param on_comma on_label default_value on_rparen on_nl on_ignored_nl param on_op camel_case_lower on_lparen on_label # sometimes we get to the point where we have a default value but its type is wrong # so we need to correct that because [String] = "" is not valid swift
on_ignored_nl def UNK on_nl function_name on_op camel_case_lower on_lparen on_label self on_period function_name on_rparen on_nl UNK on_op self on_period UNK on_nl # rubocop:enable Metrics/PerceivedComplexity
UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl indent on_op # Calculate the necessary indent to line up parameter names on new lines # with the first parameter after the opening paren following the function name. # i.e.: @discardableResult func someFunctionName(firstParameter: T # secondParameter: T) # This just creates a string with as many spaces are necessary given whether or not # the function has a 'discardableResult' annotation, the 'func' keyword, function name # and the opening paren.
UNK on_op UNK on_period UNK UNK on_op UNK on_op UNK UNK on_comma UNK UNK UNK on_period UNK on_lparen on_op on_symbeg # Adds newlines between each documentation element.
end on_nl on_ignored_nl UNK on_op on_ivar on_period zip on_lparen param_type_overrides on_rparen on_period map UNK on_op name on_comma type_override on_op on_ignored_nl # return empty list for argument
indent on_op on_tstring_beg on_tstring_content on_tstring_end on_op UNK on_period length on_nl UNK on_op UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_embexpr_beg indent # Get the indent of the first argument in the list to give each # subsequent argument it's own line with proper indenting
default_value on_op on_tstring_beg on_tstring_content on_tstring_end on_nl else on_ignored_nl default_value on_op on_tstring_beg on_tstring_content on_embexpr_beg default_value on_embexpr_end on_tstring_content on_tstring_end on_nl end on_nl # we can't handle default values for Hashes, yet # see method parameters for similar behavior
if optional on_op default_value on_period nil? on_nl default_value on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl if type on_op on_tstring_beg # if we don't have a default value, but the param is options, just set a default value to nil
if type on_op on_tstring_beg on_tstring_content on_tstring_end on_nl default_value on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl if type on_op on_tstring_beg # if we don't have a default value still, we need to assign them based on type
