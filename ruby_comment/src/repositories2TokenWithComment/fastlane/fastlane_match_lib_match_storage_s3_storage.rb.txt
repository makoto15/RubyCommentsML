UNK on_const on_op on_const on_nl attr_reader on_symbeg s3_bucket on_nl attr_reader on_symbeg s3_region on_nl attr_reader on_symbeg UNK on_nl attr_reader on_symbeg UNK # Store the code signing identities on AWS S3
def UNK on_nl on_ivar on_op UNK on_nl UNK on_ivar on_period UNK on_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen # To make debugging easier, we have a custom exception here
on_ivar on_op UNK on_nl UNK on_ivar on_period UNK on_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ivar on_op # We fall back to "*", which means certificates and profiles # from all teams that use this bucket would be installed. This is not ideal, but # unless the user provides a `team_id`, we can't know which one to use # This only happens if `readonly` is activated, and no `team_id` was provided
on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ivar on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl return on_const on_period # We use a `@_folder_prefix` variable, to keep state between multiple calls of this # method, as the value won't change. This way the warning is only printed once
def UNK on_nl return UNK on_ivar on_op on_const on_period UNK on_lparen on_ivar on_rparen on_nl on_ignored_nl self on_period UNK on_op on_const # Call this method for the initial clone/download of the # user's certificates & profiles # As part of this method, the `self.working_directory` attribute # will be set
return UNK on_ivar on_op on_const on_period UNK on_lparen on_ivar on_rparen on_nl on_ignored_nl self on_period UNK on_op on_const on_period UNK on_nl # Check if we already have a functional working_directory
self on_period UNK on_op on_const on_period UNK on_nl on_ignored_nl UNK on_period UNK on_lparen s3_bucket on_rparen on_period UNK on_period UNK UNK # No existing working directory, creating a new one now
UNK on_op on_const on_period UNK on_lparen self on_period UNK on_comma UNK on_rparen on_nl on_ignored_nl on_const on_period UNK on_lparen on_const on_period # :team_id/path/to/file
def UNK on_nl return on_tstring_beg on_tstring_content on_embexpr_beg s3_bucket on_embexpr_end on_tstring_content on_embexpr_beg s3_region on_embexpr_end on_tstring_end on_nl end on_nl on_ignored_nl def UNK # Returns a short string describing + identifing the current # storage backend. This will be printed when nuking a storage
on_ignored_nl UNK on_period UNK UNK on_op file_name on_op on_ignored_nl on_ignored_nl UNK on_op UNK on_lparen file_name on_rparen on_nl on_const on_period UNK # `files_to_upload` is an array of files that need to be uploaded to S3 # Those doesn't mean they're new, it might just be they're changed # Either way, we'll upload them using the same technique
on_ignored_nl UNK on_op UNK on_lparen file_name on_rparen on_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_content on_tstring_end on_rparen # Go from # "/var/folders/px/bz2kts9n69g8crgv4jpjh6b40000gn/T/d20181026-96528-1av4gge/profiles/development/Development_me.mobileprovision" # to # "profiles/development/Development_me.mobileprovision" #
def UNK on_lparen on_label nil on_rparen on_ignored_nl return on_tstring_beg on_tstring_content on_embexpr_beg self on_period s3_bucket on_embexpr_end on_tstring_content on_tstring_end on_nl end on_nl # Implement this for the `fastlane match init` command # This method must return the content of the Matchfile # that should be generated
return self on_period team_id on_nl UNK on_ignored_nl UNK on_op on_const on_period UNK on_lparen self on_period UNK on_comma self on_period team_id # In readonly mode, we still want to see if the user provided a team_id # see `prefixed_working_directory` comments for more details
