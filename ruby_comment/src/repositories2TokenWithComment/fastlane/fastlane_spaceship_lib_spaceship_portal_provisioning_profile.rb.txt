class on_const on_op on_const on_nl attr_accessor on_symbeg id on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl # Represents a provisioning profile of the Apple Dev Portal # # NOTE: If the environment variable `SPACESHIP_AVOID_XCODE_API` is present when using this class, all requests will be made via Apple developer portal API. # In the default case, this class will use the Xcode API for fetching provisioning profiles. This is an optimization that results in 1 query for all Profiles vs 1+N queries.
attr_accessor on_symbeg id on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl # @return (String) The ID generated by the Dev Portal # You'll probably not really need this value # @example # "2MAY7NPHAA"
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg name on_nl on_ignored_nl # @return (String) The UDID of this provisioning profile # This value is used for example for code signing # It is also contained in the actual profile # @example # "23d7df3b-9767-4e85-a1ea-1df4d8f32fec"
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg name on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl # @return (DateTime) The date and time of when the profile # expires. # @example # #<DateTime: 2015-11-25T22:45:50+00:00 ((2457352j,81950s,0n),+0s,2299161j)>
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg name on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg type on_nl on_ignored_nl # @return (String) The profile distribution type. You probably want to # use the class type to detect the profile type instead of this string. # @example AppStore Profile # "store" # @example AdHoc Profile # "adhoc" # @example Development Profile # "limited" # @example Mac Developer ID Profile # "direct"
attr_accessor on_symbeg name on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg type on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl # @return (String) The name of this profile # @example # "com.krausefx.app AppStore"
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg type on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl # @return (String) The status of this profile # @example Active (profile is fine) # "Active" # @example Expired (time ran out) # "Expired" # @example Invalid (e.g. code signing identity not available any more) # "Invalid"
attr_accessor on_symbeg type on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg sub_platform on_nl on_ignored_nl # @return (String) The type of the profile (development or distribution). # You'll probably not need this value # @example Distribution # "iOS Distribution" # @example Development # "iOS Development"
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg sub_platform on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl # @return (String) This will always be "2" # @example # "2"
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg sub_platform on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg app on_nl on_ignored_nl # @return (String) The supported platform for this profile # @example # "ios"
attr_accessor on_symbeg sub_platform on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg app on_nl on_ignored_nl attr_accessor on_symbeg certificates on_nl on_ignored_nl # @return (String) The supported sub_platform for this profile # @example # "tvOS"
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg app on_nl on_ignored_nl attr_accessor on_symbeg certificates on_nl on_ignored_nl attr_accessor on_symbeg devices on_nl on_ignored_nl # No information about this attribute
attr_accessor on_symbeg app on_nl on_ignored_nl attr_accessor on_symbeg certificates on_nl on_ignored_nl attr_accessor on_symbeg devices on_nl on_ignored_nl attr_accessor on_symbeg profile_details on_nl on_ignored_nl # A reference to the app this profile is for. # You can then easily access the value directly # @return (App) The app this profile is for # # @example Example Value # <Spaceship::Portal::App # @app_id="2UMR2S6PAA" # @name="App Name" # @platform="ios" # @prefix="5A997XSAAA" # @bundle_id="com.krausefx.app" # @is_wildcard=false # @dev_push_enabled=false # @prod_push_enabled=false> # # @example Usage # profile.app.name
attr_accessor on_symbeg certificates on_nl on_ignored_nl attr_accessor on_symbeg devices on_nl on_ignored_nl attr_accessor on_symbeg profile_details on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl # @return (Array) A list of certificates used for this profile # @example Example Value # [ # <Spaceship::Portal::Certificate::Production # @status=nil # @id="XC5PH8D4AA" # @name="iOS Distribution" # @created=nil # @expires=#<DateTime: 2015-11-25T22:45:50+00:00 ((2457352j,81950s,0n),+0s,2299161j)> # @owner_type="team" # @owner_name=nil # @owner_id=nil # @type_display_id="R58UK2EWAA">] # ] # # @example Usage # profile.certificates.first.id
attr_accessor on_symbeg devices on_nl on_ignored_nl attr_accessor on_symbeg profile_details on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl # @return (Array) A list of devices this profile is enabled for. # This will always be [] for AppStore profiles # # @example Example Value # <Spaceship::Portal::Device # @id="WXQ7V239BE" # @name="Grahams iPhone 4s" # @udid="ba0ac7d70f7a14c6fa02ef0e02f4fe9c5178e2f7" # @platform="ios" # @status="c">] # # @example Usage # profile.devices.first.name
attr_accessor on_symbeg profile_details on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl UNK on_lparen UNK on_ignored_nl on_tstring_beg # This is the second level request, which is done before creating the object # this includes information about the devices and the certificates # more information on this issue https://github.com/fastlane/fastlane/issues/6137
attr_accessor on_symbeg UNK on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl UNK on_lparen UNK on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op on_symbeg id # @return (Bool) Does the profile use a template (has extended entitlements)? # # @example # false
attr_accessor on_symbeg UNK on_nl on_ignored_nl UNK on_lparen UNK on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op on_symbeg id on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end # @return (Spaceship::Portal::ProvisioningProfileTemplate) # Model representation of the provisioning profile template. # This will be always nil if is_template_profile returns false # # @example Example Value # <Spaceship::Portal::ProvisioningProfileTemplate # @template_description="Subscription Service iOS (dist)", # @entitlements=nil, # @purpose_description="Generic Provisioning Profile Template for App: com.apple.smoot.subscriptionservice", # @purpose_display_name="Subscription Service iOS (dist)", # @purpose_name="Subscription Service iOS (dist)", # @version=1> # # @example Usage # profile.template.purpose_display_name
def type on_nl raise on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def factory on_lparen attrs on_rparen on_ignored_nl UNK on_op UNK # @return (String) The profile type used for web requests to the Dev Portal # @example # "limited" # "store" # "adhoc" # "inhouse"
def factory on_lparen attrs on_rparen on_ignored_nl UNK on_op UNK attrs on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl UNK on_tstring_beg on_tstring_content on_tstring_end # Create a new object based on a hash. # This is used to create a new object based on the server response.
UNK on_op UNK attrs on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_nl UNK on_tstring_beg on_tstring_content # available values of `distributionMethod` at this point: ['adhoc', 'store', 'limited', 'direct', 'inhouse']
else on_ignored_nl raise on_tstring_beg on_tstring_content UNK attrs on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket UNK on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl attrs # Mac-only
attrs on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op on_lparen on_const on_period UNK on_lparen attrs on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_rparen UNK # Parse the dates # rubocop:disable Style/RescueModifier
on_ignored_nl if attrs on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op attrs on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket # rubocop:enable Style/RescueModifier
if attrs on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op attrs on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl # When a profile is created with a template name, the response # (provisioning profiles info) already contains the data about # template, which is used to instantiate the # ProvisioningProfileTemplate model. # Doing so saves an API call needed to fetch profile details. # # Verify if `attrs` contains the info needed to instantiate a template. # If not, the template will be lazily loaded.
def UNK on_nl name on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen # @return (String) The human readable name of this profile type. # @example # "AppStore" # "AdHoc" # "Development" # "InHouse"
def UNK on_lparen on_label nil on_comma on_label nil on_comma on_label nil on_comma on_label on_lbracket on_rbracket on_comma on_label false on_comma on_label # Create a new provisioning profile # @param name (String): The name of the provisioning profile on the Dev Portal # @param bundle_id (String): The app identifier, this parameter is required # @param certificate (Certificate): The certificate that should be used with this # provisioning profile. You can also pass an array of certificates to this method. This will # only work for development profiles # @param devices (Array) (optional): An array of Device objects that should be used in this profile. # It is recommend to not pass devices as spaceship will automatically add all devices for AdHoc # and Development profiles and add none for AppStore and Enterprise Profiles # @param mac (Bool) (optional): Pass true if you're making a Mac provisioning profile # @param sub_platform (String) Used to create tvOS profiles at the moment. Value should equal 'tvOS' or nil. # @param template_name (String) (optional): The name of the provisioning profile template. # The value can be found by inspecting the Entitlements drop-down when creating/editing a # provisioning profile in Developer Portal. # @return (ProvisioningProfile): The profile that was just created
name on_op on_lbracket bundle_id on_comma self on_period UNK on_rbracket on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ignored_nl if self # Fill in sensible default values
devices on_op on_lbracket on_rbracket on_nl end on_nl on_ignored_nl certificate_parameter on_op UNK on_period UNK on_lparen on_op on_symbeg id on_rparen if UNK # Distribution Profiles MUST NOT have devices
certificate_parameter on_op certificate_parameter on_period first if certificate_parameter on_period UNK on_op UNK on_nl on_ignored_nl if devices on_period UNK on_op devices on_period # Fix https://github.com/KrauseFx/fastlane/issues/349
if mac on_nl devices on_op on_const on_op on_const on_op on_const on_period UNK on_nl UNK sub_platform on_op on_tstring_beg on_tstring_content on_tstring_end on_nl # For Development and AdHoc we usually want all compatible devices by default
def all on_lparen on_label false on_comma on_label false on_rparen on_ignored_nl if on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl profiles on_op # @return (Array) Returns all profiles registered for this account # If you're calling this from a subclass (like AdHoc), this will # only return the profiles that are of this type # @param mac (Bool) (optional): Pass true to get all Mac provisioning profiles # @param xcode (Bool) (optional): Pass true to include Xcode managed provisioning profiles
profiles on_period UNK UNK on_op profile on_op self on_period factory on_lparen profile on_rparen UNK on_nl on_ignored_nl UNK UNK on_nl profiles # transform raw data to class instances
UNK UNK on_nl profiles on_period UNK on_lparen on_op on_symbeg UNK on_rparen on_nl end on_nl on_ignored_nl return profiles if self on_op # filter out the profiles managed by xcode
def UNK on_nl profiles on_op all on_lparen on_label false on_rparen on_nl UNK on_op on_lbracket on_rbracket on_nl profiles on_period UNK do # @return (Array) Returns all profiles registered for this account # If you're calling this from a subclass (like AdHoc), this will # only return the profiles that are of this type
def UNK on_lparen on_label nil on_comma on_label false on_comma on_label nil on_rparen on_ignored_nl raise on_tstring_beg on_tstring_content on_tstring_end if bundle_id on_period # @return (Array) Returns an array of provisioning # profiles matching the bundle identifier # Returns [] if no profiles were found # This may also contain invalid or expired profiles
class on_const on_op on_const on_nl def self on_period type on_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl end on_nl on_ignored_nl class # Represents a Development profile from the Dev Portal
class on_const on_op on_const on_nl def self on_period type on_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl end on_nl on_ignored_nl class # Represents an AppStore profile from the Dev Portal
class on_const on_op on_const on_nl def self on_period type on_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl end on_nl on_ignored_nl class # Represents an AdHoc profile from the Dev Portal
class on_const on_op on_const on_nl def self on_period type on_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl end on_nl on_ignored_nl class # Represents an Enterprise InHouse profile from the Dev Portal
class on_const on_op on_const on_nl def self on_period type on_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl end on_nl on_ignored_nl def # Represents a Mac Developer ID profile from the Dev Portal
def UNK on_nl client on_period UNK on_lparen self on_period id on_comma on_label mac? on_rparen on_nl end on_nl on_ignored_nl def UNK # Download the current provisioning profile. This will *not* store # the provisioning profile on the file system. Instead this method # will return the content of the profile. # @return (String) The content of the provisioning profile # You'll probably want to store it on the file system # @example # File.write("path.mobileprovision", profile.download)
def UNK on_nl client on_period UNK on_lparen self on_period id on_comma on_label mac? on_rparen on_nl end on_nl on_ignored_nl def UNK # Delete the provisioning profile
def UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK UNK on_nl if mac? on_nl if self on_period # Repair an existing provisioning profile # alias to update! # @return (ProvisioningProfile) A new provisioning profile, as # the repair method will generate a profile with a new ID
def UNK on_nl UNK UNK on_nl if mac? on_nl if self on_period UNK on_lparen on_const on_rparen on_nl self on_period certificates # Updates the provisioning profile from the local data # e.g. after you added new devices to the profile # This will also update the code signing identity if necessary # @return (ProvisioningProfile) A new provisioning profile, as # the repair method will generate a profile with a new ID
UNK UNK on_nl if mac? on_nl if self on_period UNK on_lparen on_const on_rparen on_nl self on_period certificates on_op on_lbracket on_const # sigh handles more specific filtering and validation steps that make this logic OK # # This is the minimum protection needed for people using spaceship directly
profile on_op on_const on_op on_const on_op on_const on_period all on_lparen on_label mac? on_rparen on_period UNK do on_op UNK on_op on_ignored_nl # We need to fetch the provisioning profile again, as the ID changes
end on_nl on_ignored_nl return profile on_nl end on_nl on_ignored_nl def UNK on_nl return false if on_lparen certificates on_op on_lbracket on_rbracket # we can use the name as it's valid
def UNK on_nl return false if on_lparen certificates on_op on_lbracket on_rbracket on_rparen on_period UNK on_op UNK on_nl certificates on_period UNK # Is the certificate of this profile available? # @return (Bool) is the certificate valid?
def UNK on_nl return UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op on_tstring_beg on_tstring_content # @return (Bool) Is the current provisioning profile valid? # To also verify the certificate call certificate_valid?
def UNK on_nl UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def mac? on_nl UNK on_op on_tstring_beg on_tstring_content on_tstring_end # @return (Bool) Is this profile managed by Xcode?
def mac? on_nl UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl sub_platform on_op on_tstring_beg on_tstring_content on_tstring_end # @return (Bool) Is this a Mac provisioning profile?
def UNK on_nl sub_platform on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def devices on_nl if on_lparen on_ivar on_op on_lbracket # @return (Bool) Is this a tvos provisioning profile?
def profile_details on_nl on_ivar on_op client on_period UNK on_lparen on_label self on_period id on_comma on_label mac? on_rparen on_nl end on_nl # This is an expensive operation as it triggers a new request
on_ivar on_op client on_period UNK on_lparen on_label self on_period id on_comma on_label mac? on_rparen on_nl end on_nl on_ignored_nl def UNK # Since 15th September 2016 certificates and devices are hidden behind another request # see https://github.com/fastlane/fastlane/issues/6137 for more information
def UNK on_nl return nil UNK UNK on_nl on_ignored_nl on_ivar on_op on_const on_period factory on_lparen profile_details on_lbracket on_tstring_beg on_tstring_content on_tstring_end # Lazily instantiates the provisioning profile template model # # @return (Bool) The template model if the provisioning profile has a # template or nil if provisioning profile doesn't have a template
def UNK on_nl UNK on_op UNK on_period UNK on_op nil on_nl end on_nl end on_nl end on_nl end on_nl EMP # @return (String) The name of the template (as displayed in Dev Portal) # or nil if provisioning profile doesn't have a template
