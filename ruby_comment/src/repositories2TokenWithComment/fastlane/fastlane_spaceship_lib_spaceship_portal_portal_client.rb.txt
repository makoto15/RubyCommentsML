UNK on_const on_op on_const on_op on_const on_nl on_ignored_nl on_const on_op on_const on_op on_const on_op on_const on_nl on_ignored_nl def self on_period # rubocop:disable Metrics/ClassLength
on_ignored_nl on_const on_op on_const on_op on_const on_op on_const on_nl on_ignored_nl def self on_period UNK on_nl on_tstring_beg on_tstring_content on_embexpr_beg on_const on_embexpr_end ##################################################### # @!group Init and Login #####################################################
return UNK on_lparen UNK on_comma UNK on_rparen on_nl end on_nl on_ignored_nl def teams on_nl return on_ivar if on_ivar on_nl req # When the user has 2 step enabled, we might have to call this method again # This only occurs when the user doesn't have a team on App Store Connect # For 2 step verification we use the App Store Connect back-end # which is enough to get the DES... cookie, however we don't get a valid # myacinfo cookie at that point. That means, after getting the DES... cookie # we have to send the login request again. This will then get us a valid myacinfo # cookie, additionally to the DES... cookie
def teams on_nl return on_ivar if on_ivar on_nl req on_op request on_lparen on_symbeg post on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl # @return (Array) A list of all available teams
def team_id on_nl return on_ivar if on_ivar on_nl on_ignored_nl if teams on_period UNK on_op on_int on_nl UNK on_lparen on_tstring_beg on_tstring_content # @return (String) The currently selected Team ID
def UNK on_lparen on_label nil on_comma on_label nil on_rparen on_ignored_nl on_ivar on_op self on_period on_const on_period UNK on_lparen on_label team_id # Shows a team selection for the user in the terminal. This should not be # called on CI systems # # @param team_id (String) (optional): The ID of a Developer Portal team # @param team_name (String) (optional): The name of a Developer Portal team
def UNK on_lparen team_id on_rparen on_ignored_nl on_ivar on_op team_id on_nl end on_nl on_ignored_nl def UNK on_nl teams on_period UNK do # Set a new team ID which will be used from now on
def UNK on_nl teams on_period UNK do on_op UNK on_op on_ignored_nl UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op team_id on_nl # @return (Hash) Fetches all information of the currently used team
def UNK on_nl return on_ivar UNK on_ivar on_period UNK on_nl on_ivar on_op on_lparen UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op # Is the current session from an Enterprise In House account?
on_ignored_nl def UNK on_lparen on_label false on_rparen on_ignored_nl paging do on_op page_number on_op on_ignored_nl r on_op request on_lparen on_symbeg post ##################################################### # @!group Apps #####################################################
if latinized on_op UNK on_nl latinized on_op on_tstring_beg on_tstring_content on_tstring_end on_nl latinized on_op on_const on_op on_const on_period UNK on_lparen UNK # remove non-valid characters # Check if the input string was modified, since it might be empty now # (if it only contained non-latin symbols) or the duplicate of another app
ensure_csrf on_lparen on_const on_op on_const on_op on_const on_rparen on_nl on_ignored_nl UNK on_op UNK type on_period UNK on_nl UNK on_symbeg UNK # We moved the ensure_csrf to the top of this method # as we got some users with issues around creating new apps # https://github.com/fastlane/fastlane/issues/5813
on_ignored_nl def UNK on_nl paging do on_op page_number on_op on_ignored_nl r on_op request on_lparen on_symbeg post on_comma on_tstring_beg on_tstring_content on_tstring_end ##################################################### # @!group Passbook #####################################################
on_ignored_nl def UNK on_lparen on_label false on_rparen on_ignored_nl paging do on_op page_number on_op on_ignored_nl r on_op request on_lparen on_symbeg post ##################################################### # @!group Website Push #####################################################
on_ignored_nl def UNK on_lparen on_label false on_rparen on_ignored_nl paging do on_op page_number on_op on_ignored_nl r on_op request on_lparen on_symbeg post ##################################################### # @!group Merchant #####################################################
on_ignored_nl def UNK on_nl paging do on_op page_number on_op on_ignored_nl r on_op request on_lparen on_symbeg post on_comma on_tstring_beg on_tstring_content on_tstring_end ##################################################### # @!group App Groups #####################################################
on_ignored_nl def UNK on_nl paging do on_op page_number on_op on_ignored_nl r on_op request on_lparen on_symbeg post on_comma on_tstring_beg on_tstring_content on_tstring_end ##################################################### # @!group Cloud Containers #####################################################
def UNK on_nl response on_op request on_lparen on_symbeg post on_rparen do on_op req on_op on_ignored_nl req on_period url on_lparen on_tstring_beg ##################################################### # @!group Team #####################################################
on_ignored_nl def UNK on_lparen on_label false on_comma on_label false on_rparen on_ignored_nl paging do on_op page_number on_op on_ignored_nl r on_op request ##################################################### # @!group Devices #####################################################
on_ignored_nl def UNK on_lparen UNK on_comma on_label false on_rparen on_ignored_nl paging do on_op page_number on_op on_ignored_nl r on_op request on_lparen ##################################################### # @!group Certificates #####################################################
on_label app_id on_comma on_rbrace on_rparen on_nl parse_response on_lparen r on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl def UNK # optional
on_rbrace on_rparen on_nl parse_response on_lparen r on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_comma # For requesting Web Push certificates
on_ignored_nl def UNK on_lparen on_label false on_rparen on_ignored_nl paging do on_op page_number on_op on_ignored_nl req on_op request on_lparen on_symbeg post ##################################################### # @!group Provisioning Profiles #####################################################
def UNK on_lparen on_label false on_rparen on_ignored_nl req on_op request on_lparen on_symbeg post on_rparen do on_op r on_op on_ignored_nl r ## # this endpoint is used by Xcode to fetch provisioning profiles. # The response is an xml plist but has the added benefit of containing the appId of each provisioning profile. # # Use this method over `provisioning_profiles` if possible because no secondary API calls are necessary to populate the ProvisioningProfile data model.
params on_lbracket on_symbeg UNK on_rbracket on_op UNK if UNK on_nl on_ignored_nl r on_op request on_lparen on_symbeg post on_comma on_tstring_beg on_tstring_content # if `template_name` is nil, Default entitlements will be used
params on_lbracket on_symbeg UNK on_rbracket on_op UNK if UNK on_nl on_ignored_nl r on_op request on_lparen on_symbeg post on_comma on_tstring_beg on_tstring_content # if `template_name` is nil, Default entitlements will be used
on_ignored_nl def UNK on_nl paging do on_op page_number on_op on_ignored_nl response on_op request on_lparen on_symbeg post on_comma on_tstring_beg on_tstring_content on_tstring_end ##################################################### # @!group Keys #####################################################
parse_response on_lparen response on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen on_label nil on_rparen # response contains a list of keys with 1 item
parse_response on_lparen response on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen on_label nil on_rparen # response contains a list of keys with 1 item
def csrf_cache on_nl on_ivar on_op on_lbrace on_rbrace on_nl end on_nl on_ignored_nl def ensure_csrf on_lparen UNK on_rparen on_ignored_nl if csrf_cache on_lbracket # This is a cache of entity type (App, AppGroup, Certificate, Device) to csrf_tokens
def ensure_csrf on_lparen UNK on_rparen on_ignored_nl if csrf_cache on_lbracket UNK on_rbracket on_nl self on_period csrf_tokens on_op csrf_cache on_lbracket UNK on_rbracket # Ensures that there are csrf tokens for the appropriate entity type # Relies on store_csrf_tokens to set csrf_tokens to the appropriate value # then stores that in the correct place in cache # This method also takes a block, if you want to send a custom request, instead of # calling `.all` on the given klass. This is used for provisioning profiles.
UNK on_op UNK on_op UNK on_period UNK on_nl on_ignored_nl csrf_cache on_lbracket UNK on_rbracket on_op self on_period csrf_tokens on_nl end on_nl # If we directly create a new resource (e.g. app) without querying anything before # we don't have a valid csrf token, that's why we have to do at least one request
def UNK on_lparen on_label false on_rparen on_ignored_nl response on_op request on_lparen on_symbeg post on_comma on_tstring_beg on_tstring_content on_embexpr_beg platform_slug on_lparen mac # We need a custom way to fetch the csrf token for the provisioning profile requests, since # we use a separate API endpoint (host of Xcode API) to fetch the provisioning profiles # All we do is fetch one profile (if exists) to get a valid csrf token with its time stamp # This method is being called from all requests that modify, create or downloading provisioning # profiles. # Source https://github.com/fastlane/fastlane/issues/5903
end on_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP # rubocop:enable Metrics/ClassLength
