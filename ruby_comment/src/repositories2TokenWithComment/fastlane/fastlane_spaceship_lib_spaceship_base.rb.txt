class on_const on_nl class on_const on_nl UNK on_const on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op UNK on_op ## # Spaceship::Base is the superclass for models in Apple Developer Portal. # It's mainly responsible for mapping responses to objects. # # A class-level attribute `client` is used to maintain the spaceship which we # are using to talk to ADP. # # Example of creating a new ADP model: # # class Widget < Spaceship::Base # attr_accessor :id, :name, :foo_bar, :wiz_baz # attr_mapping({ # 'name' => :name, # 'fooBar' => :foo_bar, # 'wizBaz' => :wiz_baz # }) # end # # When you want to instantiate a model pass in the parsed response: `Widget.new(widget_json)`
def client on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_lparen client on_rparen on_ignored_nl self on_period client ## # The client used to make requests. # @return (Spaceship::Client) Defaults to the singleton
def UNK on_lparen client on_rparen on_ignored_nl self on_period client on_op client on_nl self on_nl end on_nl on_ignored_nl def UNK on_lparen ## # Sets client and returns self for chaining. # @return (Spaceship::Base) # rubocop:disable Style/AccessorMethodName
on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_const on_period new do on_ignored_nl UNK on_period UNK do on_op UNK on_comma UNK # rubocop:enable Style/AccessorMethodName
def UNK on_lparen UNK on_rparen on_ignored_nl on_const on_period new do on_ignored_nl UNK on_period UNK do on_op UNK on_comma UNK on_op ## # Binds attributes getters and setters to underlying data returned from the API. # Setting any properties will alter the `raw_data` hash. # # @return (Module) with the mapped getters and setters defined. Can be `include`, `extend`, or `prepend` into a class or object
def UNK on_lparen UNK on_op UNK on_rparen on_ignored_nl if UNK on_nl on_ivar on_op UNK on_nl on_ivar on_period UNK on_period UNK ## # Defines the attribute mapping between the response from Apple and our model objects. # Keys are to match keys in the response and the values are to match attributes on the model. # # Example of using `attr_mapping` # # class Widget < Spaceship::Base # attr_accessor :id, :name, :foo_bar, :wiz_baz # attr_mapping({ # 'name' => :name, # 'fooBar' => :foo_bar, # 'wizBaz' => :wiz_baz # }) # end
UNK on_ignored_nl UNK on_lparen UNK on_rparen if UNK on_period UNK on_lparen UNK on_rparen on_nl UNK on_const on_nl end on_nl UNK # Seems like the `public_instance_methods.include?` doesn't always work # More context https://github.com/fastlane/fastlane/issues/11481 # That's why we have the `begin` `rescue` code here
def UNK on_lparen UNK on_comma on_op UNK on_comma on_op UNK on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_nl UNK on_period ## # Call a method to return a subclass constant. # # If `method_sym` is an underscored name of a class, # return the class with the current client passed into it. # If the method does not match, NoMethodError is raised. # # Example: # # Certificate.production_push # #=> Certificate::ProductionPush # # ProvisioningProfile.ad_hoc # #=> ProvisioningProfile::AdHoc # # ProvisioningProfile.some_other_method # #=> NoMethodError: undefined method `some_other_method' for ProvisioningProfile
def UNK on_lparen UNK on_comma UNK on_op UNK on_rparen on_ignored_nl self on_period new on_lparen UNK on_comma UNK on_rparen on_nl end ## # The factory class-method. This should only be used or overridden in very specific use-cases # # The only time it makes sense to use or override this method is when we want a base class # to return a sub-class based on attributes. # # Here, we define the method to be the same as `Spaceship::Base.new(attrs)`, be it should # be used only by classes that override it. # # Example: # # Certificate.factory(attrs) # #=> #<PushCertificate ... > #
UNK on_symbeg client on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen UNK on_op UNK UNK on_comma UNK on_op ## # @return (Spaceship::Client) The current spaceship client used by the model to make requests.
UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen UNK on_op UNK UNK on_comma UNK on_op UNK on_rparen on_ignored_nl UNK on_period ## # @return (Hash/Array) Holds the raw data we got from Apple's # server to use it later
def UNK on_lparen UNK on_op UNK UNK on_comma UNK on_op UNK on_rparen on_ignored_nl UNK on_period UNK do on_op key on_comma ## # The initialize method accepts a parsed response from Apple and sets all # attributes that are defined by `attr_mapping` # # Do not override `initialize` in your own models.
def UNK UNK end on_nl on_ignored_nl on_ignored_nl def self on_period UNK on_lparen on_op UNK on_rparen on_ignored_nl on_ivar on_op on_lbracket on_rbracket # This method can be used by subclasses to do additional initialisation # using the `raw_data`
on_ignored_nl def self on_period UNK on_lparen on_op UNK on_rparen on_ignored_nl on_ivar on_op on_lbracket on_rbracket on_nl on_ivar on_period UNK on_lparen UNK ##################################################### # @!group Storing the `attr_accessor` #####################################################
def self on_period UNK on_lparen on_op UNK on_rparen on_ignored_nl on_ivar on_op on_lbracket on_rbracket on_nl on_ivar on_period UNK on_lparen UNK on_rparen # From https://stackoverflow.com/questions/2487333/fastest-one-liner-way-to-list-attr-accessors-in-ruby # This will store a list of defined attr_accessors to easily access them when inspecting the values
on_ignored_nl def UNK on_nl thread on_op on_const on_period UNK on_nl UNK on_op thread on_lbracket on_symbeg UNK on_rbracket on_period UNK on_nl ##################################################### # @!group Inspect related code #####################################################
thread on_op on_const on_period UNK on_nl UNK on_op thread on_lbracket on_symbeg UNK on_rbracket on_period UNK on_nl thread on_lbracket on_symbeg UNK # To avoid circular references, we keep track of the references # of all objects already inspected from the first call to inspect # in this call stack # We use a Thread local storage for multi-thread friendliness
value on_op on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_ignored_nl thread on_lbracket on_symbeg UNK on_rbracket on_period UNK on_lparen self on_rparen on_nl UNK # already inspected objects have a default value, # let's follow Ruby's convention for circular references
on_ignored_nl on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_end on_nl end on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen # to align nested elements
