UNK on_symbeg current_lane on_nl on_ignored_nl UNK on_symbeg current_platform on_nl on_ignored_nl UNK on_symbeg lanes on_nl on_ignored_nl def UNK on_nl on_lbracket current_platform # Symbol for the current lane
UNK on_symbeg current_platform on_nl on_ignored_nl UNK on_symbeg lanes on_nl on_ignored_nl def UNK on_nl on_lbracket current_platform on_comma current_lane on_rbracket on_period UNK # Symbol for the current platform
UNK on_symbeg lanes on_nl on_ignored_nl def UNK on_nl on_lbracket current_platform on_comma current_lane on_rbracket on_period UNK on_lparen on_op on_symbeg nil? on_rparen # @return [Hash] All the lanes available, first the platform, then the lane
def UNK on_lparen lane on_comma platform on_op nil on_comma parameters on_op nil on_rparen on_ignored_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content # This will take care of executing **one** lane. That's when the user triggers a lane from the CLI for example # This method is **not** executed when switching a lane # @param lane_name The name of the lane to execute # @param platform The name of the platform to execute # @param parameters [Hash] The parameters passed from the command line to the lane
execute_flow_block on_lparen UNK on_comma current_platform on_comma current_lane on_comma parameters on_rparen on_nl execute_flow_block on_lparen UNK on_comma current_platform on_comma current_lane on_comma parameters # the file is located in the fastlane folder
on_ignored_nl execute_flow_block on_lparen UNK on_comma current_platform on_comma current_lane on_comma parameters on_rparen on_nl execute_flow_block on_lparen UNK on_comma current_platform on_comma current_lane on_comma # by default no parameters
execute_flow_block on_lparen UNK on_comma current_platform on_comma current_lane on_comma parameters on_rparen on_nl execute_flow_block on_lparen UNK on_comma current_platform on_comma current_lane on_comma parameters # after blocks are only called if no exception was raised before # Call the platform specific after block and then the general one
UNK on_ignored_nl error_blocks on_lbracket current_platform on_rbracket on_period call on_lparen current_lane on_comma UNK on_comma parameters on_rparen if current_platform on_op error_blocks on_lbracket # Provide error block exception without color code
end on_nl end on_nl on_ignored_nl raise UNK on_nl end on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_op nil on_rparen # raise the original error message
def UNK on_lparen UNK on_op nil on_rparen on_ignored_nl UNK on_op on_lbracket on_rbracket on_nl lanes on_period UNK do on_op platform on_comma # @param filter_platform: Filter, to only show the lanes of a given platform # @return an array of lanes (platform lane_name) to print them out to the user
on_ignored_nl UNK on_period UNK do on_op UNK on_comma lane on_op on_ignored_nl UNK on_op on_lbracket platform on_comma UNK on_rbracket on_period UNK # skip actions that don't match
def UNK on_lparen method_sym on_rparen on_ignored_nl UNK on_op method_sym on_period to_s on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen class_ref on_op # Pass a action symbol (e.g. :deliver or :commit_version_bump) # and this method will return a reference to the action class # if it exists. In case the action with this name can't be found # this method will return nil. # This method is being called by `trigger_action_by_name` to see # if a given action is available (either built-in or loaded from a plugin) # and is also being called from the fastlane docs generator
class_ref on_op on_const on_period UNK on_lparen UNK on_rparen on_nl on_ignored_nl return class_ref if class_ref on_op class_ref on_period UNK on_lparen on_symbeg # as a `?` could be at the end of the method name
def UNK on_lparen method_sym on_rparen on_ignored_nl UNK on_op UNK on_lparen method_sym on_period to_s on_rparen on_nl return nil unless UNK on_nl # Pass a action alias symbol (e.g. :enable_automatic_code_signing) # and this method will return a reference to the action class # if it exists. In case the action with this alias can't be found # this method will return nil.
def UNK on_lparen action_name on_rparen on_ignored_nl on_const on_period UNK on_period UNK do on_op UNK on_comma UNK on_op on_ignored_nl UNK unless # lookup if an alias exists
def UNK on_lparen method_sym on_comma custom_dir on_comma UNK on_comma on_op arguments on_rparen on_ignored_nl class_ref on_op UNK on_lparen method_sym on_rparen on_nl # This is being called from `method_missing` from the Fastfile # It's also used when an action is called from another action # @param from_action Indicates if this action is being trigged by another action. # If so, it won't show up in summary.
class_ref on_op UNK on_lparen method_sym on_rparen on_nl unless class_ref on_nl class_ref on_op UNK on_lparen method_sym on_rparen on_nl if class_ref on_period # First, check if there is a predefined method in the actions folder
if class_ref on_period UNK on_lparen on_symbeg UNK on_rparen on_nl UNK on_op method_sym on_period to_s on_nl arguments on_op on_lbracket on_lbrace on_rbrace # notify action that it has been used by alias
UNK on_ignored_nl return self on_period UNK on_lparen method_sym on_comma arguments on_rparen on_nl rescue on_const on_nl end on_nl on_ignored_nl if class_ref # It's important to *not* have this code inside the rescue block # otherwise all NameErrors will be caught and the error message is # confusing
end on_nl on_ignored_nl if class_ref on_nl if class_ref on_period UNK on_lparen on_symbeg UNK on_rparen on_nl return self on_period UNK on_lparen # We don't actually handle this here yet # We just try to use a user configured lane first # and only if there is none, we're gonna check for the # built-in actions
return self on_period UNK on_lparen method_sym on_comma class_ref on_comma arguments on_comma on_label custom_dir on_comma on_label UNK on_rparen on_nl UNK on_ignored_nl # Action is available, now execute it
if on_const on_period UNK on_period UNK on_lparen on_const on_period UNK on_op method_sym on_period to_s on_rparen on_nl on_const on_period user_error! on_lparen # No lane, no action, let's at least show the correct error message
on_const on_period user_error! on_lparen on_tstring_beg on_tstring_content on_embexpr_beg method_sym on_embexpr_end on_tstring_content on_embexpr_beg on_const on_op on_const on_embexpr_end on_tstring_end on_rparen on_nl UNK on_const # That's a plugin, but for some reason we can't find it
on_const on_period UNK on_lparen UNK on_period join on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_rparen on_nl on_const on_period user_error! on_lparen on_tstring_beg on_tstring_content # This was a formerly bundled action which is now a plugin.
on_const on_period UNK on_lparen UNK on_period join on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_rparen on_nl on_const on_period user_error! on_lparen on_tstring_beg on_tstring_content # So there is no plugin under that name, so just show the error message generated by the lane switch
on_ignored_nl UNK on_const on_op on_const on_nl end on_nl on_ignored_nl def UNK on_lparen new_lane on_comma parameters on_rparen on_ignored_nl block on_op lanes # # All the methods that are usually called on execution #
if block on_nl UNK on_op UNK on_nl UNK on_op current_lane on_nl on_ignored_nl on_const on_period user_error! on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen # fallback to general lane for multiple platforms
on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_embexpr_beg UNK on_period join on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_embexpr_end on_tstring_content on_tstring_end on_rparen on_nl # log the action
self on_period current_lane on_op new_lane on_nl on_ignored_nl UNK on_op block on_period call on_lparen parameters on_period first on_op on_lbrace on_rbrace on_rparen # Actually switch lane now
self on_period current_lane on_op UNK on_nl on_ignored_nl execute_flow_block on_lparen UNK on_comma current_platform on_comma new_lane on_comma parameters on_rparen on_nl on_ignored_nl on_const # to always pass a hash
execute_flow_block on_lparen UNK on_comma current_platform on_comma new_lane on_comma parameters on_rparen on_nl on_ignored_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_embexpr_beg UNK # after blocks are only called if no exception was raised before # Call the platform specific after block and then the general one
UNK on_op arguments on_period UNK on_lparen on_const on_rparen on_op arguments on_period first on_period UNK on_lparen on_const on_rparen on_op arguments on_period # go up from the fastlane folder, to the project folder # Removing step_name before its parsed into configurations
if arguments on_period UNK on_op UNK on_nl UNK on_op on_const on_period UNK on_lparen class_ref on_comma on_lbrace on_rbrace on_rparen UNK arguments # arguments is an array by default, containing an hash with the actual parameters # Since we usually just need the passed hash, we'll just use the first object if there is only one
UNK arguments on_period UNK on_op UNK on_op arguments on_period first on_period UNK on_lparen on_const on_rparen on_nl UNK on_op on_const on_period # no parameters => empty hash
UNK on_op class_ref on_period UNK on_nl UNK on_op arguments on_nl UNK on_ignored_nl on_const on_period user_error! on_lparen on_tstring_beg on_tstring_content on_embexpr_beg method_sym # Correct configuration passed
UNK on_op arguments on_nl UNK on_ignored_nl on_const on_period user_error! on_lparen on_tstring_beg on_tstring_content on_embexpr_beg method_sym on_embexpr_end on_tstring_content on_embexpr_beg method_sym on_embexpr_end on_tstring_content # This action does not use the new action format # Just passing the arguments to this method
unless UNK on_nl action_name on_op UNK on_nl action_name on_op class_ref on_period UNK on_lparen on_symbeg UNK on_rparen on_period UNK on_op UNK # If another action is calling this action, we shouldn't show it in the summary # A nil value for action_name will hide it from the summary
return class_ref on_period UNK on_lparen UNK on_rparen on_nl end on_nl end on_nl rescue on_const on_op e on_nl raise e rescue # needed to call another action from an action
rescue on_const on_op on_const on_op on_const on_op e raise e on_nl rescue on_const on_op on_const on_op on_const on_op e UNK # reraise the interruption to avoid logging this as a crash
raise e on_nl rescue on_const on_op on_const on_op on_const on_op e UNK on_lparen method_sym on_period to_s on_comma on_label on_const on_op # these are exceptions that we don't count as crashes
UNK on_lparen method_sym on_period to_s on_comma on_label on_const on_op on_const on_op on_const on_comma on_label e on_rparen on_nl raise e on_nl # user_error!
UNK on_lparen method_sym on_period to_s on_comma on_label on_const on_op on_const on_op on_const on_comma on_label e on_rparen on_nl raise e on_nl # rubocop:disable Lint/RescueException # high chance this is actually FastlaneCore::Interface::FastlaneCrash, but can be anything else # Catches all exceptions, since some plugins might use system exits to get out
end on_nl on_ignored_nl def execute_flow_block on_lparen block on_comma current_platform on_comma lane on_comma parameters on_rparen on_ignored_nl block on_lbracket current_platform on_rbracket on_period # https://github.com/fastlane/fastlane/issues/11913 # if exception.nil? || exception.fastlane_should_report_metrics? # action_completion_context = FastlaneCore::ActionCompletionContext.context_for_action_name(action_name, args: ARGV, status: status) # FastlaneCore.session.action_completed(completion_context: action_completion_context) # end
block on_lbracket current_platform on_rbracket on_period call on_lparen lane on_comma parameters on_rparen if block on_lbracket current_platform on_rbracket on_op current_platform on_nl block # Call the platform specific block and default back to the general one
platform on_op on_const on_period UNK on_lbracket on_const on_op on_const on_op on_const on_rbracket on_nl if platform on_nl unless class_ref on_period UNK # This value is filled in based on the executed platform block. Might be nil when lane is in root of Fastfile
on_ignored_nl def UNK on_lparen lane on_comma UNK on_op UNK on_rparen on_ignored_nl lanes on_lbracket lane on_period platform on_rbracket on_op on_lbrace on_rbrace # Called internally to setup the runner object #
def UNK on_lparen lane on_comma UNK on_op UNK on_rparen on_ignored_nl lanes on_lbracket lane on_period platform on_rbracket on_op on_lbrace on_rbrace on_nl # @param lane [Lane] A lane object
end on_nl on_ignored_nl def UNK on_nl on_ivar on_op on_lbrace on_rbrace on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op on_lbrace # to maintain compatibility with other sibling classes that have this API
