on_ignored_nl def self on_period UNK on_nl on_ivar on_op on_op on_const on_op on_const on_period path on_period UNK on_nl end on_nl on_ignored_nl # fastlane #
on_ivar on_op on_op on_const on_op on_const on_period path on_period UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_nl UNK # This is called from the root context on the first start
def self on_period UNK on_nl UNK on_op on_const on_op on_const on_period path on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl # Checks if fastlane is enabled for this project and returns the folder where the configuration lives
on_ignored_nl def self on_period UNK on_nl on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period each do on_op UNK # fastlane installation method #
def self on_period UNK on_nl on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period each do on_op UNK on_op # @return [boolean] true if executing with bundler (like 'bundle exec fastlane [action]')
on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period each do on_op UNK on_op on_ignored_nl return true if on_const # Bundler environment variable
def self on_period UNK on_nl on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_op on_op self # Do we run from a bundled fastlane, which contains Ruby and OpenSSL? # Usually this means the fastlane directory is ~/.fastlane/bin/ # We set this value via the environment variable `FASTLANE_SELF_CONTAINED`
def self on_period UNK on_nl on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl # returns true if fastlane was installed from the Fabric Mac app
def self on_period UNK on_nl on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl # returns true if fastlane was installed via Homebrew
def self on_period UNK on_nl on_op self on_period UNK on_op on_op self on_period UNK on_op on_op self on_period UNK on_op # returns true if fastlane was installed via RubyGems
on_ignored_nl def self on_period UNK on_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl def self # environment #
def self on_period UNK on_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl def self on_period # @return true if the currently running program is a unit test
def self on_period UNK on_nl on_op self on_period UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_nl return true # @return true if it is enabled to execute external commands
def self on_period UNK on_nl return true if self on_period UNK on_nl on_ignored_nl on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content # @return [boolean] true if building in a known CI environment
on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end # Check for Jenkins, Travis CI, ... environment variables
on_lparen UNK on_tstring_content UNK on_op on_const on_rparen on_op nil on_nl end on_nl on_ignored_nl def self on_period UNK on_nl on_lparen UNK # taken from: https://stackoverflow.com/a/171011/1945875
def self on_period UNK on_nl on_lparen UNK on_tstring_content UNK on_op on_const on_rparen on_op nil on_nl end on_nl on_ignored_nl def self # Is the currently running computer a Mac?
def self on_period UNK on_nl on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl def # Do we want to disable the colored output?
def self on_period UNK on_nl on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl def # Does the user use the Mac stock terminal
def self on_period UNK on_nl return on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl # Logs base directory
on_ignored_nl def self on_period UNK on_nl return on_tstring_beg on_tstring_end unless self on_period UNK on_nl on_ignored_nl if self on_period UNK on_nl # Xcode #
def self on_period UNK on_nl return on_tstring_beg on_tstring_end unless self on_period UNK on_nl on_ignored_nl if self on_period UNK on_nl UNK # @return the full path to the Xcode developer tools of the currently # running system
UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_end on_rparen on_nl return UNK # Xcode server always creates a link here
return on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period UNK on_op UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_nl # XCS is set by Xcode Server
def self on_period UNK on_nl return nil unless self on_period UNK on_nl return on_ivar if on_ivar on_op on_ivar on_op on_const # @return The version of the currently used Xcode installation (e.g. "7.0")
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen if UNK # @return true if Xcode version is higher than 8.3
on_ignored_nl def self on_period UNK on_nl return on_const on_period join on_lparen self on_period UNK on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg # iTMSTransporter #
def self on_period UNK on_nl return on_const on_period join on_lparen self on_period itms_path on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content # @return the full path to the iTMSTransporter executable
def self on_period itms_path on_nl return on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket if on_const on_op on_const on_period UNK on_lparen on_tstring_beg # @return the full path to the iTMSTransporter executable
UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl return UNK if on_const on_period exist? on_lparen UNK on_rparen on_nl on_ignored_nl on_lbracket on_ignored_nl on_tstring_beg # First check for manually install iTMSTransporter
on_lbracket on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period each do on_op # Then check for iTMSTransporter in the Xcode path
on_rbracket on_period each do on_op path on_op on_ignored_nl result on_op on_const on_period UNK on_lparen on_const on_period join on_lparen self on_period # For Xcode 11
return on_tstring_beg on_tstring_end on_nl end on_nl end on_nl on_ignored_nl on_ignored_nl def self on_period UNK on_lparen UNK on_rparen on_ignored_nl on_ignored_nl UNK # not Mac or Windows
on_ignored_nl def self on_period UNK on_lparen UNK on_rparen on_ignored_nl on_ignored_nl UNK on_op UNK on_period UNK on_lparen UNK on_tstring_content UNK on_comma # keychain #
on_ignored_nl UNK on_op UNK on_period UNK on_lparen UNK on_tstring_content UNK on_comma on_tstring_beg on_tstring_end on_rparen on_nl on_ignored_nl UNK on_op on_lbracket on_ignored_nl # Existing code expects that a keychain name will be expanded into a default path to Library/Keychains # in the user's home directory. However, this will not allow the user to pass an absolute path # for the keychain value # # So, if the passed value can't be resolved as a file in Library/Keychains, just use it as-is # as the keychain path. # # We need to expand each path because File.exist? won't handle directories including ~ properly # # We also try to append `-db` at the end of the file path, as with Sierra the default Keychain name # has changed for some users: https://github.com/fastlane/fastlane/issues/5649
UNK on_op UNK on_period UNK on_lparen UNK on_tstring_content UNK on_comma on_tstring_beg on_tstring_end on_rparen on_nl on_ignored_nl UNK on_op on_lbracket on_ignored_nl on_const # Remove the ".keychain" at the end of the keychain name
keychain_paths on_op on_lbracket on_rbracket on_nl UNK on_period each do on_op UNK on_op on_ignored_nl keychain_paths on_op on_tstring_beg on_embexpr_beg UNK on_embexpr_end on_tstring_content # Transforms ["thing"] to ["thing-db", "thing.keychain-db", "thing", "thing.keychain"]
on_ignored_nl def self on_period UNK on_lparen command on_comma on_label true on_rparen on_ignored_nl on_const on_period command on_lparen command on_rparen if UNK # helper methods #
def self on_period UNK on_lparen command on_comma on_label true on_rparen on_ignored_nl on_const on_period command on_lparen command on_rparen if UNK on_nl # Runs a given command using backticks (`) # and prints them out using the UI.command method
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK on_lparen UNK on_tstring_content UNK on_comma on_tstring_beg on_tstring_end on_rparen on_nl # removes ANSI colors from string
def self on_period UNK on_lparen path on_comma UNK on_comma on_label false on_comma on_label false on_comma on_label true on_rparen on_ignored_nl if # Zips directory
def self on_period UNK on_lparen UNK on_comma on_op UNK on_rparen on_ignored_nl UNK on_op on_const on_period UNK UNK on_op k on_comma # Executes the provided block after adjusting the ENV to have the # provided keys and values set as defined in hash. After the block # completes, restores the ENV to its previous state.
on_ignored_nl def self on_period UNK on_nl return false if on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl # loading indicator #
def self on_period UNK on_lparen UNK on_op nil on_rparen on_ignored_nl if self on_period UNK on_nl UNK on_op on_tstring_beg on_tstring_content on_tstring_end # Show/Hide loading indicator
UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ivar on_op on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_content # we set the default here, instead of at the parameters # as we don't want to `UI.message` a rocket that's just there for the loading indicator
on_ignored_nl def self on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op on_op on_const on_period UNK on_lparen UNK on_rparen on_op on_lparen # files #
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op on_op on_const on_period UNK on_lparen UNK on_rparen on_op on_lparen on_const # checks if a given path is an executable file
UNK on_op on_op on_const on_period UNK on_lparen UNK on_rparen on_op on_lparen on_const on_period UNK on_lparen UNK on_rparen on_op on_lparen self # no executable files on Windows, so existing is enough there
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl return false unless on_const on_period exist? on_lparen UNK on_rparen on_nl UNK on_ignored_nl # checks if given file is a valid json file # base taken from: http://stackoverflow.com/a/26235831/1945875
on_ignored_nl def self on_period UNK on_nl self on_period UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_nl UNK on_nl # deprecated #
def self on_period UNK on_nl self on_period UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_nl UNK on_nl end # Use Helper.test?, Helper.ci?, Helper.mac? or Helper.windows? instead (legacy calls)
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ignored_nl if on_op # <b>DEPRECATED:</b> Use the `ROOT` constant from the appropriate tool module instead # e.g. File.join(Sigh::ROOT, 'lib', 'assets', 'resign.sh') # # Path to the installed gem to load resources (e.g. resign.sh)
def self on_period UNK on_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_period UNK on_period UNK on_nl # This method is deprecated, use the `UI` class # https://docs.fastlane.tools/advanced/#user-input-and-output
