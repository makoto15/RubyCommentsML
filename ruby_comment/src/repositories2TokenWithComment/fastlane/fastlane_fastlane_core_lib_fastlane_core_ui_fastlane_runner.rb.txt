UNK on_const on_nl class on_const on_op on_const UNK end on_nl class on_const on_op on_const UNK end on_nl class on_const on_op # We create these empty error classes if we didn't require Faraday # so that we can use it in the rescue block below even if we didn't # require Faraday or didn't use it
class on_const on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_nl UNK on_lparen on_symbeg UNK on_comma on_symbeg UNK on_rparen # This class override the run method with our custom stack trace handling # In particular we want to distinguish between user_error! and crash! (one with, one without stack trace)
on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_nl UNK on_lparen on_symbeg UNK on_comma on_symbeg UNK on_rparen on_nl UNK on_lparen # Code taken from https://github.com/commander-rb/commander/blob/master/lib/commander/runner.rb#L50
end on_nl on_ignored_nl UNK on_ignored_nl if UNK on_nl on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_embexpr_beg on_const on_op on_const # We don't care about exceptions here # We'll land here if the user doesn't have Xcode at all for example # which is fine for someone who uses fastlane just for Android project # What we *do* care about is when someone links an old version of Xcode
on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_embexpr_beg on_const on_op on_const on_embexpr_end on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl # We have to raise that error within this `begin` block to show a nice user error without a stack trace
if on_const on_op on_const on_period UNK on_nl UNK e on_nl else on_ignored_nl abort on_lparen on_tstring_beg on_embexpr_beg e on_embexpr_end on_tstring_content on_tstring_end # calling `abort` makes it likely that tests stop without failing, so # we'll disable that during tests.
if on_const on_op on_const on_period UNK on_nl UNK e on_nl else on_ignored_nl action_completed on_lparen on_ivar on_lbracket on_symbeg name on_rbracket on_comma # We catch it so that the stack trace is hidden by default when using ctrl + c
if on_const on_op on_const on_period UNK on_nl UNK e on_nl else on_ignored_nl if UNK on_period UNK on_period name on_op on_tstring_beg # calling `abort` makes it likely that tests stop without failing, so # we'll disable that during tests.
abort on_lparen on_tstring_beg on_tstring_content on_embexpr_beg UNK on_period UNK on_period UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_embexpr_end on_tstring_content on_tstring_end # need to access directly via @ # This is a special case, for example for pilot # when the user runs `fastlane pilot -u user@google.com` # This would be confusing, as the user probably wanted to use `pilot list` # or some other command. Because `-u` isn't available for the `pilot --help` # command it would show this very confusing error message otherwise
abort on_lparen e on_period UNK on_rparen on_nl end on_nl end on_nl rescue on_const on_op on_const on_op on_const on_op e display_user_error! # This would print something like # # invalid option: -u #
display_user_error! on_lparen e on_comma e on_period UNK on_rparen on_nl rescue on_const on_op on_const on_op on_const on_op e UNK on_lparen e # these are exceptions that we don't count as crashes
UNK on_lparen e on_rparen on_nl rescue on_const on_op on_const on_op e on_nl UNK on_lparen e on_rparen on_nl rescue on_const on_op # user_error!
UNK on_lparen e on_rparen on_nl rescue on_const on_op on_const on_op e on_nl UNK on_lparen e on_rparen on_nl rescue on_op e # SSL issues are very common
UNK on_lparen e on_rparen on_nl UNK on_ignored_nl on_const on_period UNK on_period UNK on_nl end on_nl end on_nl on_ignored_nl def action_completed # high chance this is actually FastlaneCore::Interface::FastlaneCrash, but can be anything else
end on_nl on_ignored_nl def UNK on_lparen e on_rparen on_ignored_nl UNK on_lparen on_tstring_beg on_tstring_end on_rparen on_nl on_const on_op on_const on_period UNK # https://github.com/fastlane/fastlane/issues/11913 # if exception.nil? || exception.fastlane_should_report_metrics? # action_completion_context = FastlaneCore::ActionCompletionContext.context_for_action_name(action_name, args: ARGV, status: status) # FastlaneCore.session.action_completed(completion_context: action_completion_context) # end
UNK on_lparen on_tstring_beg on_tstring_end on_rparen on_nl on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_op on_const # We're also printing the new-lines, as otherwise the message is not very visible in-between the error and the stack trace
UNK on_lparen e on_rparen on_nl display_user_error! on_lparen e on_comma e on_period UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen # Apple has upgraded its App Store Connect servers to require TLS 1.2, but # system Ruby 2.0 does not support it. We want to suggest that users upgrade # their Ruby version
UNK on_lparen e on_rparen on_nl display_user_error! on_lparen e on_comma e on_period UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen # SSL errors are very common when the Ruby or OpenSSL installation is somehow broken # We want to show a nice error message to the user here # We have over 20 GitHub issues just for this one error: # https://github.com/fastlane/fastlane/search?q=errno%3D0+state%3DSSLv3+read+server&type=Issues
error_info on_op e on_period UNK on_lparen on_symbeg UNK on_rparen on_op e on_period UNK on_op UNK on_nl UNK on_op e on_period # Some spaceship exception classes implement #preferred_error_info in order to share error info # that we'd rather display instead of crashing with a stack trace. However, fastlane_core and # spaceship can not know about each other's classes! To make this information passing work, we # use a bit of Ruby duck-typing to check whether the unknown exception type implements the right # method. If so, we'll present any returned error info in the manner of a user_error!
show_github_issues on_lparen e on_rparen if UNK on_nl on_ignored_nl UNK on_lparen e on_comma e on_period message on_rparen on_nl end on_nl end # Pass the error instead of a message so that the inspector can do extra work to simplify the query
UNK on_lparen e on_comma e on_period message on_rparen on_nl end on_nl end on_nl on_ignored_nl def display_user_error! on_lparen e on_comma message # From https://stackoverflow.com/a/4789702/445598 # We do this to make the actual error message red and therefore more visible
UNK on_lparen e on_comma message on_rparen on_nl else on_ignored_nl action_completed on_lparen on_ivar on_lbracket on_symbeg name on_rbracket on_comma on_label on_const on_op # with stack trace
action_completed on_lparen on_ivar on_lbracket on_symbeg name on_rbracket on_comma on_label on_const on_op on_const on_op on_const on_comma on_label e on_rparen on_nl abort # without stack trace
