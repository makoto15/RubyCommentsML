file_content on_op on_tstring_beg on_tstring_content on_tstring_end on_nl file_content on_op UNK on_nl on_ignored_nl UNK on_op UNK on_lparen on_label tool_details on_period UNK on_lparen # newline because we're adding an extension
api_version on_op UNK on_lparen on_label new_file_content on_comma on_label old_file_content on_rparen on_nl old_api_version on_op find_api_version_string on_lparen on_label old_file_content on_rparen on_nl on_ignored_nl # compare old file content to potential new file content
if api_version on_op old_api_version on_nl file_content on_op UNK on_lparen on_label api_version on_rparen on_nl UNK on_ignored_nl file_content on_op nil on_nl end # if there is a change, we need to write out the new file
UNK on_op on_const on_period UNK on_op on_lbracket on_rbracket on_nl available_actions on_op on_lbracket on_rbracket on_nl on_const on_period UNK do on_op action # Excludes all actions that aren't external actions (including plugins)
UNK on_op on_const on_period UNK on_period UNK on_period UNK on_period UNK do on_op UNK on_op on_ignored_nl UNK on_lbracket on_symbeg UNK # Gets list of plugin actions
UNK on_op UNK on_period UNK do on_op UNK on_op on_ignored_nl on_const on_op on_const on_period UNK on_period UNK on_lparen UNK on_rparen # Action references from plugins
available_actions on_op on_lbracket on_rbracket on_nl on_const on_period UNK do on_op action on_op on_ignored_nl available_actions on_op action on_period action_name unless UNK # Excludes all actions that aren't pluign actions (including external actions)
on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl def UNK on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_const # stores all file names of generated files (as they are generated)
self on_period UNK on_op on_const on_period UNK UNK on_op UNK on_op UNK on_period UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end # Tools that can be used with <Toolname>file, like Deliverfile, Screengrabfile # this is important because we need to generate the proper api for these by creating a protocol # with default implementation we can use in the Fastlane.swift API if people want to use # <Toolname>file.swift files.
file_content on_op on_lbracket on_rbracket on_nl file_content on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl tool_details on_op on_lbracket on_rbracket on_nl on_const on_period UNK # reset generated paths in case we're called multiple times
self on_period generated_paths on_op UNK if UNK on_period UNK on_op on_int on_nl on_ignored_nl return self on_period generated_paths on_nl end on_nl # we might not have any changes, like if it's a hotpatch
def UNK on_lparen on_label nil on_comma on_label nil on_rparen on_ignored_nl unless old_file_content on_period UNK on_op new_file_content on_period UNK on_nl old_api_version # compares the new file content to the old and figures out what api_version the new content should be
unless old_file_content on_period UNK on_op new_file_content on_period UNK on_nl old_api_version on_op find_api_version_string on_lparen on_label old_file_content on_rparen on_nl on_ignored_nl return on_const # we know 100% there is a difference, so no need to compare
return find_api_version_string on_lparen on_label old_file_content on_rparen on_nl UNK on_ignored_nl old_api_version on_op find_api_version_string on_lparen on_label old_file_content on_rparen on_nl on_ignored_nl return on_const # no changes at all, just return the same old api version string
old_api_version on_op find_api_version_string on_lparen on_label old_file_content on_rparen on_nl on_ignored_nl return on_const if old_api_version on_period UNK on_nl on_ignored_nl return UNK on_lparen # there are differences, so calculate a new api_version_string
def UNK on_lparen on_label nil on_comma on_label on_symbeg patch on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end # expects format to be "X.Y.Z" where each value is a number
if on_const on_period UNK on_lparen target_path on_rparen on_nl old_file_content on_op on_const on_period UNK on_lparen target_path on_rparen on_nl end on_nl on_ignored_nl # we might have a new file here, unlikely, but possible
api_version on_op UNK on_lparen on_label new_file_content on_comma on_label old_file_content on_rparen on_nl old_api_version on_op find_api_version_string on_lparen on_label old_file_content on_rparen on_nl on_ignored_nl # compare old file content to potential new file content
return nil if api_version on_op old_api_version on_nl on_ignored_nl UNK on_op UNK on_lparen on_label api_version on_rparen on_nl new_file_content on_period UNK on_lparen # we don't need to write this file out because the file versions are exactly the same
UNK on_op UNK on_lparen on_label api_version on_rparen on_nl new_file_content on_period UNK on_lparen UNK on_rparen on_nl on_ignored_nl target_path on_op on_const on_period # use api_version to generate the disclaimer
