on_ignored_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_op UNK on_nl UNK UNK on_lparen legacy_lang on_op on_const on_comma # frozen_string_literal: true
UNK UNK on_lparen legacy_lang on_op on_const on_comma UNK on_symbeg UNK on_rparen on_ignored_nl UNK UNK on_op keywords on_op on_ignored_nl keywords on_op ## # Produces source code for Hello World in a given language. # # @param lang [Symbol] The programming language to use # @return [String] # # @example # Faker::Source.hello_world #=> "puts 'Hello World!'" # # @example # Faker::Source.hello_world(lang: :javascript) # #=> "alert('Hello World!');" # # @faker.version 1.9.0
UNK UNK on_lparen UNK on_op on_const on_comma legacy_lang on_op on_const on_comma UNK UNK UNK UNK on_comma UNK on_symbeg UNK on_rparen ## # Produces source code for printing a string in a given language. # # @param str [String] The string to print # @param lang [Symbol] The programming language to use # @return [String] # # @example # Faker::Source.print #=> "puts 'faker_string_to_print'" # @example # Faker::Source.print(str: 'foo bar', lang: :javascript) # #=> "console.log('foo bar');" # # @faker.version 1.9.0
UNK UNK on_lparen legacy_lang on_op on_const on_comma UNK on_symbeg UNK on_rparen on_ignored_nl UNK UNK on_op keywords on_op on_ignored_nl keywords on_op ## # Produces source code for printing 1 through 10 in a given language. # # @param lang [Symbol] The programming language to use # @return [String] # # @example # Faker::Source.print_1_to_10 #=> "(1..10).each { |i| puts i }" # @example # Faker::Source.print_1_to_10(lang: :javascript) # # => "for (let i=0; i<10; i++) { # # console.log(i); # # }" # # @faker.version 1.9.0
