on_ignored_nl UNK on_const on_nl UNK on_const on_op on_const on_nl on_const on_op on_const on_op on_const on_nl on_ignored_nl UNK on_op UNK on_nl # frozen_string_literal: true
on_const on_op on_const on_op on_const on_nl on_ignored_nl UNK on_op UNK on_nl UNK UNK on_lparen UNK on_op on_const on_comma UNK on_int ## # List of characters allowed for alphanumeric strings # @private
UNK UNK on_lparen UNK on_op on_const on_comma UNK on_int on_rparen on_ignored_nl UNK UNK on_op UNK on_op on_ignored_nl UNK on_op UNK ## # Produces a random string of alphabetic characters (no digits) # # @param number [Integer] The length of the string to generate # # @return [String] # # @example # Faker::Alphanumeric.alpha(number: 10) #=> "zlvubkrwga" # # @faker.version 1.9.2
UNK UNK on_lparen UNK on_op on_const on_comma UNK on_int on_comma UNK on_int on_comma UNK on_int on_rparen on_ignored_nl UNK UNK on_op ## # Produces a random string of alphanumeric characters # # @param number [Integer] The number of characters to generate # @param min_alpha [Integer] The minimum number of alphabetic to add to the string # @param min_numeric [Integer] The minimum number of numbers to add to the string # # @return [String] # # @example # Faker::Alphanumeric.alphanumeric(number: 10) #=> "3yfq2phxtb" # @example # Faker::Alphanumeric.alphanumeric(number: 10, min_alpha: 3) #=> "3yfq2phxtb" # @example # Faker::Alphanumeric.alphanumeric(number: 10, min_alpha: 3, min_numeric: 3) #=> "3yfq2phx8b" # # @faker.version 2.1.3
