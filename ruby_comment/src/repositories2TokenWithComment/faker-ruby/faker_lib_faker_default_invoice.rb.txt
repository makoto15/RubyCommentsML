on_ignored_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_op UNK on_nl def UNK # frozen_string_literal: true
def UNK on_lparen UNK on_op on_const on_comma UNK on_op on_const on_comma UNK on_int on_comma UNK on_int on_rparen on_ignored_nl UNK UNK # Generate random amount between values with 2 decimals
def UNK on_lparen UNK on_op on_const on_comma UNK on_tstring_beg on_tstring_end on_rparen on_ignored_nl UNK UNK on_op keywords on_op on_ignored_nl keywords on_op # International bank slip reference https://en.wikipedia.org/wiki/Creditor_Reference # ref is optional so that we can create unit tests
def UNK on_lparen UNK on_op on_const on_comma UNK on_tstring_beg on_tstring_end on_rparen on_ignored_nl UNK UNK on_op keywords on_op on_ignored_nl keywords on_op # Payment references have some rules in certain countries # ref is optional so that we can create unit tests
UNK on_op ref on_period UNK on_lparen UNK on_tstring_content UNK on_rparen on_nl if UNK on_nl UNK on_op UNK on_lparen on_tstring_beg on_tstring_content # If reference contains reserved '#' characters we need to calculate check_digits as well
UNK on_op UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ignored_nl UNK on_op UNK on_lparen UNK on_comma ref on_period UNK on_lparen # Get the method for selected language
UNK on_op UNK on_lparen UNK on_comma ref on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_end on_rparen on_rparen on_nl on_ignored_nl # Calculate the check digit with matching method name # Trim all '#' from the reference before calculating that
UNK on_op UNK on_period UNK on_period UNK on_lparen UNK UNK on_int UNK on_period UNK on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl # Make sure that our check digit is as long as all of the '###' we found
ref on_op ref on_period UNK on_lparen UNK UNK on_int UNK on_comma UNK on_rparen on_nl end on_nl on_ignored_nl ref on_nl end # Replace all of the
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK on_op on_tstring_beg UNK UNK UNK UNK UNK UNK on_tstring_content on_tstring_end on_period # Calculates the mandatory checksum in 3rd and 4th characters in IBAN format # source: https://en.wikipedia.org/wiki/International_Bank_Account_Number#Validating_the_IBAN
UNK on_op on_tstring_beg UNK UNK UNK UNK UNK UNK on_tstring_content on_tstring_end on_period UNK on_period UNK on_period UNK UNK on_op UNK # Converts letters to numbers according the iban rules, A=10..Z=35
UNK on_op on_lparen on_int on_op UNK on_rparen on_op on_int on_nl on_ignored_nl UNK on_period UNK on_period UNK on_lparen on_int on_comma on_tstring_beg # This is answer to (iban_to_num + checksum) % 97 == 1
UNK on_period UNK on_period UNK on_lparen on_int on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen base # Use leftpad to make the size always to 2
def UNK on_lparen base on_rparen on_ignored_nl UNK on_op UNK on_lparen base on_comma UNK on_int on_comma on_int on_comma on_int UNK on_rparen # 731 Method # Source: https://wiki.xmldation.com/support/fk/finnish_reference_number
def UNK on_lparen base on_rparen on_ignored_nl UNK on_op UNK on_lparen base on_comma UNK on_int on_comma on_int UNK on_rparen on_nl UNK # Norsk Modulus 10 - KIDMOD10
def UNK on_lparen base on_comma UNK on_rparen on_ignored_nl base on_period UNK on_period UNK on_period UNK on_period UNK on_period UNK UNK # Calculates weigthed sum # # For example with 12345678, [1,2] # Ref.num. 1 2 3 4 5 6 7 8 # Multipl. 1 2 1 2 1 2 1 2 # Total 1+ 4+ 3+ 8+ 5+1+2+ 7+1+6 = 38
end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_op UNK on_op on_int on_nl end on_nl end on_nl end on_nl # reduce(:+) = sum() but with better ruby version support
def UNK on_lparen UNK on_rparen on_ignored_nl on_op UNK on_op on_int on_nl end on_nl end on_nl end on_nl end on_nl EMP # MOD-10 - remainder
