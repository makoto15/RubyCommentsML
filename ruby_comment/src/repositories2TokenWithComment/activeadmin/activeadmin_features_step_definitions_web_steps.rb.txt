on_ignored_nl on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK UNK UNK on_comma on_tstring_beg on_tstring_content on_tstring_end UNK on_nl on_ignored_nl UNK on_regexp_beg on_tstring_content # Add more mappings here. # Here is an example that pulls values out of the Regexp: # # when /^the (notice|error|info) flash$/ # ".flash.#{$1}"
on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK UNK UNK on_comma on_tstring_beg on_tstring_content on_tstring_end UNK on_nl on_ignored_nl UNK on_regexp_beg on_tstring_content on_regexp_end # You can also return an array to use a different selector # type, like: # # when /the header/ # [:xpath, "//header"]
UNK on_regexp_beg on_tstring_content on_regexp_end on_nl UNK on_nl on_ignored_nl UNK on_ignored_nl UNK on_tstring_beg on_tstring_content UNK locator UNK on_tstring_content on_tstring_end on_op on_ignored_nl # This allows you to provide a quoted selector as the scope # for "within" steps as was previously the default for the # web steps:
UNK on_tstring_beg on_tstring_content UNK locator UNK on_tstring_content on_tstring_end on_op on_ignored_nl on_tstring_beg on_tstring_content UNK UNK UNK on_tstring_end on_nl end on_nl end # :nocov:
end on_nl end on_nl end on_nl on_const on_lparen on_const on_rparen on_nl on_ignored_nl on_const on_regexp_beg on_tstring_content on_regexp_end do on_op UNK on_comma # :nocov:
