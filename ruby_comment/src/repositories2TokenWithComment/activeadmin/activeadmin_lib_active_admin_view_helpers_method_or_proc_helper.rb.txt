UNK on_const on_nl UNK UNK on_nl on_ignored_nl UNK UNK on_lparen symbol_or_proc on_comma on_op args on_rparen on_ignored_nl UNK symbol_or_proc on_nl when # Utility methods for internal use. # @private
UNK UNK on_lparen symbol_or_proc on_comma on_op args on_rparen on_ignored_nl UNK symbol_or_proc on_nl when on_const on_comma on_const on_nl UNK on_lparen symbol_or_proc # This method will either call the symbol on self or instance_exec the Proc # within self. Any args will be passed along to the method dispatch. # # Calling with a Symbol: # # call_method_or_exec_proc(:to_s) #=> will call #to_s # # Calling with a Proc # # my_proc = Proc.new{ to_s } # call_method_or_exec_proc(my_proc) #=> will instance_exec in self #
UNK UNK on_lparen UNK on_comma on_op args on_rparen on_ignored_nl UNK on_op UNK UNK UNK UNK on_period UNK on_lparen args on_period # Many times throughout the views we want to either call a method on an object # or instance_exec a proc passing in the object as the first parameter. This # method wraps that pattern. # # Calling with a String or Symbol: # # call_method_or_proc_on(@my_obj, :size) same as @my_obj.size # # Calling with a Proc: # # proc = Proc.new{|s| s.size } # call_method_or_proc_on(@my_obj, proc) # # By default, the Proc will be instance_exec'd within self. If you would rather # not instance exec, but just call the Proc, then pass along `exec: false` in # the options hash. # # proc = Proc.new{|s| s.size } # call_method_or_proc_on(@my_obj, proc, exec: false) # # You can pass along any necessary arguments to the method / Proc as arguments. For # example: # # call_method_or_proc_on(@my_obj, :find, 1) #=> @my_obj.find(1) #
UNK UNK on_lparen obj on_comma UNK on_comma UNK on_op UNK UNK on_rparen on_ignored_nl UNK UNK on_nl when on_const on_comma on_const # Many configuration options (Ex: site_title, title_image) could either be # static (String), methods (Symbol) or procs (Proc). This helper takes care of # returning the content when String or call call_method_or_proc_on when Symbol or Proc. #
UNK UNK on_lparen UNK on_comma obj on_comma on_op args on_rparen on_ignored_nl UNK on_op UNK UNK UNK on_period UNK UNK obj # This method is different from the others in that it calls `instance_exec` on the receiver, # passing it the proc. This evaluates the proc in the context of the receiver, thus changing # what `self` means inside the proc.
UNK obj on_nl when on_const on_nl UNK on_period UNK on_op args on_comma on_op obj on_nl when on_const on_nl UNK on_period # default to `self` only when nil
