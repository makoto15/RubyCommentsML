UNK on_const on_nl def UNK on_lparen UNK on_comma UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_rparen on_ignored_nl UNK on_op UNK on_nl UNK # TODO: simplify this, if possible?
UNK on_tstring_beg on_tstring_content on_embexpr_beg input on_embexpr_end on_tstring_end on_nl end on_nl end on_nl end on_nl on_ignored_nl UNK on_const on_nl def UNK # :nocov:
end on_nl end on_nl end on_nl on_ignored_nl UNK on_const on_nl def UNK on_lparen UNK on_comma expected_table on_rparen on_ignored_nl expected_table on_period # :nocov:
def UNK on_lparen UNK on_comma expected_table on_rparen on_ignored_nl expected_table on_period UNK do on_op UNK on_op on_ignored_nl expected_table UNK UNK UNK # @param table [Array[Array]] # @param expected_table [Array[Array[String]]] # The expected_table values are String. They are converted to # Regexp when they start and end with a '/' # Example: # # assert_table_match( # [["Name", "Date"], ["Philippe", "Feb 08"]], # [["Name", "Date"], ["Philippe", "/\w{3} \d{2}/"]] # )
UNK on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_content on_embexpr_beg cell on_period UNK on_embexpr_end on_tstring_content on_embexpr_beg expected_cell on_period # :nocov:
end on_nl end on_nl end on_nl end on_nl on_ignored_nl def UNK on_lparen cell on_comma expected_cell on_rparen on_ignored_nl UNK expected_cell on_op # :nocov:
on_const UNK on_tstring_content UNK do on_op UNK on_comma expected_table on_op on_ignored_nl UNK on_lparen UNK on_rparen on_period UNK UNK on_tstring_beg on_tstring_content # Usage: # # I should see the "invoices" table: # | Invoice # | Date | Total Amount | # | /\d+/ | 27/01/12 | $30.00 | # | /\d+/ | 12/02/12 | $25.00 | #
