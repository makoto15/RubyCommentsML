def UNK on_nl UNK on_op on_ivar on_period UNK on_period UNK on_op on_lbracket on_rbracket on_nl end on_nl on_ignored_nl def UNK on_nl # @return [Array] The set of batch actions for this resource
def UNK on_nl on_ivar on_period UNK on_op UNK on_period UNK on_op on_ivar on_nl end on_nl on_ignored_nl def UNK on_lparen UNK # @return [Boolean] If batch actions are enabled for this resource
on_ivar on_period UNK on_op UNK on_period UNK on_op on_ivar on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar # If the resource config has been set, use it. Otherwise # return the namespace setting
def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def UNK on_lparen sym on_comma UNK on_comma # Disable or Enable batch actions for this resource # Set to `nil` to inherit the setting from the namespace
def UNK on_lparen sym on_comma UNK on_comma UNK on_op on_lbrace on_rbrace on_comma on_op UNK on_rparen on_ignored_nl on_ivar on_lbracket sym on_rbracket # Add a new batch item to a resource # @param [String] title # @param [Hash] options # => :if is a proc that will be called to determine if the BatchAction should be displayed # => :sort_order is used to sort the batch actions ascending # => :confirm is a string to prompt the user with (or a boolean to use the default message) # => :form is a Hash of form fields you want the user to fill out #
def UNK on_lparen sym on_rparen on_ignored_nl on_ivar on_period UNK on_lparen sym on_period UNK on_rparen on_nl end on_nl on_ignored_nl def UNK # Remove a batch action # @param [Symbol] sym # @return [ActiveAdmin::BatchAction] the batch action, if it was present #
def UNK on_nl on_ivar on_op on_lbrace on_rbrace on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl def UNK on_nl UNK on_op on_lbrace # Clears all the existing batch actions for this resource
def UNK on_nl UNK on_op on_lbrace on_ignored_nl on_label UNK on_comma on_ignored_nl on_label proc on_lbrace on_const on_period UNK on_lparen UNK UNK # @return [ActiveAdmin::BatchAction] The default "delete" action
def UNK on_lparen sym on_comma UNK on_comma UNK on_op on_lbrace on_rbrace on_comma on_op UNK on_rparen on_ignored_nl on_ivar on_op sym on_nl # Create a Batch Action # # Examples: # # BatchAction.new :flag # => Will create an action that appears in the action list popover # # BatchAction.new(:flag) { |selection| redirect_to collection_path, notice: "#{selection.length} users flagged" } # => Will create an action that uses a block to process the request (which receives one paramater of the selected objects) # # BatchAction.new("Perform Long Operation on") { |selection| } # => You can create batch actions with a title instead of a Symbol # # BatchAction.new(:flag, if: proc{ can? :flag, AdminUser }) { |selection| } # => You can provide an `:if` proc to choose when the batch action should be displayed # # BatchAction.new :flag, confirm: true # => You can pass `true` to `:confirm` to use the default confirm message. # # BatchAction.new(:flag, confirm: "Are you sure?") { |selection| } # => You can pass a custom confirmation message through `:confirm` # # BatchAction.new(:flag, form: {foo: :text, bar: :checkbox}) { |selection, inputs| } # => You can pass a hash of options to `:form` that will be rendered as form input fields for the user to fill out. #
def UNK on_nl on_ivar on_lbracket on_symbeg UNK on_rbracket on_op proc on_lbrace UNK on_rbrace on_nl end on_nl on_ignored_nl def UNK on_nl # Returns the display if block. If the block was not explicitly defined # a default block always returning true will be returned.
def UNK on_nl on_ivar on_lbracket on_symbeg UNK on_rbracket on_op UNK on_nl end on_nl on_ignored_nl def on_op on_lparen UNK on_rparen on_ignored_nl # Used for sorting
def on_op on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK on_op UNK on_period UNK on_nl end on_nl on_ignored_nl end on_nl on_ignored_nl # sort operator
