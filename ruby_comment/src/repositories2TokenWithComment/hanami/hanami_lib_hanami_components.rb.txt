UNK on_const on_nl on_ivar on_op on_const on_op on_const on_period UNK on_nl on_ignored_nl on_ivar on_op on_const on_op on_const on_period UNK on_nl # Components API # # Components are an internal Hanami that provides precise loading mechanism # for a project. It is responsible to load frameworks, configurations, code, etc.. # # The implementation is thread-safe # # @example # Hanami::Components.resolved('repo') { UserRepository.new } # Hanami::Components['repository.users'] # => #<UserRepository relations=[...]> # # Also you can use Hanami::Components with dry-auto_inject # # @example # Hanami::Components.resolved('repo') { UserRepository.new } # Hanami::Components['repository.users'] # => #<UserRepository relations=[...]> # # HanamiImport = Dry::AutoInject(Hanami::Components) # # class CreateUser # include HanamiImport['repository.users'] # # def call(payload) # users.create(payload) # end # end # # CreateUser.new.call # => #<User:...> # CreateUser.new(users: MockRepository.new).call # => #<MockUser:...> # # @since 0.9.0 # @api private
on_ivar on_op on_const on_op on_const on_period UNK on_nl on_ignored_nl on_ivar on_op on_const on_op on_const on_period UNK on_nl on_ignored_nl def self # Available components # # @since 0.9.0 # @api private
on_ivar on_op on_const on_op on_const on_period UNK on_nl on_ignored_nl def self on_period UNK on_lparen name UNK on_op UNK on_rparen on_ignored_nl # Resolved components # # @since 0.9.0 # @api private
def self on_period UNK on_lparen name UNK on_op UNK on_rparen on_ignored_nl on_ivar UNK name UNK on_op on_const on_period UNK on_lparen # Register a component # # @param name [String] the unique component name # @param blk [Proc] the logic of the component # # @since 0.9.0 # @api private # # @see Hanami::Components::Component
def self on_period UNK on_lparen name on_rparen on_ignored_nl on_ivar on_period UNK on_lparen name on_rparen UNK on_ignored_nl UNK on_const on_period UNK # Return a registered component # # @param name [String] the name of the component # # @raise [ArgumentError] if the component is unknown # # @since 0.9.0 # @api private
def self on_period UNK on_lparen name UNK UNK on_op UNK UNK on_op UNK on_rparen on_ignored_nl UNK UNK on_nl on_ivar on_period # Mark a component as resolved by providing a value or a block. # In the latter case, the returning value of the block is associated with # the component. # # @param name [String] the name of the component to mark as resolved # @param value [Object] the optional value of the component # @param blk [Proc] the optional block which returning value is associated with the component. # # @since 0.9.0 # @api private
def self on_period UNK on_lparen on_op UNK on_rparen on_ignored_nl on_const on_lparen UNK on_rparen on_period UNK on_period UNK UNK on_op name # Ask to resolve a component. # # This is used as dependency mechanism. # For instance `model` component depends on `model.configuration`. Before to # resolve `model`, `Components` uses this method to resolve that dependency first. # # @param names [String,Array<String>] one or more components to be resolved # # @since 0.9.0 # @api private
def self on_period on_op on_lparen name on_rparen on_ignored_nl on_ivar on_period UNK on_lparen name on_rparen UNK on_ignored_nl UNK on_const on_period UNK # Return the value of an already resolved component. Or raise error for not resolved component. # # @example # Hanami::Components.resolved('repository.users') { UserRepository.new } # # Hanami::Components['repository.users'] # => #<UserRepository relations=[...]> # Hanami::Components['repository.other'] # => error # # @param name [String] the component name # # @raise [ArgumentError] if the component is unknown or not resolved yet. # # @since 0.9.0 # @api private
def self on_period UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content # Release all the resolved components. # This is used for code reloading. # # NOTE: this MUST NOT be used unless you know what you're doing. # # @example # Hanami::Components.resolved('repository.users') { UserRepository.new } # Hanami::Components['repository.users'] # => #<UserRepository relations=[...]> # # Hanami::Components.release # Hanami::Components['repository.users'] # # => ArgumentError: Component not resolved: `repo'. # # => Resolved components are: ... # # @since 1.0.0 # @api private
