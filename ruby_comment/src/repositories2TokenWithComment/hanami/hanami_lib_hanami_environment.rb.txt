UNK on_const on_nl on_const on_op on_const on_period UNK on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_ignored_nl on_const # Define and expose information about the Hanami environment. # # @since 0.1.0 # @api private
on_const on_op on_const on_period UNK on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content # Global lock (used to serialize process of environment configuration) # # @since 0.8.0 # @api private
on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_ignored_nl on_const on_op # Standard Rack ENV key # # @since 0.1.0 # @api private
on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_ignored_nl on_const on_op # Standard Hanami ENV key # # @since 0.1.0 # @api private
on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_ignored_nl on_const on_op # Default Hanami environment # # @since 0.1.0 # @api private
on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_ignored_nl on_const on_op # Test environment # # @since 1.3.3 # @api private
on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_ignored_nl on_const on_op # Production environment # # @since 0.6.0 # @api private
on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_ignored_nl on_const on_op # Rack production environment (aka deployment) # # @since 0.6.0 # @api private
on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_ignored_nl on_const on_op on_lbracket on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_comma on_ignored_nl # @since 1.3.3 # @api private
on_const on_op on_lbracket on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_comma on_ignored_nl on_const on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_comma # Default `.env` files that are loaded. The entries are ordered from highest # to lowest priority. # # @since 1.3.3 # @api private
on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_ignored_nl on_const on_op # Default configuration directory under application root # # @since 0.2.0 # @api private
on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_ignored_nl on_const on_op # Standard Hanami host ENV key # # @since 0.1.0 # @api private
on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_ignored_nl on_const on_op # Default HTTP host # # @since 0.1.0 # @api private
on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_ignored_nl on_const on_op # Default IP address listen # # @since 0.1.0 # @api private
on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_ignored_nl on_const on_op UNK on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period # Standard Hanami port ENV key # # @since 0.1.0 # @api private
on_const on_op UNK on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period # Default Hanami HTTP port # # @since 0.1.0 # @api private
on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_ignored_nl on_const on_op # Default Rack configuration file # # @since 0.2.0 # @api private
on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_ignored_nl on_const on_op on_lbrace on_tstring_beg on_tstring_content on_tstring_end on_op UNK on_rbrace on_period freeze # Default environment configuration file # # @since 0.2.0 # @api private
on_const on_op on_lbrace on_tstring_beg on_tstring_content on_tstring_end on_op UNK on_rbrace on_period freeze on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze # Code reloading per environment # # @since 0.2.0 # @api private
on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_ignored_nl on_const on_op # @since 0.4.0 # @api private
on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_ignored_nl def UNK # @since 0.4.0 # @api private
on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period freeze on_nl on_ignored_nl def UNK on_lparen UNK on_op on_lbrace on_rbrace on_rparen on_ignored_nl UNK on_op # @since 0.4.0 # @api private
def UNK on_lparen UNK on_op on_lbrace on_rbrace on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_period UNK on_nl on_ivar on_op on_const # Initialize a Hanami environment # # It accepts an optional set of configurations from the CLI commands. # Those settings override the defaults defined by this object. # # When initialized, it sets standard `ENV` variables for Rack and Hanami, # such as `RACK_ENV` and `HANAMI_ENV`. # # It evaluates configuration ONLY from `.env.<environment>` file # located under the config directory. All the settings in those files will # be exported as `ENV` variables. # # This table: https://github.com/bkeepers/dotenv#what-other-env-files-can-i-use # has more info on the priority of the .env files. # # The format of those `.env.<environment>` files follows UNIX and UNIX-like # operating system environment variable declaration format and compatible # with `dotenv` and `foreman` gems. # # @param options [Hash] override default options for various environment # attributes # # @return [Hanami::Environment] the environment # # @see Hanami::Commands::Console # @see Hanami::Commands::Routes # @see Hanami::Commands::Server # @see Hanami::Environment#config # # @api private # # @example Define ENV variables from .env # # # % tree . # # . # # # ... # # ├── .env.test # # └── .env.development # # # % cat .env.test # # FOO="bar" # # XYZ="yes" # # # % cat .env.development # # FOO="ok" # # require 'hanami/environment' # # env = Hanami::Environment.new # env.environment # => "development" # # # Framework defined ENV vars # ENV['HANAMI_ENV'] # => "development" # ENV['RACK_ENV'] # => "development" # # ENV['HANAMI_HOST'] # => "localhost" # ENV['HANAMI_PORT'] # => "2300" # # # User defined ENV vars # ENV['FOO'] # => "ok" # ENV['XYZ'] # => nil # # # Hanami::Environment evaluates `.env.development` because the current # # environment is "development". # # Variables declared on `.env.development` will not override # # any variable declared on the shell when calling a `hanami` command. # # Eg. In `FOO="not ok" bundle exec hanami c` `FOO` will not be overwritten # # to `"ok"`.
def environment on_nl on_ivar on_op env on_lbracket on_const on_rbracket on_op UNK on_op on_const on_nl end on_nl on_ignored_nl def UNK on_lparen # The current environment # # In order to decide the value, it looks up to the following `ENV` vars: # # * HANAMI_ENV # * RACK_ENV # # If those are missing it falls back to the default one: `"development"`. # # Rack environment `"deployment"` is translated to Hanami `"production"`. # # @return [String] the current environment # # @since 0.1.0 # @api private # # @see Hanami::Environment::DEFAULT_ENV
def UNK on_lparen on_op UNK on_rparen on_ignored_nl UNK on_period UNK on_lparen on_op on_symbeg UNK on_rparen on_period UNK on_lparen environment on_rparen # @since 0.3.1 # @api private # # @see Hanami.env?(name)
def UNK on_nl on_lbracket on_symbeg UNK on_comma environment on_rbracket on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period fetch on_lparen # A set of Bundler groups # # @return [Array] A set of groups # # @since 0.2.0 # @api private # # @see http://bundler.io/v1.7/groups.html
def UNK on_nl on_ivar on_period fetch on_lparen on_symbeg UNK on_rparen on_nl end on_nl on_ignored_nl def root on_nl on_ivar on_op on_const # Project name # # @return [String] Project name # # @since 0.8.0 # @api private
def root on_nl on_ivar on_op on_const on_period UNK on_lparen on_const on_period UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl # Application's root # # It defaults to the current working directory. # Hanami assumes that all the commands are executed from there. # # @return [Pathname] application's root # # @since 0.2.0 # @api private
def UNK on_nl on_ivar on_op root on_period UNK on_lparen on_ivar on_period fetch on_lparen on_symbeg UNK on_rparen on_lbrace on_const on_rbrace on_rparen # Application's config directory # # It's the application where all the configurations are stored. # # In order to decide the value, it looks up the following sources: # # * CLI option `config` # # If those are missing it falls back to the default one: `"config/"`. # # When a relative path is given via CLI option, it assumes to be located # under application's root. If absolute path, it will be used as it is. # # @return [Pathname] the config directory # # @since 0.2.0 # @api private # # @see Hanami::Environment::DEFAULT_CONFIG # @see Hanami::Environment#root
def UNK on_nl on_ivar on_op on_ivar on_period fetch on_lparen on_symbeg UNK on_rparen UNK on_ignored_nl env on_lbracket on_const on_rbracket on_op UNK # The HTTP host name # # In order to decide the value, it looks up the following sources: # # * CLI option `host` # * HANAMI_HOST ENV var # # If those are missing it falls back to the following defaults: # # * `"localhost"` for development # * `"0.0.0.0"` for all the other environments # # @return [String] the HTTP host name # # @since 0.1.0 # @api private # # @see Hanami::Environment::DEFAULT_HOST # @see Hanami::Environment::LISTEN_ALL_HOST
def UNK on_nl on_ivar on_op on_ivar on_period fetch on_lparen on_symbeg UNK on_rparen UNK on_ignored_nl env on_lbracket on_const on_rbracket on_op on_const # The HTTP port # # In order to decide the value, it looks up the following sources: # # * CLI option `port` # * HANAMI_PORT ENV var # # If those are missing it falls back to the default one: `2300`. # # @return [Integer] the default port # # @since 0.1.0 # @api private # # @see Hanami::Environment::DEFAULT_PORT
def UNK on_nl UNK on_op on_const on_nl end on_nl on_ignored_nl def UNK on_nl root on_period UNK on_lparen on_ivar on_period fetch # Check if the current port is the default one # # @since 1.0.0 # @api private # # @see Hanami::ApplicationConfiguration#port
def UNK on_nl root on_period UNK on_lparen on_ivar on_period fetch on_lparen on_symbeg UNK on_rparen on_lbrace on_const on_rbrace on_rparen on_nl end # Path to the Rack configuration file # # In order to decide the value, it looks up the following sources: # # * CLI option `rackup` # # If those are missing it falls back to the default one: `"config.ru"`. # # When a relative path is given via CLI option, it assumes to be located # under application's root. If absolute path, it will be used as it is. # # @return [Pathname] path to the Rack configuration file # # @since 0.2.0 # @api private
def UNK on_nl root on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl UNK # Path to environment configuration file. # # In order to decide the value, it looks up the following sources: # # * CLI option `environment` # # If those are missing it falls back to the default one: # `"config/environment.rb"`. # # When a relative path is given via CLI option, it assumes to be located # under application's root. If absolute path, it will be used as it is. # # @return [Pathname] path to applications # # @since 0.1.0 # @api private # # @see Hanami::Environment::DEFAULT_ENVIRONMENT_CONFIG
def UNK on_nl on_op on_const on_period UNK on_lparen on_op UNK on_rparen on_nl require UNK on_period UNK end on_nl on_ignored_nl UNK # Require application environment # # Eg <tt>require "config/environment"</tt>. # # @since 0.4.0 # @api private
end on_nl on_ignored_nl UNK UNK UNK on_nl on_ignored_nl def UNK on_nl on_ivar on_period fetch on_lparen on_symbeg UNK on_rparen on_lbrace on_op # if project_environment_configuration.exist?
UNK UNK UNK on_nl on_ignored_nl def UNK on_nl on_ivar on_period fetch on_lparen on_symbeg UNK on_rparen on_lbrace on_op on_op on_const on_lbracket # @api private
def UNK on_nl on_ivar on_period fetch on_lparen on_symbeg UNK on_rparen on_lbrace on_op on_op on_const on_lbracket environment on_rbracket on_rbrace on_nl end # Determine if activate code reloading for the current environment while # running the server. # # In order to decide the value, it looks up the following sources: # # * CLI option `code_reloading` # # If those are missing it falls back to the following defaults: # # * true for development # * false for all the other environments # # @return [TrueClass,FalseClass] the result of the check # # @since 0.2.0 # @api private # # @see Hanami::Commands::Server # @see Hanami::Environment::CODE_RELOADING
def UNK on_nl on_const on_op env on_lbracket on_const on_rbracket on_nl end on_nl on_ignored_nl def UNK on_nl UNK UNK UNK on_nl # @since 0.6.0 # @api private
def UNK on_nl UNK UNK UNK on_nl on_ignored_nl UNK UNK on_lparen on_symbeg UNK on_comma on_symbeg UNK on_rparen on_nl require on_tstring_beg # @since 0.6.0 # @api private
def UNK on_nl on_ivar on_period fetch on_lparen on_symbeg UNK on_comma on_const on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar # @since 0.4.0 # @api private
def UNK on_nl on_ivar on_period UNK on_lparen on_ignored_nl on_label environment on_comma on_ignored_nl on_label UNK on_comma on_ignored_nl on_label UNK on_comma on_ignored_nl # Serialize the most relevant settings into a Hash # # @return [::Hash] # # @since 0.1.0 # @api private
UNK on_symbeg env on_nl on_ignored_nl def UNK on_nl UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_nl env on_lbracket # @api private
def UNK on_nl UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_nl env on_lbracket on_const on_rbracket on_op env on_lbracket # @since 0.1.0 # @api private
def UNK on_nl env on_lbracket on_const on_rbracket on_op env on_lbracket on_const on_rbracket on_op environment on_nl env on_lbracket on_const on_rbracket on_op # @since 0.2.0 # @api private
def UNK on_nl on_const on_period UNK UNK on_op UNK on_op on_ignored_nl UNK on_op UNK on_op on_lbrace on_label environment on_rbrace on_nl # @since 0.2.0 # @api private
def UNK on_nl environment on_op on_const on_op on_const on_op on_const on_nl end on_nl on_ignored_nl def UNK on_nl UNK env on_lbracket # @since 0.1.0 # @api private
def UNK on_nl UNK env on_lbracket on_const on_rbracket on_nl UNK on_const on_nl on_const on_nl UNK on_ignored_nl env on_lbracket on_const on_rbracket # @since 0.6.0 # @api private
def UNK on_lparen UNK on_rparen on_ignored_nl UNK UNK UNK UNK on_op on_const on_op environment on_op on_const on_nl on_ignored_nl UNK on_nl # @api private # @since 1.3.3 # # @see https://github.com/bkeepers/dotenv#what-other-env-files-can-i-use
