UNK on_const on_nl UNK on_const on_op on_op on_const on_nl end on_nl on_ignored_nl UNK on_const on_nl on_const on_op UNK UNK on_nl # @api private
UNK on_const on_op on_op on_const on_nl end on_nl on_ignored_nl UNK on_const on_nl on_const on_op UNK UNK on_nl on_ignored_nl on_const on_op # Invalid CSRF Token # # @since 0.4.0
UNK on_const on_nl on_const on_op UNK UNK on_nl on_ignored_nl on_const on_op on_const on_lbracket on_ignored_nl UNK UNK UNK on_op UNK UNK # CSRF Protection # # This security mechanism is enabled automatically if sessions are turned on. # # It stores a "challenge" token in session. For each "state changing request" # (eg. <tt>POST</tt>, <tt>PATCH</tt> etc..), we should send a special param: # <tt>_csrf_token</tt>. # # If the param matches with the challenge token, the flow can continue. # Otherwise the application detects an attack attempt, it reset the session # and <tt>Hanami::Action::InvalidCSRFTokenError</tt> is raised. # # We can specify a custom handling strategy, by overriding <tt>#handle_invalid_csrf_token</tt>. # # Form helper (<tt>#form_for</tt>) automatically sets a hidden field with the # correct token. A special view method (<tt>#csrf_token</tt>) is available in # case the form markup is manually crafted. # # We can disable this check on action basis, by overriding <tt>#verify_csrf_token?</tt>. # # @since 0.4.0 # # @see https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29 # @see https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet # # @example Custom Handling # module Web::Controllers::Books # class Create # include Web::Action # # def call(params) # # ... # end # # private # # def handle_invalid_csrf_token # Web::Logger.warn "CSRF attack: expected #{ session[:_csrf_token] }, was #{ params[:_csrf_token] }" # # manual handling # end # end # end # # @example Bypass Security Check # module Web::Controllers::Books # class Create # include Web::Action # # def call(params) # # ... # end # # private # # def verify_csrf_token? # false # end # end # end
on_const on_op UNK UNK on_nl on_ignored_nl on_const on_op on_const on_lbracket on_ignored_nl UNK UNK UNK on_op UNK UNK on_ignored_nl UNK UNK # Session and params key for CSRF token. # # This key is shared with <tt>hanami-controller</tt> and <tt>hanami-helpers</tt> # # @since 0.4.0 # @api private
on_const on_op on_const on_lbracket on_ignored_nl UNK UNK UNK on_op UNK UNK on_ignored_nl UNK UNK UNK on_op UNK UNK on_ignored_nl UNK # Idempotent HTTP methods # # By default, the check isn't performed if the request method is included # in this list. # # @since 0.4.0 # @api private
def UNK on_period UNK UNK UNK UNK on_ignored_nl UNK on_period UNK UNK on_ignored_nl UNK UNK UNK UNK UNK UNK on_nl # @since 0.4.0 # @api private
def UNK on_nl UNK on_lbracket on_const on_rbracket on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK UNK UNK on_nl # Set CSRF Token in session # # @since 0.4.0 # @api private
def UNK on_nl UNK UNK UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK UNK UNK UNK on_nl on_ignored_nl UNK # Verify if CSRF token from params, matches the one stored in session. # If not, it raises an error. # # Don't override this method. # # To bypass the security check, please override <tt>#verify_csrf_token?</tt>. # For custom handling of an attack, please override <tt>#handle_invalid_csrf_token</tt>. # # @since 0.4.0 # @api private
def UNK on_nl UNK UNK UNK UNK on_nl on_ignored_nl UNK on_op on_ignored_nl on_op on_op on_const on_op on_const on_period UNK UNK # Verify if CSRF token from params, matches the one stored in session. # # Don't override this method. # # @since 0.4.0 # @api private
def UNK on_nl on_const on_op on_const on_op on_const on_period UNK UNK UNK on_lbracket on_const on_rbracket UNK on_nl end on_nl on_ignored_nl # Verify the CSRF token was passed in params. # # @api private
def UNK on_nl on_const on_period UNK UNK UNK UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_op on_const on_lbracket UNK # Generates a random CSRF Token # # @since 0.4.0 # @api private
def UNK on_nl on_op on_const on_lbracket UNK on_rbracket on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_period UNK on_nl UNK # Decide if perform the check or not. # # Override and return <tt>false</tt> if you want to bypass security check. # # @since 0.4.0 # # @example # module Web::Controllers::Books # class Create # include Web::Action # # def call(params) # # ... # end # # private # # def verify_csrf_token? # false # end # end # end
def UNK on_nl UNK on_period UNK on_nl UNK on_const on_period UNK on_nl end on_nl end on_nl end on_nl end on_nl # Handle CSRF attack. # # The default policy resets the session and raises an exception. # # Override this method, for custom handling. # # @raise [Hanami::Action::InvalidCSRFTokenError] # # @since 0.4.0 # # @example # module Web::Controllers::Books # class Create # include Web::Action # # def call(params) # # ... # end # # private # # def handle_invalid_csrf_token # # custom invalid CSRF management goes here # end # end # end
