on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_op on_const on_nl UNK UNK on_nl UNK on_lparen on_tstring_beg on_tstring_content # frozen_string_literal: true
UNK on_const on_nl UNK on_const on_op on_op on_const on_nl UNK UNK on_nl UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end # HTTP/2 Early Hints Rack middleware # # It sends extra responses **before** the main response is sent. # These extra responses are HTTP/2 Early Hints (103). # They specify the web assets (javascripts, stylesheets, etc..) to be "pushed", # so modern browsers pre-fetch them in parallel with the main HTTP response. # # @see https://tools.ietf.org/html/draft-ietf-httpbis-early-hints-05 # # @since 1.2.0 # @api private
UNK on_const on_op on_op on_const on_nl UNK UNK on_nl UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl end on_nl # @since 1.2.0 # @api private
UNK UNK on_nl UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl end on_nl on_ignored_nl UNK UNK on_lparen UNK on_rparen # @since 1.2.0 # @api private
UNK UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_nl end on_nl on_ignored_nl UNK UNK on_lparen env on_rparen on_ignored_nl UNK # @since 1.2.0 # @api private
UNK UNK on_lparen env on_rparen on_ignored_nl UNK on_period UNK on_lparen env on_rparen on_period UNK UNK on_ignored_nl UNK on_lparen env on_rparen # @param env [Hash] Rack env # # @return [Array,Rack::Response] a Rack response # # @raise [Hanami::EarlyHints::NotSupportedByServerError] if the current Ruby # server doesn't support Early Hints # # @since 1.2.0 # @api private
on_const on_op UNK on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl on_const on_op UNK UNK on_nl on_ignored_nl UNK UNK # Pushing a lot of assets may exceed the limit of HTTP headers of a single # Early Hints (103) response. # # For this reason we send multiple Early Hints (103) responses for each `n` # assets. We call this `n` number `BATCH_SIZE`. # # If the current page needs to push 23 assets, it will send 3 Early Hints # (103) responses: # # 1. Response #1: 10 assets # 2. Response #2: 10 assets # 3. Response #3: 3 assets # # @since 1.2.0 # @api private
on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl on_const on_op UNK UNK on_nl on_ignored_nl UNK UNK on_lparen env on_rparen on_ignored_nl UNK # Rack servers that support Early Hints (only Puma for now), # inject an object into the Rack env to send multiple Early Hints (103) # responses. # # @since 1.2.0 # @api private # # @see https://github.com/puma/puma/pull/1403
on_const on_op UNK UNK on_nl on_ignored_nl UNK UNK on_lparen env on_rparen on_ignored_nl UNK UNK on_const on_period UNK on_lbracket on_const on_rbracket # This cache key is used by `hanami-assets` to collect the assets that are # eligible to be pushed. # # It stores these values in a thread-local variable. # # NOTE: if changing this key here, it MUST be changed into `hanami-assets` as well # # @since 1.2.0 # @api private
UNK UNK on_lparen env on_rparen on_ignored_nl UNK UNK on_const on_period UNK on_lbracket on_const on_rbracket on_period UNK on_nl on_ignored_nl on_const on_period # Tries to send multiple Early Hints (103) HTTP responses, if there are # assets eligible. # # @param env [Hash] Rack env # # @raise [Hanami::EarlyHints::NotSupportedByServerError] if the current Ruby # server doesn't support Early Hints # # @since 1.2.0 # @api private
UNK UNK on_lparen env UNK UNK on_rparen on_ignored_nl env on_lbracket on_const on_rbracket on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_op UNK # Tries to send an Early Hints (103) HTTP response for a batch of assets # # @param env [Hash] Rack env # @param link [String] the serialized HTTP `Link` headers # # @raise [Hanami::EarlyHints::NotSupportedByServerError] if the current Ruby # server doesn't support Early Hints # # @since 1.2.0 # @api private
