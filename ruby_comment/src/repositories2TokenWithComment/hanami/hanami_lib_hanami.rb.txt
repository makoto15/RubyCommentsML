UNK on_const on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg # A complete web framework for Ruby # # @since 0.1.0 # # @see http://hanamirb.org
on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period UNK on_nl on_ignored_nl on_ivar on_op on_const on_period UNK on_nl on_ivar on_op on_const on_op on_const # @api private # @since 0.6.0
on_ivar on_op on_const on_period UNK on_nl on_ivar on_op on_const on_op on_const on_period UNK on_nl on_ignored_nl def self on_period UNK on_lparen # @api private # @since 0.9.0
def self on_period UNK on_lparen on_op UNK on_rparen on_ignored_nl on_ivar on_period UNK UNK on_ignored_nl on_ivar on_op on_const on_op on_const on_period # Configure Hanami project # # Please note that the code for this method is generated by `hanami new`. # # @param blk [Proc] the configuration block # # @since 0.9.0 # # @example # # config/environment.rb # # # ... # # Hanami.configure do # mount Admin::Application, at: "/admin" # mount Web::Application, at: "/" # # model do # adapter :sql, ENV['DATABASE_URL'] # # migrations "db/migrations" # schema "db/schema.sql" # end # # mailer do # root "lib/bookshelf/mailers" # # delivery do # development :test # test :test # # production :smtp, address: ENV['SMTP_HOST'], port: ENV['SMTP_PORT'] # end # end # end
def self on_period UNK on_nl on_ivar on_period UNK UNK on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end UNK UNK on_lparen on_ivar on_rparen on_nl # Hanami configuration # # @return [Hanami::Configuration] the configuration # # @see Hanami.configure # # @since 0.9.0 # @api private
def self on_period UNK on_lparen on_op UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def self on_period UNK # Configure a plugin # # @see Hanami.configure # # @since 1.2.0
def self on_period UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def self on_period UNK on_nl on_const on_period UNK UNK UNK # Plugins registry # # NOTE: We can't use `Components` registry. # # Plugins are loaded when Bundler requires `Gemfile` gems. # During this phase the `Components` that we can resolve are erased by the # first incoming request in development. # They are erased by a workaround that we had to put in place in `Hanami.boot`. # This workaround is `Components.release` and it was introduced because # `shotgun` failed to reload components, so we have to release for each # incoming request. # After the `Components` registry is cleared up, Hanami is able to resolve all # the components from scratch. # # When we'll switch to `hanami-reloader` for development, we can remove # `Components.release` and we'll be able to store plugins in `Components` and # remove `Hanami.plugins` as well. # # @since 1.2.0 # @api private
def self on_period UNK on_nl on_const on_period UNK UNK UNK on_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl # Boot your Hanami project # # NOTE: In case this is invoked many times, it guarantees that the boot # process happens only once. # # NOTE: This MUST NOT be wrapped by a Mutex, because it would cause a deadlock. # # @return [NilClass] # # @since 0.9.0
def self on_period UNK on_nl UNK on_nl on_const on_period UNK on_lparen UNK UNK environment on_rparen on_nl end on_nl on_ignored_nl def # Main application that mounts many Rack and/or Hanami applications. # # This is used as integration point for: # # * `config.ru` (`run Hanami.app`) # * Feature tests (`Capybara.app = Hanami.app`) # # # # It lazily loads your Hanami project, in case it wasn't booted on before. # This is the case when `hanami server` isn't invoked, but we use different # ways to run the project (eg. `rackup`). # # @return [Hanami::App] the app # # @since 0.9.0 # @api private # # @see Hanami.boot
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK UNK UNK on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl # Check if an application is allowed to load. # # The list of applications to be loaded can be set via the `HANAMI_APPS` # env variable. If the HANAMI_APPS env variable is not set, it defaults # to loading all applications. # # @return [TrueClass,FalseClass] the result of the check # # @since 1.1.0 # # @example # # # Mount hanami app for specific app # Hanami.configure do # if Hanami.app?(:web) # require_relative '../apps/web/application' # mount Web::Application, at: '/' # end # end #
def self on_period UNK on_nl environment on_period UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_nl UNK on_period UNK # Return root of the project (top level directory). # # @return [Pathname] root path # # @since 0.3.2 # # @example # Hanami.root # => #<Pathname:/Users/luca/Code/bookshelf>
def self on_period UNK on_nl UNK on_period UNK on_lparen on_const on_rparen on_nl end on_nl on_ignored_nl def self on_period UNK on_nl # Project public directory # # @return [Pathname] public directory # # @since 0.6.0 # # @example # Hanami.public_directory # => #<Pathname:/Users/luca/Code/bookshelf/public>
def self on_period UNK on_nl environment on_period environment on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen on_op UNK on_rparen # Return the current environment # # @return [String] the current environment # # @since 0.3.1 # # @see Hanami::Environment#environment # # @example # Hanami.env => "development"
def self on_period UNK on_lparen on_op UNK on_rparen on_ignored_nl environment on_period UNK on_lparen on_op UNK on_rparen on_nl end on_nl on_ignored_nl # Check to see if specified environment(s) matches the current environment. # # If multiple names are given, it returns true, if at least one of them # matches the current environment. # # @return [TrueClass,FalseClass] the result of the check # # @since 0.3.1 # # @see Hanami.env # # @example Single name # puts ENV['HANAMI_ENV'] # => "development" # # Hanami.env?(:development) # => true # Hanami.env?('development') # => true # # Hanami.env?(:production) # => false # # @example Multiple names # puts ENV['HANAMI_ENV'] # => "development" # # Hanami.env?(:development, :test) # => true # Hanami.env?(:production, :staging) # => false
def self on_period environment on_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen UNK on_ignored_nl on_const on_period UNK on_nl end # Current environment # # @return [Hanami::Environment] environment # # @api private # @since 0.3.2
def self on_period UNK on_nl environment on_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const UNK on_tstring_beg on_tstring_content # Check if code reloading is enabled. # # @return [TrueClass,FalseClass] the result of the check # # @since 1.0.0 # @api private # # @see https://guides.hanamirb.org/projects/code-reloading
def self on_period UNK on_nl on_const UNK on_tstring_beg on_tstring_content on_tstring_end UNK on_nl end on_nl end on_nl EMP EMP EMP EMP # Project logger # # @return [Hanami::Logger] the logger # # @since 1.0.0
