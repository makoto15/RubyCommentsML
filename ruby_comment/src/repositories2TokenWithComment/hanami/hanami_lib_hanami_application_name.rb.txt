UNK on_const on_nl on_ignored_nl on_const UNK UNK on_tstring_content UNK on_period UNK on_nl on_ignored_nl def UNK on_lparen name on_rparen on_ignored_nl UNK # An application name. # # @since 0.2.1 # @api private
on_const UNK UNK on_tstring_content UNK on_period UNK on_nl on_ignored_nl def UNK on_lparen name on_rparen on_ignored_nl UNK UNK UNK on_lparen name # A list of words that are prohibited from forming the application name # # @since 0.2.1 # @api private
def UNK on_lparen name on_rparen on_ignored_nl UNK UNK UNK on_lparen name on_period UNK on_rparen on_nl UNK on_nl end on_nl on_ignored_nl # Initialize and check against reserved words # # An application name needs to be translated in quite a few ways: # First, it must be checked against a list of reserved words and rejected # if it is invalid. Secondly, assuming it is not invalid, it must be able # to be output roughly as given, but with the following changes: # # 1. downcased, # 2. with surrounding spaces removed, # 3. with internal whitespace rendered as underscores # 4. with underscores de-duplicated # # which is the default output. It must also be transformable into an # environment variable. # # @return [Hanami::ApplicationName] a new instance of the application name # # @since 0.2.1 # @api private
def UNK on_nl UNK on_nl end on_nl on_ignored_nl UNK UNK UNK UNK UNK UNK on_nl on_ignored_nl def UNK on_nl UNK # Returns the cleaned application name. # # @return [String] the sanitized name # # @example # ApplicationName.new("my-App ").to_s # => "my_app" # # @since 0.2.1 # @api private
UNK UNK UNK UNK UNK UNK on_nl on_ignored_nl def UNK on_nl UNK on_period UNK on_period UNK on_lparen UNK on_tstring_content UNK # @api private # @since 0.8.0
def UNK on_nl UNK on_period UNK on_period UNK on_lparen UNK on_tstring_content UNK UNK UNK on_tstring_content UNK on_rparen on_nl end on_nl # Returns the application name uppercased with non-alphanumeric characters # as underscores. # # @return [String] the upcased name # # @example # ApplicationName.new("my-app").to_env_s => "MY_APP" # # @since 0.2.1 # @api private
def UNK on_period UNK on_lparen name on_rparen on_ignored_nl on_const on_period UNK on_lparen name on_rparen on_nl end on_nl on_ignored_nl UNK on_nl # Returns true if a potential application name matches one of the reserved # words. # # @param name [String] the application name # @return [TrueClass, FalseClass] the result of the check # # @example # Hanami::ApplicationName.invalid?("hanami") # => true # # @since 0.2.1 # @api private
def UNK on_nl UNK UNK on_period UNK on_period UNK on_lparen UNK on_rparen on_nl UNK on_const UNK on_ignored_nl UNK on_tstring_content UNK # Raises RuntimeError with explanation if the provided name is invalid. # # @since 0.2.1 # @api private
def UNK on_lparen name on_rparen on_ignored_nl on_const UNK on_const on_period UNK on_lparen name on_period UNK UNK UNK UNK UNK UNK # Cleans a string to be a functioning application name. # # @since 0.2.1 # @api private
