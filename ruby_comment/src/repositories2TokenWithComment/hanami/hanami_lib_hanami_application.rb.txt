UNK on_const on_nl def UNK on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_nl on_ignored_nl UNK on_period UNK on_lparen on_const on_rparen # A full stack Hanami application # # @since 0.1.0 # # @example # require 'hanami' # # module Bookshelf # class Application < Hanami::Application # end # end
def UNK on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_nl on_ignored_nl UNK on_period UNK on_lparen on_const on_rparen on_nl UNK on_period # Override Ruby's Class#inherited # # @since 0.2.0 # @api private # # @see http://www.ruby-doc.org/core/Class.html#method-i-inherited
UNK on_symbeg UNK on_nl end on_nl end on_nl end on_nl on_ignored_nl UNK on_const on_nl def UNK on_period UNK on_lparen UNK # Routes for this application # # @return [Hanami::Routes] the routes for this Hanami application # # @since 0.9.0 # @api public # # @example # # Web.routes # Admin.routes
UNK on_const on_nl def UNK on_period UNK on_lparen UNK on_rparen UNK on_nl on_ignored_nl UNK on_period UNK UNK on_ignored_nl on_ivar on_op # Class interface for Hanami applications # # @since 0.9.0 # @api private
def UNK on_period UNK on_lparen UNK on_rparen UNK on_nl on_ignored_nl UNK on_period UNK UNK on_ignored_nl on_ivar on_op on_const on_period UNK # Override Ruby's Class#extended # # @since 0.9.0 # @api private # # @see http://www.ruby-doc.org/core/Class.html#method-i-extended
UNK on_nl on_ignored_nl UNK on_period UNK UNK on_ignored_nl on_ivar on_op on_const on_period UNK on_lparen UNK on_rparen on_nl on_ivar on_op on_const # rubocop:disable Metrics/MethodLength
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg configuration on_nl end on_nl end on_nl end on_nl # @since 0.9.0 # @api private
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg configuration on_nl end on_nl end on_nl end on_nl on_ignored_nl def UNK on_nl on_const # @since 0.9.0 # @api private
UNK on_symbeg configuration on_nl end on_nl end on_nl end on_nl on_ignored_nl def UNK on_nl on_const on_period UNK on_lparen UNK on_rparen # @since 0.9.0 # @api private
def UNK on_nl on_const on_period UNK on_lparen UNK on_rparen on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen configuration on_rparen # Hanami application name # # @return [String] the Hanami application name # # @since 0.9.0 # @api private # # @example # require 'hanami' # # module Web # class Application < Hanami::Application # end # end # # Web::Application.app_name # => "web"
def UNK on_lparen configuration on_rparen on_ignored_nl on_ivar on_period UNK UNK on_ignored_nl on_ivar on_op configuration on_nl end on_nl end on_nl on_ignored_nl # Set configuration # # @param configuration [Hanami::ApplicationConfiguration] the application configuration # # @raise [RuntimeError] if the configuration is assigned more than once # # @since 0.1.0 # @api private
on_ivar on_op configuration on_nl end on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_op UNK UNK on_op UNK on_rparen on_ignored_nl # raise "Can't assign configuration more than once (#{app_name})" unless @configuration.nil?
def UNK on_lparen UNK on_op UNK UNK on_op UNK on_rparen on_ignored_nl UNK on_period UNK on_lparen UNK UNK on_op UNK on_rparen # Configure the application. # It yields the given block in the context of the configuration # # @param environment [Symbol,nil] the configuration environment name # @param blk [Proc] the configuration block # # @since 0.1.0 # # @see Hanami::ApplicationConfiguration # # @example # require 'hanami' # # module Bookshelf # Application < Hanami::Application # configure do # # ... # end # end # end
def UNK on_nl on_ivar on_op on_const on_period UNK on_lparen configuration on_rparen on_nl on_ivar on_op configuration on_period UNK on_nl end on_nl # Initialize and load a new instance of the application # # @return [Hanami::Application] a new instance of the application # # @since 0.1.0 # @api private
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK on_lparen UNK UNK UNK on_period UNK on_lparen UNK on_rparen on_rparen on_nl # Process a request. # This method makes Hanami applications compatible with the Rack protocol. # # @param env [Hash] a Rack env # # @return [Array] a serialized Rack response # # @since 0.1.0 # # @see http://rack.github.io # @see Hanami::RenderingPolicy#render # @see Hanami::Application#middleware
def configuration on_nl UNK on_period UNK on_period configuration on_nl end on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK # Return the configuration for this application # # @since 0.1.0 # @api private # # @see Hanami::Application.configuration
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl end on_nl end on_nl EMP EMP EMP EMP EMP EMP EMP # Rendering policy # # @since 0.2.0 # @api private # # @see Hanami::RenderingPolicy
UNK on_symbeg UNK on_nl end on_nl end on_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP # Rack middleware stack # # @return [Hanami::MiddlewareStack] the middleware stack # # @since 0.1.0 # @api private # # @see Hanami::MiddlewareStack
