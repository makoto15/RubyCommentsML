def UNK on_period UNK on_lparen model_class on_rparen on_ignored_nl model_class on_period friendly_id_config on_period UNK on_symbeg UNK on_nl end on_nl on_ignored_nl def # FriendlyId::Config.use will invoke this method when present, to allow # loading dependent modules prior to overriding them when necessary.
def UNK on_period UNK on_lparen model_class on_rparen on_ignored_nl model_class on_period UNK UNK on_ignored_nl friendly_id_config on_period UNK on_period UNK on_symbeg UNK # Sets up behavior and configuration options for FriendlyId's scoped slugs # feature.
UNK UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_nl UNK UNK UNK on_period UNK on_period UNK UNK # This module adds the `:scope` configuration option to # {FriendlyId::Configuration FriendlyId::Configuration}.
UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_nl UNK UNK UNK on_period UNK on_period UNK UNK on_op UNK on_op on_lparen # Gets the scope value. # # When setting this value, the argument should be a symbol referencing a # `belongs_to` relation, or a column. # # @return Symbol The scope value
def UNK on_nl UNK UNK UNK on_period UNK on_period UNK UNK on_op UNK on_op on_lparen UNK on_lparen UNK on_rparen UNK # Gets the scope columns. # # Checks to see if the `:scope` option passed to # {FriendlyId::Base#friendly_id} refers to a relation, and if so, returns # the realtion's foreign key. Otherwise it assumes the option value was # the name of column and returns it cast to a String. # # @return String The scope column
