UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl # encoding: utf-8
UNK self on_period UNK on_lparen model_class on_rparen on_ignored_nl UNK UNK model_class on_period UNK on_symbeg UNK on_nl UNK on_op model_class on_nl # FriendlyId takes advantage of `extended` to do basic model setup, primarily # extending {FriendlyId::Base} to add {FriendlyId::Base#friendly_id # friendly_id} as a class method. # # Previous versions of FriendlyId simply patched ActiveRecord::Base, but this # version tries to be less invasive. # # In addition to adding {FriendlyId::Base#friendly_id friendly_id}, the class # instance variable +@friendly_id_config+ is added. This variable is an # instance of an anonymous subclass of {FriendlyId::Configuration}. This # allows subsequently loaded modules like {FriendlyId::Slugged} and # {FriendlyId::Scoped} to add functionality to the configuration class only # for the current class, rather than monkey patching # {FriendlyId::Configuration} directly. This isolates other models from large # feature changes an addon to FriendlyId could potentially introduce. # # The upshot of this is, you can have two Active Record models that both have # a @friendly_id_config, but each config object can have different methods # and behaviors depending on what modules have been loaded, without # conflicts. Keep this in mind if you're hacking on FriendlyId. # # For examples of this, see the source for {Scoped.included}.
UNK self on_period UNK on_lparen model_class on_rparen on_ignored_nl model_class on_period UNK self on_nl end on_nl on_ignored_nl UNK self on_period UNK # Allow developers to `include` FriendlyId or `extend` it.
UNK self on_period UNK on_lparen on_op UNK on_rparen on_ignored_nl UNK on_op UNK UNK UNK on_nl UNK on_op UNK on_lparen UNK # Set global defaults for all models using FriendlyId. # # The default defaults are to use the `:reserved` module and nothing else. # # @example # FriendlyId.defaults do |config| # config.base :name # config.use :slugged # end
UNK self on_period UNK on_nl on_tstring_beg UNK on_const on_op on_const on_period UNK UNK on_tstring_content on_tstring_end on_nl end on_nl end on_nl # Set the ActiveRecord table name prefix to friendly_id_ # # This makes 'slugs' into 'friendly_id_slugs' and also respects any # 'global' table_name_prefix set on ActiveRecord::Base.
