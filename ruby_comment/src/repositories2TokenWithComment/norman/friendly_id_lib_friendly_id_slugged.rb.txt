UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK on_embdoc on_embdoc on_embdoc on_embdoc on_embdoc # encoding: utf-8
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period friendly_id_config on_period UNK UNK on_ignored_nl self on_period UNK on_period send # Sets up behavior and configuration options for FriendlyId's slugging # feature.
def UNK on_lparen value on_rparen on_ignored_nl value on_op value on_period UNK on_period UNK on_nl value on_op value on_lbracket UNK on_op # Process the given value to make it suitable for use as a slug. # # This method is not intended to be invoked directly; FriendlyId uses it # internally to process strings into slugs. # # However, if FriendlyId's default slug generation doesn't suit your needs, # you can override this method in your model class to control exactly how # slugs are generated. # # ### Example # # class Person < ActiveRecord::Base # extend FriendlyId # friendly_id :name_and_location # # def name_and_location # "#{name} from #{location}" # end # # # Use default slug, but upper case and with underscores # def normalize_friendly_id(string) # super.upcase.gsub("-", "_") # end # end # # bob = Person.create! :name => "Bob Smith", :location => "New York City" # bob.friendly_id #=> "BOB_SMITH_FROM_NEW_YORK_CITY" # # ### More Resources # # You might want to look into Babosa[https://github.com/norman/babosa], # which is the slugging library used by FriendlyId prior to version 4, which # offers some specialized functionality missing from Active Support. # # @param [#to_s] value The value used as the basis of the slug. # @return The candidate slug text, without a sequence.
def UNK on_nl send on_lparen friendly_id_config on_period slug_column on_rparen on_period UNK on_op on_op send on_lparen friendly_id_config on_period UNK on_rparen on_period # Whether to generate a new slug. # # You can override this method in your model if, for example, you only want # slugs to be generated once, and then never updated.
def UNK on_lparen UNK on_rparen on_ignored_nl uuid on_op on_const on_period uuid on_nl on_lbracket on_ignored_nl UNK on_lparen UNK on_period UNK on_comma # Public: Resolve conflicts. # # This method adds UUID to first candidate and truncates (if `slug_limit` is set). # # Examples: # # resolve_friendly_id_conflict(['12345']) # # => '12345-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx' # # FriendlyId.defaults { |config| config.slug_limit = 40 } # resolve_friendly_id_conflict(['12345']) # # => '123-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx' # # candidates - the Array with candidates. # # Returns the String with new slug.
def UNK on_lparen UNK on_comma uuid on_rparen on_ignored_nl UNK UNK UNK UNK on_op friendly_id_config on_period slug_limit on_nl on_ignored_nl UNK on_lbracket # Private: Apply slug limit to candidate. # # candidate - the String with candidate. # uuid - the String with UUID. # # Return the String with truncated candidate.
def UNK on_lparen uuid on_rparen on_ignored_nl on_lbracket on_ignored_nl friendly_id_config on_period slug_limit on_op uuid on_period UNK on_op friendly_id_config on_period sequence_separator on_period # Private: Get max length of candidate. # # uuid - the String with UUID. # # Returns the Integer with max length.
def UNK on_lparen UNK on_op UNK on_rparen on_ignored_nl UNK UNK on_nl UNK on_op on_const on_op on_const on_period UNK on_lparen self # Sets the slug.
UNK on_const on_nl UNK on_symbeg slug_column on_comma on_symbeg slug_limit on_comma on_symbeg sequence_separator on_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK # This module adds the `:slug_column`, and `:slug_limit`, and `:sequence_separator`, # and `:slug_generator_class` configuration options to # {FriendlyId::Configuration FriendlyId::Configuration}.
def UNK on_nl slug_column on_nl end on_nl on_ignored_nl def sequence_separator on_nl UNK on_op UNK on_lbracket on_symbeg sequence_separator on_rbracket on_nl end # Makes FriendlyId use the slug column for querying. # @return String The slug column.
def sequence_separator on_nl UNK on_op UNK on_lbracket on_symbeg sequence_separator on_rbracket on_nl end on_nl on_ignored_nl def slug_column on_nl UNK on_op UNK # The string used to separate a slug base from a numeric sequence. # # You can change the default separator by setting the # {FriendlyId::Slugged::Configuration#sequence_separator # sequence_separator} configuration option. # @return String The sequence separator string. Defaults to "`-`".
def slug_column on_nl UNK on_op UNK on_lbracket on_symbeg slug_column on_rbracket on_nl end on_nl on_ignored_nl def slug_limit on_nl UNK on_op UNK # The column that will be used to store the generated slug.
def slug_limit on_nl UNK on_op UNK on_lbracket on_symbeg slug_limit on_rbracket on_nl end on_nl end on_nl end on_nl end on_nl EMP # The limit that will be used for slug.
