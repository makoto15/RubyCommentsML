UNK on_const on_nl on_const on_op on_int on_op on_int on_nl on_ignored_nl def UNK on_period UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl # Language bayesian classifier.
def UNK on_period UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK on_op UNK on_period map on_lparen on_op UNK UNK on_rparen # Public: Use the classifier to detect language of the blob. # # blob - An object that quacks like a blob. # possible_languages - Array of Language objects # # Examples # # Classifier.call(FileBlob.new("path/to/file"), [ # Language["Ruby"], Language["Python"] # ]) # # Returns an Array of Language objects, most probable first.
end on_nl end on_nl on_ignored_nl def UNK on_period UNK on_lparen db on_comma language on_comma UNK on_rparen on_ignored_nl tokens on_op on_const # Return the actual Language objects
def UNK on_period UNK on_lparen db on_comma language on_comma UNK on_rparen on_ignored_nl tokens on_op on_const on_period UNK on_lparen UNK on_rparen # Public: Train classifier that data is a certain language. # # db - Hash classifier database object # language - String language of data # data - String contents of file # # Examples # # Classifier.train(db, 'Ruby', "def hello; end") # # Returns nothing. # # Set LINGUIST_DEBUG=1 or =2 to see probabilities per-token or # per-language. See also #dump_all_tokens, below.
def UNK on_period UNK on_lparen db on_comma tokens on_comma languages on_op UNK on_rparen on_ignored_nl languages on_op db on_lbracket on_tstring_beg on_tstring_content # Public: Guess language of data. # # db - Hash of classifier tokens database. # data - Array of tokens or String data to analyze. # languages - Array of language name Strings to restrict to. # # Examples # # Classifier.classify(db, "def hello; end") # # => [ 'Ruby', 0.90], ['Python', 0.2], ... ] # # Returns sorted Array of result pairs. Each pair contains the # String language name and a Float score.
def UNK on_lparen db on_op on_lbrace on_rbrace on_rparen on_ignored_nl on_ivar on_op db on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl on_ivar on_op # Internal: Initialize a Classifier.
def UNK on_lparen tokens on_comma languages on_rparen on_ignored_nl UNK on_lbracket on_rbracket if tokens on_period UNK on_op languages on_period UNK on_nl # Internal: Guess language of data # # data - Array of tokens or String data to analyze. # languages - Array of language name Strings to restrict to. # # Returns sorted Array of result pairs. Each pair contains the # String language name and a Float score.
def UNK on_lparen tokens on_comma language on_rparen on_ignored_nl tokens on_period UNK on_lparen UNK on_rparen UNK on_op UNK on_comma token on_op # Internal: Probably of set of tokens in a language occurring - P(D | C) # # tokens - Array of String tokens. # language - Language to check. # # Returns Float between 0.0 and 1.0.
def UNK on_lparen token on_comma language on_rparen on_ignored_nl if on_ivar on_lbracket language on_rbracket on_lbracket token on_rbracket on_period to_f on_op UNK # Internal: Probably of token in language occurring - P(F | C) # # token - String token. # language - Language to check. # # Returns Float between 0.0 and 1.0.
def UNK on_lparen language on_rparen on_ignored_nl on_const on_period UNK on_lparen on_ivar on_lbracket language on_rbracket on_period to_f on_op on_ivar on_period to_f # Internal: Probably of a language occurring - P(C) # # language - Language to check. # # Returns Float between 0.0 and 1.0.
def UNK on_lparen tokens on_comma languages on_rparen on_ignored_nl UNK on_op tokens on_period map on_lbrace on_op tok on_op tok on_period UNK # Internal: show a table of probabilities for each <token,language> pair. # # The number in each table entry is the number of "points" that each # token contributes toward the belief that the file under test is a # particular language. Points are additive. # # Points are the number of times a token appears in the file, times # how much more likely (log of probability ratio) that token is to # appear in one language vs. the least-likely language. Dashes # indicate the least-likely language (and zero points) for each token.
