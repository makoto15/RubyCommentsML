UNK UNK on_lparen blob on_comma UNK UNK on_rparen on_ignored_nl UNK UNK UNK blob on_period UNK on_op blob on_period UNK on_op # Public: Detects the Language of the blob. # # blob - an object that includes the Linguist `BlobHelper` interface; # see Linguist::LazyBlob and Linguist::FileBlob for examples # # Returns Language or nil.
UNK UNK UNK blob on_period UNK on_op blob on_period UNK on_op on_lparen on_op UNK on_op blob on_period UNK on_rparen on_nl # Bail early if the blob is binary or empty.
languages on_op UNK UNK on_nl UNK on_op UNK on_nl on_ignored_nl on_const on_period UNK UNK on_op strategy on_op on_ignored_nl UNK on_op # Call each strategy until one candidate is returned.
languages on_op candidates on_nl UNK on_ignored_nl end on_nl end on_nl on_ignored_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg # More than one candidate was found, pass them to the next strategy.
end on_nl end on_nl on_ignored_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_symbeg blob on_op blob on_comma on_symbeg strategy # No candidates, try the next strategy
on_const on_op UNK on_ignored_nl on_const on_op on_const on_op on_const on_comma on_ignored_nl on_const on_op on_const on_op on_const on_comma on_ignored_nl on_const on_op # Internal: The strategies used to detect the language of a file. # # A strategy is an object that has a `.call` method that takes two arguments: # # blob - An object that quacks like a blob. # languages - An Array of candidate Language objects that were returned by the # previous strategy. # # A strategy should return an Array of Language candidates. # # Strategies are called in turn until a single Language is returned.
UNK on_symbeg UNK on_nl on_ignored_nl UNK UNK on_lparen on_op UNK on_comma on_op UNK on_rparen on_ignored_nl UNK UNK on_nl UNK on_period # Public: Set an instrumenter. # # class CustomInstrumenter # def instrument(name, payload = {}) # warn "Instrumenting #{name}: #{payload[:blob]}" # end # end # # Linguist.instrumenter = CustomInstrumenter.new # # The instrumenter must conform to the `ActiveSupport::Notifications` # interface, which defines `#instrument` and accepts: # # name - the String name of the event (e.g. "linguist.detected") # payload - a Hash of the exception context.
UNK UNK on_lparen on_op UNK on_comma on_op UNK on_rparen on_ignored_nl UNK UNK on_nl UNK on_period UNK on_lparen on_op UNK on_comma # Internal: Perform instrumentation on a block # # Linguist.instrument("linguist.dosomething", :blob => blob) do # # logic to instrument here. # end #
