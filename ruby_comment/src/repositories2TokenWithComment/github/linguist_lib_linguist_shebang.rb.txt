on_ignored_nl UNK UNK on_nl UNK UNK on_nl UNK UNK on_period UNK on_lparen UNK UNK UNK on_rparen on_ignored_nl UNK UNK UNK # frozen_string_literal: true
UNK UNK on_period UNK on_lparen UNK UNK UNK on_rparen on_ignored_nl UNK UNK UNK UNK UNK on_period UNK on_nl on_ignored_nl UNK # Public: Use shebang to detect language of the blob. # # blob - An object that quacks like a blob. # candidates - A list of candidate languages. # # Examples # # Shebang.call(FileBlob.new("path/to/file")) # # Returns an array of languages from the candidate list for which the # blob's shebang is valid. Returns an empty list if there is no shebang. # If the candidate list is empty, any language is a valid candidate.
UNK UNK on_period UNK on_lparen data on_rparen on_ignored_nl UNK UNK data on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ignored_nl # Public: Get the interpreter from the shebang # # Returns a String or nil
UNK UNK data on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ignored_nl UNK on_op data UNK UNK UNK data on_period # First line must start with #!
UNK UNK UNK on_op s on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end on_rparen on_nl on_ignored_nl script on_op UNK on_period UNK on_lparen # There was nothing after the #!
script on_op UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period UNK on_nl on_ignored_nl UNK script on_op on_tstring_beg on_tstring_content on_tstring_end # Keep going
UNK script on_op on_tstring_beg on_tstring_content on_tstring_end on_nl s on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end on_rparen on_nl s on_period UNK on_lparen # if /usr/bin/env type shebang then walk the string
script on_op s on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end on_rparen on_nl end on_nl on_ignored_nl UNK UNK script on_nl on_ignored_nl script # skip over variable arguments e.g. foo=bar
UNK UNK script on_nl on_ignored_nl script on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end UNK on_tstring_beg on_tstring_end on_rparen on_nl on_ignored_nl script on_period # Interpreter was /usr/bin/env with no arguments
script on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end UNK on_tstring_beg on_tstring_end on_rparen on_nl on_ignored_nl script on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end # "python2.6" -> "python2"
script on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end UNK on_tstring_beg on_tstring_end on_rparen on_nl on_ignored_nl UNK script on_op on_tstring_beg on_tstring_content on_tstring_end on_op # #! perl -> perl
UNK script on_op on_tstring_beg on_tstring_content on_tstring_end on_op on_ignored_nl data on_period UNK on_period UNK on_lparen UNK on_rparen on_period UNK UNK on_op # Check for multiline shebang hacks that call `exec`
UNK script on_op on_tstring_beg on_tstring_content on_tstring_end on_nl UNK UNK s on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end on_rparen on_nl end on_nl # osascript can be called with an optional `-l <language>` argument, which may not be a language with an interpreter. # In this case, return and rely on the subsequent strategies to determine the language.
