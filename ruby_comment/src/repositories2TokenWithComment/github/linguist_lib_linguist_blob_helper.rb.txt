UNK on_const on_nl def extname on_nl on_const on_period extname on_lparen UNK on_period UNK on_rparen on_nl end on_nl on_ignored_nl def UNK # DEPRECATED Avoid mixing into Blob classes. Prefer functional interfaces # like `Linguist.detect` over `Blob#language`. Functions are much easier to # cache and compose. # # Avoid adding additional bloat to this module. # # BlobHelper is a mixin for Blobish classes that respond to "name", # "data" and "size" such as Grit::Blob.
def extname on_nl on_const on_period extname on_lparen UNK on_period UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl if UNK # Public: Get the extname of the path # # Examples # # blob(name='foo.rb').extname # # => '.rb' # # Returns a String
def UNK on_nl if UNK on_ivar on_nl on_ivar on_nl UNK on_ignored_nl on_ivar on_op on_const on_period UNK on_lparen UNK on_period UNK # Internal: Lookup mime type for filename. # # Returns a MIME::Type
def UNK on_nl UNK on_op UNK on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl UNK # Public: Get the actual blob mime type # # Examples # # # => 'text/plain' # # => 'text/html' # # Returns a mime type String.
def UNK on_nl UNK on_op UNK on_period UNK on_op false on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op on_op # Internal: Is the blob binary according to its mime type # # Return true or false
def UNK on_nl UNK on_op on_op on_const on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar # Internal: Is the blob binary according to its mime type, # overriding it if we have better data from the languages.yml # database. # # Return true or false
def UNK on_nl on_ivar on_op on_lparen UNK on_op UNK on_rparen on_op UNK on_op on_ignored_nl on_lparen encoding on_op on_tstring_beg on_tstring_content UNK # Public: Get the Content-Type header value # # This value is used when serving raw blobs. # # Examples # # # => 'text/plain; charset=utf-8' # # => 'application/octet-stream' # # Returns a content type String.
def UNK on_nl if UNK on_op UNK on_nl on_tstring_beg on_tstring_content on_tstring_end on_nl UNK UNK on_period UNK on_nl on_tstring_beg on_tstring_content on_tstring_end # Public: Get the Content-Disposition header value # # This value is used when serving raw blobs. # # # => "attachment; filename=file.tar" # # => "inline" # # Returns a content disposition String.
def UNK on_nl on_ivar on_op on_const on_op on_const on_period UNK on_period UNK on_lparen data on_rparen if data on_nl end on_nl # Try to guess the encoding # # Returns: a Hash, with :encoding, :confidence, :type # this will return nil if an error occurred during detection or # no valid encoding could be found
def UNK on_nl if data on_period UNK on_nl UNK on_nl on_ignored_nl UNK data on_op on_tstring_beg on_tstring_end on_nl false on_nl on_ignored_nl # Public: Is the blob binary? # # Return true or false
if data on_period UNK on_nl UNK on_nl on_ignored_nl UNK data on_op on_tstring_beg on_tstring_end on_nl false on_nl on_ignored_nl UNK encoding on_period # Large blobs aren't even loaded into memory
UNK data on_op on_tstring_beg on_tstring_end on_nl false on_nl on_ignored_nl UNK encoding on_period UNK on_nl UNK on_nl on_ignored_nl UNK on_ignored_nl UNK # Treat blank files as text
UNK encoding on_period UNK on_nl UNK on_nl on_ignored_nl UNK on_ignored_nl UNK on_lbracket on_symbeg UNK on_rbracket on_op on_symbeg UNK on_nl end # Charlock doesn't know what to think
UNK on_ignored_nl UNK on_lbracket on_symbeg UNK on_rbracket on_op on_symbeg UNK on_nl end on_nl end on_nl on_ignored_nl def UNK on_nl data # If Charlock says its binary
def UNK on_nl data on_period UNK on_op data on_op on_tstring_beg on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl on_op UNK # Public: Is the blob empty? # # Return true or false
def UNK on_nl on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end # Public: Is the blob text? # # Return true or false
def UNK on_nl on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rbracket # Public: Is the blob a supported image format? # # Return true or false
def UNK on_nl extname on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op extname # Public: Is the blob a supported 3D model format? # # Return true or false
def UNK on_nl UNK on_op extname on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl extname # Public: Is this blob a CSV file? # # Return true or false
def UNK on_nl extname on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl on_const on_op on_int on_op on_int on_nl # Public: Is the blob a PDF? # # Return true or false
def UNK on_nl UNK on_period UNK on_op on_const on_nl end on_nl on_ignored_nl def UNK on_nl on_op UNK on_op UNK on_op # Public: Is the blob too big to load? # # Return true or false
def UNK on_nl on_op UNK on_op UNK on_op on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK false if # Public: Is the blob safe to colorize? # # Return true or false
def UNK on_nl UNK false if UNK on_op on_int on_nl UNK on_op UNK on_op on_int on_nl end on_nl on_ignored_nl def # Internal: Does the blob have a ratio of long lines? # # Return true or false
def UNK on_nl on_op UNK on_op UNK on_nl end on_nl on_ignored_nl UNK on_op on_const on_period UNK on_lparen on_const on_period UNK # Public: Is the blob viewable? # # Non-viewable blobs will just show a "View Raw" link # # Return true or false
def UNK on_nl UNK on_op on_const on_op UNK on_op false on_nl end on_nl on_ignored_nl UNK on_op on_const on_period UNK on_lparen # Public: Is the blob in a vendored directory? # # Vendored files are ignored by language statistics. # # See "vendor.yml" for a list of vendored conventions that match # this pattern. # # Return true or false
def UNK on_nl UNK on_op on_const on_op UNK on_op false on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op on_ignored_nl # Public: Is the blob in a documentation directory? # # Documentation files are ignored by language statistics. # # See "documentation.yml" for a list of documentation conventions that match # this pattern. # # Return true or false
def UNK on_nl on_ivar on_op on_ignored_nl if UNK on_op data on_nl UNK on_ignored_nl data on_period UNK on_period UNK on_lparen encoded_newlines_re # Public: Get each line of data # # Requires Blob#data # # Returns an Array of lines
UNK on_ignored_nl data on_period UNK on_period UNK on_lparen encoded_newlines_re on_comma on_op on_int on_rparen on_nl UNK on_const on_op on_const on_nl on_lbracket # `data` is usually encoded as ASCII-8BIT even when the content has # been detected as a different encoding. However, we are not allowed # to change the encoding of `data` because we've made the implicit # guarantee that each entry in `lines` is encoded the same way as # `data`. # # Instead, we re-encode each possible newline sequence as the # detected encoding, then force them back to the encoding of `data` # (usually a binary encoding like ASCII-8BIT). This means that the # byte sequence will match how newlines are likely encoded in the # file, but we don't have to change the encoding of `data` as far as # Ruby is concerned. This allows us to correctly parse out each line # without changing the encoding of `data`, and # also--importantly--without having to duplicate many (potentially # large) strings.
data on_period UNK on_period UNK on_lparen encoded_newlines_re on_comma on_op on_int on_rparen on_nl UNK on_const on_op on_const on_nl on_lbracket data on_rbracket # `data` is split after having its last `\n` removed by # chomp (if any). This prevents the creation of an empty # element after the final `\n` character on POSIX files.
on_lbracket data on_rbracket on_nl end on_nl UNK on_ignored_nl on_lbracket on_rbracket on_nl end on_nl end on_nl on_ignored_nl def encoded_newlines_re on_nl on_ivar # The data is not splittable in the detected encoding. Assume it's # one big line.
def UNK on_nl UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_period UNK on_lparen UNK on_tstring_content UNK # Public: Get number of lines of code # # Requires Blob#data # # Returns Integer
def UNK on_nl UNK on_period UNK on_lparen UNK on_tstring_content UNK on_rparen on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl # Public: Get number of source lines of code # # Requires Blob#data # # Returns Integer
def UNK on_nl on_ivar on_op on_const on_period UNK on_lparen UNK on_comma UNK UNK data UNK on_rparen on_nl end on_nl on_ignored_nl # Public: Is the blob a generated file? # # Generated source code is suppressed in diffs and is ignored by # language statistics. # # May load Blob#data # # Return true or false
def UNK on_nl on_ivar on_op on_const on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op # Public: Detects the Language of the blob. # # May load Blob#data # # Returns a Language or nil if none is detected
def UNK on_nl UNK on_op UNK on_period UNK on_nl end on_nl on_ignored_nl on_const on_op on_lbracket on_symbeg UNK on_comma on_symbeg UNK # Internal: Get the TextMate compatible scope for the blob
def UNK on_nl on_op UNK on_op on_ignored_nl on_op UNK on_op on_ignored_nl on_op UNK on_op on_ignored_nl UNK on_op on_lparen UNK on_lparen # Internal: Should this blob be included in repository language statistics?
