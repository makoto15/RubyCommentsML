class on_const on_nl UNK on_const on_nl on_ignored_nl UNK on_symbeg name on_comma on_symbeg path on_comma on_symbeg url on_comma on_symbeg version on_comma # Derive and define at least @url, see Library/Formula for examples
UNK on_symbeg UNK on_nl on_ignored_nl def UNK name on_op on_tstring_beg on_tstring_content on_tstring_end on_comma path on_op nil on_nl set_instance_variable on_tstring_beg on_tstring_content # The build folder, usually in /tmp. # Will only be non-nil during the stage method.
def UNK name on_op on_tstring_beg on_tstring_content on_tstring_end on_comma path on_op nil on_nl set_instance_variable on_tstring_beg on_tstring_content on_tstring_end on_nl set_instance_variable on_tstring_beg on_tstring_content # Homebrew determines the name
on_ivar on_op path on_period nil? on_op self on_period class on_period path on_lparen name on_rparen on_op on_const on_period new on_lparen path # If we got an explicit path, use that, else determine from the name
set_instance_variable on_tstring_beg on_tstring_content on_tstring_end on_nl on_ivar on_op on_ivar on_period UNK on_nl validate_variable on_symbeg version if on_ivar on_nl on_ignored_nl on_const on_period # Use a provided version, if any
on_ivar on_op on_ivar on_period UNK on_nl validate_variable on_symbeg version if on_ivar on_nl on_ignored_nl on_const on_period each on_lbrace on_op type on_op # Otherwise detect the version from the URL
validate_variable on_symbeg version if on_ivar on_nl on_ignored_nl on_const on_period each on_lbrace on_op type on_op set_instance_variable type on_rbrace on_nl on_ignored_nl on_ivar # Only validate if a version was set; GitHubGistFormula needs to get # the URL to determine the version
def UNK on_nl return UNK on_period UNK on_period UNK on_op UNK on_nl rescue on_nl return UNK on_nl end on_nl on_ignored_nl # if the dir is there, but it's empty we consider it not installed
return UNK if on_const on_period UNK on_period empty? on_nl on_const on_period UNK on_period UNK self on_nl end on_nl on_ignored_nl def # `ARGV.formulae` will throw an exception if it comes up with an empty list. # FIXME: `ARGV.formulae` shouldn't be throwing exceptions, see issue #8823
def UNK on_semicolon on_const on_op on_tstring_beg on_tstring_content on_tstring_end end on_nl def UNK on_semicolon on_const on_op on_tstring_beg on_tstring_content on_tstring_end end on_nl # configuration needs to be preserved past upgrades
def UNK on_semicolon on_const on_op on_tstring_beg on_tstring_content on_tstring_end end on_nl on_ignored_nl def UNK on_semicolon on_tstring_beg on_tstring_content on_tstring_end on_op name end # generally we don't want var stuff inside the keg
def UNK on_semicolon on_tstring_beg on_tstring_content on_tstring_end on_op name end on_nl def UNK on_semicolon prefix on_op on_lparen UNK on_op on_tstring_beg on_tstring_content # plist name, i.e. the name of the launchd service
def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl # Use the @spec_to_use to detect the download strategy. # Can be overriden to force a custom download strategy
def UNK on_semicolon nil end on_nl on_ignored_nl def UNK on_semicolon on_lbracket on_rbracket end on_nl on_ignored_nl def UNK on_semicolon end on_nl # tell the user about any caveats regarding this package, return a string
def UNK on_semicolon on_lbracket on_rbracket end on_nl on_ignored_nl def UNK on_semicolon end on_nl on_ignored_nl def UNK on_nl self on_period class # any e.g. configure options for this package
def UNK on_semicolon end on_nl on_ignored_nl def UNK on_nl self on_period class on_period UNK on_op UNK on_nl end on_nl on_ignored_nl # patches are automatically applied after extracting the tarball # return an array of strings, or if you need a patch level other than -p1 # return a Hash eg. # { # :p0 => ['http://foo.com/patch1', 'http://foo.com/patch2'], # :p1 => 'http://bar.com/patch2', # :p2 => ['http://moo.com/patch5', 'http://moo.com/patch6'] # } # The final option is to return DATA, then put a diff after __END__. You # can still return a Hash with DATA as the value for a patch level key.
def UNK on_nl self on_period class on_period UNK on_op UNK on_nl end on_nl on_ignored_nl def UNK cc on_nl return UNK # rarely, you don't want your library symlinked into the main prefix # see gettext.rb for an example
def UNK path on_nl return UNK if self on_period class on_period UNK on_nl UNK on_op path on_period UNK on_lparen prefix # sometimes the clean process breaks things # skip cleaning paths in a formula with a class method like this: # skip_clean [bin+"foo", lib+"bar"] # redefining skip_clean? now deprecated
def UNK on_nl validate_variable on_symbeg name on_nl validate_variable on_symbeg version on_nl on_ignored_nl UNK do on_ignored_nl UNK on_ignored_nl UNK on_nl UNK # yields self with current working directory set to the uncompressed tarball
UNK self on_nl rescue on_const on_comma on_const on_comma on_const on_op e on_nl puts if on_const on_op e unless on_const on_period # we allow formulas to do anything they want to the Ruby process # so load any deps before this point! And exit asap afterwards
unless on_const on_period UNK on_nl UNK on_tstring_content on_words_sep on_tstring_content on_tstring_end on_period UNK on_lbrace on_op f on_op on_const on_period UNK f # don't print next to the ^C
def UNK on_nl UNK on_words_sep on_tstring_content on_embexpr_beg prefix on_embexpr_end on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_end on_nl end on_nl # Standard parameters for CMake builds. # Using Build Type "None" tells cmake to use our CFLAGS,etc. settings. # Setting it to Release would ignore our flags. # Setting CMAKE_FIND_FRAMEWORK to "LAST" tells CMake to search for our # libraries before trying to utilize Frameworks, many of which will be from # 3rd party installs. # Note: there isn't a std_autotools variant because autotools is a lot # less consistent and the standard parameters are more memorable.
name on_period UNK on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end on_rparen on_lbrace on_backref on_period UNK on_rbrace on_period UNK on_lparen on_tstring_beg on_tstring_content #remove invalid characters and then camelcase it
def self on_period UNK on_nl on_const on_lbracket on_tstring_beg on_embexpr_beg on_const on_embexpr_end on_tstring_content on_tstring_end on_rbracket on_period UNK on_lbrace on_op f on_op # an array of all Formula names
def self on_period UNK on_nl UNK on_lbrace on_op f on_op f on_rbrace on_nl end on_nl def self on_period UNK on_nl # an array of all Formula, instantiated
UNK on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_content on_tstring_end on_nl end on_nl end on_nl end on_nl on_ignored_nl def UNK on_nl name # Don't let one broken formula break commands. But do complain.
name on_nl UNK UNK on_period UNK and UNK on_period UNK on_nl name on_nl UNK UNK on_period UNK on_nl UNK on_period # Otherwise don't resolve paths or URLs
return name if name on_period UNK on_const on_nl on_ignored_nl name on_op name on_period to_s on_nl on_ignored_nl if name on_op on_regexp_beg # If an instance of Formula is passed, just return it
name on_op name on_period to_s on_nl on_ignored_nl if name on_op on_regexp_beg on_tstring_content on_regexp_end on_nl url on_op name on_nl name on_op # Otherwise, convert to String in case a Pathname comes in
if name on_op on_regexp_beg on_tstring_content on_regexp_end on_nl url on_op name on_nl name on_op on_const on_period new on_lparen name on_rparen on_period # If a URL is passed, download to the cache and install
if name on_period UNK on_tstring_beg on_tstring_content on_tstring_end on_nl require name on_nl on_ignored_nl name on_op on_tstring_beg on_embexpr_beg name on_embexpr_end on_tstring_content on_tstring_end # If name was a path or mapped to a cached formula
name on_op on_tstring_beg on_embexpr_beg name on_embexpr_end on_tstring_content on_tstring_end unless name on_op on_regexp_beg on_tstring_content on_regexp_end on_nl on_ignored_nl path on_op on_const on_period # require allows filenames to drop the .rb extension, but everything else # in our codebase will require an exact and fullpath.
require on_const on_period path on_lparen name on_rparen on_nl UNK on_op on_symbeg UNK on_nl end on_nl end on_nl on_ignored_nl UNK on_ignored_nl # For names, map to the path and then require
UNK on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_content on_embexpr_beg name on_embexpr_end on_tstring_content on_tstring_end on_nl puts on_tstring_beg on_tstring_content on_tstring_end on_nl raise on_const # TODO really this text should be encoded into the exception # and only shown if the UI deems it correct to show it
on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl end on_nl on_ignored_nl def self on_period path name on_nl on_const on_op on_tstring_beg on_tstring_content on_embexpr_beg # remotely installed formula are not mxcl/master but this will do for now
def UNK on_nl on_const on_period UNK on_lparen self on_rparen on_period UNK on_period UNK on_nl end on_nl on_ignored_nl def self on_period # deps are in an installable order # which means if a depends on b then b will be ordered before a in this list
def UNK cmd on_comma on_op args on_nl UNK on_op args on_period UNK on_nl UNK on_period UNK on_tstring_beg on_tstring_content on_tstring_end if # Pretty titles the command and buffers stdout/stderr # Throws if there's an error
UNK on_op args on_period UNK on_nl UNK on_period UNK on_tstring_beg on_tstring_content on_tstring_end if cmd on_op on_tstring_beg on_tstring_content on_tstring_end and UNK # remove "boring" arguments so that the important ones are more likely to # be shown considering that we trim long ohai lines to the terminal width
end on_nl UNK on_period UNK on_nl UNK on_op on_tstring_beg on_tstring_end on_nl UNK on_op UNK on_period UNK UNK UNK on_period UNK # never gets here unless exec threw or failed
end if UNK on_nl on_ignored_nl rescue on_nl raise on_const on_period new on_lparen self on_comma cmd on_comma args on_comma UNK on_rparen # ENV.kind_of? Hash # => false
def UNK on_nl if UNK self on_nl downloader on_op on_const on_period new UNK on_comma name on_comma version on_comma nil on_nl # For brew-fetch and others.
UNK on_op on_ivar on_op on_ivar on_op UNK on_op on_lbracket on_rbracket on_nl end on_nl on_ignored_nl on_const on_period UNK on_nl on_ignored_nl UNK # Don't attempt mirrors if this install is not pointed at a "stable" URL. # This can happen when options like `--HEAD` are invoked.
on_const on_period UNK on_nl on_ignored_nl UNK on_ignored_nl UNK on_op downloader on_period UNK on_nl rescue on_const on_op e on_nl raise e # Ensure the cache exists
def UNK on_nl on_const on_period UNK on_lbrace on_op type on_op UNK on_lparen on_tstring_beg on_tstring_content on_embexpr_beg type on_embexpr_end on_tstring_end on_rparen on_rbrace # Detect which type of checksum is being used, or nil if none
def UNK UNK on_comma on_op args on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl if args on_period UNK on_op UNK on_nl type # For FormulaInstaller.
type on_op type on_period to_s on_period UNK on_nl else on_ignored_nl supplied on_comma type on_op args on_nl end on_nl on_ignored_nl UNK # Convert symbol to readable string
on_ivar on_op on_const on_period UNK on_nl UNK on_nl on_ivar on_op nil on_nl end on_nl end on_nl on_ignored_nl def UNK on_nl # Set path after the downloader changes the working folder.
UNK on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_op on_lparen p on_period UNK on_rparen on_nl end on_nl end on_nl # -f means don't prompt the user if there are errors; just exit with non-zero status
UNK on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl def self on_period UNK on_lparen on_op UNK on_rparen on_ignored_nl UNK on_period each # The methods below define the formula DSL.
UNK on_lparen on_op block on_rparen on_nl end on_nl end on_nl on_ignored_nl def UNK url on_op nil on_comma on_op block on_nl # clear out mirrors from the stable release
on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op on_const on_period new on_nl end on_nl on_ignored_nl def # Added the uniq after some inspection with Pry---seems `mirror` gets # called three times. The first two times only one copy of the input is # left in `@mirrors`. On the final call, two copies are present. This # happens with `@deps` as well. Odd.
