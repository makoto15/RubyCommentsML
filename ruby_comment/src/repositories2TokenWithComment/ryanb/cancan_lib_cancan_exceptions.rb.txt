UNK on_const on_op on_const UNK end on_nl on_ignored_nl UNK on_const on_op on_const UNK end on_nl on_ignored_nl UNK on_const on_op on_const # A general CanCan exception
UNK on_const on_op on_const UNK end on_nl on_ignored_nl UNK on_const on_op on_const UNK end on_nl on_ignored_nl UNK on_const on_op on_const # Raised when behavior is not implemented, usually used in an abstract class.
UNK on_const on_op on_const UNK end on_nl on_ignored_nl UNK on_const on_op on_const UNK end on_nl on_ignored_nl UNK on_const on_op on_const # Raised when removed code is called, an alternative solution is provided in message.
UNK on_const on_op on_const UNK end on_nl on_ignored_nl UNK on_const on_op on_const on_nl UNK UNK UNK UNK UNK UNK on_nl # Raised when using check_authorization without calling authorized!
UNK on_const on_op on_const on_nl UNK UNK UNK UNK UNK UNK on_nl UNK UNK UNK on_nl on_ignored_nl UNK UNK UNK # This error is raised when a user isn't allowed to access a given controller action. # This usually happens within a call to ControllerAdditions#authorize! but can be # raised manually. # # raise CanCan::AccessDenied.new("Not authorized!", :read, Article) # # The passed message, action, and subject are optional and can later be retrieved when # rescuing from the exception. # # exception.message # => "Not authorized!" # exception.action # => :read # exception.subject # => Article # # If the message is not specified (or is nil) it will default to "You are not authorized # to access this page." This default can be overridden by setting default_message. # # exception.default_message = "Default error message" # exception.message # => "Default error message" # # See ControllerAdditions#authorized! for more information on rescuing from this exception # and customizing the message using I18n.
