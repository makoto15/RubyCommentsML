class on_const def UNK on_period UNK on_lparen UNK on_comma UNK on_comma on_op args on_rparen on_ignored_nl options on_op args on_period UNK # Handle the load and authorization controller logic so we don't clutter up all controllers with non-interface methods. # This class is used internally, so you do not need to call methods directly on it.
def UNK on_period UNK on_lparen UNK on_comma UNK on_comma on_op args on_rparen on_ignored_nl options on_op args on_period UNK on_nl UNK # :nodoc:
options on_op on_ivar on_period class on_period UNK on_lbracket UNK on_rbracket on_lbracket on_ivar on_rbracket on_nl if options on_period UNK on_nl UNK # This could probably use some refactoring
def resource_class on_nl UNK on_ivar on_lbracket on_symbeg class on_rbracket on_nl UNK UNK UNK name on_period to_sym on_nl UNK UNK UNK # Returns the class used for this resource. This can be overriden by the :class option. # If +false+ is passed in it will use the resource name as a symbol in which case it should # only be used for authorization, not loading since there's no class to load through.
def resource_base on_nl if on_ivar on_lbracket on_symbeg UNK on_rbracket on_nl if parent_resource on_nl on_ivar on_lbracket on_symbeg UNK on_rbracket on_op resource_class # The object that methods (such as "find", "new" or "build") are called on. # If the :through option is passed it will go through an association on that instance. # If the :shallow option is passed it will use the resource_class if there's no parent # If the :singleton option is passed it won't use the association because it needs to be handled later.
end on_nl else on_ignored_nl resource_class on_nl end on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_lbracket on_symbeg UNK on_rbracket on_op # maybe this should be a record not found error instead?
def parent_resource on_nl UNK on_op UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen name on_rparen on_ignored_nl if # The object to load this resource through.
