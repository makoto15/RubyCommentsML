class on_const UNK on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg conditions on_nl UNK on_symbeg UNK on_nl on_ignored_nl # This class is used internally and should only be called through Ability. # it holds the information about a "can" call made on Ability and provides # helpful methods to determine permission checking and conditions hash generation.
UNK on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg conditions on_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK # :nodoc:
def UNK on_lparen UNK on_comma action on_comma subject on_comma conditions on_comma UNK on_rparen on_ignored_nl UNK on_const on_comma UNK UNK UNK # The first argument when initializing is the base_behavior which is a true/false # value. True for "can" and false for "cannot". The next two arguments are the action # and subject respectively (such as :read, @project). The third argument is a hash # of conditions and the last one is the block passed to the "can" call.
def UNK on_lparen action on_comma subject on_rparen on_ignored_nl subject on_op subject on_period UNK on_period UNK if subject on_period class on_op # Matches both the subject and action, not necessarily the conditions
def UNK on_lparen action on_comma subject on_comma extra_args on_rparen on_ignored_nl if on_ivar on_nl UNK on_lparen action on_comma subject on_comma extra_args # Matches the block or conditions hash
on_ivar on_period UNK on_op UNK on_op on_ivar on_nl end on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op on_op on_ivar # Don't stop at "cannot" definitions when there are conditions.
def matches_conditions_hash? on_lparen subject on_comma conditions on_op on_ivar on_rparen on_ignored_nl if conditions on_period UNK on_nl UNK on_nl else on_ignored_nl if # Checks if the given subject matches the given conditions hash. # This behavior can be overriden by a model adapter by defining two class methods: # override_matching_for_conditions?(subject, conditions) and # matches_conditions_hash?(subject, conditions)
