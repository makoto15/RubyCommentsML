def conditions on_nl if on_ivar on_period UNK on_op UNK on_op on_ivar on_period UNK on_period UNK on_nl UNK on_lparen on_ivar on_period # Returns conditions intended to be used inside a database query. Normally you will not call this # method directly, but instead go through ModelAdditions#accessible_by. # # If there is only one "can" definition, a hash of conditions will be returned matching the one defined. # # can :manage, User, :id => 1 # query(:manage, User).conditions # => { :id => 1 } # # If there are multiple "can" definitions, a SQL string will be returned to handle complex cases. # # can :manage, User, :id => 1 # can :manage, User, :manager_id => 1 # cannot :manage, User, :self_managed => true # query(:manage, User).conditions # => "not (self_managed = 't') AND ((manager_id = 1) OR (id = 1))" #
UNK on_lparen on_ivar on_period UNK on_period conditions on_rparen on_period UNK on_nl else on_ignored_nl on_ivar on_period UNK on_period UNK on_lparen UNK # Return the conditions directly if there's just one definition
def joins on_nl joins_hash on_op on_lbrace on_rbrace on_nl on_ivar on_period UNK do on_op rule on_op on_ignored_nl UNK on_lparen joins_hash on_comma # Returns the associations used in conditions for the :joins option of a search. # See ModelAdditions#accessible_by
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK on_period UNK do on_op name on_comma nested on_op on_ignored_nl if UNK # Takes two hashes and does a deep merge.
def UNK on_lparen joins_hash on_rparen on_ignored_nl joins on_op on_lbracket on_rbracket on_nl joins_hash on_period UNK do on_op name on_comma nested on_op # Removes empty hashes and moves everything into arrays.
