UNK on_const on_op on_const on_nl on_ignored_nl UNK on_const on_nl on_ignored_nl def body on_nl on_const on_period UNK on_lparen UNK on_rparen on_nl # A Response from RestClient, you can access the response body, the code or the headers. #
def body on_nl on_const on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl body on_nl end on_nl # Return the HTTP response body. # # Future versions of RestClient will deprecate treating response objects # directly as strings, so it will be necessary to call `.body`. # # @return [String] #
on_const on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl body on_nl end on_nl on_ignored_nl def UNK # Benchmarking suggests that "#{self}" is fastest, and that caching the # body string in an instance variable doesn't make it enough faster to be # worth the extra memory storage.
def UNK on_nl body on_nl end on_nl on_ignored_nl def UNK on_nl body on_nl end on_nl on_ignored_nl def UNK on_nl UNK # Convert the HTTP response body to a pure String object. # # @return [String]
def UNK on_nl body on_nl end on_nl on_ignored_nl def UNK on_nl UNK UNK UNK UNK on_period UNK UNK UNK UNK # Convert the HTTP response body to a pure String object. # # @return [String]
def UNK on_period UNK on_lparen body UNK UNK UNK UNK UNK UNK on_op UNK on_rparen on_ignored_nl UNK on_op UNK on_period # Initialize a Response object. Because RestClient::Response is # (unfortunately) a subclass of String for historical reasons, # Response.create is the preferred initializer. # # @param [String, nil] body The response body from the Net::HTTPResponse # @param [Net::HTTPResponse] net_http_res # @param [RestClient::Request] request # @param [Time] start_time
def UNK on_period UNK on_lparen response on_rparen on_ignored_nl UNK on_op on_const on_op on_const on_period UNK on_lparen response on_period UNK on_rparen # Set the String encoding according to the 'Content-Type: charset' header, # if possible.
