UNK on_const on_nl UNK on_const on_nl on_ignored_nl UNK UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_lparen UNK on_rparen on_nl # The ParamsArray class is used to represent an ordered list of [key, value] # pairs. Use this when you need to include a key multiple times or want # explicit control over parameter ordering. # # Most of the request payload & parameter functions normally accept a Hash of # keys => values, which does not allow for duplicated keys. # # @see RestClient::Utils.encode_query_string # @see RestClient::Utils.flatten_params #
UNK UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl UNK UNK on_lparen on_op # @param array [Array<Array>] An array of parameter key,value pairs. These # pairs may be 2 element arrays [key, value] or single element hashes # {key => value}. They may also be single element arrays to represent a # key with no value. # # @example # >> ParamsArray.new([[:foo, 123], [:foo, 456], [:bar, 789]]) # This will be encoded as "foo=123&foo=456&bar=789" # # @example # >> ParamsArray.new({foo: 123, bar: 456}) # This is valid, but there's no reason not to just use the Hash directly # instead of a ParamsArray. # #
UNK UNK on_lparen pair on_rparen on_ignored_nl UNK pair on_nl UNK on_const on_nl UNK pair on_period UNK on_op UNK on_nl UNK # A pair may be: # - A single element hash, e.g. {foo: 'bar'} # - A two element array, e.g. ['foo', 'bar'] # - A one element array, e.g. ['foo'] #
UNK on_lparen pair on_period UNK on_rparen on_nl end on_nl end on_nl end on_nl end on_nl EMP EMP EMP EMP EMP # recurse, converting any non-array to an array
