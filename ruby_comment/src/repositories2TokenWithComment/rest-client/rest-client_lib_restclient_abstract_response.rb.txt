def UNK on_nl request on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK UNK UNK on_nl on_ignored_nl code on_op # Logger from the request, potentially nil.
def code on_nl on_ivar on_op on_ivar on_period code on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op request # HTTP status code
def headers on_nl on_ivar on_op on_const on_period UNK on_lparen on_ivar on_period UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl # A hash of the headers, beautified with symbols and underscores. # e.g. "Content-type" will become :content_type.
def UNK on_nl on_ivar on_op on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen net_http_res on_comma request on_comma UNK # The raw headers.
def UNK on_lparen net_http_res on_comma request on_comma UNK on_rparen on_ignored_nl on_ivar on_op net_http_res on_nl on_ivar on_op request on_nl on_ivar on_op # @param [Net::HTTPResponse] net_http_res # @param [RestClient::Request] request # @param [Time] start_time
UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op UNK UNK on_nl on_ignored_nl UNK on_period UNK on_lparen on_ivar on_period # prime redirection history
def UNK on_nl UNK on_op UNK UNK on_nl on_ignored_nl UNK on_period UNK on_lparen on_ivar on_period UNK on_rparen on_period UNK UNK # Hash of cookies extracted from response headers. # # NB: This will return only cookies whose domain matches this request, and # may not even return all of those cookies if there are duplicate names. # Use the full cookie_jar for more nuanced access. # # @see #cookie_jar # # @return [Hash] #
def UNK on_nl UNK on_ivar UNK UNK on_lparen on_ivar on_rparen on_op on_ivar on_nl on_ignored_nl UNK on_op on_ivar on_period UNK on_period # Cookie jar extracted from response headers. # # @return [HTTP::CookieJar] #
def UNK on_lparen on_op block on_rparen on_ignored_nl UNK code on_nl UNK on_int on_op on_int on_nl UNK on_nl UNK on_int on_comma # Return the default behavior corresponding to the response code: # # For 20x status codes: return the response itself # # For 30x status codes: # 301, 302, 307: redirect GET / HEAD if there is a Location header # 303: redirect, changing method to GET, if there is a Location header # # For all other responses, raise a response exception #
def UNK on_lparen on_op block on_rparen on_ignored_nl UNK on_lparen request on_period UNK on_period UNK on_comma on_op block on_rparen on_nl end # Follow a redirection response by making a new HTTP request to the # redirection target.
def UNK on_lparen on_op block on_rparen on_ignored_nl new_args on_op request on_period UNK on_period UNK on_nl new_args on_lbracket on_symbeg UNK on_rbracket # Follow a redirection response, but change the HTTP method to GET and drop # the payload from the original request.
def UNK on_period UNK on_lparen headers on_rparen on_ignored_nl headers on_period UNK on_lparen UNK UNK on_rparen UNK on_op UNK on_comma on_lparen # Convert headers hash into canonical form. # # Header names will be converted to lowercase symbols with underscores # instead of hyphens. # # Headers specified multiple times will be joined by comma and space, # except for Set-Cookie, which will always be an array. # # Per RFC 2616, if a server sends multiple headers with the same key, they # MUST be able to be joined into a single header by a comma. However, # Set-Cookie (RFC 6265) cannot because commas are valid within cookie # definitions. The newer RFC 7230 notes (3.2.2) that Set-Cookie should be # handled as a special case. # # http://tools.ietf.org/html/rfc2616#section-4.2 # http://tools.ietf.org/html/rfc7230#section-3.2.2 # http://tools.ietf.org/html/rfc6265 # # @param headers [Hash] # @return [Hash] #
UNK UNK on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_lbracket UNK on_rbracket on_op UNK on_nl UNK on_ignored_nl UNK on_lbracket # Handle Set-Cookie specially since it cannot be joined by comma.
def UNK on_lparen new_args on_comma on_op block on_rparen on_ignored_nl on_ignored_nl url on_op headers on_lbracket on_symbeg UNK on_rbracket on_nl on_ignored_nl UNK # Follow a redirection # # @param new_args [Hash] Start with this hash of arguments for the # redirection request. The hash will be mutated, so be sure to dup any # existing hash that should not be modified. #
url on_op headers on_lbracket on_symbeg UNK on_rbracket on_nl on_ignored_nl UNK url on_nl raise UNK on_nl end on_nl on_ignored_nl UNK url # parse location header and merge into existing URL
UNK url on_nl raise UNK on_nl end on_nl on_ignored_nl UNK url on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl url # cannot follow redirection if there is no location header
UNK url on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl url on_op on_const on_period UNK on_lparen request on_period url on_rparen # handle relative redirects
new_args on_lbracket on_symbeg UNK on_rbracket on_op UNK on_nl on_ignored_nl UNK on_op on_const on_period UNK on_lparen new_args on_rparen on_nl on_ignored_nl UNK # pass through our new cookie jar
UNK on_op on_const on_period UNK on_lparen new_args on_rparen on_nl on_ignored_nl UNK on_period UNK on_op UNK on_op on_lbracket UNK on_rbracket on_nl # prepare new request
UNK on_period UNK on_op UNK on_op on_lbracket UNK on_rbracket on_nl on_ignored_nl UNK on_period UNK on_lparen on_op block on_rparen on_nl end # append self to redirection history
UNK on_period UNK on_lparen on_op block on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl UNK request on_period UNK on_op on_int # execute redirected request
