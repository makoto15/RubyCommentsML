UNK UNK on_nl UNK UNK on_lparen on_op urls on_rparen on_ignored_nl link on_lparen on_symbeg UNK UNK on_op urls on_rparen on_nl end # = Sinatra::LinkHeader # # <tt>Sinatra::LinkHeader</tt> adds a set of helper methods to generate link # HTML tags and their corresponding Link HTTP headers. # # == Usage # # Once you had set up the helpers in your application (see below), you will # be able to call the following methods from inside your route handlers, # filters and templates: # # +prefetch+:: # Sets the Link HTTP headers and returns HTML tags to prefetch the given # resources. # # +stylesheet+:: # Sets the Link HTTP headers and returns HTML tags to use the given # stylesheets. # # +link+:: # Sets the Link HTTP headers and returns the corresponding HTML tags # for the given resources. # # +link_headers+:: # Returns the corresponding HTML tags for the current Link HTTP headers. # # === Classic Application # # In a classic application simply require the helpers, and start using them: # # require "sinatra" # require "sinatra/link_header" # # # The rest of your classic application code goes here... # # === Modular Application # # In a modular application you need to require the helpers, and then tell # the application you will use them: # # require "sinatra/base" # require "sinatra/link_header" # # class MyApp < Sinatra::Base # helpers Sinatra::LinkHeader # # # The rest of your modular application code goes here... # end #
UNK UNK on_lparen on_op urls on_rparen on_ignored_nl link on_lparen on_symbeg UNK UNK on_op urls on_rparen on_nl end on_nl on_ignored_nl UNK ## # Sets Link HTTP header and returns HTML tags for telling the browser to # prefetch given resources (only supported by Opera and Firefox at the # moment).
UNK UNK on_lparen on_op urls on_rparen on_ignored_nl urls on_op UNK UNK UNK urls on_period UNK on_period UNK on_symbeg UNK on_nl ## # Sets Link HTTP header and returns HTML tags for using stylesheets.
UNK link on_lparen on_op urls on_rparen on_ignored_nl UNK on_op urls on_period UNK on_period UNK on_lparen on_symbeg UNK on_rparen on_op urls ## # Sets Link HTTP header and returns corresponding HTML tags. # # Example: # # # Sets header: # # Link: </foo>; rel="next" # # Returns String: # # '<link href="/foo" rel="next" />' # link '/foo', :rel => :next # # # Multiple URLs # link :stylesheet, '/a.css', '/b.css'
UNK UNK on_nl UNK UNK UNK on_nl UNK on_tstring_beg on_tstring_end UNK UNK on_period UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_lbracket ## # Takes the current value of th Link header(s) and generates HTML tags # from it. # # Example: # # get '/' do # # You can of course use fancy helpers like #link, #stylesheet # # or #prefetch # response["Link"] = '</foo>; rel="next"' # haml :some_page # end # # __END__ # # @@ layout # %head= link_headers # %body= yield
