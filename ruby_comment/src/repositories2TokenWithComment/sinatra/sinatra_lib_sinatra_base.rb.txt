on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end # coding: utf-8 # frozen_string_literal: true
require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl # external dependencies
require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end # stdlib dependencies
require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl class # other files we need
class on_const on_op on_const on_op on_const on_nl on_const on_op on_regexp_beg on_tstring_content on_regexp_end on_nl on_const on_op on_regexp_beg on_tstring_content on_embexpr_beg on_const on_embexpr_end # The request object. See Rack::Request for more info: # http://rubydoc.info/github/rack/rack/master/Rack/Request
def UNK on_nl on_ivar on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op begin on_ignored_nl if on_ivar on_period include? on_tstring_beg on_tstring_content on_tstring_end and # Returns an array of acceptable media types for the response
on_lbracket on_ivar on_comma on_op on_ivar on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_comma on_ivar on_period UNK on_rbracket on_nl end on_nl # We sort in descending order; better matches should be higher.
class on_const on_op on_const on_op on_const on_nl on_const on_op on_lbracket on_int on_comma on_int on_rbracket on_nl on_ignored_nl def UNK on_lparen value # The response object. See Rack::Response and Rack::Response::Helpers for # more info: # http://rubydoc.info/github/rack/rack/master/Rack/Response # http://rubydoc.info/github/rack/rack/master/Rack/Response/Helpers
headers on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op body on_period UNK on_lparen on_op on_symbeg UNK on_rparen on_period UNK on_lparen on_int on_comma # if some other code has already set Content-Length, don't muck with it # currently, this would be the static file-handler
class on_const on_op on_const on_period new on_lparen on_symbeg app on_rparen on_nl def call on_lparen env on_rparen on_ignored_nl result on_comma callback # Some Rack handlers (Thin, Rainbows!) implement an extended body object protocol, however, # some middleware (namely Rack::Lint) will break it by not mirroring the methods in question. # This middleware will detect an extended body object and will make sure it reaches the # handler directly. We do this here, so our middleware and middleware set up by the app will # still be able to run.
class on_const on_op on_const on_op on_const on_nl def call on_lparen env on_rparen on_ignored_nl env on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op # Behaves exactly like Rack::CommonLogger with the notable exception that it does nothing, # if another CommonLogger is already in the middleware chain.
def UNK on_semicolon on_int end on_nl end on_nl on_ignored_nl class on_const on_op on_const def UNK on_semicolon on_int end on_nl end #:nodoc:
def UNK on_semicolon on_int end on_nl end on_nl on_ignored_nl UNK on_const on_nl def status on_lparen value on_op nil on_rparen on_ignored_nl #:nodoc:
UNK on_const on_nl def status on_lparen value on_op nil on_rparen on_ignored_nl response on_period status on_op on_const on_op on_const on_period UNK # Methods available to routes, before/after filters, and views.
def status on_lparen value on_op nil on_rparen on_ignored_nl response on_period status on_op on_const on_op on_const on_period UNK on_lparen value on_rparen # Set or retrieve the response status code.
def body on_lparen value on_op nil on_comma on_op block on_rparen on_ignored_nl if block_given? on_nl def block on_period each on_semicolon yield # Set or retrieve the response body. When a block is given, # evaluation is deferred until the body is read with #each.
unless request on_period UNK on_op value on_period is_a? on_lparen on_const on_op on_const on_op on_const on_rparen on_op value on_period is_a? on_lparen # Rack 2.0 returns a Rack::File::Iterator here instead of # Rack::File as it was in the previous API.
def UNK on_lparen uri on_comma on_op args on_rparen on_ignored_nl if env on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op on_tstring_beg on_tstring_content on_tstring_end # Halt processing and redirect to the URI provided.
response on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op uri on_lparen uri on_period to_s on_comma settings on_period UNK on_comma settings on_period UNK # According to RFC 2616 section 14.30, "the field value consists of a # single absolute URI"
def uri on_lparen UNK on_op nil on_comma UNK on_op true on_comma UNK on_op true on_rparen on_ignored_nl return UNK if UNK # Generates the absolute URI for a given path in the app. # Takes Rack routers and reverse proxies into account.
def error on_lparen code on_comma body on_op nil on_rparen on_ignored_nl code on_comma body on_op on_int on_comma code on_period to_str if # Halt processing and return the error status provided.
def UNK on_lparen body on_op nil on_rparen on_ignored_nl error on_int on_comma body on_nl end on_nl on_ignored_nl def headers on_lparen hash # Halt processing and return a 404 Not Found.
def headers on_lparen hash on_op nil on_rparen on_ignored_nl response on_period headers on_period merge! hash if hash on_nl response on_period headers # Set multiple response headers with Hash.
def UNK on_nl request on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl request on_period UNK on_nl end on_nl on_ignored_nl # Access the underlying Rack session.
def UNK on_nl request on_period UNK on_nl end on_nl on_ignored_nl def mime_type on_lparen type on_rparen on_ignored_nl on_const on_period mime_type on_lparen # Access shared logger object.
def mime_type on_lparen type on_rparen on_ignored_nl on_const on_period mime_type on_lparen type on_rparen on_nl end on_nl on_ignored_nl def content_type on_lparen type # Look up a media type by file extension in Rack's mime registry.
def content_type on_lparen type on_op nil on_comma params on_op on_lbrace on_rbrace on_rparen on_ignored_nl return response on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket # Set the Content-Type of the response body given a media type or file # extension.
def UNK on_lparen filename on_op nil on_comma disposition on_op on_symbeg UNK on_rparen on_ignored_nl response on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op # Set the Content-Disposition to "attachment" with the specified filename, # instructing the user agents to prompt to save.
def UNK on_lparen path on_comma opts on_op on_lbrace on_rbrace on_rparen on_ignored_nl if opts on_lbracket on_symbeg type on_rbracket or not response # Use the contents of the file at +path+ as the response body.
class on_const on_nl def self on_period UNK on_lparen on_op on_rparen yield end on_nl def self on_period UNK on_lparen on_op on_rparen # Class of the response body in case you use #stream. # # Three things really matter: The front and back block (back being the # block generating content, front the one sending it to the client) and # the scheduler, integrating with whatever concurrency feature the Rack # handler is using. # # Scheduler has to respond to defer and schedule.
def UNK on_lparen UNK on_op false on_rparen on_ignored_nl UNK on_op env on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op on_const on_op on_const # Allows to start sending data to the client even though later parts of # the response body have not yet been generated. # # The close parameter specifies whether Stream#close should be called # after the block has been executed. This is only relevant for evented # servers like Thin or Rainbows.
def UNK on_lparen on_op values on_rparen on_ignored_nl if values on_period UNK on_period UNK on_lparen on_const on_rparen on_nl hash on_op values # Specify response freshness policy for HTTP caches (Cache-Control header). # Any number of non-value directives (:public, :private, :no_cache, # :no_store, :must_revalidate, :proxy_revalidate) may be passed along with # a Hash of value directives (:max_age, :s_maxage). # # cache_control :public, :must_revalidate, :max_age => 60 # => Cache-Control: public, must-revalidate, max-age=60 # # See RFC 2616 / 14.9 for more on standard cache control directives: # http://tools.ietf.org/html/rfc2616#section-14.9.1
def UNK on_lparen UNK on_comma on_op values on_rparen on_ignored_nl values on_op on_lbrace on_rbrace unless values on_period UNK on_period UNK on_lparen # Set the Expires header and Cache-Control/max-age directive. Amount # can be an integer number of seconds in the future or a Time object # indicating when the response should be considered "stale". The remaining # "values" arguments are passed to the #cache_control helper: # # expires 500, :public, :must_revalidate # => Cache-Control: public, must-revalidate, max-age=500 # => Expires: Mon, 08 Jun 2009 08:50:17 GMT #
def UNK on_lparen time on_rparen on_ignored_nl return unless time on_nl time on_op UNK time on_nl response on_lbracket on_tstring_beg on_tstring_content on_tstring_end # Set the last modified time of the resource (HTTP 'Last-Modified' header) # and halt if conditional GET matches. The +time+ argument is a Time, # DateTime, or other object that responds to +to_time+. # # When the current request includes an 'If-Modified-Since' header that is # equal or later than the time specified, execution is immediately halted # with a '304 Not Modified' response.
UNK on_op on_const on_period UNK on_lparen env on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_rparen on_period to_i on_nl halt on_int if UNK # compare based on seconds since epoch
UNK on_op on_const on_period UNK on_lparen env on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_rparen on_period to_i on_nl halt on_int if UNK # compare based on seconds since epoch
def UNK on_lparen value on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl options on_op on_lbrace on_symbeg UNK on_op options on_rbrace unless # Set the response entity tag (HTTP 'ETag' header) and halt if conditional # GET matches. The +value+ argument is an identifier that uniquely # identifies the current version of the resource. The +kind+ argument # indicates whether the etag should be used as a :strong (default) or :weak # cache validator. # # When the current request includes an 'If-None-Match' header with a # matching etag, execution is immediately halted. If the request method is # GET or HEAD, a '304 Not Modified' response is sent.
options on_op on_lbrace on_symbeg UNK on_op options on_rbrace unless on_const on_op options on_nl UNK on_op options on_lbracket on_symbeg UNK on_rbracket # Before touching this code, please double check RFC 2616 14.24 and 14.26.
def UNK on_nl request on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl status on_period between? on_int on_comma on_int on_nl # Sugar for redirect (example: redirect back)
def UNK on_nl status on_period between? on_int on_comma on_int on_nl end on_nl on_ignored_nl def UNK on_nl status on_period between? on_int # whether or not the status is set to 1xx
def UNK on_nl status on_period between? on_int on_comma on_int on_nl end on_nl on_ignored_nl def UNK on_nl status on_period between? on_int # whether or not the status is set to 2xx
def UNK on_nl status on_period between? on_int on_comma on_int on_nl end on_nl on_ignored_nl def UNK on_nl status on_period between? on_int # whether or not the status is set to 3xx
def UNK on_nl status on_period between? on_int on_comma on_int on_nl end on_nl on_ignored_nl def UNK on_nl status on_period between? on_int # whether or not the status is set to 4xx
def UNK on_nl status on_period between? on_int on_comma on_int on_nl end on_nl on_ignored_nl def UNK on_nl status on_op on_int on_nl # whether or not the status is set to 5xx
def UNK on_nl status on_op on_int on_nl end on_nl on_ignored_nl def UNK on_nl status on_op on_int on_nl end on_nl on_ignored_nl # whether or not the status is set to 404
def UNK on_nl status on_op on_int on_nl end on_nl on_ignored_nl def UNK on_lparen value on_rparen on_ignored_nl if value on_period is_a? # whether or not the status is set to 400
def UNK on_lparen value on_rparen on_ignored_nl if value on_period is_a? on_const on_nl on_const on_period UNK value on_nl elsif value on_period # Generates a Time object from the given value. # Used by #expires and #last_modified.
def UNK on_lparen UNK on_comma new_resource on_op request on_period UNK on_rparen on_ignored_nl return on_op new_resource if UNK on_op on_tstring_beg on_tstring_content # Helper method checking if a ETag value list includes the current ETag.
UNK on_const on_nl UNK on_const on_nl UNK on_symbeg content_type on_nl end on_nl on_ignored_nl def initialize on_nl super on_nl on_ivar on_op # Template rendering methods. Each method takes the name of a template # to render as a Symbol and returns a String with the rendered output, # as well as an optional hash with additional options. # # `template` is either the name or path of the template as symbol # (Use `:'subdir/myview'` for views in subdirectories), or a string # that will be rendered. # # Possible options are: # :content_type The content type to use, same arguments as content_type. # :layout If set to something falsy, no layout is rendered, otherwise # the specified layout is used (Ignored for `sass` and `less`) # :layout_engine Engine to use for rendering the layout. # :locals A hash with local variables that should be available # in the template # :scope If set, template is evaluate with the binding of the given # object rather than the application instance. # :views Views directory to use.
def UNK on_lparen views on_comma name on_comma engine on_rparen on_ignored_nl yield on_op on_const on_period join on_lparen views on_comma on_tstring_beg on_embexpr_beg # Calls the given block for every possible template file in views, # named name.ext, where ext is registered on engine.
def UNK on_lparen engine on_comma template on_comma options on_op on_lbrace on_rbrace on_comma locals on_op on_lbrace on_rbrace on_comma on_op block on_rparen # logic shared between builder and nokogiri
UNK on_op settings on_period respond_to? on_lparen engine on_rparen on_op settings on_period UNK on_lparen engine on_rparen on_op on_lbrace on_rbrace on_nl options # merge app-level options
locals on_op options on_period delete on_lparen on_symbeg locals on_rparen on_op locals on_op on_lbrace on_rbrace on_nl views on_op options on_period delete # extract generic options
options on_lbracket on_symbeg UNK on_rbracket on_op on_tstring_beg on_tstring_content on_tstring_end unless UNK on_nl options on_lbracket on_symbeg default_encoding on_rbracket on_op settings on_period # set some defaults
begin on_ignored_nl UNK on_op on_ivar on_nl on_ivar on_op false on_nl template on_op UNK on_lparen engine on_comma data on_comma options on_comma # compile and render template
if layout on_nl options on_op options on_period merge on_lparen on_symbeg views on_op views on_comma on_symbeg layout on_op false on_comma on_symbeg # render layout
if UNK on_op on_const on_period UNK on_lparen file on_rparen on_nl path on_op file on_nl UNK on_nl end on_nl end on_nl # keep the initial path rather than the last one
class on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op on_const on_op on_const # Base class for all Sinatra applications and middleware.
yield self if block_given? on_nl end on_nl on_ignored_nl def call on_lparen env on_rparen on_ignored_nl dup on_period UNK on_lparen env on_rparen # whether a before! filter pinned the content-type
def call on_lparen env on_rparen on_ignored_nl dup on_period UNK on_lparen env on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen env # Rack call interface.
on_ivar on_op env on_nl on_ivar on_op on_const on_period new on_nl on_ivar on_op on_const on_period new on_lparen env on_rparen on_nl on_ivar # :nodoc:
def self on_period settings on_nl self on_nl end on_nl on_ignored_nl def settings on_nl self on_period class on_period settings on_nl end # Access settings defined with Base.set.
def settings on_nl self on_period class on_period settings on_nl end on_nl on_ignored_nl def options on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_tstring_beg # Access settings defined with Base.set.
def halt on_lparen on_op response on_rparen on_ignored_nl response on_op response on_period first if response on_period UNK on_op on_int on_nl throw # Exit the current block, halts any further processing # of the request, and returns the specified response.
def UNK on_lparen on_op block on_rparen on_ignored_nl throw on_symbeg UNK on_comma block on_nl end on_nl on_ignored_nl def UNK on_nl UNK # Pass control to the next matching route. # If there are no more matching routes, Sinatra will # return a 404 response.
def UNK on_nl UNK on_tstring_beg on_tstring_content on_tstring_end unless on_ivar on_period respond_to? on_symbeg call on_nl status on_comma headers on_comma body on_op # Forward the request to the downstream app -- middleware only.
def UNK on_lparen type on_comma base on_op settings on_rparen on_ignored_nl UNK type on_comma base on_period superclass if base on_period superclass # Run filters defined on the class and all superclasses. # Accepts an optional block to call after each filter is applied.
def UNK on_lparen base on_op settings on_comma UNK on_op nil on_rparen on_ignored_nl if UNK on_op base on_period UNK on_lbracket on_ivar # Run routes defined on the class and all superclasses.
UNK on_op UNK if UNK on_nl end on_nl end on_nl on_ignored_nl if base on_period superclass on_period respond_to? on_lparen on_symbeg UNK # don't wipe out pass_block in superclass
if base on_period superclass on_period respond_to? on_lparen on_symbeg UNK on_rparen on_nl return UNK on_lparen base on_period superclass on_comma UNK on_rparen # Run routes defined in superclass.
def UNK on_nl throw on_symbeg halt on_comma yield on_nl end on_nl on_ignored_nl def UNK on_lparen pattern on_comma conditions on_comma block # Run a route block and throw :halt with the result.
def UNK on_lparen pattern on_comma conditions on_comma block on_op nil on_comma values on_op on_lbracket on_rbracket on_rparen on_ignored_nl route on_op on_ivar # If the current request matches pattern and conditions, fill params # with keys and call the given block. # Revert params afterwards. # # Returns pass block.
force_encoding on_lparen params on_rparen on_nl on_ivar on_op on_ivar on_period merge on_lparen params on_rparen if params on_period UNK on_nl on_ignored_nl UNK # TODO: better params handling, maybe turn it into "smart" object or detect changes
def UNK on_nl if on_ivar on_nl UNK on_nl else on_ignored_nl raise on_const on_comma on_tstring_beg on_embexpr_beg request on_period request_method on_embexpr_end on_tstring_content # No matching route was found or all routes passed. The default # implementation is to forward the request downstream when running # as middleware (@app is non-nil); when no downstream app is set, raise # a NotFound exception. Subclasses can override this method to perform # custom route miss logic.
def UNK on_lparen options on_op on_lbrace on_rbrace on_rparen on_ignored_nl return if on_lparen UNK on_op settings on_period public_folder on_rparen on_period nil? # Attempt to serve static files from public directory. Throws :halt when # a matching file is found, returns nil otherwise.
def invoke on_nl res on_op UNK on_lparen on_symbeg halt on_rparen on_lbrace yield on_rbrace on_nl on_ignored_nl res on_op on_lbracket res on_rbracket # Run the block with 'throw :halt' support and apply result to the response.
end on_nl on_ignored_nl def UNK on_nl on_ivar on_period merge! on_lparen on_ivar on_period params on_rparen on_period each do on_op key on_comma # avoid double setting the same response tuple twice
def UNK on_nl on_ivar on_period merge! on_lparen on_ivar on_period params on_rparen on_period each do on_op key on_comma val on_op on_ignored_nl # Dispatch a request with error handling.
on_ivar on_period merge! on_lparen on_ivar on_period params on_rparen on_period each do on_op key on_comma val on_op on_ignored_nl UNK unless val # Avoid passing frozen string in force_encoding
def UNK on_lparen boom on_rparen on_ignored_nl if UNK on_op on_ivar on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl on_ivar on_op on_ivar on_period # Error handling during requests.
def error_block! on_lparen key on_comma on_op UNK on_rparen on_ignored_nl base on_op settings on_nl UNK base on_period respond_to? on_lparen on_symbeg UNK # Find an custom error block for the key(s) specified.
on_regexp_beg on_tstring_content on_regexp_end on_comma on_regexp_beg on_tstring_content on_regexp_end on_comma on_regexp_beg on_tstring_content on_regexp_end on_comma on_regexp_beg on_tstring_content on_regexp_end on_comma on_regexp_beg on_tstring_content on_regexp_end on_comma # :nodoc:
on_regexp_beg on_tstring_content on_regexp_end on_comma on_regexp_beg on_tstring_content on_regexp_end on_comma on_regexp_beg on_tstring_content on_regexp_end on_comma on_regexp_beg on_tstring_content on_regexp_end on_comma on_regexp_beg on_tstring_content on_regexp_end on_comma # all sinatra code
on_regexp_beg on_tstring_content on_regexp_end on_comma on_regexp_beg on_tstring_content on_regexp_end on_comma on_regexp_beg on_tstring_content on_regexp_end on_comma on_regexp_beg on_tstring_content on_regexp_end on_comma on_regexp_beg on_tstring_content on_regexp_end on_comma # all tilt code
on_regexp_beg on_tstring_content on_regexp_end on_comma on_regexp_beg on_tstring_content on_regexp_end on_comma on_regexp_beg on_tstring_content on_regexp_end on_comma on_regexp_beg on_tstring_content on_regexp_end on_comma on_regexp_beg on_tstring_content on_regexp_end on_rbracket # generated code
on_regexp_beg on_tstring_content on_regexp_end on_comma on_regexp_beg on_tstring_content on_regexp_end on_comma on_regexp_beg on_tstring_content on_regexp_end on_comma on_regexp_beg on_tstring_content on_regexp_end on_rbracket on_nl on_ignored_nl if UNK # rubygems require hacks
on_regexp_beg on_tstring_content on_regexp_end on_comma on_regexp_beg on_tstring_content on_regexp_end on_comma on_regexp_beg on_tstring_content on_regexp_end on_rbracket on_nl on_ignored_nl if UNK on_lparen on_const on_rparen on_nl # active_support require hacks
on_regexp_beg on_tstring_content on_regexp_end on_comma on_regexp_beg on_tstring_content on_regexp_end on_rbracket on_nl on_ignored_nl if UNK on_lparen on_const on_rparen on_nl UNK on_tstring_beg on_tstring_content on_tstring_end # bundler require hacks
on_regexp_beg on_tstring_content on_regexp_end on_rbracket on_nl on_ignored_nl if UNK on_lparen on_const on_rparen on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_period UNK # internal in ruby >= 1.9.2
on_rbracket on_nl on_ignored_nl if UNK on_lparen on_const on_rparen on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_period UNK on_lparen on_const on_rparen # maglev kernel files
if UNK on_lparen on_const on_rparen on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_period UNK on_lparen on_const on_rparen on_nl end on_nl # contrary to what the comment said previously, rubinius never supported this
def UNK on_nl on_ivar on_op on_lbracket on_rbracket on_nl on_ivar on_op on_lbrace on_rbrace on_nl on_ivar on_op on_lbrace on_symbeg UNK on_op on_lbracket # Removes all routes, filters, middleware and extension hooks from the # current class (not routes/filters/... defined by its superclass).
def extensions on_nl if superclass on_period respond_to? on_lparen on_symbeg extensions on_rparen on_nl on_lparen on_ivar on_op superclass on_period extensions on_rparen on_period # Extension modules registered on this class and all superclasses.
def middleware on_nl if superclass on_period respond_to? on_lparen on_symbeg middleware on_rparen on_nl superclass on_period middleware on_op on_ivar on_nl else on_ignored_nl # Middleware used in this class and all superclasses.
def set on_lparen option on_comma value on_op on_lparen UNK on_op true on_rparen on_comma UNK on_op false on_comma on_op block on_rparen # Sets an option to the given value. If the value is a proc, # the proc will be called every time the option is accessed.
def UNK on_lparen on_op opts on_rparen on_ignored_nl opts on_period each on_lbrace on_op key on_op set on_lparen key on_comma true on_rparen # Same as calling `set :option, true` for each of the given options.
def UNK on_lparen on_op opts on_rparen on_ignored_nl opts on_period each on_lbrace on_op key on_op set on_lparen key on_comma false on_rparen # Same as calling `set :option, false` for each of the given options.
def error on_lparen on_op codes on_comma on_op block on_rparen on_ignored_nl args on_op UNK on_tstring_beg on_tstring_content on_tstring_end on_comma on_regexp_beg on_tstring_content on_regexp_end # Define a custom error handler. Optionally takes either an Exception # class, or an HTTP status code to specify which errors should be # handled.
def UNK on_lparen on_op block on_rparen on_ignored_nl error on_lparen on_int on_comma on_op block on_rparen on_nl end on_nl on_ignored_nl def template # Sugar for `error(404) { ... }`
def template on_lparen name on_comma on_op block on_rparen on_ignored_nl filename on_comma line on_op UNK on_period first on_nl templates on_lbracket name # Define a named template. The block must return the template source.
def layout on_lparen name on_op on_symbeg layout on_comma on_op block on_rparen on_ignored_nl template name on_comma on_op block on_nl end on_nl # Define the layout template. The block must return the template source.
def UNK on_lparen file on_op nil on_rparen on_ignored_nl file on_op on_lparen file on_period nil? on_op file on_op true on_rparen on_op # Load embedded templates from the file; uses the caller's __FILE__ # when no file is specified.
def mime_type on_lparen type on_comma value on_op nil on_rparen on_ignored_nl return type if type on_period nil? on_nl return type on_period # Lookup or register a mime type in Rack's mime registry.
def UNK on_lparen type on_rparen on_ignored_nl type on_op mime_type type on_nl type on_op on_regexp_beg on_tstring_content on_regexp_end on_op on_lbracket type on_comma # provides all mime types matching type, including deprecated types: # mime_types :html # => ['text/html'] # mime_types :js # => ['application/javascript', 'text/javascript']
def UNK on_lparen path on_op on_regexp_beg on_tstring_content on_regexp_end on_comma on_op options on_comma on_op block on_rparen on_ignored_nl UNK on_lparen on_symbeg UNK # Define a before filter; runs before all requests within the same # context as route handlers and may access/modify the request and # response.
def UNK on_lparen path on_op on_regexp_beg on_tstring_content on_regexp_end on_comma on_op options on_comma on_op block on_rparen on_ignored_nl UNK on_lparen on_symbeg UNK # Define an after filter; runs after all requests within the same # context as route handlers and may access/modify the request and # response.
def UNK on_lparen type on_comma path on_op on_regexp_beg on_tstring_content on_regexp_end on_comma on_op options on_comma on_op block on_rparen on_ignored_nl UNK on_lbracket # add a filter
def UNK on_lparen name on_op on_tstring_beg on_embexpr_beg UNK on_period first on_lbracket on_regexp_beg on_tstring_content on_regexp_end on_rbracket on_embexpr_end on_tstring_content on_tstring_end on_comma on_op # Add a route condition. The route is considered non-matching when the # block returns false.
def UNK on_lparen path on_comma opts on_op on_lbrace on_rbrace on_comma on_op block on_rparen on_ignored_nl conditions on_op on_ivar on_period dup on_nl # Defining a `GET` handler also automatically defines # a `HEAD` handler.
def UNK on_lparen on_op extensions on_comma on_op block on_rparen on_ignored_nl UNK on_lparen on_op block on_rparen if block_given? on_nl UNK on_lparen # Makes the methods defined in the block and in the Modules given # in `extensions` available to the handlers and templates
def UNK on_lparen on_op extensions on_comma on_op block on_rparen on_ignored_nl extensions on_op on_const on_period new on_lparen on_op block on_rparen if # Register an extension. Alternatively take a block from which an # extension will be created and registered on the fly.
def UNK on_lparen on_op UNK on_rparen on_ignored_nl yield self if UNK on_period empty? on_op UNK on_period include? on_lparen environment on_period # Set configuration options for Sinatra and/or the app. # Allows scoping of settings for certain environments.
def use on_lparen middleware on_comma on_op args on_comma on_op block on_rparen on_ignored_nl on_ivar on_op nil on_nl on_ivar on_op on_lbracket middleware # Use the specified Rack middleware
def UNK on_nl return unless UNK on_nl running_server on_period respond_to? on_lparen on_symbeg UNK on_rparen on_op running_server on_period UNK on_op running_server # Stop the self-hosted server if running.
running_server on_period respond_to? on_lparen on_symbeg UNK on_rparen on_op running_server on_period UNK on_op running_server on_period UNK on_nl UNK on_period UNK on_tstring_beg # Use Thin's hard #stop! if available, otherwise just #stop.
def UNK on_lparen options on_op on_lbrace on_rbrace on_comma on_op block on_rparen on_ignored_nl return if UNK on_nl set options on_nl UNK # Run the Sinatra app as a self-hosted server using # Thin, Puma, Mongrel, or WEBrick (in that order). If given a block, will call # with the constructed handler once we have taken the stage.
def UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op new on_nl end on_nl on_ignored_nl alias UNK # Check whether the self-hosted server is running or not.
def UNK on_nl on_ivar on_op new on_nl end on_nl on_ignored_nl alias UNK new unless UNK on_symbeg UNK on_nl on_ignored_nl def # The prototype instance used to process requests.
alias UNK new unless UNK on_symbeg UNK on_nl on_ignored_nl def new on_lparen on_op args on_comma on_op bk on_rparen on_ignored_nl UNK # Create a new instance without middleware in front of it.
def new on_lparen on_op args on_comma on_op bk on_rparen on_ignored_nl UNK on_op UNK on_lparen on_op args on_comma on_op bk on_rparen # Create a new instance of the class fronted by its middleware # pipeline. The object is guaranteed to respond to #call but may not be # an instance of the class new was called on.
def UNK on_lparen app on_rparen on_ignored_nl builder on_op on_const on_op on_const on_period new on_nl UNK builder on_nl UNK builder on_nl # Creates a Rack::Builder instance with all the middleware set up and # the given +app+ as end point.
def UNK on_nl UNK on_lparen on_int on_rparen on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_int on_nl end # Like Kernel#caller but excluding certain magic entries and without # line / method information; the resulting array contains filenames only.
def UNK on_nl UNK on_int on_nl end on_nl on_ignored_nl private on_nl on_ignored_nl def UNK on_lparen UNK on_comma server_settings on_comma handler_name # Like caller_files, but containing Arrays rather than strings with the # first element being the file, and the second being the line.
def UNK on_lparen UNK on_comma server_settings on_comma handler_name on_rparen on_ignored_nl UNK on_nl UNK on_period UNK on_lparen self on_comma on_op server_settings # Starts the server by running the Rack Handler.
UNK on_nl UNK on_period UNK on_lparen self on_comma on_op server_settings on_rparen do on_op server on_op on_ignored_nl unless UNK on_nl UNK # Ensure we initialize middleware before startup, to match standard Rack # behavior, by ensuring an instance exists:
UNK on_period UNK on_lparen self on_comma on_op server_settings on_rparen do on_op server on_op on_ignored_nl unless UNK on_nl UNK on_period UNK # Run the instance we created:
def UNK on_lparen name on_comma UNK on_op on_const on_period new on_rparen on_ignored_nl UNK on_period UNK do on_ignored_nl UNK on_lparen name # Dynamically defines a method on settings.
def UNK on_lparen pattern on_rparen on_ignored_nl UNK on_lbrace pattern on_op request on_period host on_rbrace on_nl end on_nl on_ignored_nl def UNK # Condition for matching host name. Parameter might be String or Regexp.
def UNK on_lparen pattern on_rparen on_ignored_nl UNK do on_ignored_nl if request on_period UNK on_period to_s on_op pattern on_nl on_ivar on_lbracket # Condition for matching user agent. Parameter should be Regexp. # Will set params[:agent].
def UNK on_lparen on_op types on_rparen on_ignored_nl types on_period map! on_lbrace on_op t on_op UNK on_lparen t on_rparen on_rbrace on_nl # Condition for matching mimetypes. Accepts file extensions.
UNK on_lparen options on_period delete on_lparen on_symbeg host on_rparen on_rparen if options on_period UNK on_lparen on_symbeg host on_rparen on_nl UNK # Because of self.options.host
UNK on_op options on_period UNK on_lparen on_symbeg UNK on_rparen on_op options on_period delete on_lparen on_symbeg UNK on_rparen on_op on_lbrace on_rbrace # Pass Mustermann opts to compile()
def UNK on_lparen message on_rparen on_ignored_nl super message on_op on_tstring_beg on_tstring_content on_embexpr_beg UNK on_period first on_period join on_lparen on_tstring_beg on_tstring_content # used for deprecation warnings
def UNK on_lparen UNK on_op on_int on_rparen on_ignored_nl UNK on_lparen on_int on_rparen on_period on_ignored_nl map! on_lbrace on_op line on_op line # Like Kernel#caller but excluding certain magic entries
def self on_period force_encoding on_lparen data on_comma encoding on_op default_encoding on_rparen on_ignored_nl return if data on_op settings on_op data on_period # Force data to specified encoding. It defaults to settings.default_encoding # which is UTF-8 by default
begin on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl set on_symbeg UNK on_comma on_const on_period UNK on_lparen on_int on_rparen on_nl rescue on_const # explicitly generating a session secret eagerly to play nice with preforking
set on_symbeg UNK on_comma on_tstring_beg on_tstring_content on_tstring_end on_op on_const on_period UNK on_lparen on_int on_op on_int on_op on_int on_rparen on_nl end # SecureRandom raises a NotImplementedError if no random device is available
set on_symbeg running_server on_comma nil on_nl set on_symbeg handler_name on_comma nil on_nl set on_symbeg UNK on_comma true on_nl set on_symbeg # start server via at-exit hook?
class on_const on_op on_const on_nl set on_symbeg UNK on_comma on_const on_period new on_lbrace on_op test? on_rbrace on_nl set on_symbeg UNK # Execution context for classic style (top-level) applications. All # DSL methods executed on main are delegated to this class. # # The Application class should not be subclassed, unless you want to # inherit all settings, routes, handlers, and error pages from the # top-level. Subclassing Sinatra::Base is highly recommended for # modular applications.
UNK on_op extensions on_period UNK on_lparen on_op on_symbeg UNK on_rparen on_nl on_const on_period UNK on_lparen on_op UNK on_rparen on_nl super #:nodoc:
UNK on_const def self on_period UNK on_lparen on_op UNK on_rparen on_ignored_nl UNK on_period each do on_op method_name on_op on_ignored_nl UNK # Sinatra delegation mixin. Mixing this module into an object causes all # methods to be delegated to the Sinatra::Application class. Used primarily # at the top-level.
def self on_period UNK on_lparen on_op UNK on_rparen on_ignored_nl UNK on_period each do on_op method_name on_op on_ignored_nl UNK on_lparen method_name #:nodoc:
def self on_period new on_lparen base on_op on_const on_comma on_op block on_rparen on_ignored_nl base on_op on_const on_period new on_lparen base # Create a new Sinatra application; the block is evaluated in the class scope.
def self on_period UNK on_lparen on_op extensions on_comma on_op block on_rparen on_ignored_nl on_const on_period target on_period UNK on_lparen on_op extensions # Extend the top-level DSL with the modules provided.
def self on_period UNK on_lparen on_op extensions on_comma on_op block on_rparen on_ignored_nl on_const on_period target on_period UNK on_lparen on_op extensions # Include the helper modules provided in Sinatra's request context.
def self on_period use on_lparen on_op args on_comma on_op block on_rparen on_ignored_nl on_const on_period target on_period use on_lparen on_op args # Use the middleware for classic applications.
