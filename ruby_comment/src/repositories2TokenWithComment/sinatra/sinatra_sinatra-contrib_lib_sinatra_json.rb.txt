UNK on_const on_nl UNK on_op UNK on_nl UNK UNK on_lparen object on_rparen on_ignored_nl on_op on_const on_period UNK on_lparen object on_rparen # = Sinatra::JSON # # <tt>Sinatra::JSON</tt> adds a helper method, called +json+, for (obviously) # json generation. # # == Usage # # === Classic Application # # In a classic application simply require the helper, and start using it: # # require "sinatra" # require "sinatra/json" # # # define a route that uses the helper # get '/' do # json :foo => 'bar' # end # # # The rest of your classic application code goes here... # # === Modular Application # # In a modular application you need to require the helper, and then tell the # application you will use it: # # require "sinatra/base" # require "sinatra/json" # # class MyApp < Sinatra::Base # # # define a route that uses the helper # get '/' do # json :foo => 'bar' # end # # # The rest of your modular application code goes here... # end # # === Encoders # # By default it will try to call +to_json+ on the object, but if it doesn't # respond to that message, it will use its own rather simple encoder. You can # easily change that anyways. To use +JSON+, simply require it: # # require 'json' # # The same goes for <tt>Yajl::Encoder</tt>: # # require 'yajl' # # For other encoders, besides requiring them, you need to define the # <tt>:json_encoder</tt> setting. For instance, for the +Whatever+ encoder: # # require 'whatever' # set :json_encoder, Whatever # # To force +json+ to simply call +to_json+ on the object: # # set :json_encoder, :to_json # # Actually, it can call any method: # # set :json_encoder, :my_fancy_json_method # # === Content-Type # # It will automatically set the content type to "application/json". As # usual, you can easily change that, with the <tt>:json_content_type</tt> # setting: # # set :json_content_type, :js # # === Overriding the Encoder and the Content-Type # # The +json+ helper will also take two options <tt>:encoder</tt> and # <tt>:content_type</tt>. The values of this options are the same as the # <tt>:json_encoder</tt> and <tt>:json_content_type</tt> settings, # respectively. You can also pass those to the json method: # # get '/' do # json({:foo => 'bar'}, :encoder => :to_json, :content_type => :js) # end #
end end on_ignored_nl on_const on_period UNK on_symbeg UNK UNK on_ignored_nl on_op on_const on_nl end on_nl on_ignored_nl on_const on_period UNK on_symbeg #if
end on_ignored_nl on_const on_period UNK on_symbeg UNK UNK on_ignored_nl on_op on_const on_nl end on_nl on_ignored_nl on_const on_period UNK on_symbeg UNK #resolve_encoder_action
on_ignored_nl on_const on_period UNK on_symbeg UNK UNK on_ignored_nl on_op on_const on_nl end on_nl on_ignored_nl on_const on_period UNK on_symbeg UNK on_comma #JSON
on_const on_period UNK on_const on_nl end on_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP # Load the JSON helpers in modular style automatically
