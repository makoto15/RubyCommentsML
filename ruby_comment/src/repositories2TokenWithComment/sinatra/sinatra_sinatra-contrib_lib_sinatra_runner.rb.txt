UNK on_const on_nl def UNK on_nl on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma UNK on_rparen on_nl end on_nl on_ignored_nl # NOTE: This feature is experimental, and missing tests! # # Helps you spinning up and shutting down your own sinatra app. This is especially helpful for running # real network tests against a sinatra backend. # # The backend server could look like the following (in test/server.rb). # # require "sinatra" # # get "/" do # "Cheers from test server" # end # # get "/ping" do # "1" # end # # Note that you need to implement a ping action for internal use. # # Next, you need to write your runner. # # require 'sinatra/runner' # # class Runner < Sinatra::Runner # def app_file # File.expand_path("../server.rb", __FILE__) # end # end # # Override Runner#app_file, #command, #port, #protocol and #ping_path for customization. # # **Don't forget to override #app_file specific to your application!** # # Wherever you need this test backend, here's how you manage it. The following example assumes you # have a test in your app that needs to be run against your test backend. # # runner = ServerRunner.new # runner.run # # # ..tests against localhost:4567 here.. # # runner.kill # # For an example, check https://github.com/apotonick/roar/blob/master/test/integration/runner.rb
on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_content on_embexpr_beg port on_embexpr_end on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_op # to be overwritten
on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def port UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_tstring_beg on_tstring_content on_tstring_end # to be overwritten
UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_lparen url on_rparen # to be overwritten
