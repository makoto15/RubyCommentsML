UNK on_const on_nl UNK on_const on_op on_const on_op on_const on_op on_const on_nl def UNK on_nl on_ivar on_op on_lbrace on_rbrace on_nl # Helper methods to ease testing your Sinatra application. Partly extracted # from Sinatra. Testing framework agnostic.
UNK on_const on_op on_const on_op on_const on_op on_const on_nl def UNK on_nl on_ivar on_op on_lbrace on_rbrace on_nl end on_nl on_ignored_nl # Test variant of session, which exposes a `global_env`.
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_nl # @!group Instance Methods delegated to last_response
on_ignored_nl on_ignored_nl on_ignored_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl # @!method body # # Body of last_response # # @see http://www.rubydoc.info/github/rack/rack/master/Rack/Response#body-instance_method # @return [String] body of the last response
on_ignored_nl on_ignored_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl on_ignored_nl # @!method headers # # Headers of last_response # # @return [Hash] hash of the last response
on_ignored_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl on_ignored_nl on_ignored_nl # @!method status # # HTTP status of last_response # # @return [Integer] HTTP status of the last response
UNK on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl # @!method errors # # Errors of last_response # # @return [Array] errors of the last response
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg # @!endgroup
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK # @!group Class Methods delegated to app
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma # @!method configure(*envs) {|_self| ... } # @!scope class # @yieldparam _self [Sinatra::Base] the object that the method was called on # # Set configuration options for Sinatra and/or the app. Allows scoping of # settings for certain environments.
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg # @!method set(option, value = (not_set = true), ignore_setter = false, &block) # @!scope class # Sets an option to the given value. If the value is a proc, the proc will # be called every time the option is accessed. # @raise [ArgumentError]
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK # @!method enable(*opts) # @!scope class # # Same as calling `set :option, true` for each of the given options.
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma # @!method disable(*opts) # @!scope class # # Same as calling `set :option, false` for each of the given options.
on_ignored_nl on_ignored_nl on_ignored_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg # @!method use(middleware, *args, &block) # @!scope class # Use the specified Rack middleware
on_ignored_nl on_ignored_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK # @!method helpers(*extensions, &block) # @!scope class # # Makes the methods defined in the block and in the Modules given in # `extensions` available to the handlers and templates.
on_ignored_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma # @!method register(*extensions, &block) # @!scope class # Register an extension. Alternatively take a block from which an # extension will be created and registered on the fly.
on_ignored_nl on_ignored_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl on_ignored_nl def # @!endgroup
on_ignored_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl on_ignored_nl def UNK # @!group Instance Methods delegated to current_session
UNK on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl on_ignored_nl def UNK on_lparen # @!method env_for(uri = "", opts = {}) # # Return the Rack environment used for a request to `uri`. # # @return [Hash]
on_ignored_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl on_ignored_nl def UNK on_lparen UNK on_op on_const on_op on_const on_comma on_op # @!endgroup
UNK on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl on_ignored_nl def UNK on_lparen UNK on_op on_const on_op on_const on_comma on_op block # @!group Instance Methods delegated to rack_mock_session # @!method cookie_jar # # Returns a {http://www.rubydoc.info/github/rack-test/rack-test/Rack/Test/CookieJar Rack::Test::CookieJar}. # # @return [Rack::Test::CookieJar]
on_ignored_nl def UNK on_lparen UNK on_op on_const on_op on_const on_comma on_op block on_rparen on_ignored_nl UNK on_op UNK on_nl on_ivar on_op # @!endgroup
def UNK on_lparen UNK on_op on_const on_op on_const on_comma on_op block on_rparen on_ignored_nl UNK on_op UNK on_nl on_ivar on_op on_const # Instantiate and configure a mock Sinatra app. # # Takes a `base` app class, or defaults to Sinatra::Base, and instantiates # an app instance. Any given code in `block` is `class_eval`'d on this new # instance before the instance is returned. # # @param base [Sinatra::Base] App base class # # @return [Sinatra] Configured mocked app
def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl UNK UNK UNK on_nl on_ignored_nl def UNK # Replaces the configured app. # # @param base [Sinatra::Base] a configured app
def UNK on_nl on_ivar on_op on_const on_period UNK on_const on_op on_const on_nl on_const on_op on_const on_period UNK on_ivar on_nl end # Returns a Rack::Lint-wrapped Sinatra app. # # If no app has been configured, a new subclass of Sinatra::Base will be # used and stored. # # (Rack::Lint validates your application and the requests and # responses according to the Rack spec.) # # @return [Sinatra::Base]
def UNK on_lparen uri on_comma params on_op on_lbrace on_rbrace on_comma env on_op on_lbrace on_rbrace on_comma on_op block on_rparen on_ignored_nl env # Processes an OPTIONS request in the context of the current session. # # @param uri [String] # @param params [Hash] # @param env [Hash]
def UNK on_lparen uri on_comma params on_op on_lbrace on_rbrace on_comma env on_op on_lbrace on_rbrace on_comma on_op block on_rparen on_ignored_nl env # Processes a PATCH request in the context of the current session. # # @param uri [String] # @param params [Hash] # @param env [Hash]
def UNK on_nl UNK on_nl UNK on_nl UNK on_const on_op on_const on_op on_const on_nl UNK on_nl end on_nl on_ignored_nl def # @return [Boolean]
def UNK on_nl UNK on_lbrace on_rbrace UNK UNK on_nl UNK on_const on_op on_const on_op on_const on_comma on_tstring_beg on_tstring_content on_tstring_end UNK # @raise [Rack::Test:Error] If sessions are not enabled for app # @return [Hash] Session of last request, or the empty Hash
def UNK on_nl UNK on_period env on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_const on_period UNK UNK on_lparen # @return The env of the last request
on_const on_period UNK UNK on_lparen UNK on_rparen on_nl end on_nl end on_nl end on_nl EMP EMP EMP EMP EMP EMP # :nodoc:
