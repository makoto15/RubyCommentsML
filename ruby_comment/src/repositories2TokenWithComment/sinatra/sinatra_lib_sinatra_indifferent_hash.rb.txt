UNK on_period UNK UNK if on_op on_const on_period method_defined? on_lparen on_symbeg UNK on_rparen on_op on_op UNK on_period UNK on_lparen UNK # frozen_string_literal: true
class on_const on_op on_const on_nl def self on_period on_op on_lparen on_op args on_rparen on_ignored_nl UNK on_period UNK on_lparen on_const on_lbracket # A poor man's ActiveSupport::HashWithIndifferentAccess, with all the Rails-y # stuff removed. # # Implements a hash where keys <tt>:foo</tt> and <tt>"foo"</tt> are # considered to be the same. # # rgb = Sinatra::IndifferentHash.new # # rgb[:black] = '#000000' # symbol assignment # rgb[:black] # => '#000000' # symbol retrieval # rgb['black'] # => '#000000' # string retrieval # # rgb['white'] = '#FFFFFF' # string assignment # rgb[:white] # => '#FFFFFF' # symbol retrieval # rgb['white'] # => '#FFFFFF' # string retrieval # # Internally, symbols are mapped to strings when used as keys in the entire # writing interface (calling e.g. <tt>[]=</tt>, <tt>merge</tt>). This mapping # belongs to the public interface. For example, given: # # hash = Sinatra::IndifferentHash.new(:a=>1) # # You are guaranteed that the key is returned as a string: # # hash.keys # => ["a"] # # Technically other types of keys are accepted: # # hash = Sinatra::IndifferentHash.new(:a=>1) # hash[0] = 0 # hash # => { "a"=>1, 0=>0 } # # But this class is intended for use cases where strings or symbols are the # expected keys and it is convenient to understand both as the same. For # example the +params+ hash in Sinatra.
on_ignored_nl def UNK on_lparen on_op keys on_rparen on_ignored_nl keys on_period map! on_lparen on_op method on_lparen on_symbeg convert_key on_rparen on_rparen on_nl # Added in Ruby 2.3
on_ignored_nl def UNK on_lparen on_op keys on_rparen on_ignored_nl keys on_period map! on_lparen on_op method on_lparen on_symbeg convert_key on_rparen on_rparen on_nl # Added in Ruby 2.3
on_ignored_nl def UNK on_lparen on_op keys on_rparen on_ignored_nl keys on_period map! on_lparen on_op method on_lparen on_symbeg convert_key on_rparen on_rparen on_nl # Added in Ruby 2.5
def UNK on_lparen on_op block on_rparen on_ignored_nl UNK on_period UNK on_lparen on_op block on_rparen on_nl end on_nl on_ignored_nl def UNK # Added in Ruby 2.4
def UNK on_lparen on_op block on_rparen on_ignored_nl UNK on_period UNK on_lparen on_op block on_rparen on_nl end on_nl on_ignored_nl def UNK # Added in Ruby 2.5
