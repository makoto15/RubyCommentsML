UNK on_const on_nl def UNK on_period UNK on_lparen on_op block on_rparen on_ignored_nl UNK on_op on_const on_period UNK on_period UNK on_lparen # = Sinatra::Extension # # <tt>Sinatra::Extension</tt> is a mixin that provides some syntactic sugar # for your extensions. It allows you to call almost any # <tt>Sinatra::Base</tt> method directly inside your extension # module. This means you can use +get+ to define a route, +before+ # to define a before filter, +set+ to define a setting and so on. # # Is important to be aware that this mixin remembers the method calls you # make, and then, when your extension is registered, replays them on the # Sinatra application that has been extended. In order to do that, it # defines a <tt>registered</tt> method, so, if your extension defines one # too, remember to call +super+. # # == Usage # # Just require the mixin and extend your extension with it: # # require 'sinatra/extension' # # module MyExtension # extend Sinatra::Extension # # # set some settings for development # configure :development do # set :reload_stuff, true # end # # # define a route # get '/' do # 'Hello World' # end # # # The rest of your extension code goes here... # end # # You can also create an extension with the +new+ method: # # MyExtension = Sinatra::Extension.new do # # Your extension code goes here... # end # # This is useful when you just want to pass a block to # <tt>Sinatra::Base.register</tt>.
