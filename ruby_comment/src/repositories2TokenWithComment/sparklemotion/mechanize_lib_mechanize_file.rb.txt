on_ignored_nl UNK on_const on_op on_const on_nl on_ignored_nl UNK on_const on_op on_const on_nl on_ignored_nl on_ignored_nl UNK UNK UNK on_nl on_ignored_nl on_ignored_nl ## # This is the base class for the Pluggable Parsers. If Mechanize cannot find # an appropriate class to use for the content type, this class will be used. # For example, if you download an image/jpeg, Mechanize will not know how to # parse it, so this class will be instantiated. # # This is a good class to use as the base class for building your own # pluggable parsers. # # == Example # # require 'mechanize' # # agent = Mechanize.new # agent.get('http://example.com/foo.jpg').class #=> Mechanize::File
on_ignored_nl UNK UNK UNK on_nl on_ignored_nl on_ignored_nl UNK UNK filename on_nl on_ignored_nl UNK UNK UNK on_nl on_ignored_nl on_ignored_nl UNK UNK ## # The HTTP response body, the raw file contents
on_ignored_nl UNK UNK filename on_nl on_ignored_nl UNK UNK UNK on_nl on_ignored_nl on_ignored_nl UNK UNK UNK on_op nil UNK UNK on_op ## # The filename for this file based on the content-disposition of the # response or the basename of the URL
on_ignored_nl UNK UNK UNK on_op nil UNK UNK on_op nil UNK UNK on_op nil UNK UNK on_op nil on_nl on_ivar ## # Creates a new file retrieved from the given +uri+ and +response+ object. # The +body+ is the HTTP response body and +code+ is the HTTP status.
on_ignored_nl UNK UNK filename on_op nil on_nl filename on_op UNK filename on_nl UNK filename on_nl UNK on_nl on_ignored_nl UNK UNK ## # Use this method to save the content of this object to +filename+. # returns the filename # # file.save 'index.html' # file.save 'index.html' # saves to index.html.1 # # uri = URI 'http://localhost/test.html' # file = Mechanize::File.new uri, nil, '' # filename = file.save # saves to test.html # puts filename # test.html
on_ignored_nl UNK UNK filename on_op nil on_nl filename on_op on_ivar on_nl UNK on_op on_const UNK UNK filename on_nl on_const UNK ## # Use this method to save the content of this object to +filename+. # This method will overwrite any existing filename that exists with the # same name. # returns the filename # # file.save 'index.html' # file.save! 'index.html' # overwrite original file # filename = file.save! 'index.html' # overwrite original file with filename 'index.html'
