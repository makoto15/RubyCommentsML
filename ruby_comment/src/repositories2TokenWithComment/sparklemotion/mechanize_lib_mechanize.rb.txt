on_ignored_nl UNK on_const on_nl on_ignored_nl on_ignored_nl UNK on_const on_op on_const on_nl end on_nl on_ignored_nl UNK on_op if on_const on_op on_int ## # The Mechanize library is used for automating interactions with a website. It # can follow links and submit forms. Form fields can be populated and # submitted. A history of URLs is maintained and can be queried. # # == Example # # require 'mechanize' # require 'logger' # # agent = Mechanize.new # agent.log = Logger.new "mech.log" # agent.user_agent_alias = 'Mac Safari' # # page = agent.get "http://www.google.com/" # search_form = page.form_with :name => "f" # search_form.field_with(:name => "q").value = "Hello" # # search_results = agent.submit search_form # puts search_results.body # # == Issues with mechanize # # If you think you have a bug with mechanize, but aren't sure, please file a # ticket at https://github.com/sparklemotion/mechanize/issues # # Here are some common problems you may experience with mechanize # # === Problems connecting to SSL sites # # Mechanize defaults to validating SSL certificates using the default CA # certificates for your platform. At this time, Windows users do not have # integration between the OS default CA certificates and OpenSSL. #cert_store # explains how to download and use Mozilla's CA certificates to allow SSL # sites to work. # # === Problems with content-length # # Some sites return an incorrect content-length value. Unlike a browser, # mechanize raises an error when the content-length header does not match the # response length since it does not know if there was a connection problem or # if the mismatch is a server bug. # # The error raised, Mechanize::ResponseReadError, can be converted to a parsed # Page, File, etc. depending upon the content-type: # # agent = Mechanize.new # uri = URI 'http://example/invalid_content_length' # # begin # page = agent.get uri # rescue Mechanize::ResponseReadError => e # page = e.force_parse # end
on_ignored_nl UNK on_const on_op on_const on_nl end on_nl on_ignored_nl UNK on_op if on_const on_op on_int then on_ignored_nl on_tstring_beg on_embexpr_beg on_const ## # Base mechanize error class
on_ignored_nl on_const on_op on_lbrace on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op on_tstring_beg on_tstring_content on_embexpr_beg on_const on_embexpr_end on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_content on_tstring_end ## # Supported User-Agent aliases for use with user_agent_alias=. The # description in parenthesis is for informative purposes and is not part of # the alias name. # # * Linux Firefox (43.0 on Ubuntu Linux) # * Linux Konqueror (3) # * Linux Mozilla # * Mac Firefox (43.0) # * Mac Mozilla # * Mac Safari (9.0 on OS X 10.11.2) # * Mac Safari 4 # * Mechanize (default) # * Windows IE 6 # * Windows IE 7 # * Windows IE 8 # * Windows IE 9 # * Windows IE 10 (Windows 8 64bit) # * Windows IE 11 (Windows 8.1 64bit) # * Windows Edge # * Windows Mozilla # * Windows Firefox (43.0) # * iPhone (iOS 9.1) # * iPad (iOS 9.1) # * Android (5.1.1) # # Example: # # agent = Mechanize.new # agent.user_agent_alias = 'Mac Safari'
UNK on_period UNK on_op UNK on_nl UNK on_period log on_op log on_nl UNK on_nl end on_nl on_ignored_nl on_ignored_nl def self # :nodoc:
on_ignored_nl def self on_period UNK on_nl UNK on_op new on_nl UNK on_lparen UNK on_rparen on_nl UNK on_ignored_nl UNK on_period UNK ## # Creates a new Mechanize instance and yields it to the given block. # # After the block executes, the instance is cleaned up. This includes # closing all open connections. # # Mechanize.start do |m| # m.get("http://example.com") # end
on_ignored_nl def UNK on_lparen UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_rparen on_ignored_nl on_ivar on_op on_const on_op on_const on_op on_const on_period new ## # Creates a new mechanize instance. If a block is given, the created # instance is yielded to the block for setting up pre-connection state such # as SSL parameters or proxies: # # agent = Mechanize.new do |a| # a.proxy_host = 'proxy.example' # a.proxy_port = 8080 # end # # If you need segregated SSL connections give each agent a unique # name. Otherwise the connections will be shared. This is # particularly important if you are using certifcates. # # agent_1 = Mechanize.new 'conn1' # agent_2 = Mechanize.new 'conn2' #
on_ivar on_period user_agent on_op on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl on_ivar on_op nil on_nl on_ivar on_op nil on_nl on_ignored_nl # attr_accessors
on_ivar on_op on_const on_period new on_nl on_ignored_nl on_ivar on_op on_int on_nl on_ignored_nl on_ivar on_op nil on_nl on_ivar on_op nil on_nl # attr_readers
on_ivar on_op nil on_nl on_ivar on_op nil on_nl on_ivar on_op nil on_nl on_ivar on_op nil on_nl on_ignored_nl on_ivar on_op self # Proxy
on_ivar on_period UNK on_op on_int on_nl on_ignored_nl UNK self if UNK on_nl on_ignored_nl on_ivar on_period UNK on_ivar on_comma on_ivar on_comma # defaults
on_ignored_nl on_ignored_nl def UNK on_nl on_ivar on_period history on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def current_page on_nl on_ivar on_period # :section: History # # Methods for navigating and controlling history
on_ignored_nl def UNK on_nl on_ivar on_period history on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def current_page on_nl on_ivar on_period current_page ## # Equivalent to the browser back button. Returns the previous page visited.
on_ignored_nl def current_page on_nl on_ivar on_period current_page on_nl end on_nl on_ignored_nl UNK page current_page on_nl on_ignored_nl on_ignored_nl def history on_nl ## # Returns the latest page loaded by Mechanize
on_ignored_nl def history on_nl on_ivar on_period history on_nl end on_nl on_ignored_nl on_ignored_nl def UNK on_nl on_ivar on_period history on_period UNK ## # The history of this mechanize run
on_ignored_nl def UNK on_nl on_ivar on_period history on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK UNK on_nl on_ivar on_period ## # Maximum number of items allowed in the history. The default setting is 50 # pages. Note that the size of the history multiplied by the maximum # response body size
on_ignored_nl def UNK UNK on_nl on_ivar on_period history on_period UNK on_op UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK url ## # Sets the maximum number of items allowed in the history to +length+. # # Setting the maximum history length to nil will make the history size # unlimited. Take care when doing this, mechanize stores response bodies in # memory for pages and in the temporary files directory for other responses. # For a long-running mechanize program this can be quite large. # # See also the discussion under #max_file_buffer=
on_ignored_nl def UNK url on_nl url on_op url on_period href if url on_period respond_to? on_symbeg href on_nl on_ignored_nl on_ivar on_period ## # Returns a visited page for the +url+ passed in, otherwise nil
on_ignored_nl UNK UNK UNK on_nl on_ignored_nl on_ignored_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl attr_accessor ## # Returns whether or not a url has been visited
on_ignored_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl on_ignored_nl def # :section: Hooks # # Hooks into the operation of mechanize
on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl on_ignored_nl def UNK ## # A list of hooks to call before reading response header 'content-encoding'. # # The hook is called with the agent making the request, the URI of the # request, the response an IO containing the response body.
on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK ## # Callback which is invoked with the page that was added to history.
on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end ## # A list of hooks to call after retrieving a response. Hooks are called with # the agent, the URI, the response, and the response body.
on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl on_ignored_nl def UNK link on_nl UNK link on_nl ## # A list of hooks to call before retrieving a response. Hooks are called # with the agent, the URI, the response, and the response body.
on_ignored_nl on_ignored_nl def UNK link on_nl UNK link on_nl when on_const on_op on_const then on_ignored_nl referer on_op link on_period page # :section: Requests # # Methods for making HTTP requests
on_ignored_nl def UNK link on_nl UNK link on_nl when on_const on_op on_const then on_ignored_nl referer on_op link on_period page on_op ## # If the parameter is a string, finds the button or link with the # value of the string on the current page and clicks it. Otherwise, clicks # the Mechanize::Page::Link object passed in. Returns the page fetched.
form on_op page on_period UNK on_period UNK UNK on_op UNK on_op on_ignored_nl button on_op UNK on_period UNK on_lparen on_symbeg UNK # Note that this will not work if we have since navigated to a different page. # Should rather make each button aware of its parent form.
form on_op page on_period UNK on_period UNK UNK on_op UNK on_op on_ignored_nl UNK on_period UNK on_period UNK on_lparen link on_rparen # Note that this will not work if we have since navigated to a different page. # Should rather make each button aware of its parent form.
on_ignored_nl def UNK uri on_comma UNK on_comma UNK on_op on_lbracket on_rbracket on_comma referer on_op nil on_comma headers on_op on_lbrace on_rbrace ## # GETs +uri+ and writes it to +io_or_filename+ without recording the request # in the history. If +io_or_filename+ does not respond to #write it will be # used as a file name. +parameters+, +referer+ and +headers+ are used as in # #get. # # By default, if the Content-type of the response matches a Mechanize::File # or Mechanize::Page parser, the response body will be loaded into memory # before being saved. See #pluggable_parser for details on changing this # default. # # For alternate ways of downloading files see Mechanize::FileSaver and # Mechanize::DirectorySaver.
on_ignored_nl def UNK on_lparen uri on_comma UNK on_op on_lbrace on_rbrace on_comma headers on_op on_lbrace on_rbrace on_rparen on_ignored_nl page on_op on_ivar ## # DELETE +uri+ with +query_params+, and setting +headers+: # # +query_params+ is formatted into a query string using # Mechanize::Util.build_query_string, which see. # # delete('http://example/', {'q' => 'foo'}, {})
on_ignored_nl def get on_lparen uri on_comma UNK on_op on_lbracket on_rbracket on_comma referer on_op nil on_comma headers on_op on_lbrace on_rbrace on_rparen ## # GET the +uri+ with the given request +parameters+, +referer+ and # +headers+. # # The +referer+ may be a URI or a page. # # +parameters+ is formatted into a query string using # Mechanize::Util.build_query_string, which see.
UNK on_const on_op on_const on_op referer then on_ignored_nl referer on_op if referer on_period UNK on_lparen on_const on_rparen then on_ignored_nl on_const # FIXME: Huge hack so that using a URI as a referer works. I need to # refactor everything to pass around URIs but still support # Mechanize::Page#base
headers on_op on_lbrace on_rbrace on_nl page on_op on_ivar on_period UNK uri on_comma UNK on_comma headers on_comma UNK on_comma referer on_nl # fetch the page
on_ignored_nl def UNK on_lparen url on_rparen on_ignored_nl get on_lparen url on_rparen on_period body on_nl end on_nl on_ignored_nl on_ignored_nl def UNK ## # GET +url+ and return only its contents
on_ignored_nl def UNK on_lparen uri on_comma UNK on_op on_lbrace on_rbrace on_comma headers on_op on_lbrace on_rbrace on_rparen on_ignored_nl page on_op on_ivar ## # HEAD +uri+ with +query_params+ and +headers+: # # +query_params+ is formatted into a query string using # Mechanize::Util.build_query_string, which see. # # head('http://example/', {'q' => 'foo'}, {})
on_ignored_nl def UNK on_lparen uri on_comma UNK on_op on_lbrace on_rbrace on_comma headers on_op on_lbrace on_rbrace on_rparen on_ignored_nl UNK UNK on_lparen ## # POST to the given +uri+ with the given +query+. # # +query+ is processed using Mechanize::Util.each_parameter (which # see), and then encoded into an entity body. If any IO/FileUpload # object is specified as a field value the "enctype" will be # multipart/form-data, or application/x-www-form-urlencoded # otherwise. # # Examples: # agent.post 'http://example.com/', "foo" => "bar" # # agent.post 'http://example.com/', [%w[foo bar]] # # agent.post('http://example.com/', "<message>hello</message>", # 'Content-Type' => 'application/xml')
UNK on_op UNK on_nl def UNK on_lparen on_op UNK on_rparen UNK on_lbracket on_rbracket UNK end on_nl end on_nl UNK on_lbracket # Create a fake form
on_ignored_nl def UNK on_lparen uri on_comma entity on_comma headers on_op on_lbrace on_rbrace on_rparen on_ignored_nl UNK on_lparen on_symbeg UNK on_comma uri ## # PUT to +uri+ with +entity+, and setting +headers+: # # put('http://example/', 'new content', {'Content-Type' => 'text/plain'})
on_ignored_nl def UNK on_lparen UNK on_comma uri on_comma entity on_comma headers on_op on_lbrace on_rbrace on_rparen on_ignored_nl UNK on_op current_page on_op ## # Makes an HTTP request to +url+ using HTTP method +verb+. +entity+ is used # as the request body, if allowed.
on_ignored_nl def UNK on_lparen form on_comma button on_op nil on_comma headers on_op on_lbrace on_rbrace on_rparen on_ignored_nl form on_period UNK on_lparen ## # Submits +form+ with an optional +button+. # # Without a button: # # page = agent.get('http://example.com') # agent.submit(page.forms.first) # # With a button: # # agent.submit(page.forms.first, page.forms.first.buttons.first)
on_ignored_nl def UNK on_nl UNK on_op on_ivar on_period history on_period UNK on_nl UNK on_ignored_nl UNK self on_nl UNK on_ignored_nl on_ivar ## # Runs given block, then resets the page history as it was before. self is # given as a parameter to the block. Returns the value of the block.
on_ignored_nl on_ivar on_op on_const on_op on_const on_nl on_ivar on_op nil on_nl on_ignored_nl UNK on_op self on_nl on_ignored_nl on_ignored_nl attr_accessor on_symbeg # :section: Settings # # Settings that adjust how mechanize makes HTTP requests including timeouts, # keep-alives, compression, redirects and headers.
on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl on_ignored_nl attr_accessor on_symbeg log on_nl on_ignored_nl end on_nl on_ignored_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl ## # Default HTML parser for all mechanize instances # # Mechanize.html_parser = Nokogiri::XML
on_ignored_nl attr_accessor on_symbeg log on_nl on_ignored_nl end on_nl on_ignored_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl ## # Default logger for all mechanize instances # # Mechanize.log = Logger.new $stderr
on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl on_ignored_nl attr_accessor ## # A default encoding name used when parsing HTML parsing. When set it is # used after any other encoding. The default is nil.
on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl on_ignored_nl attr_reader ## # Overrides the encodings given by the HTTP server and the HTML page with # the default_encoding when set to true.
on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl on_ignored_nl attr_reader ## # The HTML parser to be used when parsing documents
on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl on_ignored_nl attr_reader ## # HTTP/1.0 keep-alive time. This is no longer supported by mechanize as it # now uses net-http-persistent which only supports HTTP/1.1 persistent # connections
on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl on_ignored_nl attr_reader ## # The pluggable parser maps a response Content-Type to a parser class. The # registered Content-Type may be either a full content type like 'image/png' # or a media type 'text'. See Mechanize::PluggableParser for further # details. # # Example: # # agent.pluggable_parser['application/octet-stream'] = Mechanize::Download
on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl on_ignored_nl attr_reader ## # The HTTP proxy address
on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl on_ignored_nl def ## # The HTTP proxy password
on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl on_ignored_nl def UNK user on_comma password on_comma UNK ## # The HTTP proxy port
on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl on_ignored_nl def UNK user on_comma password on_comma UNK on_op nil on_nl UNK on_period UNK ## # The HTTP proxy username
on_ignored_nl def UNK user on_comma password on_comma UNK on_op nil on_nl UNK on_period UNK on_op UNK on_tstring_content UNK on_nl on_ignored_nl ## # *NOTE*: These credentials will be used as a default for any challenge # exposing your password to disclosure to malicious servers. Use of this # method will warn. This method is deprecated and will be removed in # mechanize 3. # # Sets the +user+ and +password+ as the default credentials to be used for # HTTP authentication for any server. The +domain+ is used for NTLM # authentication.
on_ignored_nl def UNK uri on_comma user on_comma password on_comma UNK on_op nil on_comma UNK on_op nil on_nl on_ivar on_period UNK ## # Adds credentials +user+, +pass+ for +uri+. If +realm+ is set the # credentials are used only for that realm. If +realm+ is not set the # credentials become the default for any realm on that URI. # # +domain+ and +realm+ are exclusive as NTLM does not follow RFC 2617. If # +domain+ is given it is only used for NTLM authentication.
on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK enabled on_nl on_ivar on_period UNK on_op ## # Are If-Modified-Since conditional requests enabled?
on_ignored_nl def UNK enabled on_nl on_ivar on_period UNK on_op enabled on_nl end on_nl on_ignored_nl on_ignored_nl def cookie_jar on_nl on_ivar on_period ## # Disables If-Modified-Since conditional requests (enabled by default)
on_ignored_nl def cookie_jar on_nl on_ivar on_period cookie_jar on_nl end on_nl on_ignored_nl on_ignored_nl def UNK cookie_jar on_nl on_ivar on_period cookie_jar on_op ## # A Mechanize::CookieJar which stores cookies
on_ignored_nl def UNK cookie_jar on_nl on_ivar on_period cookie_jar on_op cookie_jar on_nl end on_nl on_ignored_nl on_ignored_nl def UNK on_nl on_ivar on_period ## # Replaces the cookie jar with +cookie_jar+
on_ignored_nl def UNK on_nl on_ivar on_period cookie_jar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK ## # Returns a list of cookies stored in the cookie jar.
on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK follow on_nl on_ivar on_period UNK on_op ## # Follow HTML meta refresh and HTTP Refresh headers. If set to +:anywhere+ # meta refresh tags outside of the head element will be followed.
on_ignored_nl def UNK follow on_nl on_ivar on_period UNK on_op follow on_nl end on_nl on_ignored_nl on_ignored_nl def UNK on_nl on_ivar on_period ## # Controls following of HTML meta refresh and HTTP Refresh headers in # responses.
on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK follow on_nl on_ivar on_period UNK on_op ## # Follow an HTML meta refresh and HTTP Refresh headers that have no "url=" # in the content attribute. # # Defaults to false to prevent infinite refresh loops.
on_ignored_nl def UNK follow on_nl on_ivar on_period UNK on_op follow on_nl end on_nl on_ignored_nl on_ignored_nl def UNK on_nl on_ivar on_period ## # Alters the following of HTML meta refresh and HTTP Refresh headers that # point to the same page.
on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK enabled on_nl on_ivar on_period UNK on_op ## # Is gzip compression of responses enabled?
on_ignored_nl def UNK enabled on_nl on_ivar on_period UNK on_op enabled on_nl end on_nl on_ignored_nl on_ignored_nl def UNK on_nl on_ivar on_period ## # Disables HTTP/1.1 gzip compression (enabled by default)
on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK UNK on_nl on_ivar on_period UNK on_op ## # Connections that have not been used in this many seconds will be reset.
on_ignored_nl def UNK UNK on_nl on_ivar on_period UNK on_op UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK on_nl on_ivar on_period # Sets the idle timeout to +idle_timeout+. The default timeout is 5 # seconds. If you experience "too many connection resets", reducing this # value may help.
on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK UNK on_nl on_ivar on_period UNK on_op ## # When set to true mechanize will ignore an EOF during chunked transfer # encoding so long as at least one byte was received. Be careful when # enabling this as it may cause data loss. # # Net::HTTP does not inform mechanize of where in the chunked stream the EOF # occurred. Usually it is after the last-chunk but before the terminating # CRLF (invalid termination) but it may occur earlier. In the second case # your response body may be incomplete.
on_ignored_nl def UNK UNK on_nl on_ivar on_period UNK on_op UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK on_nl on_ivar on_period ## # When set to true mechanize will ignore an EOF during chunked transfer # encoding. See ignore_bad_chunking for further details
on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK UNK on_nl on_ivar on_period UNK on_op ## # Are HTTP/1.1 keep-alive connections enabled?
on_ignored_nl def UNK UNK on_nl on_ivar on_period UNK on_op UNK on_nl end on_nl on_ignored_nl on_ignored_nl def log on_nl on_ivar on_op ## # Disable HTTP/1.1 keep-alive connections if +enable+ is set to false. If # you are experiencing "too many connection resets" errors setting this to # false will eliminate them. # # You should first investigate reducing idle_timeout.
on_ignored_nl def log on_nl on_ivar on_op on_const on_period log on_nl end on_nl on_ignored_nl on_ignored_nl def UNK UNK on_nl on_ivar on_op ## # The current logger. If no logger has been set Mechanize.log is used.
on_ignored_nl def UNK UNK on_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl ## # Sets the +logger+ used by this instance of mechanize
on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK UNK on_nl on_ivar on_period UNK on_op ## # Responses larger than this will be written to a Tempfile instead of stored # in memory. The default is 100,000 bytes. # # A value of nil disables creation of Tempfiles.
on_ignored_nl def UNK UNK on_nl on_ivar on_period UNK on_op UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK on_nl on_ivar on_period ## # Sets the maximum size of a response body that will be stored in memory to # +bytes+. A value of nil causes all response bodies to be stored in # memory. # # Note that for Mechanize::Download subclasses, the maximum buffer size # multiplied by the number of pages stored in history (controlled by # #max_history) is an approximate upper limit on the amount of memory # Mechanize will use. By default, Mechanize can use up to ~5MB to store # response bodies for non-File and non-Page (HTML) responses. # # See also the discussion under #max_history=
on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK UNK on_nl on_ivar on_period UNK on_op ## # Length of time to wait until a connection is opened in seconds
on_ignored_nl def UNK UNK on_nl on_ivar on_period UNK on_op UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK on_nl on_ivar on_period ## # Sets the connection open timeout to +open_timeout+
on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK UNK on_nl on_ivar on_period UNK on_op ## # Length of time to wait for data from the server
on_ignored_nl def UNK UNK on_nl on_ivar on_period UNK on_op UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK on_nl on_ivar on_period ## # Sets the timeout for each chunk of data read from the server to # +read_timeout+. A single request may read many chunks of data.
on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl UNK UNK UNK on_nl on_ignored_nl on_ignored_nl def UNK follow ## # Controls how mechanize deals with redirects. The following values are # allowed: # # :all, true:: All 3xx redirects are followed (default) # :permanent:: Only 301 Moved Permanantly redirects are followed # false:: No redirects are followed
on_ignored_nl def UNK follow on_nl on_ivar on_period UNK on_op follow on_nl end on_nl on_ignored_nl UNK UNK UNK on_nl on_ignored_nl on_ignored_nl ## # Sets the mechanize redirect handling policy. See redirect_ok for allowed # values
on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK UNK on_nl on_ivar on_period UNK on_op ## # Maximum number of redirections to follow
on_ignored_nl def UNK UNK on_nl on_ivar on_period UNK on_op UNK on_nl end on_nl on_ignored_nl def UNK link on_nl on_ivar on_period ## # Sets the maximum number of redirections to follow to +limit+
def UNK link on_nl on_ivar on_period UNK link on_nl end on_nl on_ignored_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl ## # Resolve the full path of a link / uri
on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK UNK on_nl on_ivar on_period UNK on_op ## # A hash of custom request headers that will be sent on every request
on_ignored_nl def UNK UNK on_nl on_ivar on_period UNK on_op UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK on_nl on_ivar on_period ## # Replaces the custom request headers that will be sent on every request # with +request_headers+
on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK UNK on_nl on_ivar on_period UNK on_op ## # Retry POST and other non-idempotent requests. See RFC 2616 9.1.2.
on_ignored_nl def UNK UNK on_nl on_ivar on_period UNK on_op UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK on_nl on_ivar on_period ## # When setting +retry_change_requests+ to true you are stating that, for all # the URLs you access with mechanize, making POST and other non-idempotent # requests is safe and will not cause data duplication or other harmful # results. # # If you are experiencing "too many connection resets" errors you should # instead investigate reducing the idle_timeout or disabling keep_alive # connections.
on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK enabled on_nl on_ivar on_period UNK on_op ## # Will <code>/robots.txt</code> files be obeyed?
on_ignored_nl def UNK enabled on_nl on_ivar on_period UNK on_op enabled on_nl end on_nl on_ignored_nl on_ignored_nl def UNK on_nl on_ivar on_period ## # When +enabled+ mechanize will retrieve and obey <code>robots.txt</code> # files
on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK UNK on_nl on_ivar on_period UNK on_op ## # The handlers for HTTP and other URI protocols.
on_ignored_nl def UNK UNK on_nl on_ivar on_period UNK on_op UNK on_nl end on_nl on_ignored_nl on_ignored_nl def user_agent on_nl on_ivar on_period ## # Replaces the URI scheme handler table with +scheme_handlers+
on_ignored_nl def user_agent on_nl on_ivar on_period user_agent on_nl end on_nl on_ignored_nl on_ignored_nl def UNK user_agent on_nl on_ivar on_period user_agent on_op ## # The identification string for the client initiating a web request
on_ignored_nl def UNK user_agent on_nl on_ivar on_period user_agent on_op user_agent on_nl end on_nl on_ignored_nl on_ignored_nl def UNK UNK on_nl self ## # Sets the User-Agent used by mechanize to +user_agent+. See also # user_agent_alias
on_ignored_nl def UNK UNK on_nl self on_period user_agent on_op on_const on_lbracket UNK on_rbracket on_op on_ignored_nl UNK on_lparen on_const on_comma on_tstring_beg ## # Set the user agent for the Mechanize object based on the given +name+. # # See also AGENT_ALIASES
on_ignored_nl attr_accessor on_symbeg UNK on_nl on_ignored_nl on_ignored_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def ## # The value of watch_for_set is passed to pluggable parsers for retrieved # content
on_ignored_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK UNK on_nl on_ivar on_period UNK # :section: SSL # # SSL settings for mechanize. These must be set in the block given to # Mechanize.new
on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK UNK on_nl on_ivar on_period UNK on_op ## # Path to an OpenSSL server certificate file
on_ignored_nl def UNK UNK on_nl on_ivar on_period UNK on_op UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK on_nl on_ivar on_period ## # Sets the certificate file used for SSL connections
on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK UNK on_nl on_ivar on_period UNK on_op ## # An OpenSSL client certificate or the path to a certificate file.
on_ignored_nl def UNK UNK on_nl on_ivar on_period UNK on_op UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK on_nl on_ivar on_period ## # Sets the OpenSSL client certificate +cert+ to the given path or # certificate instance
on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK UNK on_nl on_ivar on_period UNK on_op ## # An OpenSSL certificate store for verifying server certificates. This # defaults to the default certificate store for your system. # # If your system does not ship with a default set of certificates you can # retrieve a copy of the set from Mozilla here: # http://curl.haxx.se/docs/caextract.html # # (Note that this set does not have an HTTPS download option so you may # wish to use the firefox-db2pem.sh script to extract the certificates # from a local install to avoid man-in-the-middle attacks.) # # After downloading or generating a cacert.pem from the above link you # can create a certificate store from the pem file like this: # # cert_store = OpenSSL::X509::Store.new # cert_store.add_file 'cacert.pem' # # And have mechanize use it with: # # agent.cert_store = cert_store
on_ignored_nl def UNK UNK on_nl on_ivar on_period UNK on_op UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK on_ivar on_period UNK ## # Sets the OpenSSL certificate store to +store+. # # See also #cert_store
on_ignored_nl def UNK on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def key on_nl on_ivar on_period UNK on_nl end on_nl ## # What is this? # # Why is it different from #cert?
on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def key on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def # :nodoc:
on_ignored_nl def key on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK key on_nl on_ivar on_period UNK on_op ## # An OpenSSL private key or the path to a private key
on_ignored_nl def UNK key on_nl on_ivar on_period UNK on_op key on_nl end on_nl on_ignored_nl on_ignored_nl def UNK on_nl on_ivar on_period ## # Sets the OpenSSL client +key+ to the given path or key instance. If a # path is given, the path must contain an RSA key file.
on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK UNK on_nl on_ivar on_period UNK on_op ## # OpenSSL client key password
on_ignored_nl def UNK UNK on_nl on_ivar on_period UNK on_op UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK on_nl on_ivar on_period ## # Sets the client key password to +pass+
on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK UNK on_nl on_ivar on_period UNK on_op ## # SSL version to use.
on_ignored_nl def UNK UNK on_nl on_ivar on_period UNK on_op UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK on_nl on_ivar on_period ## # Sets the SSL version to use to +version+ without client/server # negotiation.
on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK UNK on_nl on_ivar on_period UNK on_op ## # A callback for additional certificate verification. See # OpenSSL::SSL::SSLContext#verify_callback # # The callback can be used for debugging or to ignore errors by always # returning +true+. Specifying nil uses the default method that was valid # when the SSLContext was created
on_ignored_nl def UNK UNK on_nl on_ivar on_period UNK on_op UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK on_nl on_ivar on_period ## # Sets the OpenSSL certificate verification callback
on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK UNK on_nl on_ivar on_period UNK on_op ## # the OpenSSL server certificate verification method. The default is # OpenSSL::SSL::VERIFY_PEER and certificate verification uses the default # system certificates. See also cert_store
on_ignored_nl def UNK UNK on_nl on_ivar on_period UNK on_op UNK on_nl end on_nl on_ignored_nl on_ignored_nl attr_reader on_symbeg UNK on_ignored_nl on_ignored_nl ## # Sets the OpenSSL server certificate verification method.
on_ignored_nl attr_reader on_symbeg UNK on_ignored_nl on_ignored_nl def UNK uri on_comma UNK on_comma body on_nl UNK on_op nil on_nl on_ignored_nl UNK # :section: Utilities
on_ignored_nl on_ignored_nl def UNK uri on_comma UNK on_comma body on_nl UNK on_op nil on_nl on_ignored_nl UNK UNK on_lbracket on_tstring_beg on_tstring_content # :nodoc:
on_ignored_nl def UNK uri on_comma UNK on_comma body on_nl UNK on_op nil on_nl on_ignored_nl UNK UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end ## # Parses the +body+ of the +response+ from +uri+ using the pluggable parser # that matches its content type
q on_period UNK on_lparen self on_rparen on_lbrace on_ignored_nl q on_period UNK on_nl q on_period UNK cookie_jar on_nl q on_period UNK # :nodoc:
on_ignored_nl def UNK UNK on_comma UNK on_comma user on_op nil on_comma password on_op nil on_nl on_ivar on_op UNK on_nl on_ivar ## # Sets the proxy +address+ at +port+ with an optional +user+ and +password+
on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK on_nl UNK on_nl on_ivar on_period UNK ## # Clears history and cookies.
on_ignored_nl def UNK on_nl UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl on_ignored_nl def UNK on_lparen ## # Shuts down this session by clearing browsing state and closing all # persistent connections.
on_ignored_nl def UNK on_lparen uri on_comma form on_comma headers on_op on_lbrace on_rbrace on_rparen on_ignored_nl UNK on_op form on_period page on_op ## # Posts +form+ to +uri+
page on_op on_ivar on_period UNK uri on_comma on_symbeg UNK on_comma headers on_comma on_lbracket UNK on_rbracket on_comma UNK on_nl UNK on_lparen # fetch the page
on_ignored_nl def UNK on_lparen page on_rparen on_ignored_nl on_ivar on_period history on_period UNK on_lparen page on_comma on_ivar on_period UNK on_lparen page ## # Adds +page+ to the history
