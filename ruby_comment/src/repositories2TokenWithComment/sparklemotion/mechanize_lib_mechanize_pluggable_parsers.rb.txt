on_ignored_nl UNK on_const on_op on_const on_nl on_ignored_nl on_const on_op UNK on_ignored_nl on_symbeg UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_symbeg ## # Mechanize allows different parsers for different content types. Mechanize # uses PluggableParser to determine which parser to use for any content type. # To use your own parser or to change the default parsers, register them with # this class through Mechanize#pluggable_parser. # # The default parser for unregistered content types is Mechanize::File. # # The module Mechanize::Parser provides basic functionality for any content # type, so you may use it in custom parsers you write. For small files you # wish to perform in-memory operations on, you should subclass # Mechanize::File. For large files you should subclass Mechanize::Download as # the content is only loaded into memory in small chunks. # # When writing your own pluggable parser, be sure to provide a method #body # that returns a String containing the response body for compatibility with # Mechanize#get_file. # # == Example # # To create your own parser, just create a class that takes four parameters in # the constructor. Here is an example of registering a parser that handles # CSV files: # # require 'csv' # # class CSVParser < Mechanize::File # attr_reader :csv # # def initialize uri = nil, response = nil, body = nil, code = nil # super uri, response, body, code # @csv = CSV.parse body # end # end # # agent = Mechanize.new # agent.pluggable_parser.csv = CSVParser # agent.get('http://example.com/test.csv') # => CSVParser # # Now any response with a content type of 'text/csv' will initialize a # CSVParser and return that object to the caller. # # To register a parser for a content type that Mechanize does not know about, # use the hash syntax: # # agent.pluggable_parser['text/something'] = SomeClass # # To set the default parser, use #default: # # agent.pluggable_parser.default = Mechanize::Download # # Now all unknown content types will be saved to disk and not loaded into # memory.
on_const on_op on_const on_op on_const on_nl UNK on_ignored_nl on_const on_op on_const on_nl end on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl # For mime-types >=2.1
on_const on_op on_const on_nl end on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_nl on_ivar on_op UNK on_ignored_nl on_const # For mime-types <2.1
on_ignored_nl def UNK content_type on_nl UNK UNK UNK content_type on_nl on_ignored_nl UNK on_op on_ivar on_lbracket content_type on_rbracket on_nl on_ignored_nl UNK ## # Returns the parser registered for the given +content_type+
on_lparen on_ivar on_lbracket on_const on_op on_const on_period UNK on_lparen UNK on_period UNK on_comma UNK UNK on_rparen on_rbracket UNK UNK on_rparen # Starting from mime-types 3.0 x-prefix is deprecated as per IANA
on_ivar on_lbracket content_type on_rbracket on_op klass on_nl end on_nl on_ignored_nl on_ignored_nl def UNK on_lparen klass on_rparen on_ignored_nl register_parser on_lparen on_const # :nodoc:
on_ignored_nl def UNK on_lparen klass on_rparen on_ignored_nl register_parser on_lparen on_const on_lbracket on_symbeg UNK on_rbracket on_comma klass on_rparen on_nl register_parser on_lparen ## # Registers +klass+ as the parser for text/html and application/xhtml+xml # content
on_ignored_nl def UNK on_lparen klass on_rparen on_ignored_nl register_parser on_lparen on_const on_lbracket on_symbeg UNK on_rbracket on_comma klass on_rparen on_nl end on_nl ## # Registers +klass+ as the parser for application/xhtml+xml content
on_ignored_nl def UNK on_lparen klass on_rparen on_ignored_nl register_parser on_lparen on_const on_lbracket on_symbeg UNK on_rbracket on_comma klass on_rparen on_nl end on_nl ## # Registers +klass+ as the parser for application/pdf content
on_ignored_nl def UNK on_lparen klass on_rparen on_ignored_nl register_parser on_lparen on_const on_lbracket on_symbeg UNK on_rbracket on_comma klass on_rparen on_nl end on_nl ## # Registers +klass+ as the parser for text/csv content
on_ignored_nl def UNK on_lparen klass on_rparen on_ignored_nl on_const on_lbracket on_symbeg UNK on_rbracket on_period UNK UNK on_op content_type on_op on_ignored_nl register_parser ## # Registers +klass+ as the parser for text/xml content
on_ignored_nl def on_op on_lparen content_type on_rparen on_ignored_nl on_ivar on_lbracket content_type on_rbracket on_nl end on_nl on_ignored_nl on_ignored_nl def on_op content_type on_comma ## # Retrieves the parser for +content_type+ content
on_ignored_nl def on_op content_type on_comma klass on_nl register_parser content_type on_comma klass on_nl end on_nl on_ignored_nl end on_nl on_ignored_nl EMP EMP ## # Sets the parser for +content_type+ content to +klass+ # # The +content_type+ may either be a full MIME type a simplified MIME type # ('text/x-csv' simplifies to 'text/csv') or a media type like 'image'.
