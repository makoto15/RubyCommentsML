on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_op on_const on_nl on_const on_op on_const # coding: BINARY
on_ignored_nl UNK on_const on_op on_const on_op on_const on_nl on_ignored_nl UNK on_symbeg UNK on_ignored_nl on_ivar on_op nil on_nl on_ignored_nl on_ignored_nl def ## # Parser Content-Disposition headers that loosely follows RFC 2183. # # Beyond RFC 2183, this parser allows: # # * Missing disposition-type # * Multiple semicolons # * Whitespace around semicolons
on_ignored_nl on_ivar on_op nil on_nl on_ignored_nl on_ignored_nl def UNK on_period UNK UNK on_nl on_ivar on_op UNK on_period UNK on_nl on_ivar # :nodoc:
on_ignored_nl def UNK on_period UNK UNK on_nl on_ivar on_op UNK on_period UNK on_nl on_ivar on_period UNK UNK on_nl end on_nl ## # Parses the disposition type and params in the +content_disposition+ # string. The "Content-Disposition:" must be removed.
on_ignored_nl def UNK on_nl on_ivar on_op nil on_nl end on_nl on_ignored_nl on_ignored_nl def UNK UNK on_comma UNK on_op UNK on_nl ## # Creates a new parser Content-Disposition headers
on_ignored_nl def UNK UNK on_comma UNK on_op UNK on_nl return nil if UNK on_period UNK on_nl on_ignored_nl on_ivar on_op on_const ## # Parses the +content_disposition+ header. If +header+ is set to true the # "Content-Disposition:" portion will be parsed
on_ignored_nl def UNK on_nl parameters on_op UNK UNK on_nl on_ignored_nl UNK UNK UNK on_ignored_nl return nil unless UNK on_op UNK ## # Extracts disposition-parm and returns a Hash.
on_ignored_nl def UNK on_nl return nil unless on_ivar on_period scan on_lparen on_regexp_beg on_tstring_content on_regexp_end on_rparen on_nl on_ignored_nl text on_op on_tstring_beg ## # quoted-string = <"> *(qtext/quoted-pair) <"> # qtext = <any CHAR excepting <">, "\" & CR, # and including linear-white-space # quoted-pair = "\" CHAR # # Parses an RFC 2045 quoted-string
on_ignored_nl if UNK then on_ignored_nl text on_op UNK on_nl on_ignored_nl if on_ivar on_period UNK on_lparen on_int on_rparen on_op on_tstring_beg on_tstring_content # not \r "
on_ignored_nl def UNK on_nl on_ivar on_period scan on_lparen on_regexp_beg on_tstring_content on_regexp_end on_rparen on_nl end on_nl on_ignored_nl on_ignored_nl def UNK on_nl ## # token := 1*<any (US-ASCII) CHAR except SPACE, CTLs, or tspecials> # # Parses an RFC 2045 token
on_ignored_nl def UNK on_nl if on_ivar on_period UNK on_lparen on_int on_rparen on_op on_tstring_beg on_tstring_content on_tstring_end then on_ignored_nl UNK on_nl UNK ## # value := token / quoted-string # # Parses an RFC 2045 value
on_ignored_nl def UNK on_nl on_ivar on_period scan on_lparen on_regexp_beg on_tstring_content on_regexp_end on_rparen on_nl end on_nl on_ignored_nl end on_nl on_ignored_nl EMP ## # 1*SP # # Parses spaces
