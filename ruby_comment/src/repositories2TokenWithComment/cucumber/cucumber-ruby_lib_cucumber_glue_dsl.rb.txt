on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const # frozen_string_literal: true
UNK on_const on_nl UNK on_op UNK on_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK UNK # This module provides the methods the DSL you can use to define # steps, hooks, transforms etc.
def on_const on_lparen on_op UNK on_comma on_op UNK on_comma on_op proc on_rparen on_ignored_nl on_const on_period UNK on_lparen UNK on_comma UNK # Registers any number of +world_modules+ (Ruby Modules) and/or a Proc. # The +proc+ will be executed once before each scenario to create an # Object that the scenario's steps will run within. Any +world_modules+ # will be mixed into this Object (via Object#extend). # # By default the +world modules+ are added to a global namespace. It is # possible to create a namespaced World by using an hash, where the # symbols are the namespaces. # # This method is typically called from one or more Ruby scripts under # <tt>features/support</tt>. You can call this method as many times as you # like (to register more modules), but if you try to register more than # one Proc you will get an error. # # Cucumber will not yield anything to the +proc+. Examples: # # World do # MyClass.new # end # # World(MyModule) # # World(my_module: MyModule) #
def on_const on_lparen on_op tag_expressions on_comma on_op proc on_rparen on_ignored_nl on_const on_period register_rb_hook on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma tag_expressions on_comma # Registers a proc that will run before each Scenario. You can register as many # as you want (typically from ruby scripts under <tt>support/hooks.rb</tt>).
def on_const on_lparen on_op tag_expressions on_comma on_op proc on_rparen on_ignored_nl on_const on_period register_rb_hook on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma tag_expressions on_comma # Registers a proc that will run after each Scenario. You can register as many # as you want (typically from ruby scripts under <tt>support/hooks.rb</tt>).
def on_const on_lparen on_op tag_expressions on_comma on_op proc on_rparen on_ignored_nl on_const on_period register_rb_hook on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma tag_expressions on_comma # Registers a proc that will be wrapped around each scenario. The proc # should accept two arguments: two arguments: the scenario and a "block" # argument (but passed as a regular argument, since blocks cannot accept # blocks in 1.8), on which it should call the .call method. You can register # as many as you want (typically from ruby scripts under <tt>support/hooks.rb</tt>).
def on_const on_lparen on_op tag_expressions on_comma on_op proc on_rparen on_ignored_nl on_const on_period register_rb_hook on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma tag_expressions on_comma # Registers a proc that will run after each Step. You can register as # as you want (typically from ruby scripts under <tt>support/hooks.rb</tt>).
def on_const on_lparen on_op proc on_rparen on_ignored_nl on_const on_period register_rb_hook on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_lbracket on_rbracket on_comma proc on_rparen # Registers a proc that will run after Cucumber is configured. You can register as # as you want (typically from ruby scripts under <tt>support/hooks.rb</tt>).
def UNK on_lparen UNK on_comma UNK on_op UNK on_comma options on_op UNK UNK on_comma on_op proc on_rparen on_ignored_nl UNK on_op # Registers a new Ruby StepDefinition. This method is aliased # to <tt>Given</tt>, <tt>When</tt> and <tt>Then</tt>, and # also to the i18n translations whenever a feature of a # new language is loaded. # # If provided, the +symbol+ is sent to the <tt>World</tt> object # as defined by #World. A new <tt>World</tt> object is created # for each scenario and is shared across step definitions within # that scenario. If the +options+ hash contains an <tt>:on</tt> # key, the value for this is assumed to be a proc. This proc # will be executed in the context of the <tt>World</tt> object # and then sent the +symbol+. # # If no +symbol+ if provided then the +&proc+ gets executed in # the context of the <tt>World</tt> object.
UNK on_lparen on_const on_op on_const on_op on_const on_rparen EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP # TODO: can we avoid adding methods to the global namespace (Kernel)
