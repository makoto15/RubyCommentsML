on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end # frozen_string_literal: true
UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl on_ignored_nl def UNK on_period UNK on_nl UNK on_nl end on_nl on_ignored_nl # The base class for configuring settings for a Cucumber run.
UNK on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen UNK on_comma on_op UNK on_rparen on_ignored_nl # Subscribe to an event. # # See {Cucumber::Events} for the list of possible events. # # @param event_id [Symbol, Class, String] Identifier for the type of event to subscribe to # @param handler_object [Object optional] an object to be called when the event occurs # @yield [Object] Block to be called when the event occurs # @method on_event
def UNK on_lparen UNK on_comma on_op UNK on_rparen on_ignored_nl UNK on_period UNK on_lparen UNK on_comma on_op UNK on_rparen on_nl end # @private
path on_op path on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ignored_nl UNK on_const on_period UNK on_lparen path on_rparen on_nl # In case we're on windows. Globs don't work with backslashes.
UNK on_const on_period UNK on_lparen path on_rparen on_nl on_const on_lbracket on_tstring_beg UNK path UNK on_tstring_content on_tstring_end on_rbracket on_period UNK on_nl # TODO: Move to using feature loading strategies stored in # options[:feature_loaders]
UNK on_op UNK on_period UNK on_lbrace on_op f on_op f on_op UNK on_tstring_content UNK on_rbrace on_nl UNK on_op UNK on_op # env_files are separated from other_files so we can ensure env files # load first. #
path on_op path on_period UNK on_lparen UNK on_tstring_content UNK on_comma on_tstring_beg on_tstring_end on_rparen on_const on_period UNK on_lparen path on_rparen on_op # In case we're on windows. Globs don't work with backslashes.
on_const on_period UNK on_lparen path on_rparen on_op on_const on_lbracket on_tstring_beg UNK path UNK on_tstring_content on_tstring_end on_rbracket on_op path on_nl end # Strip trailing slash. # rubocop:disable Style/RegexpLiteral
UNK UNK on_comma on_tstring_beg UNK UNK on_period UNK UNK on_tstring_content UNK format UNK on_tstring_end on_comma UNK on_period UNK on_nl end # rubocop:disable Lint/RescueException
def UNK on_nl on_ivar on_lbracket on_symbeg UNK on_rbracket on_op on_lbracket on_rbracket on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen # An array of procs that can generate snippets for undefined steps. These procs may be called if a # formatter wants to display snippets to the user. # # Each proc should take the following arguments: # # - keyword # - step text # - multiline argument # - snippet type #
