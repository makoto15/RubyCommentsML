on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl if on_const on_op on_const on_nl UNK on_const on_lbracket # frozen_string_literal: true
UNK on_const on_nl UNK on_const on_op on_const on_op on_const on_nl on_ignored_nl on_const on_op on_const on_period UNK UNK on_op UNK on_comma # Defines aliases for coloured output. You don't invoke any methods from this # module directly, but you can change the output colours by defining # a <tt>CUCUMBER_COLORS</tt> variable in your shell, very much like how you can # tweak the familiar POSIX command <tt>ls</tt> with # <a href="http://mipsisrisc.com/rambling/2008/06/27/lscolorsls_colors-now-with-linux-support/">$LSCOLORS/$LS_COLORS</a> # # The colours that you can change are: # # * <tt>undefined</tt> - defaults to <tt>yellow</tt> # * <tt>pending</tt> - defaults to <tt>yellow</tt> # * <tt>pending_param</tt> - defaults to <tt>yellow,bold</tt> # * <tt>failed</tt> - defaults to <tt>red</tt> # * <tt>failed_param</tt> - defaults to <tt>red,bold</tt> # * <tt>passed</tt> - defaults to <tt>green</tt> # * <tt>passed_param</tt> - defaults to <tt>green,bold</tt> # * <tt>outline</tt> - defaults to <tt>cyan</tt> # * <tt>outline_param</tt> - defaults to <tt>cyan,bold</tt> # * <tt>skipped</tt> - defaults to <tt>cyan</tt> # * <tt>skipped_param</tt> - defaults to <tt>cyan,bold</tt> # * <tt>comment</tt> - defaults to <tt>grey</tt> # * <tt>tag</tt> - defaults to <tt>cyan</tt> # # For instance, if your shell has a black background and a green font (like the # "Homebrew" settings for OS X' Terminal.app), you may want to override passed # steps to be white instead of green. # # Although not listed, you can also use <tt>grey</tt>. # # Examples: (On Windows, use SET instead of export.) # # export CUCUMBER_COLORS="passed=white" # export CUCUMBER_COLORS="passed=white,bold:passed_param=white,bold,underline" # # To see what colours and effects are available, just run this in your shell: # # ruby -e "require 'rubygems'; require 'term/ansicolor'; puts Cucumber::Term::ANSIColor.attributes" #
on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period split on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period UNK UNK on_op UNK on_op on_ignored_nl # Example: export CUCUMBER_COLORS="passed=red:failed=yellow"
on_const on_period UNK UNK on_op method_name on_op on_ignored_nl UNK if method_name on_op UNK on_tstring_content UNK on_nl UNK on_op UNK on_nl # Eval to define the color-named methods required by Term::ANSIColor. # # Examples: # # def failed(string=nil, &proc) # red(string, &proc) # end # # def failed_param(string=nil, &proc) # red(bold(string, &proc)) + red # end
end on_nl on_ignored_nl def UNK on_period UNK UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_const on_period # rubocop:disable Security/Eval
UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_const on_period UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end #:nodoc:
UNK on_ignored_nl UNK on_nl end on_nl UNK on_const on_op UNK if UNK on_period UNK on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end # rubocop:disable Lint/DuplicateMethods
if UNK on_period UNK on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_period UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_period # rubocop:disable Lint/RescueException
UNK on_symbeg UNK UNK on_op UNK on_op on_ignored_nl on_op on_const on_op on_const on_op on_const on_period UNK on_op on_tstring_beg on_tstring_content on_embexpr_beg #:nodoc:
