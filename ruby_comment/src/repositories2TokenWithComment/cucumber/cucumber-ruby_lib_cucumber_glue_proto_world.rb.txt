on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl # frozen_string_literal: true
UNK on_const on_nl def UNK on_lparen UNK on_comma UNK on_op UNK on_rparen on_ignored_nl UNK on_nl end on_nl on_ignored_nl def UNK # Defines the basic API methods availlable in all Cucumber step definitions. # # You can, and probably should, extend this API with your own methods that # make sense in your domain. For more on that, see {Cucumber::Glue::Dsl#World}
def UNK on_lparen UNK on_comma UNK on_op UNK on_rparen on_ignored_nl UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen # Run a single Gherkin step # @example Call another step # step "I am logged in" # @example Call a step with quotes in the name # step %{the user "Dave" is logged in} # @example Passing a table # step "the following users exist:", table(%{ # | name | email | # | Matt | matt@matt.com | # | Aslak | aslak@aslak.com | # }) # @example Passing a multiline string # step "the email should contain:", "Dear sir,\nYou've won a prize!\n" # @param [String] name The name of the step # @param [String,Cucumber::Test::DocString,Cucumber::Ast::Table] multiline_argument
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_const on_op on_const # Run a snippet of Gherkin # @example # steps %{ # Given the user "Susan" exists # And I am logged in as "Susan" # } # @param [String] steps_text The Gherkin snippet to run
def UNK on_lparen UNK on_rparen on_ignored_nl on_const on_op on_const on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl def UNK # Parse Gherkin into a {Cucumber::Ast::Table} object. # # Useful in conjunction with the #step method. # @example Create a table # users = table(%{ # | name | email | # | Matt | matt@matt.com | # | Aslak | aslak@aslak.com | # }) # @param [String] text_or_table The Gherkin string that represents the table # Returns a Cucumber::MultilineArgument::DataTable for +text_or_table+, which can either # be a String: # # table(%{ # | account | description | amount | # | INT-100 | Taxi | 114 | # | CUC-101 | Peeler | 22 | # }) # # or a 2D Array: # # table([ # %w{ account description amount }, # %w{ INT-100 Taxi 114 }, # %w{ CUC-101 Peeler 22 } # ]) #
def UNK on_lparen on_op UNK on_rparen on_ignored_nl on_const on_period UNK on_lparen on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_tstring_beg on_tstring_content on_tstring_end on_tstring_beg on_tstring_content # Print a message to the output. # # @note Cucumber might surprise you with the behaviour of this method. Instead # of sending the output directly to STDOUT, Cucumber will intercept and cache # the message until the current step has finished, and then display it. # # If you'd prefer to see the message immediately, call {Kernel.puts} instead.
def UNK on_lparen UNK on_comma UNK on_op UNK on_rparen on_ignored_nl UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_comma # Pause the tests and ask the operator for input
def UNK on_lparen UNK on_comma UNK on_comma UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_rparen on_ignored_nl on_const on_period UNK on_lparen on_ignored_nl on_tstring_beg # Embed an image in the output
def UNK on_lparen message on_op on_tstring_beg on_tstring_content on_tstring_end on_rparen on_ignored_nl UNK on_const on_comma message UNK UNK on_nl on_ignored_nl UNK on_ignored_nl # Mark the matched step as pending.
UNK on_const on_comma message on_nl end on_nl UNK on_const on_comma on_tstring_beg on_tstring_content UNK message UNK on_tstring_content on_tstring_end on_nl end on_nl # rubocop:disable Lint/RescueException
def UNK on_lparen message on_op on_tstring_beg on_tstring_content on_tstring_end on_rparen on_ignored_nl UNK on_const on_op on_const on_op on_const on_op on_const on_comma message # Skips this step and the remaining steps in the scenario
def UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_nl end on_nl on_ignored_nl def self on_period UNK # Prints the list of modules that are included in the World
def UNK on_nl UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen UNK on_comma UNK on_rparen on_const on_period UNK # see {#inspect}
def self on_period UNK on_lparen UNK on_comma UNK on_rparen on_const on_period UNK do def self on_period UNK on_lparen UNK on_rparen # Dynamially generate the API module, closuring the dependencies
on_const on_period UNK do def self on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK on_lparen on_const on_rparen on_nl end # rubocop:disable Metrics/MethodLength
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK on_lparen on_const on_rparen on_nl end on_nl on_ignored_nl def UNK # rubocop:disable Metrics/BlockLength
UNK on_period UNK on_lparen on_const on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK on_lparen # wrap the dynamically generated module so that we can document the methods # for yardoc, which doesn't like define_method.
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK on_lparen UNK on_rparen on_nl UNK on_lparen UNK on_rparen on_nl end on_nl # TODO: pass these in when building the module, instead of mutating them later # Extend the World with user-defined modules
def UNK on_nl modules on_op UNK self on_period UNK UNK on_nl on_lparen UNK on_op self UNK self UNK end on_rparen # Prints the list of modules that are included in the World
def UNK on_lparen modules on_rparen on_ignored_nl modules on_period UNK do on_op UNK on_op on_ignored_nl UNK on_lparen UNK on_rparen on_nl end # @private
def UNK on_lparen modules on_rparen on_ignored_nl UNK on_op modules on_nl modules on_period UNK do on_op UNK on_comma UNK on_op on_ignored_nl # @private
def UNK on_nl UNK on_period UNK UNK on_op UNK on_comma UNK on_op on_tstring_beg UNK UNK on_period UNK on_lparen on_tstring_beg on_tstring_content # @private
on_const on_op on_const on_op on_const on_op on_const on_op on_const on_nl end on_nl end on_nl end on_nl EMP EMP EMP EMP # @private
