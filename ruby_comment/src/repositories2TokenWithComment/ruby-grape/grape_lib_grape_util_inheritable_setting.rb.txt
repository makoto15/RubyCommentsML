on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_symbeg route on_comma on_symbeg UNK on_comma on_symbeg UNK on_nl # frozen_string_literal: true
UNK on_const on_nl UNK on_symbeg route on_comma on_symbeg UNK on_comma on_symbeg UNK on_nl UNK on_symbeg namespace_inheritable on_comma on_symbeg namespace_stackable on_comma # A branchable, inheritable settings object which can store both stackable # and inheritable values (see InheritableValues and StackableValues).
def self on_period UNK on_nl UNK on_op on_lbrace on_rbrace on_nl end on_nl on_ignored_nl def self on_period UNK on_nl UNK on_op # Retrieve global settings.
def self on_period UNK on_nl UNK on_op on_lbrace on_rbrace on_nl end on_nl on_ignored_nl def UNK on_nl self on_period route on_op # Clear all global settings. # @api private # @note only for testing
def UNK on_nl self on_period route on_op on_lbrace on_rbrace on_nl self on_period UNK on_op on_lbrace on_rbrace on_nl self on_period UNK # Instantiate a new settings instance, with blank values. The fresh # instance can then be set to inherit from an existing instance (see # #inherit_from).
self on_period namespace_inheritable on_op on_const on_period UNK on_nl self on_period namespace_stackable on_op on_const on_period UNK on_nl self on_period namespace_reverse_stackable on_op # only inheritable from a parent when # used with a mount, or should every API::Class be a separate namespace by default?
def UNK on_nl self on_period UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK UNK parent UNK on_ignored_nl UNK UNK # Return the class-level global properties.
def UNK UNK parent UNK on_ignored_nl UNK UNK parent on_period UNK on_nl on_ignored_nl self on_period parent on_op parent on_nl on_ignored_nl # Set our inherited values to the given parent's current values. Also, # update the inherited values on any settings instances which were forked # from us. # @param parent [InheritableSetting]
def UNK on_nl self on_period UNK on_period UNK on_period UNK UNK on_op new_setting on_op on_ignored_nl UNK on_op new_setting on_nl new_setting # Create a point-in-time copy of this settings instance, with clones of # all our values. Note that, should this instance's parent be set or # changed via #inherit_from, it will copy that inheritence to any copies # which were made.
def UNK on_nl UNK on_op on_lbrace on_rbrace on_nl end on_nl on_ignored_nl def UNK on_nl on_lbrace on_ignored_nl on_label UNK on_period clone # Resets the instance store of per-route settings. # @api private
def UNK on_nl on_lbrace on_ignored_nl on_label UNK on_period clone on_comma on_ignored_nl on_label route on_period clone on_comma on_ignored_nl on_label UNK on_period # Return a serializable hash of our values.
