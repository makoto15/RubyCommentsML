on_ignored_nl UNK UNK UNK UNK on_nl on_ignored_nl UNK on_const on_nl class on_const on_nl class on_const on_nl UNK on_const on_op on_const # frozen_string_literal: true
class on_const on_nl UNK on_const on_op on_const on_op on_const on_nl on_ignored_nl class on_op self on_nl UNK on_symbeg UNK on_nl UNK # The API Instance class, is the engine behind Grape::API. Each class that inherits # from this will represent a different API instance
on_const on_op on_const on_period UNK on_nl on_ignored_nl def UNK on_nl UNK on_nl UNK on_nl UNK on_nl end on_nl on_ignored_nl def # A class-level lock to ensure the API is not compiled by multiple # threads simultaneously within the same process.
def UNK on_nl UNK on_nl UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op UNK on_nl end # Clears all defined routes, endpoints, etc., on this API.
def UNK on_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl # Parses the API's definition and compiles it into an instance of # Grape::API.
def UNK on_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def UNK on_lparen env on_rparen on_ignored_nl UNK on_nl UNK on_lparen # Wipe the compiled API so we can recompile after changes were made.
def UNK on_lparen env on_rparen on_ignored_nl UNK on_nl UNK on_lparen env on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen env # This is the interface point between Rack and Grape; it accepts a request # from Rack and ultimately returns an array of three values: the status, # the headers, and the body. See [the rack specification] # (http://www.rubydoc.info/github/rack/rack/master/file/SPEC) for more.
def UNK on_lparen env on_rparen on_ignored_nl UNK on_period UNK on_lparen env on_rparen on_nl end on_nl on_ignored_nl def cascade on_lparen UNK # A non-synchronized version of ::call.
def cascade on_lparen UNK on_op UNK on_rparen on_ignored_nl if UNK on_period UNK on_nl UNK on_period namespace_inheritable on_period UNK on_lparen on_symbeg # (see #cascade?)
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_nl UNK on_period UNK on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl # see Grape::Router#recognize_path
def UNK on_lparen on_op UNK on_comma on_op block on_rparen on_ignored_nl UNK on_period UNK on_lparen on_op on_symbeg UNK on_rparen on_nl if # Execute first the provided block, then each of the # block passed in. Allows for simple 'before' setups # of settings stack pushes.
UNK on_period UNK do on_op UNK on_op on_ignored_nl UNK on_period UNK on_lparen UNK on_period UNK on_rparen on_nl UNK on_period UNK # Propagate any inherited params down to our endpoints, and reset any # compiled routes.
def UNK on_nl on_ivar on_op on_const on_period UNK on_nl UNK on_nl self on_period class on_period UNK on_period UNK do on_op # Builds the routes from the defined endpoints, effectively compiling # this API into a usable form.
def UNK on_lparen env on_rparen on_ignored_nl UNK on_op on_ivar on_period UNK on_lparen env on_rparen on_nl UNK on_lbracket UNK on_rbracket on_period # Handle a request. See Rack documentation for what `env` is.
def UNK on_nl UNK self on_period class on_period namespace_inheritable on_lparen on_symbeg cascade on_rparen if self on_period class on_period UNK on_period # Some requests may return a HTTP 404 error if grape cannot find a matching # route. In this case, Grape::Router adds a X-Cascade header to the response # and sets it to 'pass', indicating to grape's parents they should keep # looking for a matching route on other resources. # # In some applications (e.g. mounting grape on rails), one might need to trap # errors from reaching upstream. This is effectivelly done by unsetting # X-Cascade. Default :cascade is true.
def UNK on_nl UNK on_op UNK UNK on_nl on_ignored_nl self on_period class on_period UNK on_period UNK do on_op endpoint on_op # For every resource add a 'OPTIONS' route that returns an HTTP 204 response # with a list of HTTP methods that can be called. Also add a route that # will return an HTTP 405 response for any HTTP method that the resource # cannot handle.
UNK on_op route on_period pattern on_period UNK on_nl UNK on_lbracket UNK on_rbracket on_op UNK UNK on_nl route_settings on_op UNK on_lbracket # using the :any shorthand produces [nil] for route methods, substitute all manually
route_settings on_lbracket on_symbeg methods on_rbracket on_op on_const on_op on_const on_op on_const on_op on_const if route_settings on_lbracket on_symbeg methods on_rbracket on_period # using the :any shorthand produces [nil] for route methods, substitute all manually
UNK do on_ignored_nl UNK do on_ignored_nl UNK on_period UNK do on_op UNK on_op on_ignored_nl methods on_op UNK on_lbracket on_symbeg methods # The paths we collected are prepared (cf. Path#prepare), so they # contain already versioning information when using path versioning. # Disable versioning so adding a route won't prepend versioning # informations again.
def UNK on_lparen pattern on_comma on_label on_lbracket on_rbracket on_comma on_op UNK on_rparen on_ignored_nl UNK on_op on_ignored_nl if self on_period class # Generate a route that returns an HTTP 405 response for a user defined # path on methods not specified
def UNK on_lparen on_op UNK on_rparen on_ignored_nl UNK on_op self on_period class on_period namespace_inheritable on_lparen on_symbeg UNK on_rparen on_nl UNK # Allows definition of endpoints that ignore the versioning configuration # used by the rest of your API.
def UNK on_lparen on_op UNK on_rparen on_ignored_nl UNK on_op self on_period class on_period namespace_inheritable on_lparen on_symbeg UNK on_rparen on_nl on_ignored_nl # Allows definition of endpoints that ignore the root prefix used by the # rest of your API.
