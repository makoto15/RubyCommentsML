on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK UNK on_lparen UNK UNK method on_op # frozen_string_literal: true
UNK on_const on_nl UNK UNK on_lparen UNK UNK method on_op UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl on_ivar on_op method # This class wraps {MultipleTypeCoercer}, for use with collections # that allow members of more than one type.
UNK UNK on_lparen UNK UNK method on_op UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl on_ivar on_op method on_period UNK on_lparen # Construct a new coercer that will attempt to coerce # a list of values such that all members are of one of # the given types. The container may also optionally be # coerced to a +Set+. An arbitrary coercion +method+ may # be supplied, which will be passed the entire collection # as a parameter and should return a new collection, or # may return the same one if no coercion was required. # # @param types [Array<Class>,Set<Class>] list of allowed types, # also specifying the container type # @param method [#call,#parse] method by which values should be coerced
on_ivar on_op on_const on_period UNK UNK UNK method on_nl end on_nl on_ignored_nl UNK UNK on_lparen value on_rparen on_ignored_nl UNK UNK # If we have a coercion method, pass it in here to save # building another one, even though we call it directly.
UNK UNK on_lparen value on_rparen on_ignored_nl UNK UNK value on_period UNK on_const on_nl on_ignored_nl value on_op on_ignored_nl UNK on_ivar on_nl # Coerce the given value. # # @param value [Array<String>] collection of values to be coerced # @return [Array<Object>,Set<Object>,InvalidValue] # the coerced result, or an instance # of {InvalidValue} if the value could not be coerced.
