on_ignored_nl UNK UNK UNK UNK on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const # frozen_string_literal: true
def UNK on_lparen new_format on_op nil on_rparen on_ignored_nl namespace_inheritable on_lparen on_symbeg UNK on_comma new_format on_period UNK on_op nil on_op new_format # Specify the default format for the API's serializers. # May be `:json` or `:txt` (default).
def UNK on_lparen new_format on_op nil on_rparen on_ignored_nl if new_format on_nl namespace_inheritable on_lparen on_symbeg UNK on_comma new_format on_period to_sym on_rparen # Specify the format for the API's serializers. # May be `:json`, `:xml`, `:txt`, etc.
namespace_inheritable on_lparen on_symbeg UNK on_comma on_const on_op on_const on_period UNK on_lparen new_format on_comma on_op UNK UNK on_rparen on_rparen on_nl UNK # define the default error formatters
UNK on_op UNK on_lbracket new_format on_period to_sym on_rbracket on_nl UNK on_const on_op on_const on_op on_const on_period UNK on_lparen new_format on_rparen # define a single mime type
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl namespace_stackable on_lparen on_symbeg UNK on_comma UNK on_period to_sym on_op UNK on_rparen on_nl # Specify a custom formatter for a content-type.
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl namespace_stackable on_lparen on_symbeg UNK on_comma UNK on_period to_sym on_op UNK on_rparen on_nl # Specify a custom parser for a content-type.
def UNK on_lparen UNK on_op nil on_rparen on_ignored_nl if UNK on_nl UNK on_op on_const on_op on_const on_period UNK on_lparen UNK # Specify a default error formatter.
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl namespace_stackable on_lparen on_symbeg UNK on_comma UNK on_period to_sym on_op UNK on_rparen on_nl # Specify additional content-types, e.g.: # content_type :xls, 'application/vnd.ms-excel'
def UNK on_nl UNK on_op UNK on_lparen on_symbeg UNK on_rparen on_nl on_const on_op on_const on_period UNK UNK on_nl end on_nl # All available content types.
def UNK on_lparen UNK on_op nil on_rparen on_ignored_nl namespace_inheritable on_lparen on_symbeg UNK on_comma UNK on_rparen on_nl end on_nl on_ignored_nl def # Specify the default status code for errors.
def UNK on_lparen on_op args on_comma on_op UNK on_rparen on_ignored_nl if args on_period UNK on_period UNK on_lparen on_const on_rparen on_nl # Allows you to rescue certain exceptions that occur to return # a grape error rather than raising all the way to the # server level. # # @example Rescue from custom exceptions # class ExampleAPI < Grape::API # class CustomError < StandardError; end # # rescue_from CustomError # end # # @overload rescue_from(*exception_classes, **options) # @param [Array] exception_classes A list of classes that you want to rescue, or # the symbol :all to rescue from all exceptions. # @param [Block] block Execution block to handle the given exception. # @param [Hash] options Options for the rescue usage. # @option options [Boolean] :backtrace Include a backtrace in the rescue response. # @option options [Boolean] :rescue_subclasses Also rescue subclasses of exception classes # @param [Proc] handler Execution proc to handle the given exception as an # alternative to passing a block.
def UNK on_lparen UNK on_comma options on_rparen on_ignored_nl UNK on_const on_op on_const on_op on_const on_period UNK UNK options on_lbracket on_symbeg # Allows you to specify a default representation entity for a # class. This allows you to map your models to their respective # entities once and then simply call `present` with the model. # # @example # class ExampleAPI < Grape::API # represent User, with: Entity::User # # get '/me' do # present current_user # with: Entity::User is assumed # end # end # # Note that Grape will automatically go up the class ancestry to # try to find a representing entity, so if you, for example, define # an entity to represent `Object` then all presented objects will # bubble up and utilize the entity provided on that `represent` call. # # @param model_class [Class] The model class that will be represented. # @option options [Class] :with The entity class that will represent the model.
