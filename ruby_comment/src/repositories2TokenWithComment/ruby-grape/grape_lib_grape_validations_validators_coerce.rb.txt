on_ignored_nl UNK on_const on_nl class on_const on_nl class on_const on_nl def UNK on_period UNK on_lparen val on_rparen on_ignored_nl UNK UNK # frozen_string_literal: true
UNK UNK params on_lbracket attr_name on_rbracket on_period class on_op UNK on_period class on_op params on_lbracket attr_name on_rbracket on_op UNK on_nl # Don't assign a value if it is identical. It fixes a problem with Hashie::Mash # which looses wrappers for hashes and arrays after reassigning values # # h = Hashie::Mash.new(list: [1, 2, 3, 4]) # => #<Hashie::Mash list=#<Hashie::Array [1, 2, 3, 4]>> # list = h.list # h[:list] = list # h # => #<Hashie::Mash list=[1, 2, 3, 4]>
UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen val on_rparen on_ignored_nl on_op val on_period UNK on_lparen on_const on_op on_const on_rparen # @!attribute [r] converter # Object that will be used for parameter coercion and type checking. # # See {Types.build_coercer} # # @return [Object]
UNK on_const on_nl on_const on_op on_const on_period UNK on_nl end on_nl on_ignored_nl def type on_nl on_ivar on_lbracket on_symbeg type on_rbracket # Some custom types might fail, so it should be treated as an invalid value
def type on_nl on_ivar on_lbracket on_symbeg type on_rbracket on_period UNK on_lparen on_const on_rparen on_op on_ivar on_lbracket on_symbeg type on_rbracket on_lbracket # Type to which the parameter will be coerced. # # @return [Class]
