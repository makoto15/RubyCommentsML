on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const # frozen_string_literal: true
class on_const on_op on_const UNK end on_nl on_ignored_nl def UNK on_period UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op on_lbrace on_label # Denotes a situation where a DSL method has been invoked in a # filter which it should not yet be available in
def UNK on_period UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op on_lbrace on_label on_const on_rbrace on_nl on_ivar on_lbracket UNK on_rbracket on_nl # @param type [Symbol] The type of filter for which evaluation has been # completed # @return [Module] A module containing method overrides suitable for the # position in the filter evaluation sequence denoted by +type+. This # defaults to an empty module if no overrides are defined for the given # filter +type+.
UNK on_const on_nl def UNK on_lparen passed_params on_comma options on_op on_lbrace on_rbrace on_comma declared_params on_op nil on_comma params_nested_path on_op on_lbracket # Methods which should not be available in filters until the before filter # has completed
UNK on_op route_setting on_lparen on_symbeg UNK on_rparen on_op route_setting on_lparen on_symbeg UNK on_rparen on_period UNK on_lbrace on_op UNK on_op UNK # If it is not a Hash then it does not have children. # Find its value or set it to nil.
route_setting on_lparen on_symbeg UNK on_rparen on_period UNK on_op on_const on_lparen route_setting on_lparen on_symbeg declared_params on_rparen on_rparen on_nl else on_ignored_nl route_setting # Declared params including parent namespaces
route_setting on_lparen on_symbeg UNK on_rparen on_period UNK on_op on_const on_lparen route_setting on_lparen on_symbeg declared_params on_rparen on_rparen on_nl end on_nl on_ignored_nl # Declared params at current namespace
def UNK on_lparen on_op on_rparen on_ignored_nl UNK on_const on_comma on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl env # A filtering method that will return a hash # consisting only of keys that have been declared by a # `params` statement against the current/target endpoint or parent # namespaces. # # @see +PostBeforeFilter#declared+ # # @param params [Hash] The initial hash to filter. Usually this will just be `params` # @param options [Hash] Can pass `:include_missing`, `:stringify` and `:include_parent_namespaces` # options. `:include_parent_namespaces` defaults to true, hence must be set to false if # you want only to return params declared against the current/target endpoint.
def UNK on_nl env on_lbracket on_const on_op on_const on_op on_const on_rbracket on_nl end on_nl on_ignored_nl def UNK on_nl options on_lbracket # The API version as specified in the URL.
def UNK on_lparen UNK on_comma status on_op nil on_comma UNK on_op nil on_rparen on_ignored_nl UNK on_period status on_lparen status on_op # End the request and display an error to the # end user with the specified message. # # @param message [String] The message to display. # @param status [Integer] the HTTP Status Code. Defaults to default_error_status, 500 if not set. # @param additional_headers [Hash] Addtional headers for the response.
def UNK on_lparen UNK on_comma on_label UNK on_comma on_label nil on_comma on_op UNK on_rparen on_ignored_nl UNK on_op body on_nl if # Redirect to a new url. # # @param url [String] The url to be redirect. # @param options [Hash] The options used when redirect. # :permanent, default false. # :body, default a short message including the URL.
def status on_lparen status on_op nil on_rparen on_ignored_nl UNK status on_nl UNK on_const on_nl UNK on_const on_comma on_tstring_beg on_tstring_content UNK # Set or retrieve the HTTP status code. # # @param status [Integer] The HTTP Status Code to return for this request.
def UNK on_lparen UNK on_op nil on_rparen on_ignored_nl if UNK on_nl header on_lparen on_const on_op on_const on_op on_const on_op on_const # Set response content-type
def UNK on_nl on_ivar on_op on_const on_period new on_nl end on_nl on_ignored_nl def body on_lparen value on_op nil on_rparen on_ignored_nl # Set or get a cookie # # @example # cookies[:mycookie] = 'mycookie val' # cookies['mycookie-string'] = 'mycookie string val' # cookies[:more] = { value: '123', expires: Time.at(0) } # cookies.delete :more #
def body on_lparen value on_op nil on_rparen on_ignored_nl if value on_nl on_ivar on_op value on_nl UNK value on_op UNK on_nl # Allows you to define the response body as something other than the # return value. # # @example # get '/body' do # body "Body" # "Not the Body" # end # # GET /body # => "Body"
def UNK on_nl status on_int on_nl body UNK on_nl end on_nl on_ignored_nl def UNK on_lparen value on_op nil on_rparen on_ignored_nl # Allows you to explicitly return no content. # # @example # delete :id do # return_no_content # "not returned" # end # # DELETE /12 # => 204 No Content, ""
def UNK on_lparen value on_op nil on_rparen on_ignored_nl if value on_period UNK on_lparen on_const on_rparen on_nl UNK on_op on_const on_op # Allows you to define the response as a file-like object. # # @example # get '/file' do # file FileStreamer.new(...) # end # # GET /file # => "contents of file"
def UNK on_lparen value on_op nil on_rparen on_ignored_nl header on_tstring_beg on_tstring_content on_tstring_end on_comma nil on_nl header on_tstring_beg on_tstring_content on_tstring_end on_comma # Allows you to define the response as a streamable object. # # If Content-Length and Transfer-Encoding are blank (among other conditions), # Rack assumes this response can be streamed in chunks. # # @example # get '/stream' do # stream FileStreamer.new(...) # end # # GET /stream # => "chunked contents of file" # # See: # * https://github.com/rack/rack/blob/99293fa13d86cd48021630fcc4bd5acc9de5bdc3/lib/rack/chunked.rb # * https://github.com/rack/rack/blob/99293fa13d86cd48021630fcc4bd5acc9de5bdc3/lib/rack/etag.rb
UNK on_lparen value on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen on_op args on_rparen on_ignored_nl options on_op args on_period UNK # Skips ETag generation (reading the response up front)
def UNK on_lparen on_op args on_rparen on_ignored_nl options on_op args on_period UNK on_op on_int on_op args on_period UNK on_op on_lbrace # Allows you to make use of Grape Entities by setting # the response body to the serializable hash of the # entity provided in the `:with` option. This has the # added benefit of automatically passing along environment # and version information to the serialization, making it # very easy to do conditional exposures. See Entity docs # for more info. # # @example # # get '/users/:id' do # present User.find(params[:id]), # with: API::Entities::User, # admin: current_user.admin? # end
def UNK on_nl env on_lbracket on_const on_op on_const on_op on_const on_rbracket on_lbracket on_symbeg UNK on_rbracket on_nl end on_nl on_ignored_nl def # Returns route information for the current request. # # @example # # desc "Returns the route description." # get '/' do # route.description # end
def UNK on_lparen object on_comma options on_rparen on_ignored_nl entity_class on_op options on_period UNK on_lparen on_symbeg UNK on_rparen on_nl on_ignored_nl if # Attempt to locate the Entity class for a given object, if not given # explicitly. This is done by looking for the presence of Klass::Entity, # where Klass is the class of the `object` parameter, or one of its # ancestors. # @param object [Object] the object to locate the Entity class for # @param options [Hash] # @option options :with [Class] the explicit entity class to use # @return [Class] the located Entity class, or nil if none is found
UNK on_op if object on_period UNK on_lparen on_symbeg UNK on_rparen on_nl object on_period UNK on_nl else on_ignored_nl object on_period UNK # entity class not explicitely defined, auto-detect from relation#klass or first object in the collection
def UNK on_lparen entity_class on_comma object on_comma options on_rparen on_ignored_nl UNK on_op on_lbrace on_label env on_rbrace on_nl UNK on_lbracket on_symbeg # @return the representation of the given object as done through # the given entity_class.
