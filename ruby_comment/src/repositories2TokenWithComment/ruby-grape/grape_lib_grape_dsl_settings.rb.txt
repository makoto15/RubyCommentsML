on_ignored_nl UNK UNK UNK UNK on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const # frozen_string_literal: true
UNK on_const on_nl UNK on_const on_op on_const on_nl on_ignored_nl UNK on_symbeg inheritable_setting on_comma on_symbeg UNK on_nl on_ignored_nl def UNK on_nl # Keeps track of settings (implemented as key-value pairs, grouped by # types), in two contexts: top-level settings which apply globally no # matter where they're defined, and inheritable settings which apply only # in the current scope and scopes nested under it.
def UNK on_nl UNK on_op UNK on_nl end on_nl on_ignored_nl def inheritable_setting on_nl UNK on_op on_const on_op on_const on_op on_const # Fetch our top-level settings, which apply to all endpoints in the API.
def inheritable_setting on_nl UNK on_op on_const on_op on_const on_op on_const on_period UNK on_period UNK UNK on_op UNK on_op UNK on_period # Fetch our current inheritable settings, which are inherited by # nested scopes but not shared across siblings.
def unset on_lparen UNK on_comma key on_rparen on_ignored_nl setting on_op inheritable_setting on_period UNK on_lparen UNK on_rparen on_nl setting on_period UNK # @param type [Symbol] # @param key [Symbol]
def get_or_set on_lparen UNK on_comma key on_comma value on_rparen on_ignored_nl setting on_op inheritable_setting on_period UNK on_lparen UNK on_rparen on_nl UNK # @param type [Symbol] # @param key [Symbol] # @param value [Object] will be stored if the value is currently empty # @return either the old value, if it wasn't nil, or the given value
def UNK on_lparen key on_comma value on_op nil on_rparen on_ignored_nl get_or_set on_symbeg UNK on_comma key on_comma value on_nl end on_nl # @param key [Symbol] # @param value [Object] # @return (see #get_or_set)
def UNK on_lparen key on_rparen on_ignored_nl unset on_symbeg UNK on_comma key on_nl end on_nl on_ignored_nl def UNK on_lparen key on_comma # @param key [Symbol]
def UNK on_lparen key on_comma value on_op nil on_rparen on_ignored_nl get_or_set on_symbeg UNK on_comma key on_comma value on_nl end on_nl # (see #global_setting)
def UNK on_lparen key on_rparen on_ignored_nl unset on_symbeg UNK on_comma key on_nl end on_nl on_ignored_nl def UNK on_lparen key on_comma # (see #unset_global_setting)
def UNK on_lparen key on_comma value on_op nil on_rparen on_ignored_nl get_or_set on_symbeg UNK on_comma key on_comma value on_nl end on_nl # (see #global_setting)
def UNK on_lparen key on_rparen on_ignored_nl unset on_symbeg UNK on_comma key on_nl end on_nl on_ignored_nl def UNK on_lparen key on_comma # (see #unset_global_setting)
def UNK on_lparen key on_comma value on_op nil on_rparen on_ignored_nl get_or_set on_symbeg UNK on_comma key on_comma value on_nl end on_nl # (see #global_setting)
def UNK on_lparen key on_rparen on_ignored_nl unset on_symbeg UNK on_comma key on_nl end on_nl on_ignored_nl def UNK on_lparen key on_rparen # (see #unset_global_setting)
def UNK on_lparen key on_rparen on_ignored_nl inheritable_setting on_period UNK UNK key UNK on_op nil on_nl end on_nl on_ignored_nl def UNK # @param key [Symbol]
def UNK on_lparen key on_comma value on_op nil on_rparen on_ignored_nl get_or_set on_symbeg UNK on_comma key on_comma value on_nl end on_nl # (see #global_setting)
def UNK on_lparen key on_rparen on_ignored_nl unset on_symbeg UNK on_comma key on_nl end on_nl on_ignored_nl def UNK on_lparen key on_comma # (see #unset_global_setting)
def UNK on_lparen key on_comma value on_op nil on_rparen on_ignored_nl get_or_set on_symbeg UNK on_comma key on_comma value on_nl end on_nl # (see #global_setting)
def UNK on_lparen key on_rparen on_ignored_nl unset on_symbeg UNK on_comma key on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op # (see #unset_global_setting)
def UNK on_nl UNK on_op on_const on_op on_const on_op on_const on_period UNK on_period UNK UNK on_op UNK on_op UNK on_period # Fork our inheritable settings to a new instance, copied from our # parent's, but separate so we won't modify it. Every call to this # method should have an answering call to #namespace_end.
def UNK on_nl UNK on_nl UNK on_op inheritable_setting on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl inheritable_setting on_period UNK # Set the inheritable settings pointer back up by one level.
def UNK on_nl inheritable_setting on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen on_op UNK on_rparen on_ignored_nl UNK on_nl on_ignored_nl # Stop defining settings for the current route and clear them for the # next, within a namespace.
def UNK on_lparen on_op UNK on_rparen on_ignored_nl UNK on_nl on_ignored_nl result on_op UNK UNK UNK on_nl on_ignored_nl UNK on_nl UNK # Execute the block within a context where our inheritable settings are forked # to a new copy (see #namespace_start).
def UNK on_nl on_const on_op on_const on_op on_const on_period UNK on_period UNK UNK on_op setting on_op on_ignored_nl UNK UNK on_lparen # Builds the current class :inheritable_setting. If available, it inherits from # the superclass's :inheritable_setting.
UNK UNK on_lparen UNK on_rparen on_op UNK on_period UNK on_lparen on_symbeg inheritable_setting on_rparen on_op UNK on_op on_const on_op on_const on_op # Doesn't try to inherit settings from +Grape::API::Instance+ which also responds to # +inheritable_setting+, however, it doesn't contain any user-defined settings. # Otherwise, it would lead to an extra instance of +Grape::Util::InheritableSetting+ # in the chain for every endpoint.
