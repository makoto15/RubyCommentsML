on_ignored_nl UNK UNK on_tstring_content UNK on_nl UNK UNK on_tstring_content UNK on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl on_const on_op # frozen_string_literal: true
UNK on_const on_nl on_const on_op on_lparen on_const on_period UNK on_period UNK on_op UNK on_tstring_content UNK on_tstring_content UNK on_tstring_content UNK on_tstring_content # The API class is the primary entry point for creating Grape APIs. Users # should subclass this class in order to build an API.
on_const on_op on_lparen on_const on_period UNK on_period UNK on_op UNK on_tstring_content UNK on_tstring_content UNK on_tstring_content UNK on_tstring_content UNK on_tstring_content UNK # Class methods that we want to call on the API rather than on the API object
def UNK on_lparen on_op args on_comma on_op block on_rparen on_ignored_nl base_instance on_period UNK on_lparen on_op args on_comma on_op block on_rparen # Rather than initializing an object of type Grape::API, create an object of type Instance
def UNK on_lparen api on_comma UNK on_op on_const on_op on_const on_op on_const on_rparen on_ignored_nl api on_period UNK on_lparen UNK on_rparen # When inherited, will create a list of all instances (times the API was mounted) # It will listen to the setup required to mount that endpoint, and replicate it on any new instance
def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op on_lbracket on_rbracket on_nl on_ivar on_op on_lbracket on_rbracket on_nl on_ivar on_op UNK on_nl # Initialize the instance variables on the remountable class, and the base_instance # an instance that will be used to create the set up but will not be mounted
def UNK on_nl on_lparen base_instance on_period UNK on_op on_const on_rparen on_period UNK UNK on_op UNK on_op on_ignored_nl UNK on_lparen UNK # Redefines all methods so that are forwarded to add_setup and be recorded
def UNK on_nl UNK on_op on_ivar on_period configuration on_nl if UNK on_nl UNK UNK on_nl UNK on_nl else on_ignored_nl UNK # Configure an API from the outside. If a block is given, it'll pass a # configuration hash to the block which you can use to configure your # API. If no block is given, returns the configuration hash. # The configuration set here is accessible from inside an API with # `configuration` as normal.
def UNK on_lparen on_op args on_comma on_op block on_rparen on_ignored_nl UNK on_period UNK on_lparen on_op args on_comma on_op block on_rparen # This is the interface point between Rack and Grape; it accepts a request # from Rack and ultimately returns an array of three values: the status, # the headers, and the body. See [the rack specification] # (http://www.rubydoc.info/github/rack/rack/master/file/SPEC) for more. # NOTE: This will only be called on an API directly mounted on RACK
def UNK on_lparen api on_rparen on_ignored_nl def api on_period UNK on_lparen UNK on_rparen on_ignored_nl on_const on_op on_const on_period UNK on_lparen # Allows an API to itself be inheritable:
def api on_period UNK on_lparen UNK on_rparen on_ignored_nl on_const on_op on_const on_period UNK on_lparen UNK on_comma base_instance on_rparen on_nl end # When a child API inherits from a parent API.
on_const on_op on_const on_period UNK on_lparen UNK on_comma base_instance on_rparen on_nl end on_nl end on_nl on_ignored_nl def UNK on_lparen on_op # The instances of the child API inherit from the instances of the parent API
def UNK on_lparen on_op args on_rparen on_ignored_nl if base_instance on_period UNK on_lparen on_op args on_rparen on_nl base_instance on_period UNK on_lparen # Alleviates problems with autoloading by tring to search for the constant
def UNK on_lparen UNK on_op on_lbrace on_rbrace on_rparen on_ignored_nl instance on_op on_const on_period UNK on_lparen on_ivar on_rparen on_nl instance on_period # The remountable class can have a configuration hash to provide some dynamic class-level variables. # For instance, a descripcion could be done using: `desc configuration[:description]` if it may vary # depending on where the endpoint is mounted. Use with care, if you find yourself using configuration # too much, you may actually want to provide a new API rather than remount it.
def UNK on_lparen instance on_rparen on_ignored_nl on_ivar on_period UNK UNK on_op setup_step on_op on_ignored_nl UNK on_lparen instance on_comma setup_step on_rparen # Replays the set up to produce an API as defined in this class, can be called # on classes that inherit from Grape::API
if UNK on_lparen method on_rparen on_nl base_instance on_period UNK on_lparen method on_comma on_op args on_comma on_op block on_rparen on_nl else # If there's a missing method, it may be defined on the base_instance instead.
end on_nl on_ignored_nl UNK on_nl on_ignored_nl def UNK on_nl if UNK on_nl base_instance on_nl else on_ignored_nl UNK on_period UNK on_nl # See API::Instance.compile!
def UNK on_lparen method on_comma on_op args on_comma on_op block on_rparen on_ignored_nl setup_step on_op on_lbrace UNK method on_comma UNK args # Adds a new stage to the set up require to get a Grape::API up and running
def UNK on_lparen instance on_comma args on_rparen on_ignored_nl instance on_period UNK on_op on_ignored_nl on_lparen UNK on_lparen args on_rparen on_op args # Skips steps that contain arguments to be lazily executed (on re-mount time)
