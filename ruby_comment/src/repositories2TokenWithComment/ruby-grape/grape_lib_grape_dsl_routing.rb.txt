on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const # frozen_string_literal: true
def UNK on_lparen on_op args on_comma on_op block on_rparen on_ignored_nl if args on_period UNK on_nl options on_op args on_period UNK # Specify an API version. # # @example API with legacy support. # class MyAPI < Grape::API # version 'v2' # # get '/main' do # {some: 'data'} # end # # version 'v1' do # get '/main' do # {legacy: 'data'} # end # end # end #
def UNK on_lparen UNK on_op UNK on_rparen on_ignored_nl namespace_inheritable on_lparen on_symbeg UNK on_comma UNK on_rparen on_nl end on_nl on_ignored_nl def # Define a root URL prefix for your entire API.
def UNK on_lparen UNK on_op UNK on_comma on_op block on_rparen on_ignored_nl UNK do on_ignored_nl UNK on_lparen block on_rparen on_nl end # Create a scope without affecting the URL. # # @param _name [Symbol] Purely placebo, just allows to name the scope to # make the code more readable.
def UNK on_nl namespace_inheritable on_lparen on_symbeg UNK on_comma UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl namespace_inheritable on_lparen on_symbeg # Do not route HEAD requests to GET requests automatically.
def UNK on_nl namespace_inheritable on_lparen on_symbeg UNK on_comma UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_comma UNK # Do not automatically route OPTIONS.
def UNK on_lparen UNK on_comma UNK on_op on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_comma UNK on_op on_lbrace on_rbrace on_comma on_op block # Defines a route that will be recognized # by the Grape API. # # @param methods [HTTP Verb] One or more HTTP verbs that are accepted by this route. Set to `:any` if you want any verb to be accepted. # @param paths [String] One or more strings representing the URL segment(s) for this route. # # @example Defining a basic route. # class MyAPI < Grape::API # route(:any, '/hello') do # {hello: 'world'} # end # end
def namespace on_lparen UNK on_op UNK on_comma options on_op on_lbrace on_rbrace on_comma on_op block on_rparen on_ignored_nl on_ivar on_op UNK UNK # Declare a "namespace", which prefixes all subordinate routes with its # name. Any endpoints within a namespace, or group, resource, segment, # etc., will share their parent context as well as any configuration # done in the namespace context. # # @example # # namespace :foo do # get 'bar' do # # defines the endpoint: GET /foo/bar # end # end
def UNK on_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_period UNK on_lparen on_op on_symbeg UNK # An array of API routes.
def UNK on_nl UNK on_period UNK on_lparen on_op on_symbeg UNK on_rparen on_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def # Remove all defined routes.
def UNK on_lparen UNK on_comma options on_op on_lbrace on_rbrace on_comma on_op block on_rparen on_ignored_nl options on_op options on_period UNK on_nl # Thie method allows you to quickly define a parameter route segment # in your API. # # @param param [Symbol] The name of the parameter you wish to declare. # @option options [Regexp] You may supply a regular expression that the declared parameter must meet.
def UNK on_nl on_ivar on_op on_lbracket on_rbracket on_nl end on_nl end on_nl end on_nl end on_nl end on_nl EMP EMP # @return array of defined versions
