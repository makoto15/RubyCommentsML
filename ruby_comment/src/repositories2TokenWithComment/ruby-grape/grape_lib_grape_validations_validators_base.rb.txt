on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen UNK on_comma # frozen_string_literal: true
def UNK on_lparen UNK on_comma options on_comma UNK on_comma UNK on_comma UNK on_op UNK UNK on_rparen on_ignored_nl on_ivar on_op on_const # Creates a new Validator from options specified # by a +requires+ or +optional+ directive during # parameter definition. # @param attrs [Array] names of attributes to which the Validator applies # @param options [Object] implementation-dependent Validator options # @param required [Boolean] attribute(s) are required or optional # @param scope [ParamsScope] parent scope for this Validator # @param opts [Hash] additional validation options
def UNK on_lparen UNK on_rparen on_ignored_nl UNK UNK on_ivar on_period UNK on_lparen UNK on_period UNK on_rparen on_nl UNK on_lparen UNK # Validates a given request. # @note Override #validate! unless you need to access the entire request. # @param request [Grape::Request] the request currently being handled # @raise [Grape::Exceptions::Validation] if validation failed # @return [void]
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op on_const on_period UNK on_lparen UNK on_comma on_ivar on_comma UNK on_rparen on_nl UNK # Validates a given parameter hash. # @note Override #validate if you need to access the entire request. # @param params [Hash] parameters to validate # @raise [Grape::Exceptions::Validation] if validation failed # @return [void]
UNK on_op UNK UNK on_nl on_ignored_nl UNK on_period UNK UNK on_op UNK on_comma UNK on_comma UNK on_op on_ignored_nl UNK UNK # we collect errors inside array because # there may be more than one error per field
