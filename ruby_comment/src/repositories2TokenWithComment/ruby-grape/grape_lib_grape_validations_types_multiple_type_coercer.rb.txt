on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK UNK on_lparen UNK UNK UNK on_op # frozen_string_literal: true
UNK on_const on_nl UNK UNK on_lparen UNK UNK UNK on_op UNK on_rparen on_ignored_nl on_ivar on_op UNK on_period UNK on_lparen UNK # This class is intended for use with Grape endpoint parameters that # have been declared to be of variant-type using the +:types+ option. # +MultipleTypeCoercer+ will build a coercer for each type declared # in the array passed to +:types+ using {Types.build_coercer}. It will # apply these coercers to parameter values in the order given to # +:types+, and will return the value returned by the first coercer # to successfully coerce the parameter value. Therefore if +String+ is # an allowed type it should be declared last, since it will always # successfully "coerce" the value.
UNK UNK on_lparen UNK UNK UNK on_op UNK on_rparen on_ignored_nl on_ivar on_op UNK on_period UNK on_lparen UNK UNK on_rparen on_op # Construct a new coercer that will attempt to coerce # values to the given list of types in the given order. # # @param types [Array<Class>] list of allowed types # @param method [#call,#parse] method by which values should be # coerced. See class docs for default behaviour.
UNK UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op on_ivar on_period UNK on_lparen UNK on_rparen UNK on_ivar on_nl on_ignored_nl UNK on_op # Coerces the given value. # # @param val [String] value to be coerced, in grape # this should always be a string. # @return [Object,InvalidValue] the coerced result, or an instance # of {InvalidValue} if the value could not be coerced.
UNK on_op on_ivar on_period UNK on_lparen UNK on_rparen UNK on_ivar on_nl on_ignored_nl UNK on_op on_const on_period UNK on_nl on_ignored_nl on_ivar # once the value is coerced by the custom method, its type should be checked
