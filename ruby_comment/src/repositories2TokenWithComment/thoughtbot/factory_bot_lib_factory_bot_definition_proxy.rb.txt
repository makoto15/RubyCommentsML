def UNK on_lparen name on_comma on_op block on_rparen on_ignored_nl declaration on_op on_const on_op on_const on_period new on_lparen name on_comma on_ivar # Adds an attribute to the factory. # The attribute value will be generated "lazily" # by calling the block whenever an instance is generated. # The block will not be called if the # attribute is overridden for a specific instance. # # Arguments: # * name: +Symbol+ or +String+ # The name of this attribute. This will be assigned using "name=" for # generated instances.
def UNK on_lparen name on_comma on_op UNK on_comma on_op block on_rparen UNK on_op UNK on_period UNK on_nl on_ignored_nl UNK UNK # Calls add_attribute using the missing method name as the name of the # attribute, so that: # # factory :user do # name { 'Billy Idol' } # end # # and: # # factory :user do # add_attribute(:name) { 'Billy Idol' } # end # # are equivalent. # # If no argument or block is given, factory_bot will first look for an # association, then for a sequence, and finally for a trait with the same # name. This means that given an "admin" trait, an "email" sequence, and an # "account" factory: # # factory :user, traits: [:admin] do # email { generate(:email) } # association :account # end # # and: # # factory :user do # admin # email # account # end # # are equivalent.
UNK on_op UNK on_period UNK on_nl on_ignored_nl UNK UNK on_period UNK on_nl UNK on_lparen name on_comma block on_rparen on_nl UNK # rubocop:disable Style/MissingRespondToMissing, Style/MethodMissingSuper
def UNK on_lparen name on_comma on_op UNK on_comma on_op block on_rparen on_ignored_nl UNK on_op on_const on_period new on_lparen name on_comma # Adds an attribute that will have unique values generated by a sequence with # a specified format. # # The result of: # factory :user do # sequence(:email) { |n| "person#{n}@example.com" } # end # # Is equal to: # sequence(:email) { |n| "person#{n}@example.com" } # # factory :user do # email { FactoryBot.generate(:email) } # end # # Except that no globally available sequence will be defined.
def UNK on_lparen name on_comma on_op options on_rparen on_ignored_nl UNK UNK on_nl UNK on_const on_period new on_lparen on_ignored_nl UNK on_tstring_content # Adds an attribute that builds an association. The associated instance will # be built using the same build strategy as the parent instance. # # Example: # factory :user do # name 'Joey' # end # # factory :post do # association :author, factory: :user # end # # Arguments: # * name: +Symbol+ # The name of this attribute. # * options: +Hash+ # # Options: # * factory: +Symbol+ or +String+ # The name of the factory to use when building the associated instance. # If no name is given, the name of the attribute is assumed to be the # name of the factory. For example, a "user" association will by # default use the "user" factory.
def UNK on_lparen UNK on_comma UNK on_op UNK on_rparen on_ignored_nl on_ivar on_period UNK on_lparen on_const on_period new on_lparen UNK on_comma # Creates traits for enumerable values. # # Example: # factory :task do # traits_for_enum :status, [:started, :finished] # end # # Equivalent to: # factory :task do # trait :started do # status { :started } # end # # trait :finished do # status { :finished } # end # end # # Example: # factory :task do # traits_for_enum :status, {started: 1, finished: 2} # end # # Example: # class Task # def statuses # {started: 1, finished: 2} # end # end # # factory :task do # traits_for_enum :status # end # # Both equivalent to: # factory :task do # trait :started do # status { 1 } # end # # trait :finished do # status { 2 } # end # end # # # Arguments: # attribute_name: +Symbol+ or +String+ # the name of the attribute these traits will set the value of # values: +Array+, +Hash+, or other +Enumerable+ # An array of trait names, or a mapping of trait names to values for # those traits. When this argument is not provided, factory_bot will # attempt to get the values by calling the pluralized `attribute_name` # class method.
