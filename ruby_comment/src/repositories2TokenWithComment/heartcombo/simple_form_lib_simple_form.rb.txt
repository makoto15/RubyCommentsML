require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl # frozen_string_literal: true
on_cvar on_nl end on_nl on_ignored_nl on_ignored_nl mattr_accessor on_symbeg UNK on_nl on_cvar on_op on_symbeg UNK on_nl on_ignored_nl mattr_accessor on_symbeg UNK on_nl #:nodoc:
on_ignored_nl mattr_accessor on_symbeg UNK on_nl on_cvar on_op on_symbeg UNK on_nl on_ignored_nl mattr_accessor on_symbeg UNK on_nl on_cvar on_op on_symbeg UNK on_nl ## CONFIGURATION OPTIONS
mattr_accessor on_symbeg UNK on_nl on_cvar on_op on_symbeg UNK on_nl on_ignored_nl mattr_accessor on_symbeg UNK on_nl on_cvar on_op on_symbeg UNK on_nl on_ignored_nl # Method used to tidy up errors.
mattr_accessor on_symbeg UNK on_nl on_cvar on_op on_symbeg UNK on_nl on_ignored_nl mattr_accessor on_symbeg UNK on_nl on_cvar on_op on_symbeg UNK on_nl on_ignored_nl # Default tag used for error notification helper.
mattr_accessor on_symbeg UNK on_nl on_cvar on_op on_symbeg UNK on_nl on_ignored_nl mattr_accessor on_symbeg UNK on_nl on_cvar on_op UNK on_tstring_content on_words_sep on_tstring_content # CSS class to add for error notification helper.
mattr_accessor on_symbeg UNK on_nl on_cvar on_op UNK on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_tstring_end on_nl on_ignored_nl mattr_accessor on_symbeg UNK # Series of attemps to detect a default label method for collection.
mattr_accessor on_symbeg UNK on_nl on_cvar on_op UNK on_tstring_content on_words_sep on_tstring_content on_tstring_end on_nl on_ignored_nl mattr_accessor on_symbeg UNK on_nl on_cvar on_op nil # Series of attemps to detect a default value method for collection.
mattr_accessor on_symbeg UNK on_nl on_cvar on_op nil on_nl on_ignored_nl mattr_accessor on_symbeg UNK on_nl on_cvar on_op nil on_nl on_ignored_nl mattr_accessor on_symbeg # You can wrap a collection of radio/check boxes in a pre-defined tag, defaulting to none.
mattr_accessor on_symbeg UNK on_nl on_cvar on_op nil on_nl on_ignored_nl mattr_accessor on_symbeg UNK on_nl on_cvar on_op on_symbeg UNK on_nl on_ignored_nl mattr_accessor # You can define the class to use on all collection wrappers, defaulting to none.
mattr_accessor on_symbeg UNK on_nl on_cvar on_op on_symbeg UNK on_nl on_ignored_nl mattr_accessor on_symbeg UNK on_nl on_cvar on_op nil on_nl on_ignored_nl mattr_accessor # You can wrap each item in a collection of radio/check boxes with a tag, # defaulting to span. Please note that when using :boolean_style = :nested, # SimpleForm will force this option to be a :label.
mattr_accessor on_symbeg UNK on_nl on_cvar on_op nil on_nl on_ignored_nl mattr_accessor on_symbeg UNK on_nl on_cvar on_op UNK on_lparen UNK on_comma UNK # You can define the class to use on all item wrappers, defaulting to none.
mattr_accessor on_symbeg UNK on_nl on_cvar on_op UNK on_lparen UNK on_comma UNK on_comma UNK on_rparen UNK on_tstring_beg UNK UNK UNK on_tstring_content # How the label text should be generated altogether with the required text.
mattr_accessor on_symbeg UNK on_nl on_cvar on_op nil on_nl on_ignored_nl mattr_accessor on_symbeg UNK on_nl on_cvar on_op on_symbeg UNK on_nl on_ignored_nl UNK # You can define the class to be used on all labels. Defaults to none.
mattr_accessor on_symbeg UNK on_nl on_cvar on_op on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_cvar on_op on_symbeg UNK on_nl on_ignored_nl # Define the way to render check boxes / radio buttons with labels. # inline: input + label (default) # nested: label > input
UNK on_symbeg UNK on_nl on_cvar on_op on_symbeg UNK on_nl on_ignored_nl mattr_accessor on_symbeg UNK on_nl on_cvar on_op nil on_nl on_ignored_nl mattr_accessor # DEPRECATED: You can define the class to be used on all forms. Default is # simple_form.
mattr_accessor on_symbeg UNK on_nl on_cvar on_op nil on_nl on_ignored_nl mattr_accessor on_symbeg UNK on_nl on_cvar on_op UNK on_tstring_content on_words_sep on_tstring_content on_words_sep # You can define the default class to be used on all forms. Can be overriden # with `html: { :class }`. Defaults to none.
mattr_accessor on_symbeg UNK on_nl on_cvar on_op UNK on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_tstring_end on_nl on_ignored_nl mattr_accessor on_symbeg UNK on_nl on_cvar # You can define which elements should obtain additional classes.
mattr_accessor on_symbeg UNK on_nl on_cvar on_op true on_nl on_ignored_nl mattr_accessor on_symbeg UNK on_nl on_cvar on_op true on_nl on_ignored_nl mattr_accessor on_symbeg # Whether attributes are required by default or not.
mattr_accessor on_symbeg UNK on_nl on_cvar on_op true on_nl on_ignored_nl mattr_accessor on_symbeg UNK on_nl on_cvar on_op nil on_nl on_ignored_nl mattr_accessor on_symbeg # Tell browsers whether to use default HTML5 validations (novalidate option).
mattr_accessor on_symbeg UNK on_nl on_cvar on_op nil on_nl on_ignored_nl mattr_accessor on_symbeg UNK on_nl on_cvar on_op nil on_nl on_ignored_nl mattr_accessor on_symbeg # Custom mappings for input types. This should be a hash containing a regexp # to match as key, and the input type that will be used when the field name # matches the regexp as value, such as { /count/ => :integer }.
mattr_accessor on_symbeg UNK on_nl on_cvar on_op nil on_nl on_ignored_nl mattr_accessor on_symbeg UNK on_nl on_cvar on_op on_lbracket on_rbracket on_nl on_ignored_nl mattr_accessor # Custom wrappers for input types. This should be a hash containing an input # type as key and the wrapper that will be used for all inputs with specified type. # e.g { string: :string_wrapper, boolean: :boolean_wrapper } # You can also set a wrapper mapping per form basis. # e.g simple_form_for(@foo, wrapper_mappings: { check_boxes: :bootstrap_checkbox })
mattr_accessor on_symbeg UNK on_nl on_cvar on_op on_lbracket on_rbracket on_nl on_ignored_nl mattr_accessor on_symbeg UNK on_nl on_cvar on_op nil on_nl on_ignored_nl mattr_accessor # Namespaces where SimpleForm should look for custom input classes that override # default inputs. Namespaces are given as string to allow lazy loading inputs. # e.g. config.custom_inputs_namespaces << "CustomInputs" # will try to find CustomInputs::NumericInput when an :integer # field is called.
mattr_accessor on_symbeg UNK on_nl on_cvar on_op nil on_nl on_ignored_nl mattr_accessor on_symbeg UNK on_nl on_cvar on_op nil on_nl on_ignored_nl mattr_accessor on_symbeg # Default priority for time_zone inputs.
mattr_accessor on_symbeg UNK on_nl on_cvar on_op nil on_nl on_ignored_nl mattr_accessor on_symbeg UNK on_nl on_cvar on_op true on_nl on_ignored_nl mattr_accessor on_symbeg # Default priority for country inputs.
mattr_accessor on_symbeg UNK on_nl on_cvar on_op true on_nl on_ignored_nl mattr_accessor on_symbeg UNK on_nl on_cvar on_op true on_nl on_ignored_nl mattr_accessor on_symbeg # When off, do not use translations in labels. Disabling translation in # hints and placeholders can be done manually in the wrapper API.
mattr_accessor on_symbeg UNK on_nl on_cvar on_op true on_nl on_ignored_nl mattr_accessor on_symbeg UNK on_nl on_cvar on_op UNK on_lparen on_const on_period UNK # Automatically discover new inputs in Rails' autoload path.
mattr_accessor on_symbeg UNK on_nl on_cvar on_op UNK on_lparen on_const on_period UNK on_rparen on_op on_op on_const on_period UNK on_period UNK on_nl # Cache SimpleForm inputs discovery.
mattr_accessor on_symbeg UNK on_nl on_cvar on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl mattr_accessor on_symbeg UNK on_nl on_cvar on_op UNK UNK on_op # Adds a class to each generated button, mostly for compatiblity.
mattr_accessor on_symbeg UNK on_nl on_cvar on_op UNK UNK on_op UNK on_comma UNK on_op on_ignored_nl UNK on_nl end on_nl on_ignored_nl mattr_accessor # Override the default ActiveModelHelper behaviour of wrapping the input. # This gets taken care of semantically by adding an error class to the wrapper tag # containing the input.
mattr_accessor on_symbeg UNK on_nl on_cvar on_op nil on_nl on_ignored_nl mattr_accessor on_symbeg UNK on_nl on_cvar on_op true on_nl on_ignored_nl mattr_accessor on_symbeg # Adds a class to each generated inputs
mattr_accessor on_symbeg UNK on_nl on_cvar on_op true on_nl on_ignored_nl mattr_accessor on_symbeg UNK on_nl on_cvar on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl # Defines if an input wrapper class should be included or not
mattr_accessor on_symbeg UNK on_nl on_cvar on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl mattr_accessor on_symbeg UNK on_nl on_cvar on_op on_symbeg UNK on_nl # Define the default class of the input wrapper of the boolean input.
mattr_accessor on_symbeg UNK on_nl on_cvar on_op on_symbeg UNK on_nl on_cvar on_op UNK UNK on_ignored_nl mattr_accessor on_symbeg UNK on_nl on_cvar on_op ## WRAPPER CONFIGURATION # The default wrapper to be used by the FormBuilder.
on_ignored_nl mattr_accessor on_symbeg UNK on_nl on_cvar on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl mattr_accessor on_symbeg UNK on_nl on_cvar on_op nil on_nl #:nodoc:
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl on_cvar on_lbracket UNK on_period UNK on_rbracket UNK UNK on_const on_comma on_tstring_beg on_tstring_content # Retrieves a given wrapper
UNK on_const on_op on_const on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen on_op UNK on_comma on_op UNK on_rparen on_ignored_nl # Raised when fails to find a given wrapper name
def self on_period UNK on_lparen on_op UNK on_comma on_op UNK on_rparen on_ignored_nl UNK UNK on_nl options on_op UNK on_period UNK # Define a new wrapper using SimpleForm::Wrappers::Builder # and store it in the given name.
def self on_period UNK on_lparen options on_op UNK UNK on_rparen on_ignored_nl options on_lbracket on_symbeg UNK on_rbracket on_op on_symbeg UNK UNK # Builds a new wrapper using SimpleForm::Wrappers::Builder.
on_ignored_nl def self on_period UNK on_lparen on_op on_rparen on_ignored_nl on_const on_op on_const on_period UNK on_tstring_beg on_tstring_content on_tstring_end on_comma UNK on_nl ## SETUP
def self on_period UNK on_nl on_cvar on_op true on_nl UNK self on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen # Default way to setup Simple Form. Run rails generate simple_form:install # to create a fresh initializer with all configuration values.
def self on_period UNK on_lparen component on_rparen on_ignored_nl UNK on_const on_op component on_nl on_const on_op on_const on_op on_const on_period UNK # Includes a component to be used by Simple Form. Methods defined in a # component will be exposed to be used in the wrapper as Simple::Components # # Examples # # # The application needs to tell where the components will be. # Dir[Rails.root.join('lib/components/**/*.rb')].each { |f| require f } # # # Create a custom component in the path specified above. # # lib/components/input_group_component.rb # module InputGroupComponent # def prepend # ... # end # # def append # ... # end # end # # SimpleForm.setup do |config| # # Create a wrapper using the custom component. # config.wrappers :input_group, tag: :div, error_class: :error do |b| # b.use :label # b.optional :prepend # b.use :input # b.use :append # end # end # # # Using the custom component in the form. # <%= simple_form_for @blog, wrapper: input_group do |f| %> # <%= f.input :title, prepend: true %> # <% end %> #
