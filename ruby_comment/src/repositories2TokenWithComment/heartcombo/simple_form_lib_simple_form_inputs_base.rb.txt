UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK # frozen_string_literal: true
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK # Always enabled.
UNK on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen # Usually disabled, needs to be enabled explicitly passing true as option.
on_ivar on_op on_const on_period UNK on_lparen on_symbeg UNK on_rparen on_lbrace UNK on_rbrace on_nl on_ignored_nl on_ivar on_op on_ivar on_period dup on_nl # Notice that html_options_for receives a reference to input_html_classes. # This means that classes added dynamically to input_html_classes will # still propagate to input_html_options.
def UNK on_nl UNK on_op on_lparen UNK on_op UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl column on_period UNK # Add one for decimal point
def reflection_or_attribute_name on_nl on_ivar on_op UNK on_op UNK on_period UNK on_op UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK # Find reflection name when available, otherwise use attribute
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl html_options on_op options on_lbracket on_symbeg on_embexpr_beg UNK on_embexpr_end on_tstring_content on_tstring_end on_rbracket on_nl # Retrieve options for the given namespace from the options hash
def UNK on_lparen UNK on_comma UNK on_op on_tstring_beg on_tstring_end on_rparen on_ignored_nl UNK on_op UNK on_period dup on_nl lookups on_op on_lbracket # Lookup translations for the given namespace using I18n, based on object name, # actual action and attribute name. Lookup priority as follows: # # simple_form.{namespace}.{model}.{action}.{attribute} # simple_form.{namespace}.{model}.{attribute} # simple_form.{namespace}.defaults.{attribute} # # Namespace is used for :labels and :hints. # # Model is the actual object name, for a @user object you'll have :user. # Action is the action being rendered, usually :new or :edit. # And attribute is the attribute itself, :name for example. # # The lookup for nested attributes is also done in a nested format using # both model and nested object names, such as follow: # # simple_form.{namespace}.{model}.{nested}.{action}.{attribute} # simple_form.{namespace}.{model}.{nested}.{attribute} # simple_form.{namespace}.{nested}.{action}.{attribute} # simple_form.{namespace}.{nested}.{attribute} # simple_form.{namespace}.defaults.{attribute} # # Example: # # simple_form: # labels: # user: # new: # email: 'E-mail para efetuar o sign in.' # edit: # email: 'E-mail.' # # Take a look at our locale example file.
