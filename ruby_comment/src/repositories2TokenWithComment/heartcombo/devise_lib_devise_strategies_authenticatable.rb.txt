on_ignored_nl UNK UNK on_tstring_content UNK on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_symbeg # frozen_string_literal: true
UNK on_const on_op on_const on_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl def UNK on_nl UNK # This strategy should be used as basis for authentication strategies. It retrieves # parameters both from params or from http authorization headers. See database_authenticatable # for an example.
def UNK on_nl UNK on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl def UNK on_lparen resource on_comma on_op UNK on_rparen on_ignored_nl # Override and set to false for things like OmniAuth that technically # run through Authentication (user_set) very often, which would normally # reset CSRF data in the session
def UNK on_lparen resource on_comma on_op UNK on_rparen on_ignored_nl UNK on_op resource on_op resource on_period UNK on_lparen on_op UNK on_rparen # Receives a resource and check if it is valid by calling valid_for_authentication? # A block that will be triggered while validating can be optionally # given as parameter. Check Devise::Models::Authenticatable.valid_for_authentication? # for more information. # # In case the resource can't be validated, it will fail with the given # unauthenticated_message.
def UNK on_lparen resource on_rparen on_ignored_nl resource on_period UNK on_op UNK UNK resource on_period UNK on_lparen on_symbeg UNK on_rparen on_nl # Get values from params and set in the resource.
def UNK on_nl UNK on_op on_const on_op on_const on_period UNK on_lparen UNK on_lbracket on_symbeg UNK on_rbracket on_rparen on_nl end on_nl # Should this resource be marked to be remembered?
def UNK on_nl UNK on_op UNK on_period UNK on_op UNK on_lparen on_symbeg UNK on_comma UNK on_rparen on_nl end on_nl on_ignored_nl # Check if this is a valid strategy for http authentication by: # # * Validating if the model allows http authentication; # * If any of the authorization headers were sent; # * If all authentication keys are present; #
def UNK on_nl UNK on_op UNK on_op on_ignored_nl UNK on_op UNK on_lparen on_symbeg UNK on_comma UNK on_rparen on_nl end on_nl # Check if this is a valid strategy for params authentication by: # # * Validating if the model allows params authentication; # * If the request hits the sessions controller through POST; # * If the params[scope] returns a hash with credentials; # * If all authentication keys are present; #
def UNK on_nl mapping on_period to on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl mapping on_period # Check if the model accepts this strategy as http authenticatable.
def UNK on_nl mapping on_period to on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_lbracket # Check if the model accepts this strategy as params authenticatable.
def UNK on_nl UNK on_lbracket UNK on_rbracket on_nl end on_nl on_ignored_nl def UNK on_nl keys on_op on_lbracket UNK on_comma on_symbeg # Extract the appropriate subhash for authentication from params.
def UNK on_nl keys on_op on_lbracket UNK on_comma on_symbeg UNK on_rbracket on_nl on_const on_lbracket on_op keys on_period UNK on_lparen UNK # Extract a hash with attributes:values from the http params.
def UNK on_nl on_op on_op UNK on_lbracket UNK on_tstring_content UNK on_rbracket on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_period # By default, a request is valid if the controller set the proper env variable.
def UNK on_nl UNK on_period UNK on_lparen on_const on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_period UNK on_nl # If the request is valid, finally check if params_auth_hash returns a hash.
def UNK on_nl UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_lbracket on_rbracket UNK UNK on_period UNK # Note: unlike `Model.valid_password?`, this method does not actually # ensure that the password in the params matches the password stored in # the database. It only checks if the password is *present*. Do not rely # on this method for validating that a given password is correct.
def UNK on_nl UNK on_lbracket on_rbracket UNK UNK on_period UNK on_op UNK on_period UNK on_op UNK on_tstring_content UNK on_nl on_const # Helper to decode credentials from HTTP.
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl self on_period UNK on_comma self on_period UNK on_op UNK UNK on_comma UNK # Sets the authentication hash and the password from params_auth_hash or http_auth_hash.
def UNK on_nl UNK on_op on_ignored_nl on_const on_op on_const on_period UNK on_lparen self on_period UNK on_period UNK on_period UNK on_lparen # Holds the authenticatable name for this class. Devise::Strategies::DatabaseAuthenticatable # becomes simply :database.
