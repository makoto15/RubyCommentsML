on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const # frozen_string_literal: true
UNK on_const on_nl UNK on_const on_op on_const on_nl on_ignored_nl on_const on_op on_lbracket on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK # Authenticatable module. Holds common settings for authentication. # # == Options # # Authenticatable adds the following options to devise_for: # # * +authentication_keys+: parameters used for authentication. By default [:email]. # # * +http_authentication_key+: map the username passed via HTTP Auth to this parameter. Defaults to # the first element in +authentication_keys+. # # * +request_keys+: parameters from the request object used for authentication. # By specifying a symbol (which should be a request method), it will automatically be # passed to find_for_authentication method and considered in your model lookup. # # For instance, if you set :request_keys to [:subdomain], :subdomain will be considered # as key on authentication. This can also be a hash where the value is a boolean specifying # if the value is required or not. # # * +http_authenticatable+: if this model allows http authentication. By default false. # It also accepts an array specifying the strategies that should allow http. # # * +params_authenticatable+: if this model allows authentication through request params. By default true. # It also accepts an array specifying the strategies that should allow params authentication. # # * +skip_session_storage+: By default Devise will store the user in session. # By default is set to skip_session_storage: [:http_auth]. # # == active_for_authentication? # # After authenticating a user and in each request, Devise checks if your model is active by # calling model.active_for_authentication?. This method is overwritten by other devise modules. For instance, # :confirmable overwrites .active_for_authentication? to only return true if your model was confirmed. # # You can overwrite this method yourself, but if you do, don't forget to call super: # # def active_for_authentication? # super && special_condition_is_valid? # end # # Whenever active_for_authentication? returns false, Devise asks the reason why your model is inactive using # the inactive_message method. You can overwrite it as well: # # def inactive_message # special_condition_is_valid? ? super : :special_condition_is_not_valid # end #
def UNK on_nl UNK on_op UNK on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_symbeg UNK on_nl end on_nl # Check if the current object is valid for authentication. This method and # find_for_authentication are the methods used in a Warden::Strategy to check # if a model should be signed in or not. # # However, you should not overwrite this method, you should overwrite active_for_authentication? # and inactive_message instead.
def UNK on_lparen options on_op UNK on_rparen on_ignored_nl options on_op options on_period UNK on_lparen on_symbeg UNK on_rparen on_op on_lbrace on_rbrace # Redefine serializable_hash in models for more secure defaults. # By default, it removes from the serializable model all attributes that # are *not* accessible. You can remove this default by using :force_except # and passing a new list of attributes you want to exempt. All attributes # given to :except will simply add names to exempt to Devise internal list.
def UNK on_nl UNK on_op UNK on_period UNK UNK on_op k on_comma UNK on_op on_ignored_nl on_tstring_beg on_embexpr_beg k on_embexpr_end on_tstring_content # Redefine inspect using serializable_hash, to ensure we don't accidentally # leak passwords into exceptions.
def UNK on_lparen UNK on_comma on_op UNK on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_lparen UNK on_comma self on_comma on_op # This is an internal method called every time Devise needs # to send a notification/mail. This can be overridden if you # need to customize the e-mail delivery logic. For instance, # if you are using a queue to deliver e-mails (active job, delayed # job, sidekiq, resque, etc), you must add the delivery to the queue # just after the transaction was committed. To achieve this, # you can override send_devise_notification to store the # deliveries until the after_commit callback is triggered. # # The following example uses Active Job's `deliver_later` : # # class User # devise :database_authenticatable, :confirmable # # after_commit :send_pending_devise_notifications # # protected # # def send_devise_notification(notification, *args) # # If the record is new or changed then delay the # # delivery until the after_commit callback otherwise # # send now because after_commit will not be called. # # For Rails < 6 is `changed?` instead of `saved_changes?`. # if new_record? || saved_changes? # pending_devise_notifications << [notification, args] # else # render_and_send_devise_message(notification, *args) # end # end # # private # # def send_pending_devise_notifications # pending_devise_notifications.each do |notification, args| # render_and_send_devise_message(notification, *args) # end # # # Empty the pending notifications array because the # # after_commit hook can be called multiple times which # # could cause multiple emails to be sent. # pending_devise_notifications.clear # end # # def pending_devise_notifications # @pending_devise_notifications ||= [] # end # # def render_and_send_devise_message(notification, *args) # message = devise_mailer.send(notification, self, *args) # # # Deliver later with Active Job's `deliver_later` # if message.respond_to?(:deliver_later) # message.deliver_later # # Remove once we move to Rails 4.2+ only, as `deliver` is deprecated. # elsif message.respond_to?(:deliver_now) # message.deliver_now # else # message.deliver # end # end # # end #
UNK UNK on_period UNK on_lparen on_symbeg UNK on_rparen on_nl UNK on_period UNK on_nl UNK on_ignored_nl UNK on_period UNK on_nl end # Remove once we move to Rails 4.2+ only.
UNK UNK on_lparen attr on_rparen on_op UNK on_lparen on_tstring_beg on_embexpr_beg attr on_embexpr_end on_tstring_content on_tstring_end on_rparen on_nl UNK on_op UNK on_lparen # Use respond_to? here to avoid a regression where globally # configured strip_whitespace_keys or case_insensitive_keys were # attempting to strip or downcase when a model didn't have the # globally configured key.
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_comma UNK # Find first record based on conditions given (ie by the sign in form). # This method is always called during an authentication process but # it may be wrapped as well. For instance, database authenticatable # provides a `find_for_database_authentication` that wraps a call to # this method. This allows you to customize both database authenticatable # or the whole authenticate stack by customize `find_for_authentication.` # # Overwrite to add customized conditions, create a join, or maybe use a # namedscope to filter records while authenticating. # Example: # # def self.find_for_authentication(tainted_conditions) # find_first_by_auth_conditions(tainted_conditions, active: true) # end # # Finally, notice that Devise also queries for users in other scenarios # besides authentication, for example when retrieving a user to send # an e-mail for password reset. In such cases, find_for_authentication # is not called.
def UNK on_lparen UNK on_comma UNK on_comma UNK on_op on_symbeg UNK on_rparen UNK on_lparen on_lbracket UNK on_rbracket on_comma on_lbrace UNK # Find or initialize a record setting an error if it can't be found.
UNK on_lparen on_lbracket UNK on_rbracket on_comma on_lbrace UNK on_op UNK on_rbrace on_comma UNK on_rparen on_nl end on_nl on_ignored_nl def UNK #:nodoc:
def UNK on_lparen UNK on_comma attributes on_comma UNK on_op on_symbeg UNK on_rparen attributes on_period UNK on_lparen on_symbeg UNK on_rparen on_nl # Find or initialize a record with group of attributes based on a list of required attributes.
attributes on_period UNK on_lparen on_symbeg UNK on_rparen on_nl attributes on_op attributes on_period UNK on_period UNK on_ignored_nl on_period UNK on_lparen on_op #:nodoc:
