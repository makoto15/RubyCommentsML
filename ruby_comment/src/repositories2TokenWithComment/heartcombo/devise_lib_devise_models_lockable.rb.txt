on_ignored_nl UNK UNK UNK UNK on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const # frozen_string_literal: true
UNK on_const on_nl UNK on_const on_op on_const on_nl on_ignored_nl UNK on_symbeg lock_strategy_enabled? on_comma on_symbeg unlock_strategy_enabled? on_comma UNK UNK UNK UNK # Handles blocking a user access after a certain number of attempts. # Lockable accepts two different strategies to unlock a user after it's # blocked: email and time. The former will send an email to the user when # the lock happens, containing a link to unlock its account. The second # will unlock the user automatically after some configured time (ie 2.hours). # It's also possible to set up lockable to use both email and time strategies. # # == Options # # Lockable adds the following options to +devise+: # # * +maximum_attempts+: how many attempts should be accepted before blocking the user. # * +lock_strategy+: lock the user account by :failed_attempts or :none. # * +unlock_strategy+: unlock the user account by :time, :email, :both or :none. # * +unlock_in+: the time you want to lock the user after to lock happens. Only available when unlock_strategy is :time or :both. # * +unlock_keys+: the keys you want to use when locking and unlocking an account #
def UNK on_lparen UNK on_op UNK UNK on_rparen on_ignored_nl self on_period locked_at on_op on_const on_period UNK on_period UNK on_nl on_ignored_nl # Lock a user setting its locked_at to actual time. # * +opts+: Hash options if you don't want to send email # when you lock access, you could pass the next hash # `{ send_instructions: false } as option`.
def UNK on_nl self on_period locked_at on_op UNK on_nl self on_period failed_attempts on_op UNK if UNK on_lparen on_symbeg UNK on_rparen # Unlock a user by cleaning locked_at and failed_attempts.
def access_locked? on_nl on_op on_op locked_at on_op on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_comma UNK on_op # Verifies whether a user is locked or not.
def UNK on_nl UNK on_comma UNK on_op on_const on_period UNK on_period UNK on_lparen self on_period class on_comma on_symbeg unlock_token on_rparen # Send unlock instructions by email
def UNK on_nl UNK UNK UNK UNK on_nl end on_nl on_ignored_nl def UNK on_nl super on_op on_op access_locked? on_nl end # Resend the unlock instructions if the user is locked.
def UNK on_nl super on_op on_op access_locked? on_nl end on_nl on_ignored_nl def UNK on_nl access_locked? on_op on_symbeg UNK on_op super # Overwrites active_for_authentication? from Devise::Models::Activatable for locking purposes # by verifying whether a user is active to sign in or not based on locked?
def UNK on_nl access_locked? on_op on_symbeg UNK on_op super on_nl end on_nl on_ignored_nl def UNK on_nl UNK super UNK UNK # Overwrites invalid_message from Devise::Models::Authenticatable to define # the correct reason for blocking the sign in.
def UNK on_nl UNK super UNK UNK on_op lock_strategy_enabled? on_lparen on_symbeg failed_attempts on_rparen on_nl on_ignored_nl UNK if UNK on_nl on_ignored_nl # Overwrites valid_for_authentication? from Devise::Models::Authenticatable # for verifying whether a user is allowed to sign in or not. If the user # is locked, it should never be allowed.
UNK if UNK on_nl on_ignored_nl if super on_op on_op access_locked? on_nl UNK on_nl else on_ignored_nl UNK on_nl if UNK on_nl # Unlock the user if the lock is expired, no matter # if the user can login or not (wrong password, etc)
if on_const on_period UNK on_nl super on_nl UNK access_locked? on_op on_lparen lock_strategy_enabled? on_lparen on_symbeg failed_attempts on_rparen on_op UNK on_rparen on_nl # If set to paranoid mode, do not show the locked message because it # leaks the existence of an account.
def UNK on_nl if unlock_strategy_enabled? on_lparen on_symbeg UNK on_rparen on_nl locked_at on_op locked_at on_op self on_period class on_period UNK on_period # Tells if the lock is expired if :time unlock strategy is active
def UNK on_nl if access_locked? on_nl UNK on_nl else on_ignored_nl self on_period UNK on_period UNK on_lparen on_const on_period UNK on_period # Checks whether the record is locked or not, yielding to the block # if it's locked, otherwise adds an error to email.
on_const on_op UNK on_symbeg UNK on_comma on_symbeg UNK UNK on_nl on_ignored_nl def UNK on_lparen attributes on_op UNK UNK on_rparen on_ignored_nl # List of strategies that are enabled/supported if :both is used.
def UNK on_lparen attributes on_op UNK UNK on_rparen on_ignored_nl lockable on_op UNK on_lparen UNK on_comma attributes on_comma on_symbeg UNK on_rparen # Attempt to find a user by its unlock keys. If a record is found, send new # unlock instructions to it. If not user is found, returns a new user # with an email not found error. # Options must contain the user's unlock keys
def UNK on_lparen unlock_token on_rparen on_ignored_nl UNK on_op unlock_token on_nl unlock_token on_op on_const on_period UNK on_period UNK on_lparen self on_comma # Find a user by its unlock token and try to unlock it. # If no user is found, returns a new user with an error. # If the user is not locked, creates an error for the user # Options must have the unlock_token
def unlock_strategy_enabled? on_lparen UNK on_rparen on_ignored_nl self on_period UNK on_op UNK on_op on_ignored_nl on_lparen self on_period UNK on_op on_symbeg UNK # Is the unlock enabled for the given unlock strategy?
def lock_strategy_enabled? on_lparen UNK on_rparen on_ignored_nl self on_period UNK on_op UNK on_nl end on_nl on_ignored_nl on_const on_op on_const on_period UNK # Is the lock enabled for the given lock strategy?
