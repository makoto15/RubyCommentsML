on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl on_ignored_nl UNK UNK on_ignored_nl UNK # frozen_string_literal: true
UNK on_const on_nl UNK on_const on_op on_const on_nl on_ignored_nl UNK UNK on_ignored_nl UNK on_symbeg UNK on_comma on_symbeg warden on_nl end # `Devise::Test::ControllerHelpers` provides a facility to test controllers # in isolation when using `ActionController::TestCase` allowing you to # quickly sign_in or sign_out a user. Do not use # `Devise::Test::ControllerHelpers` in integration tests. # # Examples # # class PostsTest < ActionController::TestCase # include Devise::Test::ControllerHelpers # # test 'authenticated users can GET index' do # sign_in users(:bob) # # get :index # assert_response :success # end # end # # Important: you should not test Warden specific behavior (like callbacks) # using `Devise::Test::ControllerHelpers` since it is a stub of the actual # behavior. Such callbacks should be tested in your integration suite instead.
def UNK on_lparen on_op on_rparen on_ignored_nl UNK UNK UNK UNK on_nl on_ignored_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_ivar # Override process to consider warden.
def UNK on_ivar on_period env on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op on_ivar on_nl end on_nl on_ignored_nl def warden on_ivar on_period # We need to set up the environment variables and the response in the controller.
on_ivar on_period env on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op on_ivar on_nl end on_nl on_ignored_nl def warden on_ivar on_period env on_lbracket #:nodoc:
def warden on_ivar on_period env on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op UNK on_ignored_nl UNK on_op on_const on_op on_const on_period UNK # Quick access to Warden::Proxy.
on_ivar on_period env on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op UNK on_ignored_nl UNK on_op on_const on_op on_const on_period UNK on_lparen UNK #:nodoc:
def UNK on_lparen UNK on_comma UNK on_op UNK on_comma UNK UNK on_rparen on_ignored_nl UNK UNK on_period UNK on_nl scope on_op # sign_in a given resource by storing its keys in the session. # This method bypass any warden authentication callback. # # * +resource+ - The resource that should be authenticated # * +scope+ - An optional +Symbol+ with the scope where the resource # should be signed in with. # Examples: # # sign_in users(:alice) # sign_in users(:alice), scope: :admin
def UNK on_lparen UNK on_rparen on_ignored_nl scope on_op on_const on_op on_const on_period UNK on_lparen UNK on_rparen on_nl on_ivar on_period UNK # Sign out a given resource or scope by calling logout on Warden. # This method bypass any warden logout callback. # # Examples: # # sign_out :user # sign_out(scope) # sign_out @user # sign_out(resource) #
def UNK on_lparen on_op UNK on_rparen on_ignored_nl result on_op UNK on_lparen on_symbeg warden on_comma on_op UNK on_rparen on_nl on_ignored_nl env # Catch warden continuations and handle like the middleware would. # Returns nil when interrupted, otherwise the normal result of the block.
UNK result on_nl UNK on_const on_nl UNK result on_period UNK on_op UNK on_op UNK on_lparen env on_rparen UNK on_lparen env # Set the response. In production, the rack result is returned # from Warden::Manager#call, which the following is modelled on.
UNK on_lparen env on_rparen on_nl UNK on_ignored_nl result on_nl end on_nl UNK on_const on_nl UNK on_lparen env on_comma result on_rparen # does this happen during testing?
end on_nl on_ignored_nl UNK UNK on_period UNK on_lparen on_const on_rparen on_nl status on_comma headers on_comma body on_op on_op UNK on_nl # causes process return @response
UNK UNK on_period UNK on_lparen on_const on_rparen on_nl status on_comma headers on_comma body on_op on_op UNK on_nl on_ivar on_period response # ensure that the controller response is set up. In production, this is # not necessary since warden returns the results to rack. However, at # testing time, we want the response to be available to the testing # framework to verify what would be returned to rack.
on_ivar on_period response on_op on_ivar on_nl on_ivar on_period status on_op status on_nl on_ivar on_period headers on_period UNK on_lparen headers on_rparen # ensure the controller response is set to our response.
