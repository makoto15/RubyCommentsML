on_ignored_nl UNK UNK UNK UNK on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const # frozen_string_literal: true
UNK on_const on_nl UNK on_const on_op on_const on_nl on_ignored_nl UNK UNK on_ignored_nl UNK on_symbeg send_email_changed_notification on_comma UNK on_symbeg UNK on_nl # Authenticatable Module, responsible for hashing the password and # validating the authenticity of a user while signing in. # # This module defines a `password=` method. This method will hash the argument # and store it in the `encrypted_password` column, bypassing any pre-existing # `password` column if it exists. # # == Options # # DatabaseAuthenticatable adds the following options to devise_for: # # * +pepper+: a random string used to provide a more secure hash. Use # `rails secret` to generate new keys. # # * +stretches+: the cost given to bcrypt. # # * +send_email_changed_notification+: notify original email when it changes. # # * +send_password_change_notification+: notify email when password changes. # # == Examples # # User.find(1).valid_password?('password123') # returns true/false #
def UNK on_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl # Skips sending the email changed notification after_update
def UNK on_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_symbeg # Skips sending the password change notification after_update
def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl self on_period UNK on_op UNK on_lparen on_ivar on_rparen if on_ivar # Generates a hashed password based on the given value. # For legacy reasons, we use `encrypted_password` to store # the hashed password.
def UNK on_lparen password on_rparen on_ignored_nl on_const on_op on_const on_period UNK on_lparen self on_period class on_comma UNK on_comma password on_rparen # Verifies whether a password (ie from sign in) is the user password.
def UNK on_nl self on_period password on_op self on_period UNK on_op UNK on_nl end on_nl on_ignored_nl def UNK on_lparen params # Set password and password confirmation to nil
def UNK on_lparen params on_comma on_op options on_rparen on_ignored_nl if options on_period UNK on_nl on_const on_op on_const on_period UNK UNK # Update record attributes when :current_password matches, otherwise # returns error on :current_password. # # This method also rejects the password field if it is blank (allowing # users to change relevant information like the e-mail without changing # their password). In case the password field is rejected, the confirmation # is also rejected as long as it is also blank.
def UNK on_lparen params on_comma on_op options on_rparen on_ignored_nl if options on_period UNK on_nl on_const on_op on_const on_period UNK UNK # Updates record attributes without asking for the current password. # Never allows a change to the current password. If you are using this # method, you should probably override this method to protect other # attributes you would not like to be updated without a password. # # Example: # # def update_without_password(params, *options) # params.delete(:email) # super(params) # end #
def UNK on_lparen current_password on_rparen on_ignored_nl result on_op if UNK on_lparen current_password on_rparen on_nl UNK on_nl UNK on_ignored_nl UNK on_nl # Destroy record when :current_password matches, otherwise returns # error on :current_password. It also automatically rejects # :current_password if it is blank.
def UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK UNK UNK on_comma UNK UNK if UNK on_nl end on_nl # A callback initiated after successfully authenticating. This can be # used to insert your own logic that is only run after the user successfully # authenticates. # # Example: # # def after_database_authentication # self.update_attribute(:invite_code, nil) # end #
def UNK on_nl UNK UNK UNK on_comma UNK UNK if UNK on_nl end on_nl on_ignored_nl if on_const on_period UNK on_nl # A reliable way to expose the salt regardless of the implementation.
def send_email_changed_notification on_nl UNK on_lparen on_symbeg UNK on_comma UNK UNK on_rparen on_nl end on_nl UNK on_ignored_nl def send_email_changed_notification on_nl UNK # Send notification to user when email changes.
def send_email_changed_notification on_nl UNK on_lparen on_symbeg UNK on_comma UNK UNK on_rparen on_nl end on_nl end on_nl on_ignored_nl def UNK on_nl # Send notification to user when email changes.
def UNK on_nl UNK on_lparen on_symbeg UNK on_rparen on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl def UNK on_lparen password on_rparen # Send notification to user when password changes.
def UNK on_lparen password on_rparen on_ignored_nl on_const on_op on_const on_period UNK on_lparen self on_period class on_comma password on_rparen on_nl end # Hashes the password using bcrypt. Custom hash functions should override # this method to apply their own algorithm. # # See https://github.com/heartcombo/devise-encryptable for examples # of other hashing engines.
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_lparen UNK on_rparen on_nl end on_nl end on_nl end on_nl end on_nl end # We assume this method already gets the sanitized values from the # DatabaseAuthenticatable strategy. If you are using this method on # your own, be sure to sanitize the conditions hash to only include # the proper fields.
