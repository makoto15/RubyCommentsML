on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl on_ignored_nl UNK UNK on_ignored_nl UNK # frozen_string_literal: true
UNK on_const on_nl UNK on_const on_op on_const on_nl on_ignored_nl UNK UNK on_ignored_nl UNK on_symbeg UNK on_comma on_label on_symbeg UNK on_nl # Confirmable is responsible to verify if an account is already confirmed to # sign in, and to send emails with confirmation instructions. # Confirmation instructions are sent to the user email after creating a # record and when manually requested by a new confirmation instruction request. # # Confirmable tracks the following columns: # # * confirmation_token - A unique random token # * confirmed_at - A timestamp when the user clicked the confirmation link # * confirmation_sent_at - A timestamp when the confirmation_token was generated (not sent) # * unconfirmed_email - An email address copied from the email attr. After confirmation # this value is copied to the email attr then cleared # # == Options # # Confirmable adds the following options to +devise+: # # * +allow_unconfirmed_access_for+: the time you want to allow the user to access their account # before confirming it. After this period, the user access is denied. You can # use this to let your user access some features of your application without # confirming the account, but blocking it after a certain period (ie 7 days). # By default allow_unconfirmed_access_for is zero, it means users always have to confirm to sign in. # * +reconfirmable+: requires any email changes to be confirmed (exactly the same way as # initial account confirmation) to be applied. Requires additional unconfirmed_email # db field to be set up (t.reconfirmable in migrations). Until confirmed, new email is # stored in unconfirmed email column, and copied to email column on successful # confirmation. Also, when used in conjunction with `send_email_changed_notification`, # the notification is sent to the original email when the change is requested, # not when the unconfirmed email is confirmed. # * +confirm_within+: the time before a sent confirmation token becomes invalid. # You can use this to force the user to confirm within a set period of time. # Confirmable will not generate a new token if a repeat confirmation is requested # during this time frame, unless the user's email changed too. # # == Examples # # User.find(1).confirm # returns true unless it's already confirmed # User.find(1).confirmed? # true/false # User.find(1).send_confirmation_instructions # manually send instructions #
UNK on_symbeg UNK on_comma on_label on_symbeg UNK on_comma on_label on_symbeg UNK on_nl UNK on_symbeg UNK on_comma on_label on_symbeg UNK on_comma # ActiveRecord
UNK on_symbeg UNK on_comma on_label on_symbeg UNK on_nl UNK on_symbeg UNK on_comma on_label on_symbeg UNK on_nl end on_nl UNK on_symbeg # Mongoid
def UNK on_lparen UNK on_op on_lbrace on_rbrace on_rparen on_ignored_nl UNK UNK on_ignored_nl if UNK on_nl self on_period UNK on_period UNK # Confirm a user by setting it's confirmed_at to actual time. If the user # is already confirmed, add an error to email field. If the user is invalid # add errors
UNK on_lparen on_label true on_rparen on_nl else on_ignored_nl UNK on_lparen on_label UNK UNK on_symbeg UNK UNK on_op true on_rparen on_nl # We need to validate in such cases to enforce e-mail uniqueness
def UNK on_nl on_op on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl self on_period class on_period reconfirmable on_op unconfirmed_email # Verifies whether a user is confirmed or not
def UNK on_nl UNK on_ivar on_nl UNK on_nl end on_nl on_ignored_nl UNK on_op UNK on_op on_lbrace on_label unconfirmed_email on_rbrace on_op # Send confirmation instructions by email
def UNK on_nl UNK UNK on_ignored_nl UNK on_nl end on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op on_lparen on_op # Resend confirmation token. # Regenerates the token if the period is expired.
def UNK on_nl UNK on_op on_lparen on_op UNK on_op UNK on_op UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl # Overwrites active_for_authentication? for confirmation # by verifying whether a user is active to sign in or not. If the user # is already confirmed, it should never be blocked. Otherwise we need to # calculate if the confirm time has not expired for this user.
def UNK on_nl on_op UNK on_op on_symbeg UNK on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl self on_period UNK # The message to be shown if the account is inactive.
def UNK on_nl self on_period UNK on_op on_const on_period UNK on_period utc on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar # If you don't want confirmation to be sent on create, neither a code # to be generated, call skip_confirmation!
def UNK on_nl on_ivar on_op true on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op true on_nl end on_nl on_ignored_nl # Skips sending the confirmation/reconfirmation notification email after_create/after_update. Unlike # #skip_confirmation!, record still requires confirmation.
def UNK on_nl on_ivar on_op true on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl def UNK on_nl on_ivar on_op true on_nl # If you don't want reconfirmation to be sent, neither a code # to be generated, call skip_reconfirmation!
def UNK on_nl on_ivar on_op true on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK # To not require reconfirmation after creating with #save called in a # callback call skip_create_confirmation!
def UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl # A callback method used to deliver confirmation # instructions on creation. This can be overridden # in models to map to a nice sign up e-mail.
def UNK on_nl on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK true if self on_period class on_period UNK # Callback to overwrite if confirmation is required or not.
def UNK on_nl UNK true if self on_period class on_period UNK on_period UNK on_nl UNK false if self on_period class # Checks if the confirmation for the user is within the limit time. # We do this by calculating if the difference between today and the # confirmation sent date does not exceed the confirm in time configured. # allow_unconfirmed_access_for is a model configuration, must always be an integer value. # # Example: # # # allow_unconfirmed_access_for = 1.day and confirmation_sent_at = today # confirmation_period_valid? # returns true # # # allow_unconfirmed_access_for = 5.days and confirmation_sent_at = 4.days.ago # confirmation_period_valid? # returns true # # # allow_unconfirmed_access_for = 5.days and confirmation_sent_at = 5.days.ago # confirmation_period_valid? # returns false # # # allow_unconfirmed_access_for = 0.days # confirmation_period_valid? # will always return false # # # allow_unconfirmed_access_for = nil # confirmation_period_valid? # will always return true #
def UNK on_nl self on_period class on_period UNK on_op self on_period confirmation_sent_at on_op on_lparen on_const on_period UNK on_period utc on_op # Checks if the user confirmation happens before the token becomes invalid # Examples: # # # confirm_within = 3.days and confirmation_sent_at = 2.days.ago # confirmation_period_expired? # returns false # # # confirm_within = 3.days and confirmation_sent_at = 4.days.ago # confirmation_period_expired? # returns true # # # confirm_within = nil # confirmation_period_expired? # will always return false #
def UNK on_nl if on_lparen on_op UNK on_op UNK on_rparen on_nl UNK on_nl else on_ignored_nl self on_period UNK on_period UNK # Checks whether the record requires any confirmation.
def UNK on_nl if self on_period confirmation_token on_op on_op UNK on_nl on_ivar on_op self on_period confirmation_token on_nl else on_ignored_nl self # Generates a new random token for confirmation, and stores # the time this token is being generated in confirmation_sent_at
def UNK on_nl if self on_period class on_period reconfirmable on_nl self on_period class on_period UNK on_op UNK on_nl else on_ignored_nl # With reconfirmable, notify the original email when the user first # requests the email change, instead of when the change is confirmed.
def UNK on_nl end on_nl on_ignored_nl UNK on_const on_nl def UNK on_lparen attributes on_op on_lbrace on_rbrace on_rparen on_ignored_nl confirmable on_op # A callback initiated after successfully confirming. This can be # used to insert your own logic that is only run after the user successfully # confirms. # # Example: # # def after_confirmation # self.update_attribute(:invite_code, nil) # end #
def UNK on_lparen attributes on_op on_lbrace on_rbrace on_rparen on_ignored_nl confirmable on_op UNK on_lparen attributes on_rparen if reconfirmable on_nl UNK confirmable # Attempt to find a user by its email. If a record is found, send new # confirmation instructions to it. If not, try searching for a user by unconfirmed_email # field. If no user is found, returns a new user with an email not found error. # Options must contain the user email
def UNK on_lparen confirmation_token on_rparen on_ignored_nl if confirmation_token on_period UNK on_nl confirmable on_op UNK on_nl confirmable on_period UNK on_period UNK # Find a user by its confirmation token and try to confirm it. # If no user is found, returns a new user with an error. # If the user is already confirmed, create an error for the user # Options must have the confirmation_token
if confirmation_token on_period UNK on_nl confirmable on_op UNK on_nl confirmable on_period UNK on_period UNK on_lparen on_symbeg confirmation_token on_comma on_symbeg UNK # When the `confirmation_token` parameter is blank, if there are any users with a blank # `confirmation_token` in the database, the first one would be confirmed here. # The error is being manually added here to ensure no users are confirmed by mistake. # This was done in the model for convenience, since validation errors are automatically # displayed in the view.
on_ignored_nl confirmable on_period UNK if confirmable on_period UNK on_nl confirmable on_nl end on_nl on_ignored_nl def UNK on_lparen attributes on_op on_lbrace # TODO: replace above lines with # confirmable = find_or_initialize_with_error_by(:confirmation_token, confirmation_token) # after enough time has passed that Devise clients do not use digested tokens
def UNK on_lparen attributes on_op on_lbrace on_rbrace on_rparen on_ignored_nl attributes on_op attributes on_period UNK on_lparen on_op UNK on_rparen on_period UNK # Find a record for confirmation by unconfirmed email field
