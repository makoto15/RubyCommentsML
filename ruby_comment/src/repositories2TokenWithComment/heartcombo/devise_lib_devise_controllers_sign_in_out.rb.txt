on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl def UNK on_lparen scope on_op UNK on_rparen on_ignored_nl UNK scope # frozen_string_literal: true
UNK on_const on_nl def UNK on_lparen scope on_op UNK on_rparen on_ignored_nl UNK scope on_op on_const on_period UNK on_period UNK UNK # Provide sign in and sign out functionality. # Included by default in all controllers.
def UNK on_lparen scope on_op UNK on_rparen on_ignored_nl UNK scope on_op on_const on_period UNK on_period UNK UNK on_period UNK on_period # Return true if the given scope is signed in session. If no scope given, return # true if any scope is signed in. This will run authentication hooks, which may # cause exceptions to be thrown from this method; if you simply want to check # if a scope has already previously been authenticated without running # authentication hooks, you can directly call `warden.authenticated?(scope: scope)`
def UNK on_lparen resource_or_scope on_comma on_op UNK on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_nl scope on_op on_const on_op on_const # Sign in a user that already was authenticated. This helper is useful for logging # users in after sign up. All options given to sign_in is passed forward # to the set_user method in warden. # If you are using a custom warden strategy and the timeoutable module, you have to # set `env["devise.skip_timeout"] = true` in the request to use this method, like we do # in the sessions controller: https://github.com/heartcombo/devise/blob/master/app/controllers/devise/sessions_controller.rb#L7 # # Examples: # # sign_in :user, @user # sign_in(scope, resource) # sign_in @user # sign_in(resource) # sign_in @user, event: :authentication # sign_in(resource, options) # sign_in @user, store: false # sign_in(resource, options) #
UNK on_nl UNK on_ignored_nl warden on_period UNK on_lparen resource on_comma UNK on_period UNK on_lparen on_label scope on_rparen on_rparen on_nl end # Do nothing. User already signed in and we are not forcing it.
def UNK on_lparen resource on_comma on_label UNK on_rparen on_ignored_nl scope on_op on_const on_op on_const on_period UNK on_lparen resource on_rparen on_nl # Sign in a user bypassing the warden callbacks and stores the user # straight in session. This option is useful in cases the user is already # signed in, but we want to refresh the credentials in session. # # Examples: # # bypass_sign_in @user, scope: :user # bypass_sign_in @user
def UNK on_lparen resource_or_scope on_op UNK on_rparen on_ignored_nl UNK UNK UNK resource_or_scope on_nl scope on_op on_const on_op on_const on_period UNK # Sign out a given user or scope. This helper is useful for signing out a user # after deleting accounts. Returns true if there was a logout and false if there # is no user logged in on the referred scope # # Examples: # # sign_out :user # sign_out(scope) # sign_out @user # sign_out(resource) #
on_ignored_nl warden on_period UNK on_lparen scope on_rparen on_nl warden on_period UNK on_lparen on_label scope on_rparen on_nl UNK on_lparen UNK UNK # If there is no user
def UNK on_lparen UNK on_op UNK on_rparen on_ignored_nl UNK on_op on_const on_period UNK on_period UNK on_period UNK UNK on_op UNK # Sign out all active users or scopes. This helper is useful for signing out all roles # in one click. This signs out ALL scopes in warden. Returns true if there was at least one logout # and false if there was no user logged in on all scopes.
UNK on_period UNK on_nl UNK on_period UNK on_period UNK on_lparen UNK UNK UNK on_rparen on_period UNK UNK on_op UNK on_op # session.keys will return an empty array if the session is not yet loaded. # This is a bug in both Rack and Rails. # A call to #empty? forces the session to be loaded.
