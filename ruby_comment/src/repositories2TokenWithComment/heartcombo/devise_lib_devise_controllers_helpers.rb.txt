on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_op on_const on_op # frozen_string_literal: true
UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_op on_const on_op on_const on_nl UNK on_const on_op on_const on_op # Those helpers are convenience methods added to ApplicationController.
def UNK on_lparen group_name on_comma UNK on_op UNK UNK on_rparen on_ignored_nl mappings on_op on_tstring_beg on_tstring_content on_embexpr_beg UNK on_lbracket on_symbeg UNK # Define authentication filters and accessor helpers for a group of mappings. # These methods are useful when you are working with multiple mappings that # share some functionality. They are pretty much the same as the ones # defined for normal mappings. # # Example: # # inside BlogsController (or any other controller, it doesn't matter which): # devise_group :blogger, contains: [:user, :admin] # # Generated methods: # authenticate_blogger! # Redirects unless user or admin are signed in # blogger_signed_in? # Checks whether there is either a user or an admin signed in # current_blogger # Currently signed in user or admin # current_bloggers # Currently signed in user and admin # # Use: # before_action :authenticate_blogger! # Redirects unless either a user or an admin are authenticated # before_action ->{ authenticate_blogger! :admin } # Redirects to the admin login page # current_blogger :user # Preferably returns a User if one is signed in #
def UNK on_period UNK on_lparen mapping on_rparen mapping on_op mapping on_period UNK on_nl on_ignored_nl UNK UNK on_comma UNK on_comma UNK # Define authentication filters and accessor helpers based on mappings. # These filters should be used inside the controllers as before_actions, # so you can control the scope of the user who should be signed in to # access that specific controller/action. # Example: # # Roles: # User # Admin # # Generated methods: # authenticate_user! # Signs user in or redirect # authenticate_admin! # Signs admin in or redirect # user_signed_in? # Checks whether there is a user signed in or not # admin_signed_in? # Checks whether there is an admin signed in or not # current_user # Current signed in user # current_admin # Current signed in admin # user_session # Session data available only to the user scope # admin_session # Session data available only to the admin scope # # Use: # before_action :authenticate_user! # Tell devise to use :user map # before_action :authenticate_admin! # Tell devise to use :admin map #
mapping on_op mapping on_period UNK on_nl on_ignored_nl UNK UNK on_comma UNK on_comma UNK on_op UNK on_nl on_tstring_content on_embexpr_beg mapping on_embexpr_end #:nodoc:
def UNK on_nl UNK on_period UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket UNK UNK on_const on_nl end on_nl on_ignored_nl def UNK # The main accessor for the warden proxy instance
def UNK on_nl UNK on_lparen on_op on_const on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op on_const on_op on_const # Return true if it's a devise_controller. false to all controllers unless # the controllers defined inside devise. Useful if you want to apply a before # filter to all controllers, except the ones in devise: # # before_action :my_filter, unless: :devise_controller?
def UNK on_nl UNK on_op on_const on_op on_const on_period UNK on_lparen UNK on_comma UNK on_comma UNK on_rparen on_nl end on_nl # Set up a param sanitizer to filter parameters using strong_parameters. See # lib/devise/parameter_sanitizer.rb for more info. Override this # method in your application controller to use your own parameter sanitizer.
def UNK on_nl UNK on_period UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op UNK on_nl end on_nl on_ignored_nl def UNK on_lparen # Tell warden that params authentication is allowed for that specific page.
def UNK on_lparen resource_or_scope on_rparen on_ignored_nl scope on_op on_const on_op on_const on_period UNK on_lparen resource_or_scope on_rparen on_nl router_name on_op on_const # The scope root url to be used when they're signed in. By default, it first # tries to find a resource_root_path, otherwise it uses the root_path.
def UNK on_lparen resource_or_scope on_rparen on_ignored_nl UNK on_lparen resource_or_scope on_rparen on_op UNK on_lparen resource_or_scope on_rparen on_nl end on_nl on_ignored_nl def # The default url to be used after signing in. This is used by all Devise # controllers and you can overwrite it in your ApplicationController to # provide a custom hook for a custom resource. # # By default, it first tries to find a valid resource_return_to key in the # session, then it fallbacks to resource_root_path, otherwise it uses the # root path. For a user scope, you can define the default url in # the following way: # # get '/users' => 'users#index', as: :user_root # creates user_root_path # # namespace :user do # root 'users#index' # creates user_root_path # end # # If the resource root path is not defined, root_path is used. However, # if this default is not enough, you can customize it, for example: # # def after_sign_in_path_for(resource) # stored_location_for(resource) || # if resource.is_a?(User) && resource.can_publish? # publisher_url # else # super # end # end #
def UNK on_lparen resource_or_scope on_rparen on_ignored_nl scope on_op on_const on_op on_const on_period UNK on_lparen resource_or_scope on_rparen on_nl router_name on_op on_const # Method used by sessions controller to sign out a user. You can overwrite # it in your ApplicationController to provide a custom hook for a custom # scope. Notice that differently from +after_sign_in_path_for+ this method # receives a symbol with the scope, and not the resource. # # By default it is the root_path.
def UNK on_lparen resource_or_scope on_comma on_op UNK on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_nl scope on_op on_const on_op on_const # Sign in a user and tries to redirect first to the stored location and # then to the url specified by after_sign_in_path_for. It accepts the same # parameters as the sign_in method.
def UNK on_lparen resource_or_scope on_rparen on_ignored_nl scope on_op on_const on_op on_const on_period UNK on_lparen resource_or_scope on_rparen on_nl UNK on_op UNK # Sign out a user and tries to redirect to the url specified by # after_sign_out_path_for.
def UNK on_nl UNK UNK on_period UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op UNK on_nl UNK on_lparen UNK on_rparen on_nl # Overwrite Rails' handle unverified request to sign out all scopes, # clear run strategies and remove cached variables.
UNK on_period UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op UNK on_nl UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl def # call the default behaviour which resets/nullifies/raises
def UNK on_nl UNK on_period respond_to? on_lparen on_symbeg UNK on_rparen on_op UNK on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl def # Check if flash messages should be emitted. Default is to do it on # navigational formats
