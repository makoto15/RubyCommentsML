on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_period UNK UNK on_op config on_op on_ignored_nl # frozen_string_literal: true
UNK on_period UNK UNK on_op config on_op on_ignored_nl config on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl # Assuming you have not yet modified this file, each configuration option below # is set to its default value. Note that some are commented out while others # are not: uncommented lines are intended to protect your configuration from # breaking changes in upgrades (i.e., in the event that future versions of # Devise change the default values for those options). # # Use this hook to configure devise mailer, warden hooks and so forth. The first # four configuration values can also be set straight in your models.
config on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl on_ignored_nl config on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK # ==> Mailer Configuration # Configure the e-mail address which will be shown in Devise::Mailer, # note that it will be overwritten if you use your own mailer class with default "from" parameter.
on_ignored_nl UNK on_tstring_beg on_tstring_content UNK UNK UNK on_tstring_end on_nl on_ignored_nl on_ignored_nl on_ignored_nl config on_period UNK on_op UNK on_symbeg UNK UNK # Configure the class responsible to send e-mails. # config.mailer = "Devise::Mailer"
UNK on_tstring_beg on_tstring_content UNK UNK UNK on_tstring_end on_nl on_ignored_nl on_ignored_nl on_ignored_nl config on_period UNK on_op UNK on_symbeg UNK UNK on_nl # ==> ORM configuration # Load and configure the ORM. Supports :active_record (default) and # :mongoid (bson_ext recommended) by default. Other ORMs may be # available as additional gems.
on_ignored_nl on_ignored_nl config on_period UNK on_op UNK on_symbeg UNK UNK on_nl on_ignored_nl config on_period UNK on_op UNK on_symbeg UNK UNK # ==> Configuration for any authentication mechanism # Configure which keys are used when authenticating a user. By default is # just :email. You can configure it to use [:username, :subdomain], so for # authenticating a user, both parameters are required. Remember that those # parameters are used only when authenticating and not when retrieving from # session. If you need permissions, you should implement that in a before filter. # You can also supply hash where the value is a boolean expliciting if authentication # should be aborted or not if the value is not present. By default is empty. # config.authentication_keys = [:email]
on_ignored_nl config on_period UNK on_op UNK on_symbeg UNK UNK on_nl on_ignored_nl config on_period UNK on_op UNK on_symbeg UNK UNK on_nl # Configure parameters from the request object used for authentication. Each entry # given should be a request method and it will automatically be passed to # find_for_authentication method and considered in your model lookup. For instance, # if you set :request_keys to [:subdomain], :subdomain will be used on authentication. # The same considerations mentioned for authentication_keys also apply to request_keys. # config.request_keys = []
config on_period UNK on_op UNK on_symbeg UNK UNK on_nl on_ignored_nl config on_period UNK on_op UNK on_symbeg UNK UNK on_nl on_ignored_nl # Configure which authentication keys should be case-insensitive. # These keys will be downcased upon creating or modifying a user and when used # to authenticate or find a user. Default is :email.
config on_period UNK on_op UNK on_symbeg UNK UNK on_nl on_ignored_nl on_ignored_nl config on_period UNK on_op UNK on_nl on_ignored_nl on_ignored_nl on_ignored_nl # Configure which authentication keys should have whitespace stripped. # These keys will have whitespace before and after removed upon creating or # modifying a user and when used to authenticate or find a user. Default is :email.
on_ignored_nl config on_period UNK on_op UNK on_nl on_ignored_nl on_ignored_nl on_ignored_nl config on_period UNK on_op UNK on_period UNK on_period UNK on_op # Tell if authentication through request.params is enabled. True by default. # config.params_authenticatable = true
config on_period UNK on_op UNK on_nl on_ignored_nl on_ignored_nl on_ignored_nl config on_period UNK on_op UNK on_period UNK on_period UNK on_op UNK # Tell if authentication through HTTP Basic Auth is enabled. False by default.
on_ignored_nl on_ignored_nl config on_period UNK on_op UNK on_period UNK on_period UNK on_op UNK on_op UNK on_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl # If http headers should be returned for AJAX requests. True by default. # config.http_authenticatable_on_xhr = true
on_ignored_nl config on_period UNK on_op UNK on_period UNK on_period UNK on_op UNK on_op UNK on_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl # The realm used in Http Basic Authentication. "Application" by default. # config.http_authentication_realm = "Application"
config on_period UNK on_op UNK on_period UNK on_period UNK on_op UNK on_op UNK on_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl # ==> Configuration for :database_authenticatable # For bcrypt, this is the cost for hashing the password and defaults to 10. If # using other encryptors, it sets how many times you want the password re-encrypted.
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl config on_period UNK on_op UNK on_period UNK # ==> Configuration for :confirmable # The time you want to give your user to confirm their account. During this time # they will be able to access your application without confirming. Default is nil. # When allow_unconfirmed_access_for is zero, the user won't be able to sign in without confirming. # You can use this to let your user access some features of your application # without confirming the account, but blocking it after a certain period # (ie 2 days). # config.allow_unconfirmed_access_for = 2.days
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl config on_period UNK on_op UNK on_period UNK on_nl # Defines which key will be used when confirming an account # config.confirmation_keys = [:email]
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl config on_period UNK on_op UNK on_period UNK on_nl on_ignored_nl # ==> Configuration for :rememberable # The time the user will be remembered without asking for credentials again. # config.remember_for = 2.weeks
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl config on_period UNK on_op UNK on_period UNK on_nl on_ignored_nl on_ignored_nl # If true, extends the user's remember period when remembered via cookie. # config.extend_remember_period = false
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl config on_period UNK on_op UNK on_period UNK on_nl on_ignored_nl on_ignored_nl config # ==> Configuration for :validatable # Range for password length. Default is 8..72. # config.password_length = 8..72
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl config on_period UNK on_op UNK on_period UNK on_nl on_ignored_nl on_ignored_nl config on_period # Regex to use to validate the email address # config.email_regexp = /^([\w\.%\+\-]+)@([\w\-]+\.)+([\w]{2,})$/i
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl config on_period UNK on_op UNK on_period UNK on_nl on_ignored_nl on_ignored_nl config on_period UNK # ==> Configuration for :timeoutable # The time you want to timeout the user session without activity. After this # time the user will be asked for credentials again. Default is 30 minutes. # config.timeout_in = 30.minutes
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl config on_period UNK on_op UNK on_period UNK on_nl on_ignored_nl on_ignored_nl config on_period UNK on_op # ==> Configuration for :lockable # Defines which strategy will be used to lock an account. # :failed_attempts = Locks an account after a number of failed attempts to sign in. # :none = No lock strategy. You should handle locking by yourself. # config.lock_strategy = :failed_attempts
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl config on_period UNK on_op UNK on_period UNK on_nl on_ignored_nl on_ignored_nl config on_period UNK on_op on_tstring_beg # Defines which key will be used when locking and unlocking an account # config.unlock_keys = [:email]
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl config on_period UNK on_op UNK on_period UNK on_nl on_ignored_nl on_ignored_nl config on_period UNK on_op on_tstring_beg on_tstring_content # Defines which strategy will be used to unlock an account. # :email = Sends an unlock link to the user email # :time = Re-enables login after a certain amount of time (see :unlock_in below) # :both = Enables both strategies # :none = No unlock strategy. You should handle unlocking by yourself. # config.unlock_strategy = :both
on_ignored_nl on_ignored_nl on_ignored_nl config on_period UNK on_op UNK on_period UNK on_nl on_ignored_nl on_ignored_nl config on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end # Number of authentication tries before locking an account if lock_strategy # is failed attempts. # config.maximum_attempts = 20
on_ignored_nl on_ignored_nl config on_period UNK on_op UNK on_period UNK on_nl on_ignored_nl on_ignored_nl config on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl # Time interval to unlock the account if :time is enabled as unlock_strategy. # config.unlock_in = 1.hour
on_ignored_nl config on_period UNK on_op UNK on_period UNK on_nl on_ignored_nl on_ignored_nl config on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl # ==> Configuration for :recoverable # # Defines which key will be used when recovering the password for an account # config.reset_password_keys = [:email]
config on_period UNK on_op UNK on_period UNK on_nl on_ignored_nl on_ignored_nl config on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl on_ignored_nl # Time interval you can reset your password with a reset password key. # Don't put a too small interval or your users won't have the time to # change their passwords.
on_ignored_nl config on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl config on_period UNK on_symbeg UNK # When set to false, does not sign a user in automatically after their password is # reset. Defaults to true, so a user is signed in automatically after a reset. # config.sign_in_after_reset_password = true
config on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl config on_period UNK on_symbeg UNK UNK # Set up a pepper to generate the encrypted password.
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl config on_period UNK on_symbeg UNK UNK on_tstring_beg on_tstring_content on_tstring_end UNK on_tstring_beg on_tstring_content on_tstring_end UNK UNK # ==> Scopes configuration # Turn scoped views on. Before rendering "sessions/new", it will first check for # "users/sessions/new". It's turned off by default because it's slower if you # are using only default views. # config.scoped_views = false
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl config on_period UNK on_symbeg UNK UNK on_tstring_beg on_tstring_content on_tstring_end UNK on_tstring_beg on_tstring_content on_tstring_end UNK UNK on_tstring_beg # Configure the default scope given to Warden. By default it's the first # devise role declared in your routes (usually :user). # config.default_scope = :user
on_ignored_nl on_ignored_nl on_ignored_nl config on_period UNK on_symbeg UNK UNK on_tstring_beg on_tstring_content on_tstring_end UNK on_tstring_beg on_tstring_content on_tstring_end UNK UNK on_tstring_beg on_tstring_content # Configure sign_out behavior. # Sign_out action can be scoped (i.e. /users/sign_out affects only :user scope). # The default is true, which means any logout action will sign out all active scopes. # config.sign_out_all_scopes = true
on_ignored_nl on_ignored_nl config on_period UNK on_symbeg UNK UNK on_tstring_beg on_tstring_content on_tstring_end UNK on_tstring_beg on_tstring_content on_tstring_end UNK UNK on_tstring_beg on_tstring_content on_tstring_end # ==> Navigation configuration # Lists the formats that should be treated as navigational. Formats like # :html, should redirect to the sign in page when the user does not have # access, but formats like :xml or :json, should return 401. # If you have any extra navigational formats, like :iphone or :mobile, you # should add them to the navigational formats lists. Default is [:html] # config.navigational_formats = [:html, :iphone]
on_ignored_nl config on_period UNK on_symbeg UNK UNK on_tstring_beg on_tstring_content on_tstring_end UNK on_tstring_beg on_tstring_content on_tstring_end UNK UNK on_tstring_beg on_tstring_content on_tstring_end on_nl # The default HTTP method used to sign out a resource. Default is :get. # config.sign_out_via = :get
config on_period UNK on_symbeg UNK UNK on_tstring_beg on_tstring_content on_tstring_end UNK on_tstring_beg on_tstring_content on_tstring_end UNK UNK on_tstring_beg on_tstring_content on_tstring_end on_nl config # ==> OmniAuth
on_ignored_nl on_ignored_nl on_ignored_nl UNK on_period UNK UNK on_symbeg UNK UNK UNK on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK UNK on_nl # ==> Warden configuration # If you want to use other strategies, that are not supported by Devise, or # change the failure app, you can configure them inside the config.warden block. # # config.warden do |manager| # manager.failure_app = AnotherApp # manager.default_strategies(scope: :user).unshift :some_external_strategy # end
on_ignored_nl on_ignored_nl UNK on_period UNK UNK on_symbeg UNK UNK UNK on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK UNK on_nl UNK # ==> Configuration for :registerable
on_ignored_nl UNK on_period UNK UNK on_symbeg UNK UNK UNK on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK UNK on_nl UNK on_nl # When set to false, does not sign a user in automatically after their password is # changed. Defaults to true, so a user is signed in automatically after changing a password. # config.sign_in_after_change_password = true
