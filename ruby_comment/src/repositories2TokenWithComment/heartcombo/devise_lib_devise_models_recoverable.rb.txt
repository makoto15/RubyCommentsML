on_ignored_nl UNK on_const on_nl UNK on_const on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_op on_const on_nl on_ignored_nl def self on_period # frozen_string_literal: true
UNK on_const on_nl UNK on_const on_op on_const on_nl on_ignored_nl def self on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_symbeg UNK # Recoverable takes care of resetting the user password and send reset instructions. # # ==Options # # Recoverable adds the following options to devise_for: # # * +reset_password_keys+: the keys you want to use when recovering the password for an account # * +reset_password_within+: the time period within which the password must be reset or the token expires. # * +sign_in_after_reset_password+: whether or not to sign in the user automatically after a password reset. # # == Examples # # # resets the user password and save the record, true if valid passwords are given, otherwise false # User.find(1).reset_password('password123', 'password123') # # # creates a new token and send it with instructions about how to reset the password # User.find(1).send_reset_password_instructions #
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl if UNK on_period UNK on_nl self on_period UNK on_op UNK on_nl self # Update password saving the record and clearing token. Returns true if # the passwords are valid and the record was saved, false otherwise.
def UNK on_nl token on_op UNK on_nl UNK on_lparen token on_rparen on_nl on_ignored_nl token on_nl end on_nl on_ignored_nl def UNK # Resets reset password token and send reset password instructions by email. # Returns the token sent in the e-mail.
def UNK on_nl UNK on_op UNK on_period UNK on_op self on_period UNK on_period UNK on_period UNK on_period UNK on_nl end # Checks if the reset password token sent is within the limit time. # We do this by calculating if the difference between today and the # sending date does not exceed the confirm in time configured. # Returns true if the resource is not responding to reset_password_sent_at at all. # reset_password_within is a model configuration, must always be an integer value. # # Example: # # # reset_password_within = 1.day and reset_password_sent_at = today # reset_password_period_valid? # returns true # # # reset_password_within = 5.days and reset_password_sent_at = 4.days.ago # reset_password_period_valid? # returns true # # # reset_password_within = 5.days and reset_password_sent_at = 5.days.ago # reset_password_period_valid? # returns false # # # reset_password_within = 0.days # reset_password_period_valid? # will always return false #
def UNK on_nl self on_period reset_password_token on_op UNK on_nl self on_period UNK on_op UNK on_nl end on_nl on_ignored_nl def UNK # Removes reset_password token
def UNK on_lparen token on_rparen on_ignored_nl reset_password_token on_op on_const on_period UNK on_period UNK on_lparen self on_comma on_symbeg reset_password_token on_comma token # Attempt to find a user by password reset token. If a user is found, return it # If a user is not found, return nil
def UNK on_lparen attributes on_op UNK UNK on_rparen on_ignored_nl recoverable on_op UNK on_lparen UNK on_comma attributes on_comma on_symbeg UNK on_rparen # Attempt to find a user by its email. If a record is found, send new # password instructions to it. If user is not found, returns a new user # with an email not found error. # Attributes must contain the user's email
def UNK on_lparen attributes on_op UNK UNK on_rparen on_ignored_nl UNK on_op attributes UNK on_symbeg reset_password_token UNK on_nl reset_password_token on_op on_const # Attempt to find a user by its reset_password_token to reset its # password. If a user is found and token is still valid, reset its password and automatically # try saving the record. If not user is found, returns a new user # containing an error in reset_password_token attribute. # Attributes must contain reset_password_token, password and confirmation
