on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl # frozen_string_literal: true
UNK on_const on_nl UNK on_const on_op on_const on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl def self on_period UNK on_lparen UNK # Rememberable manages generating and clearing token for remembering the user # from a saved cookie. Rememberable also has utility methods for dealing # with serializing the user into the cookie and back from the cookie, trying # to lookup the record based on the saved information. # You probably wouldn't use rememberable methods directly, they are used # mostly internally for handling the remember token. # # == Options # # Rememberable adds the following options in devise_for: # # * +remember_for+: the time you want the user will be remembered without # asking for credentials. After this time the user will be blocked and # will have to enter their credentials again. This configuration is also # used to calculate the expires time for the cookie created to remember # the user. By default remember_for is 2.weeks. # # * +extend_remember_period+: if true, extends the user's remember period # when remembered via cookie. False by default. # # * +rememberable_options+: configuration options passed to the created cookie. # # == Examples # # User.find(1).remember_me! # regenerating the token # User.find(1).forget_me! # clearing the token # # # generating info to put into cookies # User.serialize_into_cookie(user) # # # lookup the user based on the incoming cookie information # User.serialize_from_cookie(cookie_string)
def UNK on_nl UNK UNK UNK on_nl self on_period remember_token on_op UNK if UNK on_lparen on_symbeg remember_token on_rparen on_nl self # If the record is persisted, remove the remember token (but only if # it exists), and save the record without validations.
def UNK on_nl end on_nl on_ignored_nl def UNK on_lparen token on_comma generated_at on_rparen on_ignored_nl if generated_at on_period UNK on_lparen on_const # A callback initiated after successfully being remembered. This can be # used to insert your own logic that is only run after the user is # remembered. # # Example: # # def after_remembered # self.update_attribute(:invite_code, nil) # end #
if generated_at on_period UNK on_lparen on_const on_rparen on_nl generated_at on_op UNK on_lparen generated_at on_rparen on_nl end on_nl on_ignored_nl generated_at on_period # TODO: Normalize the JSON type coercion along with the Timeoutable hook # in a single place https://github.com/heartcombo/devise/blob/ffe9d6d406e79108cf32a2c6a1d0b3828849c40b/lib/devise/hooks/timeoutable.rb#L14-L18
generated_at on_period UNK on_lparen on_const on_rparen on_op on_ignored_nl on_lparen self on_period class on_period UNK on_period UNK on_op generated_at on_rparen on_op # The token is only valid if: # 1. we have a date # 2. the current time does not pass the expiry period # 3. the record has a remember_created_at date # 4. the token date is bigger than the remember_created_at # 5. the token matches
def UNK on_lparen record on_rparen on_ignored_nl UNK record on_period UNK on_comma record on_period UNK on_comma on_const on_period UNK on_period UNK # Create the cookie key using the record id and remember_token
def UNK on_lparen on_op UNK on_rparen on_ignored_nl UNK on_comma token on_comma generated_at on_op on_op UNK on_nl on_ignored_nl record on_op UNK # Recreate the user based on the stored cookie
def remember_token UNK UNK on_ignored_nl token on_op on_const on_period UNK on_nl UNK token UNK UNK on_period UNK on_lparen UNK UNK # Generate a token checking if one does not already exist in the database.
UNK UNK on_ignored_nl token on_op on_const on_period UNK on_nl UNK token UNK UNK on_period UNK on_lparen UNK UNK token UNK #:nodoc:
