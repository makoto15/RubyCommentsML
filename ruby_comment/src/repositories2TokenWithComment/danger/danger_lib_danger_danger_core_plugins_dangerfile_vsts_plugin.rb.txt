on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_op on_const on_nl def UNK on_period UNK on_lparen # coding: utf-8
UNK on_const on_op on_const on_nl def UNK on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK UNK UNK UNK on_period UNK on_period # Handles interacting with VSTS inside a Dangerfile. Provides a few functions which wrap `pr_json` and also # through a few standard functions to simplify your code. # # @example Warn when a PR is classed as work in progress # # warn "PR is classed as Work in Progress" if vsts.pr_title.include? "[WIP]" # # @example Declare a PR to be simple to avoid specific Danger rules # # declared_trivial = (vsts.pr_title + vsts.pr_body).include?("#trivial") # # @example Ensure there is a summary for a PR # # failure "Please provide a summary in the Pull Request description" if vsts.pr_body.length < 5 # # @example Only accept PRs to the develop branch # # failure "Please re-submit this PR to develop, we may have already fixed your issue." if vsts.branch_for_base != "develop" # # @example Highlight when a celebrity makes a pull request # # message "Welcome, Danger." if vsts.pr_author == "dangermcshane" # # @example Ensure that all PRs have an assignee # # warn "This PR does not have any assignees yet." unless vsts.pr_json["reviewers"].length == 0 # # @example Send a message with links to a collection of specific files # # if git.modified_files.include? "config/*.js" # config_files = git.modified_files.select { |path| path.include? "config/" } # message "This PR changes #{ vsts.markdown_link(config_files) }" # end # # @example Highlight with a clickable link if a Package.json is changed # # warn "#{vsts.markdown_link("Package.json")} was edited." if git.modified_files.include? "Package.json" # # @example Note an issue with a particular line on a file using the #L[num] syntax, e.g. `#L23` # # linter_json = `my_linter lint "file"` # results = JSON.parse linter_json # unless results.empty? # file, line, warning = result.first # warn "#{vsts.markdown_link("#{file}#L#{line}")} has linter issue: #{warning}." # end # # # @see danger/danger # @tags core, vsts #
def UNK on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK UNK UNK UNK on_period UNK on_period UNK on_period UNK on_op on_const # So that this init can fail.
def UNK on_period UNK on_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_lparen # The instance name used in the Dangerfile # @return [String] #
def pr_json on_nl on_ivar on_period pr_json on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period pr_json on_lbracket on_symbeg UNK on_rbracket # @!group VSTS Misc # The hash that represents the PR's JSON. For an example of what this looks like # see the [Danger Fixture'd one](https://raw.githubusercontent.com/danger/danger/master/spec/fixtures/vsts_api/pr_response.json). # @return [Hash]
def UNK on_nl on_ivar on_period pr_json on_lbracket on_symbeg UNK on_rbracket on_period to_s on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar # @!group PR Metadata # The title of the Pull Request. # @return [String] #
def UNK on_nl on_ivar on_period pr_json on_lbracket on_symbeg UNK on_rbracket on_period to_s on_nl end on_nl UNK UNK UNK on_nl on_ignored_nl # @!group PR Metadata # The body text of the Pull Request. # @return [String] #
def UNK on_nl on_ivar on_period pr_json on_lbracket on_symbeg UNK on_rbracket on_lbracket on_symbeg UNK on_rbracket on_period to_s on_nl end on_nl on_ignored_nl # @!group PR Metadata # The username of the author of the Pull Request. # @return [String] #
def UNK on_nl UNK on_lparen on_symbeg UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op on_ivar on_period pr_json # @!group PR Commit Metadata # The branch to which the PR is going to be merged into. # @return [String] #
def UNK on_nl UNK on_op on_ivar on_period pr_json on_lbracket on_symbeg UNK on_rbracket on_lbracket on_symbeg UNK on_rbracket on_period to_s on_nl UNK # @!group PR Commit Metadata # A href that represents the current PR # @return [String] #
def UNK on_nl UNK on_lparen on_symbeg UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period pr_json on_lbracket on_symbeg # @!group PR Commit Metadata # The branch to which the PR is going to be merged from. # @return [String] #
def UNK on_nl on_ivar on_period pr_json on_lbracket on_symbeg UNK on_rbracket on_lbracket on_symbeg UNK on_rbracket on_period to_s on_nl end on_nl on_ignored_nl # @!group PR Commit Metadata # The base commit to which the PR is going to be merged as a parent. # @return [String] #
def UNK on_nl on_ivar on_period pr_json on_lbracket on_symbeg UNK on_rbracket on_lbracket on_symbeg UNK on_rbracket on_period to_s on_nl end on_nl on_ignored_nl # @!group PR Commit Metadata # The head commit to which the PR is requesting to be merged from. # @return [String] #
def UNK on_lparen paths UNK UNK UNK on_rparen on_ignored_nl paths on_op on_lbracket paths on_rbracket UNK paths on_period UNK on_lparen on_const # @!group VSTS Misc # Returns a list of Markdown links for a file, or files in the head repository. # It returns a string of multiple links if passed an array. # @param [String or Array<String>] paths # A list of strings to convert to Markdown links # @param [Bool] full_path # Shows the full path as the link's text, defaults to `true`. # # @return [String] #
