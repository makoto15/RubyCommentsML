UNK on_const on_op on_const on_op on_const on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_const on_op on_const on_period UNK on_lparen # This might be a bit weird, but table_kind_from_title is a shared dependency for # parsing and generating. And rubocop was adamant about file size so...
def UNK on_lparen message on_comma UNK on_rparen on_ignored_nl on_tstring_beg on_embexpr_beg message on_period UNK on_embexpr_end on_tstring_content on_embexpr_beg message on_period UNK on_embexpr_end # !@group Extension points # Produces a markdown link to the file the message points to # # request_source implementations are invited to override this method with their # vendor specific link. # # @param [Violation or Markdown] message # @param [Bool] Should hide any generated link created # # @return [String] The Markdown compatible link
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK on_op UNK on_nl end on_nl on_ignored_nl def UNK on_lparen violation on_comma # !@group Extension points # Determine whether two messages are equivalent # # request_source implementations are invited to override this method. # This is mostly here to enable sources to detect when inlines change only in their # commit hash and not in content per-se. since the link is implementation dependant # so should be the comparison. # # @param [Violation or Markdown] m1 # @param [Violation or Markdown] m2 # # @return [Boolean] whether they represent the same message
UNK on_op UNK on_lbracket UNK on_op on_op UNK on_rbracket UNK UNK on_period UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_period UNK # Remove the outer `<p>`, the -5 represents a newline + `</p>`
on_ivar on_op UNK on_nl on_ivar on_op UNK on_period UNK on_lparen on_op UNK message on_rparen on_nl on_ivar on_op UNK on_nl on_ivar # erb: http://www.rrn.dk/rubys-erb-templating-system # for the extra args: http://stackoverflow.com/questions/4632879/erb-template-removing-the-trailing-line
def UNK on_lparen on_label on_comma on_ignored_nl on_label on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_label on_lbracket on_rbracket on_comma on_ignored_nl on_label on_tstring_beg on_tstring_content # resolved is essentially reserved for future use - eventually we might # have some nice generic resolved-thing going :)
on_ivar on_op UNK on_nl on_ivar on_op UNK on_nl UNK on_op template on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_end # cheating a bit - I don't want to alter the apply_template API # so just sneak around behind its back setting some instance variables # to get them to show up in the template
