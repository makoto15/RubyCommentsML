on_ignored_nl UNK on_const on_op on_const on_nl def UNK on_period UNK on_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK # A way to interact with Danger herself. Offering APIs to import plugins, # and Dangerfiles from multiple sources. # # @example Import a plugin available over HTTP # # device_grid = "https://raw.githubusercontent.com/fastlane/fastlane/master/danger-device_grid/lib/device_grid/plugin.rb" # danger.import_plugin(device_grid) # # @example Import from a local file reference # # danger.import_plugin("danger/plugins/watch_plugin.rb") # # @example Import all files inside a folder # # danger.import_plugin("danger/plugins/*.rb") # # @example Run a Dangerfile from inside a sub-folder # # danger.import_dangerfile(path: "path/to/Dangerfile") # # @example Run a Dangerfile from inside a gem # # danger.import_dangerfile(gem: "ruby-grape-danger") # # @example Run a Dangerfile from inside a repo # # danger.import_dangerfile(gitlab_project_id: 1345) # # @example Run a Dangerfile from inside a repo branch and path # # danger.import_dangerfile(github: "ruby-grape/danger", branch: "custom", path: "path/to/Dangerfile") # # @see danger/danger # @tags core, plugins
def UNK on_period UNK on_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_lparen path_or_url on_rparen on_ignored_nl raise on_tstring_beg # The instance name used in the Dangerfile # @return [String] #
def UNK on_lparen path_or_url on_rparen on_ignored_nl raise on_tstring_beg on_tstring_content on_tstring_end unless path_or_url on_period kind_of? on_lparen on_const on_rparen on_nl on_ignored_nl UNK # @!group Danger # Download a local or remote plugin and make it usable inside the Dangerfile. # # @param [String] path_or_url # a local path or a https URL to the Ruby file to import # a danger plugin from. # @return [void] #
def UNK on_lparen opts on_rparen on_ignored_nl UNK opts on_period kind_of? on_lparen on_const on_rparen on_nl UNK on_tstring_beg on_tstring_content UNK opts UNK # @!group Danger # Import a Dangerfile. # # @param [Hash] opts # @option opts [String] :github GitHub repo # @option opts [String] :gitlab GitLab repo # @option opts [String] :gem Gem name # @option opts [String] :path Path to Dangerfile # @return [void]
def UNK on_nl UNK on_symbeg UNK unless UNK on_period UNK on_nl on_ignored_nl UNK UNK on_period UNK on_nl UNK on_const on_op # @!group Danger # Returns the name of the current SCM Provider being used. # @return [Symbol] The name of the SCM Provider used for the active repository.
def UNK on_lparen path on_rparen on_ignored_nl raise on_tstring_beg on_tstring_content on_tstring_end unless path on_period kind_of? on_lparen on_const on_rparen on_nl local_path on_op # @!group Danger # Read and execute a local Dangerfile. # # @param [String] path # A path to a Dangerfile. # @return [void] #
def UNK on_lparen UNK on_rparen on_ignored_nl raise on_tstring_beg on_tstring_content on_tstring_end unless UNK on_period kind_of? on_lparen on_const on_rparen on_nl UNK on_op # @!group Danger # Read and execute a Dangerfile from a gem. # # @param [String] name # The name of the gem that contains a Dangerfile. # @return [void] #
def UNK on_lparen UNK on_comma branch on_op UNK on_comma path on_op UNK on_rparen on_ignored_nl raise on_tstring_beg on_tstring_content on_tstring_end unless UNK # @!group Danger # Download and execute a remote Dangerfile. # # @param [String] slug # A slug that represents the repo where the Dangerfile is. # @param [String] branch # A branch from repo where the Dangerfile is. # @param [String] path # The path at the repo where Dangerfile is. # @return [void] #
def UNK on_lparen UNK on_comma branch on_op UNK on_comma path on_op UNK on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_period # @!group Danger # Download and execute a remote Dangerfile. # # @param [Int] slug_or_project_id # The slug or id of the repo where the Dangerfile is. # @param [String] branch # A branch from repo where the Dangerfile is. # @param [String] path # The path at the repo where Dangerfile is. # @return [void] #
def UNK on_lparen path_or_url on_rparen on_ignored_nl raise on_tstring_beg on_tstring_content on_tstring_end unless path_or_url on_period kind_of? on_lparen on_const on_rparen on_nl raise on_tstring_beg # @!group Plugins # Download a local or remote plugin or Dangerfile. # This method will not import the file for you, use plugin.import instead # # @param [String] path_or_url # a local path or a https URL to the Ruby file to import # a danger plugin from. # @return [String] The path to the downloaded Ruby file #
def UNK on_lparen UNK on_rparen on_ignored_nl path on_op UNK on_lparen UNK on_rparen on_nl UNK on_lparen path on_rparen on_nl end on_nl # @!group Plugins # Download a remote plugin and use it locally. # # @param [String] url # https URL to the Ruby file to use # @return [void]
def UNK on_lparen path on_rparen on_ignored_nl on_const on_lbracket path on_rbracket on_period UNK UNK on_op UNK on_op on_ignored_nl UNK on_lparen UNK # @!group Plugins # Import one or more local plugins. # # @param [String] path # The path to the file to import # Can also be a pattern (./**/*plugin.rb) # @return [void]
UNK on_const on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl UNK on_nl end on_nl end on_nl on_ignored_nl def UNK # Without the expand_path it would fail if the path doesn't start with ./
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op on_const on_op on_const on_period UNK on_period UNK on_nl UNK on_nl on_ignored_nl UNK # Raises an error when the given block does not register a plugin.
