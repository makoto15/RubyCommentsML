on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const # coding: utf-8
UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op # TODO: ???
UNK on_op self on_period pr_json on_lbracket on_symbeg UNK on_rbracket on_lbracket on_symbeg latestchangeset on_rbracket UNK self on_period pr_json on_lbracket on_symbeg fromref # Support for older versions of Bitbucket Server
UNK on_op self on_period pr_json on_lbracket on_symbeg fromref on_rbracket on_lbracket on_symbeg latestchangeset on_rbracket UNK self on_period pr_json on_lbracket on_symbeg fromref # Support for older versions of Bitbucket Server
UNK on_period UNK UNK on_comma UNK on_nl self on_period UNK on_period UNK on_tstring_beg on_tstring_content UNK on_const on_period UNK UNK on_tstring_content # Next, we want to ensure that we have a version of the current branch at a known location
UNK on_period UNK UNK on_comma UNK on_nl self on_period UNK on_period UNK on_tstring_beg on_tstring_content UNK on_const on_period UNK UNK on_tstring_content # OK, so we want to ensure that we have a known head branch, this will always represent # the head of the PR ( e.g. the most recent commit that will be merged. )
UNK on_op self on_period pr_json on_lbracket on_symbeg fromref on_rbracket on_lbracket on_symbeg latestchangeset on_rbracket UNK self on_period pr_json on_lbracket on_symbeg fromref # Support for older versions of Bitbucket Server
