UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK # https://circleci.com/docs/environment-variables
UNK on_const on_op on_const on_nl on_ignored_nl UNK UNK on_period UNK on_lparen env on_rparen on_ignored_nl env on_period UNK on_tstring_beg on_tstring_content on_tstring_end # ### CI Setup # # For setting up CircleCI, we recommend turning on "Only build pull requests" in "Advanced Settings." Without this enabled, # it's trickier for Danger to determine whether you're in a pull request or not, as the environment metadata # isn't as reliable. # # A common scenario is when CircleCI begins building a commit before the commit becomes associated with a PR # (e.g. a developer pushes their branch to the remote repo for the first time. CircleCI spins up and begins building. # Moments later the developer creates a PR on GitHub. Since the build process started before the PR existed, # Danger won't be able to use the Circle-provided environment variables to retrieve PR metadata.) # # With "Only build pull requests" enabled, you can add `bundle exec danger` to your `config.yml` (Circle 2.0). # # e.g. # # ``` yaml # - run: bundle exec danger --verbose # ``` # # And that should be it! # # ### Token Setup # # If "Only build pull requests" can't be enabled for your project, Danger _can_ still work by relying on CircleCI's API # to retrieve PR metadata, which will require an API token. # # 1. Go to your project > Settings > API Permissions. Create a token with scope "view-builds" and a label like "DANGER_CIRCLE_CI_API_TOKEN". # 2. Settings > Environement Variables. Add the token as a CircleCI environment variable, which exposes it to the Danger process. # # There is no difference here for OSS vs Closed, both scenarios will need this environment variable. # # With these pieces in place, Danger should be able to work as expected. #
on_ignored_nl UNK UNK on_period UNK on_lparen env on_rparen on_ignored_nl env on_period UNK on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl UNK # Side note: CircleCI is complicated. The env vars for PRs are not guaranteed to exist # if the build was triggered from a commit, to look at examples of the different types # of CI states, see this repo: https://github.com/orta/show_circle_env
UNK UNK UNK env on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op on_op env on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period UNK on_nl # This will get used if it's available, instead of the API faffing.
UNK UNK UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end UNK on_tstring_beg on_tstring_content on_tstring_end UNK on_tstring_beg on_tstring_content on_tstring_end UNK on_tstring_beg on_tstring_content on_tstring_end on_rbracket # Real-world talk, it should be worrying if none of these are in the environment
UNK on_op on_const on_period UNK on_nl UNK on_period UNK on_lparen env on_rparen on_nl end on_nl on_ignored_nl UNK UNK on_nl UNK # Uses the Circle API to determine if it's a PR otherwise
UNK pr_url on_op on_const on_period UNK on_lparen pr_url on_rparen on_period UNK on_lparen on_const on_op on_const on_rparen on_nl UNK on_op on_const # If it's not a real URL, use the Circle API
UNK on_op on_const on_period UNK on_lparen pr_url on_rparen on_period UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl UNK UNK # We should either have got it via the API, or # an ENV var.
UNK on_period UNK on_op UNK on_lbracket UNK on_rbracket on_op on_tstring_beg on_tstring_content on_tstring_end on_op UNK on_lbracket UNK on_rbracket on_nl UNK on_period # The first one is an extra slash, ignore it
