on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl # coding: utf-8
UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op # TODO: ???
UNK on_period UNK UNK on_comma UNK on_nl self on_period UNK on_period UNK on_tstring_beg on_tstring_content UNK on_const on_period UNK UNK on_tstring_content # Next, we want to ensure that we have a version of the current branch at a known location
UNK on_period UNK UNK on_comma UNK on_nl self on_period UNK on_period UNK on_tstring_beg on_tstring_content UNK on_const on_period UNK UNK on_tstring_content # OK, so we want to ensure that we have a known head branch, this will always represent # the head of the PR ( e.g. the most recent commit that will be merged. )
summary_group on_op UNK on_period UNK on_nl if summary_group on_op summary_group on_period UNK on_period UNK on_op summary_group on_period UNK on_period UNK # this isn't the most elegant thing in the world, but we need the group # with file: nil, line: nil so we can combine its info in with the # summary_body
UNK on_period UNK on_nl UNK on_ignored_nl summary_group on_op on_const on_period UNK on_lparen on_label UNK on_comma on_label UNK on_rparen on_nl end # remove summary_group from message_groups so it doesn't get a # duplicate comment posted in the message_groups loop below
