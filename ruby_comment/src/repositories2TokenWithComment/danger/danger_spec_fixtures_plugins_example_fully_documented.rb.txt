UNK on_const on_op on_const on_nl UNK UNK UNK on_nl on_ignored_nl UNK UNK UNK UNK on_op UNK UNK on_ignored_nl UNK on_tstring_beg # Lint markdown files inside your projects. # This is done using the [proselint](http://proselint.com) python egg. # Results are passed out as a table in markdown. # # @example Specifying custom CocoaPods installation options # # # Runs a linter with comma style disabled # proselint.disable_linters = ["misc.scare_quotes", "misc.tense_present"] # proselint.lint_files "_posts/*.md" # # # Runs a linter with all styles, on modified and added markpown files in this PR # proselint.lint_files # # @see artsy/artsy.github.io # @tags blogging, blog, writing, jekyll, middleman, hugo, metalsmith, gatsby, express #
UNK UNK UNK on_nl on_ignored_nl UNK UNK UNK UNK on_op UNK UNK on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end UNK UNK on_nl # Allows you to disable a collection of linters from being ran. # You can get a list of [them here](https://github.com/amperser/proselint#checks)
UNK UNK UNK UNK on_op UNK UNK on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end UNK UNK on_nl on_ignored_nl UNK UNK on_tstring_content on_tstring_end # Lints the globbed files, which can fail your build if # # @param [String] files # A globbed string which should return the files that you want to lint, defaults to nil. # if nil, modified and added files will be used. # @return [void] #
UNK on_tstring_beg on_tstring_content on_tstring_end UNK UNK on_nl on_ignored_nl UNK UNK on_tstring_content on_tstring_end on_period UNK on_period UNK on_nl UNK on_tstring_beg on_tstring_content # Installs a prose checker if needed
UNK UNK on_tstring_content on_tstring_end on_period UNK on_period UNK on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl UNK on_op UNK # Check that this is in the user's PATH
UNK on_op UNK on_op on_const on_period UNK UNK UNK UNK on_op UNK UNK on_op UNK UNK on_nl UNK on_period UNK # Either use files provided, or use the modified + added
on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_op on_const on_lbracket UNK on_period UNK on_period UNK UNK on_op UNK on_op on_lbracket # TODO: create the disabled linters JSON in ~/.proselintrc # using @disable_linter
UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_op on_const on_lbracket UNK on_period UNK on_period UNK UNK on_op UNK on_op on_lbracket UNK # Convert paths to proselint results
UNK on_op UNK on_period UNK on_period UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl UNK on_op # Get some metadata about the local setup
UNK UNK on_period UNK on_op UNK on_nl message on_op on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_period UNK UNK on_op UNK UNK # We got some error reports back from proselint
UNK UNK on_nl UNK on_tstring_content on_tstring_end on_period UNK on_period UNK on_nl end on_nl end on_nl end on_nl EMP EMP EMP # Determine if proselint is currently installed in the system paths. # @return [Bool] #
