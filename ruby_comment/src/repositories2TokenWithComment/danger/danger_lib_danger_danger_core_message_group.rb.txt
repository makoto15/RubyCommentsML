on_ignored_nl UNK UNK on_nl UNK UNK on_nl def UNK on_lparen UNK UNK on_comma UNK UNK on_rparen on_ignored_nl UNK on_op UNK # frozen_string_literal: true
def UNK on_lparen other on_rparen on_ignored_nl other on_period UNK on_op UNK on_op other on_period UNK on_op UNK on_nl end on_nl # Returns whether this `MessageGroup` is for the same line of code as # `other`, taking which file they are in to account. # @param other [MessageGroup, Markdown, Violation] # @return [Boolean] whether this `MessageGroup` is for the same line of code
def UNK on_lparen other on_rparen on_ignored_nl UNK UNK on_comma UNK UNK UNK UNK UNK on_lparen other on_rparen on_nl on_ignored_nl UNK # Merges two `MessageGroup`s that represent the same line of code # In future, perhaps `MessageGroup` will be able to represent a group of # messages for multiple lines.
def on_op on_lparen UNK on_rparen on_ignored_nl UNK UNK UNK UNK on_lparen UNK on_rparen on_nl on_ignored_nl UNK on_op UNK on_nl messages # Adds a message to the group. # @param message [Markdown, Violation] the message to add
UNK UNK UNK UNK on_lparen UNK on_rparen on_nl on_ignored_nl UNK on_op UNK on_nl messages on_period UNK on_period UNK UNK on_op # TODO: insertion sort
def messages on_nl UNK on_op UNK UNK on_nl end on_nl on_ignored_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl def # The list of messages in this group. This list will be sorted in decreasing # order of severity (error, warning, message, markdown)
def UNK on_nl UNK on_op UNK UNK UNK on_comma UNK UNK UNK on_nl messages on_period UNK UNK on_op UNK on_op # @return a hash of statistics. Currently only :warnings_count and # :errors_count
