UNK on_const on_op on_const on_nl def UNK on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK UNK UNK UNK on_period UNK on_period # Handles interacting with GitHub inside a Dangerfile. Provides a few functions which wrap `pr_json` and also # through a few standard functions to simplify your code. # # @example Warn when a PR is classed as work in progress # # warn "PR is classed as Work in Progress" if github.pr_title.include? "[WIP]" # # @example Declare a PR to be simple to avoid specific Danger rules # # declared_trivial = (github.pr_title + github.pr_body).include?("#trivial") # # @example Ensure that labels have been used on the PR # # failure "Please add labels to this PR" if github.pr_labels.empty? # # @example Check if a user is in a specific GitHub org, and message them if so # # unless github.api.organization_member?('danger', github.pr_author) # message "@#{github.pr_author} is not a contributor yet, would you like to join the Danger org?" # end # # @example Ensure there is a summary for a PR # # failure "Please provide a summary in the Pull Request description" if github.pr_body.length < 5 # # @example Only accept PRs to the develop branch # # failure "Please re-submit this PR to develop, we may have already fixed your issue." if github.branch_for_base != "develop" # # @example Note when PRs don't reference a milestone, which goes away when it does # # has_milestone = github.pr_json["milestone"] != nil # warn("This PR does not refer to an existing milestone", sticky: false) unless has_milestone # # @example Note when a PR cannot be manually merged, which goes away when you can # # can_merge = github.pr_json["mergeable"] # warn("This PR cannot be merged yet.", sticky: false) unless can_merge # # @example Highlight when a celebrity makes a pull request # # message "Welcome, Danger." if github.pr_author == "dangermcshane" # # @example Ensure that all PRs have an assignee # # warn "This PR does not have any assignees yet." unless github.pr_json["assignee"] # # @example Send a message with links to a collection of specific files # # if git.modified_files.include? "config/*.js" # config_files = git.modified_files.select { |path| path.include? "config/" } # message "This PR changes #{ github.html_link(config_files) }" # end # # @example Highlight with a clickable link if a Package.json is changed # # warn "#{github.html_link("Package.json")} was edited." if git.modified_files.include? "Package.json" # # @example Note an issue with a particular line on a file using the #L[num] syntax, e.g. `#L23` # # linter_json = `my_linter lint "file"` # results = JSON.parse linter_json # unless results.empty? # file, line, warning = result.first # warn "#{github.html_link("#{file}#L#{line}")} has linter issue: #{warning}." # end # # # @see danger/danger # @tags core, github #
def UNK on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK UNK UNK UNK on_period UNK on_period UNK on_period UNK on_op on_const # So that this init can fail.
def UNK on_period UNK on_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end # The instance name used in the Dangerfile # @return [String] #
def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period pr_json on_lbracket on_tstring_beg on_tstring_content on_tstring_end # @!group PR Review # # In Beta. Provides access to creating a GitHub Review instead of a typical GitHub comment. # # To use you announce the start of your review, and the end via the `start` and `submit` functions, # for example: # # github.review.start # github.review.fail(message) # github.review.warn(message) # github.review.message(message) # github.review.markdown(message) # github.review.submit # # @return [ReviewDSL]
def UNK on_nl on_ivar on_period pr_json on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl # @!group PR Metadata # The title of the Pull Request. # @return [String] #
def UNK on_nl pr_json on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl pr_json on_lbracket # @!group PR Metadata # The body text of the Pull Request. # @return [String] #
def UNK on_nl pr_json on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period UNK on_nl end on_nl on_ignored_nl # @!group PR Metadata # The username of the author of the Pull Request. # @return [String] #
def UNK on_nl on_ivar on_period UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period UNK UNK on_op UNK on_op UNK on_lbracket UNK # @!group PR Metadata # The labels assigned to the Pull Request. # @return [String] #
def UNK on_nl pr_json on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl end on_nl on_ignored_nl def UNK # @!group PR Commit Metadata # The branch to which the PR is going to be merged into. # @return [String] #
def UNK on_nl pr_json on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl end on_nl on_ignored_nl def UNK # @!group PR Commit Metadata # The branch to which the PR is going to be merged from. # @return [String] #
def UNK on_nl pr_json on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl end on_nl on_ignored_nl def UNK # @!group PR Commit Metadata # The base commit to which the PR is going to be merged as a parent. # @return [String] #
def UNK on_nl pr_json on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl end on_nl on_ignored_nl def pr_json # @!group PR Commit Metadata # The head commit to which the PR is requesting to be merged from. # @return [String] #
def pr_json on_nl on_ivar on_period pr_json on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl # @!group GitHub Misc # The hash that represents the PR's JSON. For an example of what this looks like # see the [Danger Fixture'd one](https://raw.githubusercontent.com/danger/danger/master/spec/fixtures/github_api/pr_response.json). # @return [Hash] #
def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl # @!group GitHub Misc # Provides access to the GitHub API client used inside Danger. Making # it easy to use the GitHub API inside a Dangerfile. # @return [Octokit::Client]
def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen paths UNK UNK UNK on_rparen on_ignored_nl paths # @!group PR Content # The unified diff produced by Github for this PR # see [Unified diff](https://en.wikipedia.org/wiki/Diff_utility#Unified_format) # @return [String]
def UNK on_lparen paths UNK UNK UNK on_rparen on_ignored_nl paths on_op on_lbracket paths on_rbracket UNK paths on_period UNK on_lparen on_const # @!group GitHub Misc # Returns a list of HTML anchors for a file, or files in the head repository. An example would be: # `<a href='https://github.com/artsy/eigen/blob/561827e46167077b5e53515b4b7349b8ae04610b/file.txt'>file.txt</a>`. It returns a string of multiple anchors if passed an array. # @param [String or Array<String>] paths # A list of strings to convert to github anchors # @param [Bool] full_path # Shows the full path as the link's text, defaults to `true`. # # @return [String]
def UNK on_lparen UNK on_op UNK on_rparen on_ignored_nl UNK UNK on_period UNK on_lparen on_const on_rparen on_nl on_ivar on_period UNK on_op # @!group GitHub Misc # Use to ignore inline messages which lay outside a diff's range, thereby not posting them in the main comment. # You can set hash to change behavior per each kinds. (ex. `{warning: true, error: false}`) # @param [Bool] or [Hash<Symbol, Bool>] dismiss # Ignore out of range inline messages, defaults to `true` # # @return [void]
