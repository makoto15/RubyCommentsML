UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl class on_const on_op on_const on_nl class # https://www.jetbrains.com/teamcity/
class on_const on_op on_const on_nl class on_op self on_nl def UNK on_lparen env on_rparen on_ignored_nl on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma # ### CI Setup # # You need to go to your project settings. Then depending on the type of your build settings, you may need # to add a new build step for Danger. You want to be able to run the command `bundle exec danger`, so # the "Simple Command Runner" should be all you need to do that. # # ### Token + Environment Setup # # #### GitHub # # As this is self-hosted, you will need to add the `DANGER_GITHUB_API_TOKEN` to your build user's ENV. The alternative # is to pass in the token as a prefix to the command `DANGER_GITHUB_API_TOKEN="123" bundle exec danger`. # # However, you will need to find a way to add the environment vars: `GITHUB_REPO_SLUG`, `GITHUB_PULL_REQUEST_ID` and # `GITHUB_REPO_URL`. These are not added by default. You can manually add `GITHUB_REPO_SLUG` and `GITHUB_REPO_URL` # as build parameters or by exporting them inside your Simple Command Runner. # # As for `GITHUB_PULL_REQUEST_ID`, TeamCity provides the `%teamcity.build.branch%` variable which is in the format # `PR_NUMBER/merge`. You can slice the Pull Request ID out by doing the following: # # ```sh # branch="%teamcity.build.branch%" # export GITHUB_PULL_REQUEST_ID=(${branch//\// }) # ``` # # #### GitLab # # As this is self-hosted, you will need to add the `DANGER_GITLAB_API_TOKEN` to your build user's ENV. The alternative # is to pass in the token as a prefix to the command `DANGER_GITLAB_API_TOKEN="123" bundle exec danger`. # # However, you will need to find a way to add the environment vars: `GITLAB_REPO_SLUG`, `GITLAB_PULL_REQUEST_ID` and # `GITLAB_REPO_URL`. These are not added by default. You could do this via the GitLab API potentially. # # We would love some advice on improving this setup. # # #### BitBucket Cloud # # You will need to add the following environment variables as build parameters or by exporting them inside your # Simple Command Runner. # # # - `BITBUCKET_REPO_SLUG` # - `BITBUCKET_REPO_URL` # # - `DANGER_BITBUCKETCLOUD_USERNAME` # - `DANGER_BITBUCKETCLOUD_PASSWORD` # # or # # - `DANGER_BITBUCKETCLOUD_OAUTH_KEY` # - `DANGER_BITBUCKETCLOUD_OAUTH_SECRET` # # You will also need to set the `BITBUCKET_BRANCH_NAME` environment variable. # TeamCity provides `%teamcity.build.branch%`, which you can use at the top of your Simple Command Runner: # ```sh # export BITBUCKET_BRANCH_NAME="%teamcity.build.branch%" # ``` # # #### BitBucket Server # # You will need to add the following environment variables as build parameters or by exporting them inside your # Simple Command Runner. # # - `DANGER_BITBUCKETSERVER_USERNAME` # - `DANGER_BITBUCKETSERVER_PASSWORD` # - `DANGER_BITBUCKETSERVER_HOST` # - `BITBUCKETSERVER_REPO_SLUG` # - `BITBUCKETSERVER_PULL_REQUEST_ID` # - `BITBUCKETSERVER_REPO_URL` #
UNK self on_period class on_period UNK on_lparen env on_rparen on_nl UNK on_lparen env on_rparen on_nl UNK self on_period class on_period # NB: Unfortunately TeamCity doesn't provide these variables # automatically so you have to add these variables manually to your # project or build configuration
def UNK on_lparen env on_rparen on_ignored_nl UNK on_op env on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl repo_slug on_op env on_lbracket on_tstring_beg # This is a little hacky, because Bitbucket doesn't provide us a PR id
