UNK on_const on_op on_const on_nl def UNK on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK UNK UNK UNK on_period UNK on_period # Handles interacting with GitLab inside a Dangerfile. Provides a few functions which wrap `mr_json` and also # through a few standard functions to simplify your code. # # @example Warn when an MR is classed as work in progress. # # warn "MR is classed as Work in Progress" if gitlab.mr_title.include? "[WIP]" # # @example Declare a MR to be simple to avoid specific Danger rules. # # declared_trivial = (gitlab.mr_title + gitlab.mr_body).include?("#trivial") # # @example Ensure that labels have been applied to the MR. # # failure "Please add labels to this MR" if gitlab.mr_labels.empty? # # @example Ensure that all MRs have an assignee. # # warn "This MR does not have any assignees yet." unless gitlab.mr_json["assignee"] # # @example Ensure there is a summary for a MR. # # failure "Please provide a summary in the Merge Request description" if gitlab.mr_body.length < 5 # # @example Only accept MRs to the develop branch. # # failure "Please re-submit this MR to develop, we may have already fixed your issue." if gitlab.branch_for_merge != "develop" # # @example Note when MRs don't reference a milestone, make the warning stick around on subsequent runs # # has_milestone = gitlab.mr_json["milestone"] != nil # warn("This MR does not refer to an existing milestone", sticky: true) unless has_milestone # # @example Note when a MR cannot be manually merged # # can_merge = gitlab.mr_json["mergeable"] # warn("This MR cannot be merged yet.") unless can_merge # # @example Highlight when a celebrity makes a merge request. # # message "Welcome, Danger." if gitlab.mr_author == "dangermcshane" # # @example Send a message with links to a collection of specific files. # # if git.modified_files.include? "config/*.js" # config_files = git.modified_files.select { |path| path.include? "config/" } # message "This MR changes #{ gitlab.html_link(config_files) }" # end # # @example Highlight with a clickable link if a Package.json is changed. # # warn "#{gitlab.html_link("Package.json")} was edited." if git.modified_files.include? "Package.json" # # @example Select a random group member as assignee if no assignee is selected # # if gitlab.mr_json["assignee"].nil? # reviewer = gitlab.api.group_members(gitlab.api.merge_request_approvals(project_id, mr_id).to_hash["approver_groups"].first["group"]["id"]).sample # if gitlab.api.group_members(gitlab.api.merge_request_approvals(project_id, mr_id).to_hash["approver_groups"].first["group"]["id"]).length > 1 # while reviewer.to_hash["id"] == gitlab.mr_json["author"]["id"] do # reviewer = gitlab.api.group_members(gitlab.api.merge_request_approvals(project_id, mr_id).to_hash["approver_groups"].first["group"]["id"]).sample # end # end # message "Reviewer roulete rolled for: #{reviewer.to_hash['name']} (@#{reviewer.to_hash['username']})" # gitlab.api.update_merge_request(project_id, mr_id, { assignee_id: reviewer.to_hash["id"] }) # end # # # @see danger/danger # @tags core, gitlab #
def UNK on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK UNK UNK UNK on_period UNK on_period UNK on_period UNK on_op on_const # So that this init can fail.
def UNK on_period UNK on_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_lparen # The instance name used in the Dangerfile # @return [String] #
def UNK on_nl on_ivar on_period mr_json on_period UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period mr_json # @!group MR Metadata # The title of the Merge Request # @return [String] #
def UNK on_nl on_ivar on_period mr_json on_period UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period mr_json # @!group MR Metadata # The body text of the Merge Request # @return [String] #
def UNK on_nl on_ivar on_period mr_json on_period UNK on_period UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar # @!group MR Metadata # The username of the author of the Merge Request # @return [String] #
def UNK on_nl on_ivar on_period mr_json on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end # @!group MR Metadata # The labels assigned to the Merge Request # @return [String] #
def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK # @!group MR Content # The unified diff produced by GitLab for this MR # see [Unified diff](https://en.wikipedia.org/wiki/Diff_utility#Unified_format) # @return [String] #
def UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period mr_json on_period UNK on_nl end on_nl on_ignored_nl # @!group MR Commit Metadata # The branch to which the MR is going to be merged into # @deprecated Please use {#branch_for_base} instead # @return [String] #
def UNK on_nl on_ivar on_period mr_json on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period mr_json on_period UNK # @!group MR Commit Metadata # The branch to which the MR is going to be merged into. # @return [String] #
def UNK on_nl on_ivar on_period mr_json on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period mr_json on_period UNK # @!group MR Commit Metadata # The branch to which the MR is going to be merged from. # @return [String] #
def UNK on_nl on_ivar on_period mr_json on_period UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period mr_json # @!group MR Commit Metadata # The base commit to which the MR is going to be merged as a parent # @return [String] #
def UNK on_nl on_ivar on_period mr_json on_period UNK on_period UNK on_nl end on_nl on_ignored_nl def mr_json on_nl on_ivar on_period mr_json # @!group MR Commit Metadata # The head commit to which the MR is requesting to be merged from # @return [String] #
def mr_json on_nl on_ivar on_period mr_json on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end # @!group GitLab Misc # The hash that represents the MR's JSON. See documentation for the # structure [here](http://docs.gitlab.com/ce/api/merge_requests.html#get-single-mr) # @return [Hash] #
def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op UNK on_ignored_nl UNK on_op UNK # @!group GitLab Misc # Provides access to the GitLab API client used inside Danger. Making # it easy to use the GitLab API inside a Dangerfile. See the gitlab # gem's [documentation](http://www.rubydoc.info/gems/gitlab/Gitlab/Client) # for accessible methods. # @return [GitLab::Client] #
def UNK on_nl on_ivar on_op UNK on_ignored_nl UNK on_op UNK on_period UNK on_lparen mr_json UNK on_tstring_beg on_tstring_content on_tstring_end UNK on_rparen # @!group GitLab Misc # Returns the web_url of the source project. # @return [String] #
def UNK on_lparen paths UNK UNK UNK on_rparen on_ignored_nl paths on_op UNK paths UNK UNK paths on_period UNK on_lparen on_const # @!group GitLab Misc # Returns a list of HTML anchors for a file, or files in the head repository. An example would be: # `<a href='https://gitlab.com/artsy/eigen/blob/561827e46167077b5e53515b4b7349b8ae04610b/file.txt'>file.txt</a>`. It returns a string of multiple anchors if passed an array. # @param [String or Array<String>] paths # A list of strings to convert to gitlab anchors # @param [Bool] full_path # Shows the full path as the link's text, defaults to `true`. # # @return [String] #
