def UNK on_lparen destination on_comma config on_op UNK UNK on_rparen on_ignored_nl UNK on_const on_period UNK on_lparen UNK on_comma destination on_comma # Creates an empty directory. # # ==== Parameters # destination<String>:: the relative path to the destination root. # config<Hash>:: give :verbose => false to not log the status. # # ==== Examples # # empty_directory "doc" #
UNK on_const UNK on_symbeg base on_comma on_symbeg destination on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg config on_nl on_ignored_nl def # Class which holds create directory logic. This is the base class for # other actions like create_file and directory. # # This implementation is based in Templater actions, created by Jonas Nicklas # and Michael S. Klishin under MIT LICENSE. #
UNK on_symbeg base on_comma on_symbeg destination on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg config on_nl on_ignored_nl def UNK on_lparen #:nodoc:
def UNK on_lparen base on_comma destination on_comma config on_op UNK UNK on_rparen on_ignored_nl on_ivar on_op base on_nl on_ivar on_op UNK # Initializes given the source and destination. # # ==== Parameters # base<Foreman::Thor::Base>:: A Foreman::Thor::Base instance # source<String>:: Relative path to the source of this file # destination<String>:: Relative path to the destination of this file # config<Hash>:: give :verbose => false to not log the status. #
def UNK on_nl on_op on_const on_period UNK on_lparen destination on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl UNK UNK on_ignored_nl # Checks if the destination file already exists. # # ==== Returns # Boolean:: true if the file exists, false otherwise. #
def UNK on_nl base on_period UNK UNK on_symbeg UNK UNK on_nl end on_nl on_ignored_nl def UNK on_lparen destination on_rparen on_ignored_nl # Shortcut for pretend. #
def UNK on_lparen destination on_rparen on_ignored_nl UNK UNK destination on_nl on_ivar on_op UNK on_lparen destination on_period UNK on_rparen on_nl on_ivar # Sets the absolute destination value from a relative destination value. # It also stores the given and relative destination. Let's suppose our # script is being executed on "dest", it sets the destination root to # "dest". The destination, given_destination and relative_destination # are related in the following way: # # inside "bar" do # empty_directory "baz" # end # # destination #=> dest/bar/baz # relative_destination #=> bar/baz # given_destination #=> baz #
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK on_lparen UNK UNK UNK on_rparen UNK on_op UNK on_op on_ignored_nl UNK # Filenames in the encoded form are converted. If you have a file: # # %file_name%.rb # # It calls #file_name from the base and replaces %-string with the # return value (should be String) of #file_name: # # user.rb # # The method referenced can be either public or private. #
def UNK on_lparen on_op UNK on_rparen on_ignored_nl UNK UNK on_nl UNK on_lparen on_op UNK on_rparen on_nl UNK on_ignored_nl UNK on_symbeg # Receives a hash of options and just execute the block if some # conditions are met. #
def UNK on_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_comma UNK on_rparen # What to do when the destination file already exists. #
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl base on_period UNK on_period UNK UNK on_comma UNK on_comma UNK UNK config # Shortcut to say_status shell method. #
