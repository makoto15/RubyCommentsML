end on_nl on_ignored_nl UNK on_const on_nl UNK on_op UNK on_nl def UNK on_lparen namespace on_rparen on_ignored_nl namespace on_op on_tstring_beg on_tstring_content #:nodoc:
UNK on_const on_nl UNK on_op UNK on_nl def UNK on_lparen namespace on_rparen on_ignored_nl namespace on_op on_tstring_beg on_tstring_content on_embexpr_beg namespace on_embexpr_end # This module holds several utilities: # # 1) Methods to convert thor namespaces to constants and vice-versa. # # Foreman::Thor::Util.namespace_from_thor_class(Foo::Bar::Baz) #=> "foo:bar:baz" # # 2) Loading thor files and sandboxing: # # Foreman::Thor::Util.load_thorfile("~/.thor/foo") #
def UNK on_lparen namespace on_rparen on_ignored_nl namespace on_op on_tstring_beg on_tstring_content on_embexpr_beg namespace on_embexpr_end on_tstring_end if namespace on_period UNK on_op namespace # Receives a namespace and search for it in the Foreman::Thor::Base subclasses. # # ==== Parameters # namespace<String>:: The namespace to search for. #
def UNK on_lparen constant on_rparen on_ignored_nl constant on_op constant on_period UNK on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end on_comma on_tstring_beg on_tstring_end # Receives a constant and converts it to a Foreman::Thor namespace. Since Foreman::Thor # commands can be added to a sandbox, this method is also responsable for # removing the sandbox namespace. # # This method should not be used in general because it's used to deal with # older versions of Foreman::Thor. On current versions, if you need to get the # namespace from a class, just call namespace on it. # # ==== Parameters # constant<Object>:: The constant to be converted to the thor path. # # ==== Returns # String:: If we receive Foo::Bar::Baz it returns "foo:bar:baz" #
def UNK on_lparen UNK on_comma file on_op UNK on_rparen on_ignored_nl UNK on_op on_const on_op on_const on_op on_const on_period subclasses on_period # Given the contents, evaluate it inside the sandbox and returns the # namespaces defined in the sandbox. # # ==== Parameters # contents<String> # # ==== Returns # Array[Object] #
def UNK on_lparen klass on_rparen on_ignored_nl UNK on_op klass on_period UNK on_period UNK on_lparen on_op on_symbeg UNK on_rparen on_nl on_const # Returns the thor classes declared inside the given class. #
def UNK on_lparen str on_rparen on_ignored_nl UNK str on_period UNK if str on_op on_regexp_beg on_tstring_content on_regexp_end on_nl str on_period UNK # Receives a string and convert it to snake case. SnakeCase returns snake_case. # # ==== Parameters # String # # ==== Returns # String #
def UNK on_lparen str on_rparen on_ignored_nl UNK str if str on_op on_regexp_beg on_tstring_content on_regexp_end on_op str on_op on_regexp_beg on_tstring_content on_regexp_end # Receives a string and convert it to camel case. camel_case returns CamelCase. # # ==== Parameters # String # # ==== Returns # String #
def UNK on_lparen namespace on_comma UNK on_op UNK on_rparen on_ignored_nl if namespace on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen UNK # Receives a namespace and tries to retrieve a Foreman::Thor or Foreman::Thor::Group class # from it. It first searches for a class using the all the given namespace, # if it's not found, removes the highest entry and searches for the class # again. If found, returns the highest entry as the class name. # # ==== Examples # # class Foo::Bar < Foreman::Thor # def baz # end # end # # class Baz::Foo < Foreman::Thor::Group # end # # Foreman::Thor::Util.namespace_to_thor_class("foo:bar") #=> Foo::Bar, nil # will invoke default command # Foreman::Thor::Util.namespace_to_thor_class("baz:foo") #=> Baz::Foo, nil # Foreman::Thor::Util.namespace_to_thor_class("foo:bar:baz") #=> Foo::Bar, "baz" # # ==== Parameters # namespace<String> #
UNK on_op namespace on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl UNK on_op UNK on_period UNK on_nl klass on_op on_const # look for a namespaced command
klass on_op on_const on_op on_const on_op on_const on_period UNK on_lparen namespace on_rparen on_nl UNK on_op UNK on_nl end on_nl if # look for a Foreman::Thor::Group with the right name
UNK on_op namespace on_nl klass on_op on_const on_op on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_end on_rparen on_nl end on_nl # try a command in the default namespace
def UNK on_lparen path on_comma UNK on_op UNK on_comma UNK on_op UNK on_rparen on_ignored_nl UNK on_op on_const on_period UNK on_lparen # Receives a path and load the thor file in the path. The file is evaluated # inside the sandbox to avoid namespacing conflicts. #
def UNK on_nl on_const on_period join on_lparen UNK on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma # Returns the root where thor files are located, depending on the OS. #
def UNK on_nl UNK on_op on_const on_lbracket on_tstring_beg on_embexpr_beg UNK on_lparen UNK on_rparen on_embexpr_end on_tstring_content on_tstring_end on_rbracket on_nl on_ignored_nl UNK # Returns the files in the thor root. On Windows thor_root will be something # like this: # # C:\Documents and Settings\james\.thor # # If we don't #gsub the \ character, Dir.glob will fail. #
def UNK on_lparen path on_rparen on_ignored_nl path on_op UNK on_lparen path on_rparen on_nl on_lbracket on_tstring_beg on_embexpr_beg path on_embexpr_end on_tstring_content on_tstring_end # Where to look for Foreman::Thor files. #
def UNK on_nl UNK on_op UNK on_ignored_nl UNK on_op on_const on_op on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl ruby on_op # Return the path to the ruby interpreter taking into account multiple # installations and windows extensions. #
if UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_op on_const on_period UNK on_lparen on_symbeg UNK on_rparen on_nl UNK on_ignored_nl UNK on_op on_const # avoid using different name than ruby (on platforms supporting links)
if on_const on_period UNK UNK on_nl UNK on_op on_const on_period UNK UNK on_nl on_ignored_nl ruby on_op UNK if UNK on_op # ruby is a symlink
ruby on_op UNK if UNK on_op UNK on_op UNK on_op ruby on_nl end on_nl UNK on_const end on_nl end on_nl # symlink points to 'ruby_install_name'
end on_nl end on_nl on_ignored_nl ruby on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl ruby on_nl # rubocop:disable HandleExceptions # just ignore on windows
ruby on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl ruby on_nl end on_nl end on_nl on_ignored_nl # escape string in case path to ruby executable contain spaces.
def UNK on_lparen path on_rparen on_ignored_nl path on_period UNK on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen # Returns a string that has had any glob characters escaped. # The glob characters are `* ? { } [ ]`. # # ==== Examples # # Foreman::Thor::Util.escape_globs('[apps]') # => '\[apps\]' # # ==== Parameters # String # # ==== Returns # String #
