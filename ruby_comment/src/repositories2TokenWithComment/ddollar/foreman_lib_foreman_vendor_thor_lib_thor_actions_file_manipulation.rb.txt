on_ignored_nl def UNK on_lparen source on_comma on_op args on_comma on_op block on_rparen on_ignored_nl config on_op args on_period last on_period is_a? # Copies the file from the relative source to the relative destination. If # the destination is not given it's assumed to be equal to the source. # # ==== Parameters # source<String>:: the relative path to the source root. # destination<String>:: the relative path to the destination root. # config<Hash>:: give :verbose => false to not log the status, and # :mode => :preserve, to preserve the file mode from the source.
def UNK on_lparen source on_comma on_op args on_comma on_op block on_rparen on_ignored_nl config on_op args on_period last on_period is_a? on_lparen # # ==== Examples # # copy_file "README", "doc/README" # # copy_file "doc/README" #
def UNK on_lparen source on_comma on_op args on_rparen on_ignored_nl config on_op args on_period last on_period is_a? on_lparen on_const on_rparen on_op # Links the file from the relative source to the relative destination. If # the destination is not given it's assumed to be equal to the source. # # ==== Parameters # source<String>:: the relative path to the source root. # destination<String>:: the relative path to the destination root. # config<Hash>:: give :verbose => false to not log the status. # # ==== Examples # # link_file "README", "doc/README" # # link_file "doc/README" #
def UNK on_lparen source on_comma on_op args on_comma on_op block on_rparen on_ignored_nl config on_op args on_period last on_period is_a? on_lparen # Gets the content at the given address and places it at the given relative # destination. If a block is given instead of destination, the content of # the url is yielded and used as location. # # ==== Parameters # source<String>:: the address of the given content. # destination<String>:: the relative path to the destination root. # config<Hash>:: give :verbose => false to not log the status. # # ==== Examples # # get "http://gist.github.com/103208", "doc/README" # # get "http://gist.github.com/103208" do |content| # content.split("\n").first # end #
def UNK on_lparen source on_comma on_op args on_comma on_op block on_rparen on_ignored_nl config on_op args on_period last on_period is_a? on_lparen # Gets an ERB template at the relative source, executes it and makes a copy # at the relative destination. If the destination is not given it's assumed # to be equal to the source removing .tt from the filename. # # ==== Parameters # source<String>:: the relative path to the source root. # destination<String>:: the relative path to the destination root. # config<Hash>:: give :verbose => false to not log the status. # # ==== Examples # # template "README", "doc/README" # # template "doc/README" #
def UNK on_lparen path on_comma mode on_comma config on_op on_lbrace on_rbrace on_rparen on_ignored_nl UNK unless UNK on_op on_symbeg UNK on_nl # Changes the mode of the given file or directory. # # ==== Parameters # mode<Integer>:: the file mode # path<String>:: the name of the file to change mode # config<Hash>:: give :verbose => false to not log the status. # # ==== Example # # chmod "script/server", 0755 #
def UNK on_lparen path on_comma on_op args on_comma on_op block on_rparen on_ignored_nl config on_op args on_period last on_period is_a? on_lparen # Prepend text to a file. Since it depends on insert_into_file, it's reversible. # # ==== Parameters # path<String>:: path of the file to be changed # data<String>:: the data to prepend to the file, can be also given as a block. # config<Hash>:: give :verbose => false to not log the status. # # ==== Example # # prepend_to_file 'config/environments/test.rb', 'config.gem "rspec"' # # prepend_to_file 'config/environments/test.rb' do # 'config.gem "rspec"' # end #
def UNK on_lparen path on_comma on_op args on_comma on_op block on_rparen on_ignored_nl config on_op args on_period last on_period is_a? on_lparen # Append text to a file. Since it depends on insert_into_file, it's reversible. # # ==== Parameters # path<String>:: path of the file to be changed # data<String>:: the data to append to the file, can be also given as a block. # config<Hash>:: give :verbose => false to not log the status. # # ==== Example # # append_to_file 'config/environments/test.rb', 'config.gem "rspec"' # # append_to_file 'config/environments/test.rb' do # 'config.gem "rspec"' # end #
def UNK on_lparen path on_comma UNK on_comma on_op args on_comma on_op block on_rparen on_ignored_nl config on_op args on_period last on_period # Injects text right after the class definition. Since it depends on # insert_into_file, it's reversible. # # ==== Parameters # path<String>:: path of the file to be changed # klass<String|Class>:: the class to be manipulated # data<String>:: the data to append to the class, can be also given as a block. # config<Hash>:: give :verbose => false to not log the status. # # ==== Examples # # inject_into_class "app/controllers/application_controller.rb", ApplicationController, " filter_parameter :password\n" # # inject_into_class "app/controllers/application_controller.rb", ApplicationController do # " filter_parameter :password\n" # end #
def UNK on_lparen path on_comma flag on_comma on_op args on_comma on_op block on_rparen on_ignored_nl UNK unless UNK on_op on_symbeg UNK # Run a regular expression replacement on a file. # # ==== Parameters # path<String>:: path of the file to be changed # flag<Regexp|String>:: the regexp or string to be replaced # replacement<String>:: the replacement, can be also given as a block # config<Hash>:: give :verbose => false to not log the status. # # ==== Example # # gsub_file 'app/controllers/application_controller.rb', /#\s*(filter_parameter_logging :password)/, '\1' # # gsub_file 'README', /rake/, :green do |match| # match << " no more. Use thor!" # end #
def UNK on_lparen path on_comma flag on_comma on_op args on_rparen on_ignored_nl flag on_op flag on_period UNK on_lparen on_symbeg source on_rparen # Uncomment all lines matching a given regex. It will leave the space # which existed before the comment hash in tact but will remove any spacing # between the comment hash and the beginning of the line. # # ==== Parameters # path<String>:: path of the file to be changed # flag<Regexp|String>:: the regexp or string used to decide which lines to uncomment # config<Hash>:: give :verbose => false to not log the status. # # ==== Example # # uncomment_lines 'config/initializers/session_store.rb', /active_record/ #
def UNK on_lparen path on_comma flag on_comma on_op args on_rparen on_ignored_nl flag on_op flag on_period UNK on_lparen on_symbeg source on_rparen # Comment all lines matching a given regex. It will leave the space # which existed before the beginning of the line in tact and will insert # a single space after the comment hash. # # ==== Parameters # path<String>:: path of the file to be changed # flag<Regexp|String>:: the regexp or string used to decide which lines to comment # config<Hash>:: give :verbose => false to not log the status. # # ==== Example # # comment_lines 'config/initializers/session_store.rb', /cookie_store/ #
def UNK on_lparen path on_comma config on_op on_lbrace on_rbrace on_rparen on_ignored_nl UNK unless UNK on_op on_symbeg UNK on_nl path on_op # Removes a file at the given location. # # ==== Parameters # path<String>:: path of the file to be changed # config<Hash>:: give :verbose => false to not log the status. # # ==== Example # # remove_file 'README' # remove_file 'app/controllers/application_controller.rb' #
UNK on_period output_buffer on_comma UNK on_op UNK on_comma output_buffer on_nl yield on_nl output_buffer on_nl UNK on_ignored_nl UNK on_period output_buffer on_op #:nodoc:
UNK on_const on_op on_const on_nl def UNK on_lparen UNK on_comma UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_rparen on_ignored_nl UNK on_period UNK # Foreman::Thor::Actions#capture depends on what kind of buffer is used in ERB. # Thus CapturableERB fixes ERB to use String buffer.
