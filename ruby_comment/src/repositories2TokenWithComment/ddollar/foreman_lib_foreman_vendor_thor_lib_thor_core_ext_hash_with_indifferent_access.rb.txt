UNK on_const on_op on_op on_const def UNK on_lparen UNK on_op UNK UNK on_rparen on_ignored_nl super on_lparen on_rparen on_nl UNK on_period #:nodoc: # A hash with indifferent access and magic predicates. # # hash = Foreman::Thor::CoreExt::HashWithIndifferentAccess.new 'foo' => 'bar', 'baz' => 'bee', 'force' => true # # hash[:foo] #=> 'bar' # hash['foo'] #=> 'bar' # hash.foo? #=> true #
def UNK on_lparen UNK on_op UNK UNK on_rparen on_ignored_nl super on_lparen on_rparen on_nl UNK on_period UNK UNK on_op key on_comma #:nodoc:
def UNK on_nl on_const on_period UNK on_lparen UNK on_rparen on_period UNK on_lparen self on_rparen on_nl end on_nl on_ignored_nl UNK on_nl # Convert to a Hash with String keys.
def UNK on_lparen UNK on_comma on_op UNK on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_nl UNK UNK on_op UNK UNK # Magic predicates. For instance: # # options.force? # => !!options['force'] # options.shebang # => "/usr/lib/local/ruby" # options.test_framework?(:rspec) # => options[:test_framework] == :rspec #
