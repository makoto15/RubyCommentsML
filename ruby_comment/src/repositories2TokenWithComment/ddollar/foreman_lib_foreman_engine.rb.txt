on_const on_op on_lbracket on_symbeg on_const on_comma on_symbeg on_const on_comma on_symbeg on_const on_comma on_symbeg on_const on_comma on_symbeg on_const on_rbracket on_nl on_ignored_nl # The signals that the engine cares about. #
def UNK on_lparen options on_op on_lbrace on_rbrace on_rparen on_ignored_nl on_ivar on_op options on_period UNK on_nl on_ignored_nl on_ivar on_lbracket on_symbeg formation # Create an +Engine+ for running processes # # @param [Hash] options # # @option options [String] :formation (all=1) The process formation to use # @option options [Fixnum] :port (5000) The base port to assign to processes # @option options [String] :root (Dir.pwd) The root directory from which to run processes #
reader on_comma writer on_op UNK on_nl reader on_period UNK on_op UNK if reader on_period UNK on_lparen on_symbeg UNK on_rparen on_nl # Self-pipe for deferred signal-handling (ala djb: http://cr.yp.to/docs/selfpipe.html)
on_const on_period UNK on_lbracket on_symbeg UNK on_rbracket on_op on_lbracket on_rbracket on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_nl UNK # Set up a global signal queue # http://blog.rubybestpractices.com/posts/ewong/016-Implementing-Signal-Handlers.html
def UNK on_nl UNK on_nl UNK on_nl UNK on_nl UNK on_nl UNK UNK on_nl UNK on_nl UNK on_nl UNK on_lparen # Start the processes registered to this +Engine+ #
def UNK on_nl on_const on_period each do on_op sig on_op on_ignored_nl if on_op on_const on_period UNK on_period UNK sig on_period # Set up deferred signal handlers #
def UNK on_nl on_const on_period each do on_op sig on_op on_ignored_nl UNK on_lparen sig on_comma on_symbeg on_const on_rparen if on_op # Unregister deferred signal handlers #
def UNK on_nl on_ivar on_lbracket on_symbeg writer on_rbracket on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl rescue on_const on_op on_const # Wake the main thread up via the selfpipe when there's a signal #
rescue on_const on_op on_const on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_lparen sig on_rparen on_ignored_nl UNK sig on_nl UNK # Ignore writes that would block
UNK on_nl end on_nl on_ignored_nl def UNK on_lparen sig on_rparen on_ignored_nl UNK sig on_nl UNK on_symbeg on_const on_nl UNK on_nl # Retry if another signal arrived while writing
def UNK on_lparen sig on_rparen on_ignored_nl UNK sig on_nl UNK on_symbeg on_const on_nl UNK on_nl UNK on_symbeg on_const on_nl UNK # Invoke the real handler for signal +sig+. This shouldn't be called directly # by signal handlers, as it might invoke code which isn't re-entrant. # # @param [Symbol] sig the name of the signal to be handled #
def UNK on_nl system on_tstring_beg on_tstring_content on_tstring_end on_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl system on_tstring_beg # Handle a TERM signal #
def UNK on_nl system on_tstring_beg on_tstring_content on_tstring_end on_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl system on_tstring_beg # Handle an INT signal #
def UNK on_nl system on_tstring_beg on_tstring_content on_tstring_end on_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def UNK on_lparen signal on_rparen # Handle a HUP signal #
def UNK on_lparen name on_comma command on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl options on_lbracket on_symbeg env on_rbracket on_op env # Register a process to be run by this +Engine+ # # @param [String] name A name for this process # @param [String] command The command to run # @param [Hash] options # # @option options [Hash] :env A custom environment for this process #
def UNK on_nl on_ivar on_op on_lbrace on_rbrace on_nl on_ivar on_op on_lbracket on_rbracket on_nl end on_nl on_ignored_nl def UNK on_lparen UNK # Clear the processes registered to this +Engine+ #
def UNK on_lparen UNK on_rparen on_ignored_nl options on_lbracket on_symbeg UNK on_rbracket on_op on_const on_period UNK on_lparen UNK on_rparen on_nl on_const # Register processes by reading a Procfile # # @param [String] filename A Procfile from which to read processes to register #
def UNK on_lparen UNK on_rparen on_ignored_nl on_const on_op on_const on_period new on_lparen UNK on_rparen on_period UNK do on_op name on_comma # Load a .env file into the +env+ for this +Engine+ # # @param [String] filename A .env file to load into the environment #
def kill_children on_lparen signal on_op on_tstring_beg on_tstring_content on_tstring_end on_rparen on_ignored_nl if on_const on_period UNK on_nl on_ivar on_period each do on_op # Send a signal to all processes started by this +Engine+ # # @param [String] signal The signal to send to each process #
def UNK on_lparen signal on_op on_tstring_beg on_tstring_content on_tstring_end on_rparen on_ignored_nl if on_const on_period UNK on_nl kill_children on_lparen signal on_rparen on_nl # Send a signal to the whole process group. # # @param [String] signal The signal to send #
def formation on_nl on_ivar on_op UNK on_lparen options on_lbracket on_symbeg formation on_rbracket on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl # Get the process formation # # @returns [Fixnum] The formation count for the specified process #
def UNK on_nl on_ivar on_period UNK on_lbrace on_op UNK on_op on_ivar on_lbracket UNK on_rbracket on_rbrace on_nl end on_nl on_ignored_nl def # List the available process names # # @returns [Array] A list of process names #
def process on_lparen name on_rparen on_ignored_nl on_ivar on_period UNK on_lbracket name on_rbracket on_nl end on_nl on_ignored_nl def UNK on_nl UNK # Get the +Process+ for a specifid name # # @param [String] name The process name # # @returns [Foreman::Process] The +Process+ for the specified name #
def UNK on_nl UNK on_period each do on_op name on_op on_ignored_nl UNK name on_comma process on_lparen name on_rparen on_nl end # Yield each +Process+ in order #
def UNK on_nl on_const on_period UNK on_lparen options on_lbracket on_symbeg UNK on_rbracket on_op on_const on_period UNK on_rparen on_nl end on_nl # Get the root directory for this +Engine+ # # @returns [String] The root directory #
def UNK on_lparen process on_comma UNK on_comma UNK on_op UNK on_rparen on_ignored_nl if UNK on_nl UNK on_op on_lparen on_ivar on_period # Get the port for a given process and offset # # @param [Foreman::Process] process A +Process+ associated with this engine # @param [Fixnum] instance The instance of the process # # @returns [Fixnum] port The port to use for this instance of this process #
def UNK on_nl on_lparen options on_lbracket on_symbeg UNK on_rbracket on_op env on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op on_const on_lbracket on_tstring_beg # Get the base port for this foreman instance # # @returns [Fixnum] port The base port #
def UNK on_nl env on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl on_ignored_nl def UNK on_nl UNK on_const on_comma on_tstring_beg on_tstring_content # deprecated
on_ignored_nl def UNK on_nl UNK on_const on_comma on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_lparen name on_comma UNK ### Engine API ######################################################
on_ignored_nl def UNK on_nl on_const on_period UNK on_lparen on_symbeg UNK on_rparen on_period UNK on_period UNK on_op on_const on_period UNK on_op ## Helpers ##########################################################
on_ignored_nl def UNK on_nl on_ivar on_period each do on_op process on_op on_ignored_nl on_int on_period UNK on_lparen formation on_lbracket on_ivar on_lbracket ## Engine ###########################################################
end on_nl on_ignored_nl def UNK on_nl UNK sig on_op on_const on_period UNK on_lbracket on_symbeg UNK on_rbracket on_period UNK on_nl UNK # ignore
UNK if on_ivar on_nl on_ignored_nl UNK if UNK on_nl on_ignored_nl begin on_ignored_nl UNK on_lparen on_int on_rparen on_nl rescue on_const on_nl # Stop if it is time to shut down (asked via a signal)
UNK if UNK on_nl on_ignored_nl begin on_ignored_nl UNK on_lparen on_int on_rparen on_nl rescue on_const on_nl end on_nl end on_nl on_ignored_nl # Stop if any of the children died
begin on_ignored_nl UNK on_lparen on_int on_rparen on_nl rescue on_const on_nl end on_nl end on_nl on_ignored_nl UNK on_nl end on_nl on_ignored_nl # Sleep for a moment and do not blow up if any signals are coming our way
end on_nl end on_nl on_ignored_nl UNK on_nl end on_nl on_ignored_nl def UNK on_nl pid on_comma status on_op begin on_ignored_nl on_const # noop
UNK on_nl end on_nl on_ignored_nl def UNK on_nl pid on_comma status on_op begin on_ignored_nl on_const on_period UNK on_lparen on_op on_int # Ok, we have exited from the main loop, time to shut down gracefully
pid on_comma status on_op begin on_ignored_nl on_const on_period UNK on_lparen on_op on_int on_comma on_const on_op on_const on_rparen on_nl rescue on_const # Check if any of the children have died off
on_ivar on_op status on_period UNK if status on_nl on_ignored_nl UNK UNK UNK pid on_nl on_ignored_nl UNK UNK on_lparen pid on_rparen # record the exit status
UNK UNK UNK pid on_nl on_ignored_nl UNK UNK on_lparen pid on_rparen on_comma UNK on_lparen status on_rparen on_nl on_ignored_nl on_ivar on_period # If no childred have died, nothing to do here
UNK UNK on_lparen pid on_rparen on_comma UNK on_lparen status on_rparen on_nl on_ignored_nl on_ivar on_period UNK on_lparen pid on_rparen on_nl UNK # Log the information about the process that exited
on_ivar on_period UNK on_lparen pid on_rparen on_nl UNK pid on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_nl on_ignored_nl if # Delete it from the list of running processes and return its pid
if on_const on_period UNK on_nl system on_tstring_beg on_tstring_content on_tstring_end on_nl kill_children on_tstring_beg on_tstring_content on_tstring_end on_nl else on_ignored_nl system on_tstring_beg on_tstring_content # Tell all children to stop gracefully
UNK on_op on_const on_period UNK on_nl UNK on_const on_period UNK on_op UNK on_op options on_lbracket on_symbeg UNK on_rbracket on_nl UNK # Wait for all children to stop or until the time comes to kill them all
begin on_ignored_nl UNK on_lparen UNK on_rparen on_nl rescue on_const on_nl end on_nl end on_nl on_ignored_nl system on_tstring_beg on_tstring_content on_tstring_end on_nl # Sleep for a moment and do not blow up if more signals are coming our way
end on_nl end on_nl on_ignored_nl system on_tstring_beg on_tstring_content on_tstring_end on_nl kill_children on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl end on_nl EMP # noop
system on_tstring_beg on_tstring_content on_tstring_end on_nl kill_children on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl end on_nl EMP EMP EMP EMP EMP EMP # Ok, we have no other option than to kill all of our children
