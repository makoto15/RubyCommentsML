on_const on_op on_regexp_beg on_tstring_content on_regexp_end on_nl on_const on_op on_regexp_beg on_tstring_content on_regexp_end on_nl on_const on_op on_regexp_beg on_tstring_content on_regexp_end on_nl on_const on_op #:nodoc: # rubocop:disable ClassLength
on_const on_op on_regexp_beg on_tstring_content on_embexpr_beg on_const on_embexpr_end on_tstring_content on_regexp_end on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period UNK on_nl on_ignored_nl def # Allow either -x -v or -xv style for single char args
def UNK on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK UNK on_op key on_comma value on_op on_ignored_nl UNK value # Receives a hash and makes it switches.
def UNK on_lparen UNK on_op on_lbrace on_rbrace on_comma UNK on_op on_lbrace on_rbrace on_comma UNK on_op false on_rparen on_ignored_nl on_ivar on_op # Takes a hash of Foreman::Thor::Option and a hash with defaults. # # If +stop_on_unknown+ is true, #parse will stop as soon as it encounters # an unknown option or a regular argument.
UNK on_period UNK UNK on_op key on_comma value on_op on_ignored_nl on_ivar on_lbracket key on_period UNK on_rbracket on_op value on_nl on_ivar # Add defaults
on_ivar on_op UNK on_period UNK on_nl on_ivar on_op true on_nl on_ignored_nl UNK peek on_nl if UNK on_nl UNK on_comma UNK # rubocop:disable MethodLength
UNK on_op on_ivar on_period UNK on_lbrace on_op UNK on_op UNK on_op on_regexp_beg on_tstring_content on_regexp_end on_rbrace on_nl UNK on_const on_comma on_tstring_beg # an unknown option starts with - or -- and has no more --'s afterward.
def UNK on_nl UNK peek on_nl when on_const on_comma on_const on_comma on_const on_comma on_const on_nl on_lbracket true on_comma UNK on_lparen # Check if the current value in peek is a registered switch. # # Two booleans are returned. The first is true if the current value # starts with a hyphen; the second is true if it is a registered switch.
on_ivar on_lbracket arg on_rbracket on_op on_ivar on_lbracket on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_end on_rbracket on_nl else on_ignored_nl on_ivar on_lbracket arg # rubocop:disable AssignmentInCondition
def UNK on_lparen arg on_rparen on_ignored_nl on_lparen on_ivar on_lbracket arg on_rbracket on_op arg on_rparen on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end # Check if the given argument is actually a shortcut. #
def UNK on_lparen switch on_rparen on_ignored_nl if UNK on_nl if on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg # Parse boolean values which can be given as --foo=true, --foo or --no-foo. #
def UNK on_lparen switch on_comma option on_rparen on_ignored_nl if UNK on_op on_lparen UNK on_op UNK on_rparen on_nl if option on_period # Parse the value at the peek analyzing if it requires an input or not. #
elsif UNK on_lparen switch on_rparen on_nl UNK UNK elsif option on_period UNK on_op on_op option on_period UNK on_nl UNK option # No problem for boolean types
elsif option on_period UNK on_op on_op option on_period UNK on_nl UNK option on_period UNK on_op option on_period UNK on_op option # User set value to nil
UNK option on_period UNK on_op option on_period UNK on_op option on_period UNK on_nl elsif option on_period UNK on_nl UNK option # Return the default if there is one, else the human name
