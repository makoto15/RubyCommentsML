UNK on_period UNK on_const on_nl end on_nl on_ignored_nl UNK on_const on_nl def source_paths on_nl on_ivar on_op on_lbracket on_rbracket on_nl end #:nodoc:
def source_paths on_nl on_ivar on_op on_lbracket on_rbracket on_nl end on_nl on_ignored_nl def UNK on_lparen path on_op UNK on_rparen on_ignored_nl on_ivar # Hold source paths for one Foreman::Thor instance. source_paths_for_search is the # method responsible to gather source_paths from this current class, # inherited paths and the source root. #
def UNK on_lparen path on_op UNK on_rparen on_ignored_nl on_ivar on_op path if path on_nl on_ivar on_op UNK on_nl end on_nl # Stores and return the source root for this class
def UNK on_nl UNK on_op on_lbracket on_rbracket on_nl UNK on_op source_paths on_nl UNK on_op UNK if UNK on_nl UNK on_op # Returns the source paths in the following order: # # 1) This class source paths # 2) Source root # 3) Parents source paths #
def UNK on_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_op on_symbeg UNK on_comma on_symbeg UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_comma # Add runtime options that help actions execution. #
def UNK on_lparen args on_op on_lbracket on_rbracket on_comma options on_op on_lbrace on_rbrace on_comma config on_op on_lbrace on_rbrace on_rparen on_ignored_nl self # Extends initializer to add more configuration options. # # ==== Configuration # behavior<Symbol>:: The actions default behavior. Can be :invoke or :revoke. # It also accepts :force, :skip and :pretend to set the behavior # and the respective option. # # destination_root<String>:: The root directory needed for some actions. #
def UNK on_lparen UNK on_rparen if behavior on_op on_symbeg UNK on_nl UNK on_period UNK on_nl else on_ignored_nl UNK on_period UNK # Wraps an action object and call it accordingly to the thor class behavior. #
if behavior on_op on_symbeg UNK on_nl UNK on_period UNK on_nl else on_ignored_nl UNK on_period UNK on_nl end on_nl end on_nl #:nodoc:
def destination_root on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op on_lbracket on_rbracket # Returns the root for this thor class (also aliased as destination root). #
def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op on_lbracket on_rbracket on_nl on_ivar on_lbracket on_int on_rbracket on_op on_const on_period UNK on_lparen # Sets the root for this thor class. Relatives path are added to the # directory where the script was invoked and expanded. #
def UNK on_lparen path on_comma UNK on_op UNK on_rparen on_ignored_nl path on_op path on_period UNK on_nl if path on_period UNK # Returns the given path relative to the absolute root (ie, root where # the script started). #
def source_paths on_nl on_ivar on_op self on_period UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl # Holds source paths in instance so they can be manipulated. #
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op on_lbracket UNK on_comma UNK on_op on_const on_rbracket on_nl UNK on_op UNK on_lparen # Receives a file or directory and search for it in the source paths. #
def UNK on_lparen UNK on_op on_tstring_beg on_tstring_end on_comma config on_op on_lbrace on_rbrace on_comma on_op UNK on_rparen on_ignored_nl verbose on_op config # Do something in the root or on a provided subfolder. If a relative path # is given it's referenced from the current root. The full path is yielded # to the block you provide. The path is set back to the previous path when # the method exits. # # ==== Parameters # dir<String>:: the directory to move to. # config<Hash>:: give :verbose => true to log and use padding. #
if on_op on_const on_period UNK on_lparen destination_root on_rparen on_op on_op pretend on_nl on_const on_period UNK on_lparen destination_root on_rparen on_nl end # If the directory doesnt exist and we're not pretending
UNK on_period UNK on_op on_int on_op UNK on_lparen destination_root on_rparen on_op UNK on_nl else on_ignored_nl on_const on_period UNK on_lparen destination_root # In pretend mode, just yield down to the block
def UNK on_nl UNK on_lparen on_ivar on_period UNK on_rparen on_lbrace UNK on_rbrace on_nl end on_nl on_ignored_nl def UNK on_lparen path # Goes to the root and execute the given block. #
def UNK on_lparen path on_comma config on_op on_lbrace on_rbrace on_rparen on_ignored_nl verbose on_op config on_period UNK on_lparen on_symbeg verbose on_comma # Loads an external file and execute it in the instance binding. # # ==== Parameters # path<String>:: The path to the file to execute. Can be a web address or # a relative path from the source root. # # ==== Examples # # apply "http://gist.github.com/103208" # # apply "recipes/jquery.rb" #
def UNK on_lparen command on_comma config on_op on_lbrace on_rbrace on_rparen on_ignored_nl UNK UNK behavior on_op on_symbeg UNK on_nl on_ignored_nl UNK # Executes a command returning the contents of the command. # # ==== Parameters # command<String>:: the command to be executed. # config<Hash>:: give :verbose => false to not log the status, :capture => true to hide to output. Specify :with # to append an executable to command execution. # # ==== Example # # inside('vendor') do # run('ln -s ~/edge rails') # end #
def UNK on_lparen command on_comma config on_op on_lbrace on_rbrace on_rparen on_ignored_nl UNK UNK behavior on_op on_symbeg UNK on_nl UNK command # Executes a ruby script (taking into account WIN32 platform quirks). # # ==== Parameters # command<String>:: the command to be executed. # config<Hash>:: give :verbose => false to not log the status. #
def UNK on_lparen command on_comma on_op args on_rparen on_ignored_nl config on_op args on_period UNK on_period UNK on_lparen on_const on_rparen on_op # Run a thor command. A hash of options can be given and it's converted to # switches. # # ==== Parameters # command<String>:: the command to be invoked # args<Array>:: arguments to the command # config<Hash>:: give :verbose => false to not log the status, :capture => true to hide to output. # Other options are given as parameter to Foreman::Thor. # # # ==== Examples # # thor :install, "http://gist.github.com/103208" # #=> thor install http://gist.github.com/103208 # # thor :list, :all => true, :substring => 'rails' # #=> thor list --all --substring=rails #
def UNK UNK on_period UNK on_lparen on_symbeg destination_root on_op destination_root on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen options on_comma # Allow current root to be shared between invocations. #
UNK on_period UNK on_lparen on_symbeg destination_root on_op destination_root on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen options on_comma UNK on_rparen #:nodoc:
UNK options on_nl UNK on_const on_nl UNK on_tstring_content UNK on_tstring_content UNK on_tstring_content UNK on_tstring_content on_tstring_end on_period UNK on_lbrace on_op UNK #:nodoc:
