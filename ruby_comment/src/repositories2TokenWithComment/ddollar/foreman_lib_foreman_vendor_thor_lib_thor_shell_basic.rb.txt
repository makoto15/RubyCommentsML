def UNK on_ivar on_op nil on_nl on_ivar on_op false on_nl on_ivar on_op on_int on_nl on_ivar on_op false on_nl end on_nl # Initialize base, mute and padding to nil. #
on_ivar on_op nil on_nl on_ivar on_op false on_nl on_ivar on_op on_int on_nl on_ivar on_op false on_nl end on_nl on_ignored_nl def #:nodoc:
def UNK on_nl on_ivar on_op true on_nl UNK on_nl UNK on_ignored_nl on_ivar on_op false on_nl end on_nl on_ignored_nl def UNK # Mute everything that's inside given block #
def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_lparen value on_rparen on_ignored_nl on_ivar on_op on_lbracket on_int on_comma value # Check if base is muted #
def UNK on_lparen value on_rparen on_ignored_nl on_ivar on_op on_lbracket on_int on_comma value on_rbracket on_period UNK on_nl end on_nl on_ignored_nl def # Sets the output padding, not allowing less than zero values. #
def indent on_lparen UNK on_op on_int on_rparen on_ignored_nl UNK on_op padding on_nl UNK on_period padding on_op padding on_op UNK on_nl # Sets the output padding while executing a block and resets it. #
def UNK on_lparen statement on_comma on_op UNK on_rparen on_ignored_nl options on_op UNK on_period UNK on_period UNK on_lparen on_const on_rparen on_op # Asks something to the user and receives a response. # # If asked to limit the correct responses, you can pass in an # array of acceptable answers. If one of those is not supplied, # they will be shown a message stating that one of those answers # must be given and re-asked the question. # # If asking for sensitive information, the :echo option can be set # to false to mask user input from $stdin. # # If the required input is a path, then set the path option to # true. This will enable tab completion for file paths relative # to the current working directory on systems that support # Readline. # # ==== Example # ask("What is your name?") # # ask("What is your favorite Neopolitan flavor?", :limited_to => ["strawberry", "chocolate", "vanilla"]) # # ask("What is your password?", :echo => false) # # ask("Where should the file be saved?", :path => true) #
def UNK on_lparen message on_op on_tstring_beg on_tstring_end on_comma color on_op nil on_comma UNK on_op on_lparen message on_period to_s on_op on_regexp_beg # Say (print) something to the user. If the sentence ends with a whitespace # or tab character, a new line is not appended (print + flush). Otherwise # are passed straight to puts (behavior got from Highline). # # ==== Example # say("I know you knew that.") #
def UNK on_lparen status on_comma message on_comma UNK on_op true on_rparen on_ignored_nl return if UNK on_op UNK on_op false on_nl # Say a status with the given color and appends the message. Since this # method is used frequently by actions, it allows nil or false to be given # in log_status, avoiding the message from being shown. If a Symbol is # given in log_status, it's used as the color. #
def UNK on_lparen statement on_comma color on_op nil on_rparen on_ignored_nl on_op on_op on_lparen UNK on_lparen statement on_comma color on_comma on_symbeg # Make a question the to user and returns true if the user replies "y" or # "yes". #
def UNK on_lparen statement on_comma color on_op nil on_rparen on_ignored_nl on_op on_op on_lparen UNK on_lparen statement on_comma color on_comma on_symbeg # Make a question the to user and returns true if the user replies "n" or # "no". #
def UNK on_lparen array on_rparen on_ignored_nl return if array on_period UNK on_nl colwidth on_op on_lparen array on_period UNK on_lbrace on_op # Prints values in columns # # ==== Parameters # Array[String, String, ...] #
if on_lparen on_lparen on_lparen on_lparen index on_op on_int on_rparen on_op on_lparen UNK on_op colwidth on_rparen on_rparen on_rparen on_period UNK on_op # Don't output trailing spaces when printing the last column
def UNK on_lparen array on_comma options on_op on_lbrace on_rbrace on_rparen return if array on_period UNK on_nl on_ignored_nl formats on_op on_lbracket # Prints a table. # # ==== Parameters # Array[Array[String, String, ...]] # # ==== Options # indent<Integer>:: Indent the first column by indent value. # colwidth<Integer>:: Force the first column to colwidth spaces wide. #
return if array on_period UNK on_nl on_ignored_nl formats on_op on_lbracket on_rbracket on_nl indent on_op options on_lbracket on_symbeg indent on_rbracket on_period # rubocop:disable MethodLength
on_tstring_beg on_tstring_content on_tstring_end on_nl else on_ignored_nl on_tstring_beg on_tstring_content on_embexpr_beg maxima on_op on_int on_embexpr_end on_tstring_content on_tstring_end on_nl end on_nl end on_nl # Don't output 2 trailing spaces when printing the last column
on_tstring_beg on_tstring_content on_embexpr_beg maxima on_embexpr_end on_tstring_content on_tstring_end on_nl else on_ignored_nl on_tstring_beg on_tstring_content on_embexpr_beg maxima on_embexpr_end on_tstring_content on_tstring_end on_nl end on_nl # Don't output 2 trailing spaces when printing the last column
def UNK on_lparen message on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl indent on_op options on_lbracket on_symbeg indent on_rbracket on_op on_int # Prints a long string, word-wrapping the text to the current width of the # terminal display. Ideal for printing heredocs. # # ==== Parameters # String # # ==== Options # indent<Integer>:: Indent each line of the printed paragraph by indent value. #
def UNK on_lparen destination on_rparen on_ignored_nl return true if on_ivar on_nl options on_op UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_op on_tstring_beg # Deals with file collision and returns true if the file should be # overwritten and false otherwise. If a block is given, it uses the block # response as the content for the diff. # # ==== Parameters # destination<String>:: the destination file to solve conflicts # block<Proc>:: an optional block that returns the value to be used in diff #
def UNK on_nl result on_op if on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period # This code was copied from Rake, available under MIT-LICENSE # Copyright (c) 2003, 2004 Jim Weirich
def UNK on_lparen statement on_rparen on_ignored_nl UNK on_period UNK statement on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_comma on_op # Called if something goes wrong during the execution. This is used by Foreman::Thor # internally and should not be used inside your scripts. If something went # wrong, you can always raise an exception. If you raise a Foreman::Thor::Error, it # will be rescued and wrapped in the method below. #
def UNK on_lparen UNK on_comma on_op on_rparen UNK on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl def UNK on_lparen message on_comma # Apply color to the given string with optional bold. Disabled in the # Foreman::Thor::Shell::Basic class. #
UNK on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl def UNK on_lparen message on_comma on_op color on_rparen on_ignored_nl UNK on_op on_tstring_beg #:nodoc:
value on_op value on_period to_s on_nl on_ignored_nl if value on_period size on_op on_int on_nl on_regexp_beg on_tstring_content on_embexpr_beg value on_embexpr_end on_tstring_content #:nodoc:
UNK on_nl on_tstring_content UNK end on_nl on_ignored_nl def UNK on_lparen destination on_comma UNK on_rparen UNK on_op on_const on_lbracket on_tstring_beg on_tstring_content #:nodoc:
UNK on_op on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op on_tstring_beg on_tstring_content on_tstring_end on_nl #:nodoc:
UNK on_op on_lparen UNK on_op UNK on_period options on_lbracket on_symbeg UNK on_rbracket on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl #:nodoc:
def UNK on_nl on_ivar on_op on_lparen UNK on_period UNK on_op UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl UNK # Calculate the dynamic width of the terminal
