UNK on_const on_nl UNK on_const on_nl on_ignored_nl def UNK on_lparen collection on_op UNK on_comma options on_op UNK UNK on_rparen options # = ActionView helpers # # This module serves for availability in ActionView templates. It also adds a new # view helper: +paginated_section+. # # == Using the helper without arguments # If the helper is called without passing in the collection object, it will # try to read from the instance variable inferred by the controller name. # For example, calling +will_paginate+ while the current controller is # PostsController will result in trying to read from the <tt>@posts</tt> # variable. Example: # # <%= will_paginate :id => true %> # # ... will result in <tt>@post</tt> collection getting paginated: # # <div class="pagination" id="posts_pagination"> ... </div> #
options on_comma collection on_op collection on_comma UNK if collection on_period UNK on_const on_nl collection on_op UNK on_nl on_ignored_nl options on_op #:nodoc:
options on_comma collection on_op collection on_comma UNK if collection on_period UNK on_const on_nl collection on_op UNK on_nl on_ignored_nl UNK on_lparen #:nodoc:
def UNK on_lparen on_op UNK on_comma on_op UNK on_rparen on_ignored_nl UNK on_op UNK on_lparen on_op UNK on_rparen on_nl if UNK # Wrapper for rendering pagination links at both top and bottom of a block # of content. # # <%= paginated_section @posts do %> # <ol id="posts"> # <% for post in @posts %> # <li> ... </li> # <% end %> # </ol> # <% end %> # # will result in: # # <div class="pagination"> ... </div> # <ol id="posts"> # ... # </ol> # <div class="pagination"> ... </div> # # Arguments are passed to a <tt>will_paginate</tt> call, so the same options # apply. Don't use the <tt>:id</tt> option; otherwise you'll finish with two # blocks of pagination links sharing the same ID (which is invalid HTML).
