UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl on_ignored_nl UNK on_symbeg current_page on_nl UNK on_symbeg total_entries on_nl # = Paginating finders for ActiveRecord models # # WillPaginate adds +paginate+, +per_page+ and other methods to # ActiveRecord::Base class methods and associations. # # In short, paginating finders are equivalent to ActiveRecord finders; the # only difference is that we start with "paginate" instead of "find" and # that <tt>:page</tt> is required parameter: # # @posts = Post.paginate :all, :page => params[:page], :order => 'created_at DESC' #
UNK on_const on_nl UNK on_const on_op on_const on_nl on_ignored_nl UNK on_symbeg current_page on_nl UNK on_symbeg total_entries on_nl on_ignored_nl def per_page # makes a Relation look like WillPaginate::Collection
def UNK on_lparen UNK on_rparen on_ignored_nl rel on_op super on_nl if rel on_period current_page on_nl rel on_period offset rel on_period # TODO: solve with less relation clones and code dups
def UNK on_lparen on_op args on_rparen on_ignored_nl if current_page on_nl rel on_op UNK on_nl rel on_period current_page on_op UNK on_nl # dirty hack to enable `first` after `limit` behavior above
def UNK on_lparen on_op args on_rparen on_ignored_nl if on_op UNK on_op args on_period UNK on_op on_lparen UNK on_op limit_value on_rparen # fix for Rails 3.0
def size on_nl if on_op UNK and limit_value and UNK on_period UNK on_nl UNK super on_comma limit_value UNK on_period UNK # workaround for Active Record 3.0
def UNK on_nl if on_op UNK and UNK on_nl total_entries on_op UNK on_nl else on_ignored_nl super on_nl end on_nl end # overloaded to be pagination-aware
def UNK on_lparen options on_op UNK on_rparen on_ignored_nl UNK super on_nl end on_nl on_ignored_nl def UNK on_nl if current_page on_period # workaround for Active Record 3.0
else on_ignored_nl on_op on_const on_op on_const on_period UNK on_lparen current_page on_comma limit_value on_rparen UNK on_op UNK on_op on_ignored_nl UNK on_period # workaround for Active Record 3.0
UNK on_nl else on_ignored_nl UNK on_nl end on_nl on_ignored_nl rel on_op rel on_period UNK on_lparen on_const on_rparen on_nl pagenum on_op # Active Record 3
UNK on_nl end on_nl on_ignored_nl rel on_op rel on_period UNK on_lparen on_const on_rparen on_nl pagenum on_op on_op on_const on_op on_const # Active Record 4
def UNK on_lparen UNK on_comma options on_rparen on_ignored_nl pagenum on_op options on_period UNK on_lparen on_symbeg UNK on_rparen UNK UNK on_const # Wraps +find_by_sql+ by simply adding LIMIT and OFFSET to your SQL string # based on the params otherwise used by paginating finds: +page+ and # +per_page+. # # Example: # # @developers = Developer.paginate_by_sql ['select * from developers where salary > ?', 80000], # :page => params[:page], :per_page => 3 # # A query for counting rows will automatically be generated if you don't # supply <tt>:total_entries</tt>. If you experience problems with this # generated SQL, you might want to perform the count manually in your # application. #
if UNK on_nl query on_op UNK on_nl on_tstring_content on_embexpr_beg query on_embexpr_end on_tstring_content on_embexpr_beg pager on_period offset on_op pager on_period per_page # add limit, offset
pager on_period UNK UNK on_lparen query on_rparen on_nl on_ignored_nl unless pager on_period total_entries on_nl UNK on_op UNK on_period UNK UNK # perfom the find
pager on_period total_entries on_op UNK on_lparen UNK on_rparen on_nl end on_nl end on_nl end on_nl end on_nl on_ignored_nl on_op on_const # perform the count query
on_op on_const on_op on_const on_period UNK on_const on_nl on_op on_const on_op on_const on_period UNK on_const on_nl on_op on_const on_op on_const # mix everything into Active Record
UNK on_period UNK UNK on_op UNK on_op UNK on_period UNK on_lparen on_symbeg UNK on_comma on_const on_rparen UNK on_nl end on_nl # support pagination on associations and scopes
