UNK on_embdoc on_embdoc on_embdoc on_embdoc on_embdoc on_embdoc on_embdoc on_embdoc on_embdoc on_embdoc on_embdoc on_embdoc on_embdoc on_embdoc on_embdoc on_embdoc on_embdoc on_embdoc on_embdoc # ~*~ encoding: utf-8 ~*~
on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_op on_const on_op on_const on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl UNK on_const # This file provides the following methods: # encodeURIComponent(componentString) # string.charCodeAt(k)
def UNK on_lparen UNK on_rparen on_ignored_nl on_op on_const on_op on_const on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl UNK on_const on_nl # component must be String
UNK on_const on_nl def UNK on_lparen k on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_lparen UNK on_tstring_content UNK on_rparen on_lbracket # define charCodeAt on String
UNK on_op UNK on_period UNK on_lparen UNK on_tstring_content UNK on_rparen on_lbracket k on_rbracket on_nl return UNK if UNK on_period UNK # use scan, nil check, and unpack instead of ord for 1.8 # 1.9 can simply use self[k].ord # http://stackoverflow.com/questions/7793177/split-utf8-string-regardless-of-ruby-version
def UNK on_lparen cc on_rparen on_ignored_nl if on_lparen on_int on_op cc on_op cc on_op on_int on_rparen on_semicolon on_ignored_nl return true # Does the char code correspond to an alpha-numeric char. # isAlphaNumeric('a'.ord) => true # isAlphaNumeric(''.ord) => false
if on_lparen on_int on_op cc on_op cc on_op on_int on_rparen on_semicolon on_ignored_nl return true on_nl end on_nl if on_lparen on_int # a - z
if on_lparen on_int on_op cc on_op cc on_op on_int on_rparen on_semicolon on_ignored_nl return true on_nl end on_nl if on_lparen on_int # A - Z
if on_lparen on_int on_op cc on_op cc on_op on_int on_rparen on_semicolon on_ignored_nl return true on_nl end on_nl on_ignored_nl return UNK # 0 - 9
if on_lparen cc on_op on_int on_rparen on_semicolon on_ignored_nl return true on_nl end on_nl if on_lparen on_int on_op cc on_op cc # !
if on_lparen on_int on_op cc on_op cc on_op on_int on_rparen on_semicolon on_ignored_nl return true on_nl end on_nl if on_lparen on_int # '()*
if on_lparen on_int on_op cc on_op cc on_op on_int on_rparen on_semicolon on_ignored_nl return true on_nl end on_nl if on_lparen cc # -.
if on_lparen cc on_op on_int on_rparen on_semicolon on_ignored_nl return true on_nl end on_nl if on_lparen cc on_op on_int on_rparen on_semicolon # _
if on_lparen cc on_op on_int on_rparen on_semicolon on_ignored_nl return true on_nl end on_nl on_ignored_nl return UNK on_nl end on_nl on_ignored_nl # ~
UNK on_op on_int on_semicolon on_ignored_nl on_ignored_nl def on_const on_lparen UNK on_comma result on_comma index on_rparen on_ignored_nl result on_lbracket index on_rbracket # Lazily initialized.
index on_op on_int on_nl result on_lbracket index on_rbracket on_op UNK on_lbracket UNK on_op on_int on_rbracket on_semicolon on_ignored_nl index on_op on_int # Char code of '%'.
def on_const on_lparen UNK on_rparen on_ignored_nl on_const on_lparen UNK on_comma UNK UNK on_rparen on_semicolon on_ignored_nl end on_nl on_ignored_nl def on_const # component must be String
def on_const on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_semicolon on_ignored_nl result on_op on_const on_period UNK # ECMA-262, section 15.1.3
result on_op on_const on_period UNK on_lparen UNK on_rparen on_semicolon on_ignored_nl index on_op on_int on_semicolon on_ignored_nl k on_op on_op on_int on_semicolon # We are going to pass result to %StringFromCharCodeArray # which does not expect any getters/setters installed # on the incoming array.
return result on_period UNK on_period UNK UNK on_tstring_content UNK on_nl end on_nl end end EMP EMP EMP EMP EMP EMP # use .compact to get rid of nils from charCodeAt # return %StringFromCharCodeArray(result); # 'c' = 8 bit signed char # http://www.ruby-doc.org/core-1.9.3/Array.html#method-i-pack
end EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP # class << self
