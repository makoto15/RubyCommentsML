UNK on_const on_nl UNK on_const on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_op on_regexp_beg on_tstring_content on_embexpr_beg on_const on_embexpr_end on_tstring_content # This is the script used to automatically convert all of twbs/bootstrap LESS to Sass. # # Most differences are fixed by regexps and other forms of string substitution. # There are Bootstrap-specific workarounds for the lack of parent selectors, recursion, mixin namespaces, extend within @media, etc in Sass 3.2.
on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_op on_regexp_beg on_tstring_content on_embexpr_beg on_const on_embexpr_end on_tstring_content on_embexpr_beg on_const on_embexpr_end on_tstring_content on_regexp_end on_nl # Some regexps for matching bits of SCSS:
on_const on_op on_regexp_beg on_tstring_content on_embexpr_beg on_const on_embexpr_end on_tstring_content on_embexpr_beg on_const on_embexpr_end on_tstring_content on_regexp_end on_nl on_const on_op on_regexp_beg on_tstring_content on_regexp_end on_nl # 1 selector (the part before the {)
on_const on_op on_regexp_beg on_tstring_content on_regexp_end on_nl on_const on_op on_regexp_beg on_tstring_content on_regexp_end on_nl on_const on_op on_regexp_beg on_tstring_content on_regexp_end on_nl on_const on_op # 1 // comment
on_const on_op on_regexp_beg on_tstring_content on_regexp_end on_nl on_const on_op on_regexp_beg on_tstring_content on_regexp_end on_nl on_const on_op on_regexp_beg on_tstring_content on_regexp_end on_nl on_const on_op # 1 {, except when part of @{ and #{
on_const on_op on_regexp_beg on_tstring_content on_regexp_end on_nl on_const on_op on_regexp_beg on_tstring_content on_regexp_end on_nl on_const on_op on_regexp_beg on_tstring_content on_regexp_end on_nl on_const on_op # same as the one above, but in reverse (on a reversed string)
on_const on_op on_regexp_beg on_tstring_content on_regexp_end on_nl on_const on_op on_regexp_beg on_tstring_content on_regexp_end on_nl on_const on_op on_regexp_beg on_embexpr_beg on_const on_embexpr_end on_tstring_content on_embexpr_beg # match closed brace, except when \w precedes }, or when }[.'"]. a heurestic to exclude } that are not selector body close }
on_const on_op on_regexp_beg on_embexpr_beg on_const on_embexpr_end on_tstring_content on_embexpr_beg on_const on_embexpr_end on_regexp_end on_nl on_const on_op on_regexp_beg on_embexpr_beg on_const on_embexpr_end on_tstring_content on_embexpr_beg # match any brace that opens or closes a properties body
on_const on_op on_regexp_beg on_tstring_content on_regexp_end on_nl on_const on_op on_regexp_beg on_tstring_content on_regexp_end on_nl on_ignored_nl on_const on_op on_lbrace on_tstring_beg on_tstring_content on_tstring_end on_op # valid characters in mixin definitions
on_const on_op on_lbrace on_tstring_beg on_tstring_content on_tstring_end on_op on_tstring_beg on_tstring_content on_tstring_end on_rbrace on_nl on_ignored_nl on_const on_op UNK on_words_sep on_tstring_content on_words_sep on_tstring_content # These mixins will get vararg definitions in SCSS (not supported by LESS):
on_const on_op UNK on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_end on_nl on_ignored_nl on_const # These mixins will get vararg definitions in SCSS (not supported by LESS):
on_const on_op UNK on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_end on_nl on_ignored_nl def UNK on_lparen less on_rparen on_ignored_nl less on_op UNK # A list of classes that will be extracted into mixins # Only the top-level selectors of form .CLASS { ... } are extracted. CLASS must not be used in any other rule definition. # This is a work-around for libsass @extend issues
def UNK on_lparen less on_rparen on_ignored_nl less on_op UNK on_lparen less on_rparen on_nl less on_op UNK on_lparen less on_rparen if # Convert a snippet of bootstrap LESS to Scss
file on_op UNK on_lparen file on_rparen on_nl file on_op replace_all file on_comma on_regexp_beg on_tstring_content on_regexp_end on_comma on_tstring_beg on_tstring_end on_comma on_label # apply common conversions
file on_op replace_rules on_lparen file on_comma on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_rparen on_lbrace on_tstring_beg on_tstring_end on_rbrace on_nl # remove second scale mixins as this is handled via vararg in the first one
file on_op extract_nested_rule file on_comma on_tstring_beg on_tstring_content on_tstring_end on_nl when on_tstring_beg on_tstring_content on_tstring_end on_nl file on_op replace_all file on_comma on_regexp_beg # extract .close { button& {...} } rule
file on_op replace_all on_lparen file on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl path on_op # .bg-primary will not get patched automatically as it includes an additional rule. fudge for now
UNK on_op on_tstring_beg on_embexpr_beg UNK on_embexpr_end on_tstring_content on_tstring_end on_nl UNK on_op on_const on_period UNK on_lparen on_tstring_beg on_embexpr_beg UNK on_embexpr_end on_tstring_content # move bootstrap/_bootstrap.scss to _bootstrap.scss adjusting import paths
UNK on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_tstring_beg on_tstring_content on_embexpr_beg on_const on_op on_const on_embexpr_end on_tstring_content on_tstring_end on_op on_ignored_nl on_const on_period UNK # generate variables template
def UNK on_lparen file on_rparen on_ignored_nl mixins on_op UNK on_op UNK on_lparen file on_rparen on_nl file on_op UNK on_lparen file # apply general less to scss conversion
mixins on_op UNK on_op UNK on_lparen file on_rparen on_nl file on_op UNK on_lparen file on_rparen on_nl file on_op UNK on_lparen # get local mixin names before converting the definitions
def UNK on_lparen css on_comma on_label raise on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_comma on_label on_int on_comma on_label raise on_lparen on_tstring_beg # convert recursively evaluated selector $list to @for loop
UNK on_op on_heredoc_beg on_period strip on_nl on_tstring_content on_embexpr_beg from on_embexpr_end on_tstring_content on_embexpr_beg selector on_embexpr_end on_tstring_content on_heredoc_end UNK on_period UNK on_lparen # inject local variables as default arguments # this is to avoid overwriting outer variables with the same name with Sass <= 3.3 # see also: https://github.com/twbs/bootstrap-sass/issues/636
def UNK on_lparen file on_rparen on_ignored_nl file on_op replace_rules file on_comma on_regexp_beg on_tstring_content on_regexp_end on_comma on_label UNK do on_op css # convert grid mixins LESS when => Sass @if
def UNK on_lparen UNK on_comma on_label on_lbrace on_rbrace on_rparen on_ignored_nl mixins on_op UNK on_lparen UNK on_comma on_label true on_rparen on_nl # We need to keep a list of shared mixin names in order to convert the includes correctly # Before doing any processing we read shared mixins from a file # If a mixin is nested, it gets prefixed in the list (e.g. #gradient > .horizontal to 'gradient-horizontal')
replace_rules on_lparen UNK on_comma selector on_rparen on_lbrace on_op rule on_op on_ignored_nl mixins on_op UNK on_lparen unindent on_lparen unwrap_rule_block on_lparen rule # we use replace_rules without replacing anything just to use the parsing algorithm
def UNK on_lparen file on_rparen on_ignored_nl UNK on_op UNK on_lbrace on_op UNK on_op on_ignored_nl s on_op on_const on_period new on_lparen # margin: a -b # LESS: sets 2 values # Sass: sets 1 value (a-b) # This wraps a and -b so they evaluates to 2 values in Sass
UNK on_op UNK on_lbrace on_op UNK on_op on_ignored_nl s on_op on_const on_period new on_lparen UNK on_rparen on_nl r on_op on_lbracket # split_prop_val.call('(@navbar-padding-vertical / 2) -@navbar-padding-horizontal') # #=> ["(navbar-padding-vertical / 2)", "-navbar-padding-horizontal"]
def UNK on_lparen less on_comma UNK on_op on_tstring_beg on_tstring_end on_rparen on_ignored_nl less on_period gsub on_regexp_beg on_tstring_content on_regexp_end on_comma on_ignored_nl on_tstring_beg # @import "file.less" to "#{target_path}file;"
def UNK on_lparen file on_comma rule_sel on_rparen on_ignored_nl log_transform rule_sel on_nl UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl replace_rules on_lparen file # @mixin a() { tr& { color:white } } # to: # @mixin a($parent) { tr#{$parent} { color: white } }
UNK on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end on_rparen on_lbrace on_tstring_beg on_embexpr_beg on_backref on_embexpr_end on_tstring_content on_embexpr_beg UNK on_embexpr_end on_embexpr_beg on_tstring_beg on_tstring_content # insert param into mixin def
UNK on_lparen UNK on_rparen on_lbrace on_op props on_op on_ignored_nl UNK props if props on_period strip on_period empty? on_nl UNK on_op # wrap properties in #{$parent} { ... }
replace_rules on_lparen UNK on_comma on_regexp_beg on_tstring_content on_regexp_end on_rparen on_lbrace on_op rule on_op UNK rule on_comma on_regexp_beg on_tstring_content on_regexp_end on_comma on_tstring_beg # change nested& rules to nested#{$parent}
def extract_nested_rule on_lparen file on_comma selector on_comma UNK on_op UNK on_rparen on_ignored_nl matches on_op on_lbracket on_rbracket on_nl file on_op replace_rules # extracts rule immediately after it's parent, and adjust the selector # .x { textarea& { ... }} # to: # .x { ... } # textarea.x { ... }
file on_op replace_rules on_lparen file on_comma on_tstring_beg on_tstring_content on_embexpr_beg selector on_embexpr_end on_tstring_end on_comma on_label true on_rparen on_lbrace on_op rule on_comma # first find the rules, and remove them
matches on_period each do on_op m on_op on_ignored_nl m on_lbracket on_int on_rbracket on_period UNK on_regexp_beg on_tstring_content on_embexpr_beg on_const on_embexpr_end on_tstring_content # replace rule selector with new_selector
def UNK on_lparen file on_comma rule_sel on_rparen on_ignored_nl log_transform rule_sel on_nl replace_rules file on_comma on_tstring_beg on_tstring_content on_tstring_end on_op rule_sel on_comma # .visible-sm { @include responsive-visibility() } # to: # @include responsive-visibility('.visible-sm')
if sel on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl UNK on_op UNK on_lparen css on_comma UNK on_period begin on_rparen # take one up selector chain if this is an &. selector
unindent unwrap_rule_block on_lparen rule on_rparen on_period gsub on_lparen on_regexp_beg on_tstring_content on_regexp_end on_rparen on_lbrace on_ignored_nl name on_comma args on_op on_backref on_comma # unwrap, and replace @include
def UNK on_lparen file on_comma UNK on_comma prefix on_rparen on_ignored_nl log_transform UNK on_comma prefix on_nl replace_rules file on_comma on_const on_period # #gradient > { @mixin horizontal ... } # to: # @mixin gradient-horizontal
def UNK on_lparen file on_comma UNK on_rparen on_ignored_nl UNK on_period each do on_op selector on_comma mixin on_op on_ignored_nl file on_op # .btn { ... } -> @mixin btn { ... }; .btn { @include btn }
def UNK on_lparen less on_comma UNK on_rparen on_ignored_nl UNK on_op on_regexp_beg on_tstring_content on_regexp_end on_nl on_ignored_nl less on_op less on_period gsub # @include and @extend from LESS: # .mixin() -> @include mixin() # #scope > .mixin() -> @include scope-mixin() # &:extend(.mixin all) -> @include mixin()
def UNK on_lparen file on_rparen on_ignored_nl log_transform on_nl file on_period gsub on_lparen on_ignored_nl on_regexp_beg on_tstring_content on_regexp_end on_comma on_ignored_nl on_tstring_beg on_tstring_content # change Microsoft filters to Sass calling convention
def unwrap_rule_block on_lparen css on_rparen on_ignored_nl css on_lbracket on_lparen css on_op on_const on_rparen on_op on_int on_op on_op on_int on_rbracket on_period # unwraps topmost rule block # #sel { a: b; } # to: # a: b;
less on_op on_regexp_beg on_tstring_content on_regexp_end on_nl from on_op UNK on_op UNK on_period UNK on_period UNK on_op on_int on_nl less on_lbracket # skip header comment
gsub on_lparen on_regexp_beg on_tstring_content on_regexp_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl less on_nl end on_nl on_ignored_nl def UNK on_lparen less # variables that would be ignored by gsub above: e.g. @page-header-border-color
less on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen less on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end on_rparen # Get rid of ~"" escape
less on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end on_rparen on_lbrace on_op UNK on_op UNK on_period gsub on_lparen on_regexp_beg on_tstring_content on_regexp_end on_comma # Get rid of @{} escape # interpolate variables in strings, e.g. url("$file-1x") => url("#{$file-1x}")
end on_nl on_ignored_nl def UNK on_lparen scss on_rparen on_ignored_nl log_transform on_nl scss on_period gsub on_lparen on_regexp_beg on_tstring_content on_regexp_end on_comma on_tstring_beg # Get rid of e(%("")) escape
def UNK on_lparen less on_rparen on_ignored_nl UNK on_op on_regexp_beg on_tstring_content on_regexp_end on_nl on_ignored_nl UNK on_op on_tstring_beg on_tstring_end on_nl less on_period # Converts &-
def unindent on_lparen txt on_comma UNK on_op on_int on_rparen on_ignored_nl txt on_period gsub on_regexp_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_content on_regexp_end # unindent by n spaces
def UNK on_lparen txt on_comma UNK on_op on_int on_rparen on_ignored_nl UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_op UNK on_nl txt on_period # indent by n spaces
def UNK on_lparen txt on_rparen on_ignored_nl txt on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end on_rparen on_period UNK on_period UNK on_nl end # get indent length from the first line of txt
def UNK on_lparen scss on_comma on_op mixins on_rparen on_ignored_nl scss on_op scss on_period dup on_nl UNK on_op on_lbracket on_rbracket on_nl # @mixin transition($transition) { # to: # @mixin transition($transition...) {
def UNK on_lparen scss on_rparen on_ignored_nl scss on_op scss on_period dup on_nl on_const on_period each do on_op mixin on_op on_ignored_nl # @include transition(#{border-color ease-in-out .15s, box-shadow ease-in-out .15s}) # to # @include transition(border-color ease-in-out .15s, box-shadow ease-in-out .15s)
def UNK on_lparen UNK on_rparen on_ignored_nl sel on_op on_regexp_beg on_tstring_content on_embexpr_beg on_const on_embexpr_end on_tstring_content on_regexp_end on_period UNK on_lparen UNK on_rparen # get full selector for rule_block
def replace_rules on_lparen less on_comma selector on_op on_const on_comma UNK on_op on_lbrace on_rbrace on_comma on_op block on_rparen on_ignored_nl UNK on_op # replace CSS rule blocks matching rule_prefix with yield(rule_block, rule_pos) # will also include immediately preceding comments in rule_block # # option :comments -- include immediately preceding comments in rule_block # # replace_rules(".a{ \n .b{} }", '.b') { |rule, pos| ">#{rule}<" } #=> ".a{ \n >.b{}< }"
def UNK on_lparen css on_comma UNK on_op on_lbrace on_rbrace on_rparen on_ignored_nl s on_op on_const on_period new on_lparen css on_rparen on_nl # Get a all top-level selectors (with {)
def UNK on_lparen css on_comma UNK on_comma sub on_rparen on_ignored_nl s on_op on_const on_period new on_lparen css on_rparen on_nl UNK # replace in the top-level selector # replace_in_selector('a {a: {a: a} } a {}', /a/, 'b') => 'b {a: {a: a} } b {}'
s on_op on_const on_period new on_lparen css on_rparen on_nl UNK on_op on_int on_nl UNK on_op on_lbracket on_rbracket on_nl while on_lparen # scan for selector positions in css
def UNK on_lparen css on_comma on_op block on_rparen on_ignored_nl s on_op on_const on_period new on_lparen css on_rparen on_nl s on_period # replace first level properties in the css with yields # replace_properties("a { color: white }") { |props| props.gsub 'white', 'red' }
def UNK on_lparen css on_comma pos on_comma depth on_op on_op on_int on_rparen on_ignored_nl css on_lbracket UNK on_lparen css on_comma pos # immediate selector of css at pos
def UNK on_lparen css on_comma pos on_comma depth on_op on_op on_int on_rparen on_ignored_nl to on_op UNK on_lparen css on_comma pos # get the pos of css def at pos (search backwards)
def UNK on_lparen css on_comma from on_comma depth on_op on_int on_rparen on_ignored_nl s on_op on_const on_period new on_lparen css on_lbracket # next matching brace for brace at from
def UNK on_lparen css on_comma from on_comma depth on_op on_int on_rparen on_ignored_nl s on_op on_const on_period new on_lparen css on_lbracket # opening brace position from +from+ (search backwards)
def UNK on_lparen UNK on_comma UNK on_comma UNK on_op UNK on_comma on_op block on_rparen on_ignored_nl UNK on_op on_int on_nl UNK # insert substitutions into text at positions (Range or Fixnum) # substitutions can be passed as array or as yields from the &block called with |substring, position, text| # position is a range (begin..end)
r on_op UNK on_op UNK on_lbracket UNK on_rbracket on_op block on_period UNK on_lparen UNK on_lbracket p on_rbracket on_comma p on_comma # block returns the substitution, e.g.: { |text, pos| text[pos].upcase }
UNK on_op r on_period UNK on_op on_lparen p on_period end on_op p on_period begin on_op on_lparen p on_period UNK on_op # add the change in length to offset
