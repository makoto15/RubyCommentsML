on_ignored_nl UNK on_op UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl puts on_tstring_beg on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_nl puts on_tstring_beg # # make sure we can run redis #
on_ignored_nl on_const on_period UNK UNK on_ignored_nl UNK on_const on_period UNK on_op on_gvar on_nl UNK on_op UNK on_tstring_content on_tstring_end on_period UNK # # start our own redis when the tests start, # kill it when they end #
UNK on_const on_nl def UNK on_lparen UNK on_comma on_op UNK on_rparen on_ignored_nl UNK on_op on_const on_op on_const on_period new on_lparen ## # Helper to perform job classes #
UNK on_const on_nl def UNK on_lparen on_op UNK on_comma on_op UNK on_rparen on_ignored_nl UNK UNK UNK UNK on_nl on_ignored_nl UNK ## # Helper to make Minitest::Assertion exceptions work properly # in the block given to Resque::Worker#work. #
def UNK on_lparen on_op UNK on_comma on_op UNK on_rparen on_ignored_nl UNK UNK UNK UNK on_nl on_ignored_nl UNK on_op UNK on_lparen # if a block is given, ensure that it is run, and that any assertion # failures that occur inside it propagate up to the test.
on_ignored_nl class on_const on_nl def self on_period perform on_lparen UNK on_comma UNK on_rparen on_ignored_nl end on_nl end on_nl on_ignored_nl class # # fixture classes #
class on_op self on_nl UNK on_symbeg fake_time on_nl on_ignored_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl def UNK on_nl # Thanks, Timecop
def UNK on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_comma UNK on_op on_gvar on_comma on_gvar on_nl UNK on_comma UNK # From minitest/unit
def UNK on_nl on_gvar on_op on_const on_period new on_lparen on_const on_period UNK on_lparen on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end # Log to log/test.log
