UNK on_const on_nl def self on_period UNK on_lparen UNK on_op UNK UNK on_rparen on_ignored_nl backend on_period UNK on_lparen on_op UNK # The Failure module provides an interface for working with different # failure backends. # # You can use it to query the failure backend without knowing which specific # backend is being used. For instance, the Resque web app uses it to display # stats and other information.
def self on_period UNK on_lparen UNK on_op UNK UNK on_rparen on_ignored_nl backend on_period UNK on_lparen on_op UNK on_period UNK on_lparen # Creates a new failure, which is delegated to the appropriate backend. # # Expects a hash with the following keys: # :exception - The Exception object # :worker - The Worker object who is reporting the failure # :queue - The string name of the queue from which the job was pulled # :payload - The job's payload
def self on_period UNK on_lparen backend on_rparen on_ignored_nl UNK on_op backend on_nl end on_nl self on_period backend on_op nil on_nl # # Sets the current backend. Expects a class descendent of # `Resque::Failure::Base`. # # Example use: # require 'resque/failure/airbrake' # Resque::Failure.backend = Resque::Failure::Airbrake
def self on_period backend on_nl UNK UNK UNK UNK on_nl on_ignored_nl UNK on_const UNK on_tstring_beg on_tstring_content on_tstring_end UNK on_nl UNK # Returns the current backend class. If none has been set, falls # back to `Resque::Failure::Redis`
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op on_tstring_beg UNK UNK UNK on_tstring_content on_tstring_end on_nl on_const on_period UNK # Obtain the failure queue name for a given job queue
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK on_lparen UNK on_tstring_content UNK on_comma on_tstring_beg on_tstring_end on_rparen on_nl # Obtain the job queue name for a given failure queue
def self on_period UNK on_nl backend on_period UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen queue on_op nil # Returns an array of all the failed queues in the system
def self on_period UNK on_lparen queue on_op nil on_comma UNK on_op nil on_rparen on_ignored_nl backend on_period UNK on_lparen queue on_comma # Returns the int count of how many failures we have seen.
def self on_period UNK on_lparen UNK on_op UNK on_comma UNK on_op UNK on_comma queue on_op nil on_rparen on_ignored_nl backend on_period # Returns an array of all the failures, paginated. # # `offset` is the int of the first item in the page, `limit` is the # number of items to return.
def self on_period UNK on_lparen UNK on_op UNK on_comma UNK on_op self on_period UNK on_comma queue on_op nil on_comma UNK # Iterate across all failures with the given options
def self on_period UNK on_nl backend on_period UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen queue on_op nil # The string url of the backend's web interface, if any.
def self on_period UNK on_lparen queue on_op nil on_rparen on_ignored_nl backend on_period UNK on_lparen queue on_rparen on_nl end on_nl on_ignored_nl # Clear all failure jobs
def self on_period UNK on_lparen queue on_rparen on_ignored_nl backend on_period UNK on_lparen queue on_rparen on_nl end on_nl on_ignored_nl def self # Requeues all failed jobs in a specific queue. # Queue name should be a string.
def self on_period UNK on_nl backend on_period UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen queue on_rparen on_ignored_nl # Requeues all failed jobs
def self on_period UNK on_lparen queue on_rparen on_ignored_nl backend on_period UNK on_lparen queue on_rparen on_nl end on_nl on_ignored_nl end on_nl # Removes all failed jobs in a specific queue. # Queue name should be a string.
