on_const on_period redis on_period reconnect on_nl on_const on_op on_const on_period create on_lparen on_symbeg UNK on_comma on_const on_comma tmpfile on_rparen on_nl # ensure we actually fork
on_const on_period redis on_period reconnect on_nl on_const on_op on_const on_period create on_lparen on_symbeg UNK on_comma on_const on_rparen on_nl worker on_op # ensure we actually fork
on_const on_period redis on_period reconnect on_nl on_const on_op on_const on_period create on_lparen on_symbeg UNK on_comma on_const on_comma tmpfile on_rparen on_nl # ensure we actually fork
assert_equal on_ivar on_period pid on_comma found on_period UNK on_lparen on_symbeg on_ivar on_rparen on_nl on_ignored_nl assert_equal on_ivar on_period to_s on_comma found # we ensure that the found ivar @pid is set to the correct value since # Resque::Worker#pid will use it instead of Process.pid if present
other_worker on_op on_const on_op on_const on_period new on_lparen on_symbeg UNK on_rparen on_nl other_worker on_period pid on_op on_int on_nl other_worker on_period # inject fake worker
UNK on_period prune_dead_workers on_nl assert_equal on_lbracket workerc on_rbracket on_comma on_const on_op on_const on_period all_workers_with_expired_heartbeats on_nl end on_nl on_ignored_nl it on_tstring_beg # workerC does not get pruned because workerB already pruned recently
it on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl workera on_op on_const on_op on_const on_period new on_lparen on_symbeg jobs on_rparen on_nl workera on_period # This was added because PruneDeadWorkerDirtyExit does not have a backtrace, # and the error handling code did not account for that.
on_const on_period UNK on_period redis on_period stubs on_lparen on_symbeg UNK on_rparen on_period raises on_lparen on_const on_op on_const on_rparen on_nl on_ignored_nl # the specific error isn't important, could be something else
workera on_op on_const on_op on_const on_period new on_lparen on_symbeg jobs on_rparen on_nl workera on_period UNK on_lparen on_symbeg on_ivar on_comma on_tstring_beg # first we fake out several dead workers # 1: matches queue and hostname; gets pruned.
workerb on_op on_const on_op on_const on_period new on_lparen on_symbeg jobs on_rparen on_nl workerb on_period UNK on_lparen on_symbeg on_ivar on_comma on_tstring_beg # 2. matches queue but not hostname; no prune.
workerb on_op on_const on_op on_const on_period new on_lparen on_symbeg high on_rparen on_nl workerb on_period UNK on_lparen on_symbeg on_ivar on_comma on_tstring_beg # 3. matches hostname but not queue; no prune.
workerb on_op on_const on_op on_const on_period new on_lparen on_symbeg high on_rparen on_nl workerb on_period UNK on_lparen on_symbeg on_ivar on_comma on_tstring_beg # 4. matches neither hostname nor queue; no prune.
on_ivar on_period work on_lparen on_int on_rparen on_nl on_ignored_nl UNK on_op on_const on_op on_const on_period all on_period UNK on_lparen on_op on_symbeg # then we prune them
assert on_op UNK on_period UNK on_lparen on_tstring_beg on_embexpr_beg on_backtick on_tstring_content on_tstring_end on_period chomp on_embexpr_end on_tstring_content on_tstring_end on_rparen on_nl on_ignored_nl assert # pruned
assert UNK on_period UNK on_lparen on_tstring_beg on_embexpr_beg on_backtick on_tstring_content on_tstring_end on_period chomp on_embexpr_end on_tstring_content on_tstring_end on_rparen on_nl assert UNK on_period # not pruned
workera on_period work on_lparen on_int on_rparen on_nl assert_equal on_int on_comma on_gvar on_nl end on_nl on_ignored_nl it on_tstring_beg on_tstring_content on_tstring_end do #Verify it's only run once.
without_forking do on_ignored_nl workera on_period work on_lparen on_int on_rparen on_nl end on_nl assert on_op on_gvar on_comma on_tstring_beg on_tstring_content on_tstring_end on_nl # This sets ENV['FORK_PER_JOB'] = 'false' and then restores it
on_gvar on_op false on_nl on_const on_period UNK on_op on_const on_period new on_lbrace on_gvar on_op true on_rbrace on_nl workera on_op on_const # There is already a job in the queue from line 24
on_ivar on_period expects on_lparen on_symbeg UNK on_rparen on_period raises on_lparen on_const on_rparen on_nl on_const on_period UNK on_lparen on_symbeg jobs on_comma # empty queue
on_const on_period redis on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_const on_period pid on_rparen on_nl UNK UNK on_nl on_const on_period # get its own connection
on_const on_period redis on_period reconnect on_nl on_ignored_nl worker on_op on_const on_op on_const on_period new on_lparen on_symbeg UNK on_rparen on_nl worker # reconnect to redis
UNK on_op on_const on_period redis on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_int on_rparen on_nl UNK UNK on_op nil on_nl # ensure the worker is started
on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma worker_pid on_rparen on_nl on_const on_period UNK on_lparen worker_pid on_rparen on_nl on_ignored_nl result # send signal to abort the worker
result on_op on_const on_period redis on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_int on_rparen on_nl UNK result on_op nil on_nl # wait to see how it all came down
UNK on_op on_op on_lparen on_backtick on_tstring_content on_embexpr_beg UNK on_period to_s on_embexpr_end on_tstring_content on_tstring_end on_rparen on_period empty? on_nl assert on_op UNK # ensure that the child pid is no longer running
