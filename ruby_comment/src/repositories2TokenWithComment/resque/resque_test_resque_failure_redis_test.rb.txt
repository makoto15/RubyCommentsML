UNK on_period save on_nl on_const on_op on_const on_op on_const on_period UNK end on_nl on_ignored_nl it on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl # test assumption: the bad string should not be able to round trip though JSON
end on_nl on_ignored_nl it on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl assert_equal on_int on_comma on_const on_op on_const on_op on_const on_period UNK on_nl # should not raise an error
assert_equal on_int on_comma on_const on_op on_const on_op on_const on_period UNK on_nl on_const on_op on_const on_op on_const on_period each on_int on_comma # ensure that there are 6 failed jobs in total as configured
assert_equal class_one on_comma item UNK on_tstring_beg on_tstring_content on_tstring_end UNK UNK on_tstring_beg on_tstring_content on_tstring_end UNK on_nl end on_nl assert_equal on_int on_comma # ensure it iterates only jobs with the specified class name (it was not # which cause we only got 1 job with class=Foo since it iterates all the # jobs and limit already reached)
assert_equal on_int on_comma num_iterations on_nl end on_nl on_ignored_nl it on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl num_iterations on_op on_int on_nl class_one on_op # ensure only iterates max up to the limit specified
assert_equal on_int on_comma on_const on_op on_const on_op on_const on_period UNK on_nl on_const on_op on_const on_op on_const on_period each on_int on_comma # ensure that there are 6 failed jobs in total as configured
assert_equal on_int on_comma num_iterations on_nl end on_nl on_ignored_nl end on_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP # ensure only iterates max up to the limit specified
