class on_const on_nl UNK on_const on_nl UNK on_const on_nl def redis on_nl on_const on_period redis on_nl end on_nl UNK on_symbeg # A Resque::Job represents a unit of work. Each job lives on a # single queue and has an associated payload object. The payload # is a hash with two attributes: `class` and `args`. The `class` is # the name of the Ruby class which should be used to run the # job. The `args` are an array of arguments which should be passed # to the Ruby class's `perform` class-level method. # # You can manually run a job using this code: # # job = Resque::Job.reserve(:high) # klass = Resque::Job.constantize(job.payload['class']) # klass.perform(*job.payload['args'])
def encode on_lparen object on_rparen on_ignored_nl on_const on_period encode on_lparen object on_rparen on_nl end on_nl on_ignored_nl def decode on_lparen object # Given a Ruby object, returns a string suitable for storage in a # queue.
def decode on_lparen object on_rparen on_ignored_nl on_const on_period decode on_lparen object on_rparen on_nl end on_nl on_ignored_nl def self on_period encode # Given a string, returns a Ruby object.
def self on_period encode on_lparen object on_rparen on_ignored_nl on_const on_period encode on_lparen object on_rparen on_nl end on_nl on_ignored_nl def self # Given a Ruby object, returns a string suitable for storage in a # queue.
def self on_period decode on_lparen object on_rparen on_ignored_nl on_const on_period decode on_lparen object on_rparen on_nl end on_nl on_ignored_nl def UNK # Given a string, returns a Ruby object.
def UNK on_lparen UNK on_rparen on_ignored_nl on_const on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen UNK # Given a word with dashes, returns a camel cased version of it.
def UNK on_lparen UNK on_rparen on_ignored_nl on_const on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl on_const on_op on_const on_period # Tries to find a constant with the name specified in the argument string
on_const on_op on_const on_period UNK on_lparen on_const on_rparen on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg queue on_nl on_ignored_nl # Raise Resque::Job::DontPerform from a before_perform hook to # abort the job.
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg queue on_nl on_ignored_nl UNK on_symbeg payload on_nl on_ignored_nl def UNK on_lparen queue on_comma # The worker object which is currently processing this job.
UNK on_symbeg queue on_nl on_ignored_nl UNK on_symbeg payload on_nl on_ignored_nl def UNK on_lparen queue on_comma payload on_rparen on_ignored_nl on_ivar on_op # The name of the queue from which this job was pulled (or is to be # placed)
UNK on_symbeg payload on_nl on_ignored_nl def UNK on_lparen queue on_comma payload on_rparen on_ignored_nl on_ivar on_op queue on_nl on_ivar on_op payload # This job's associated payload object.
def self on_period UNK on_lparen queue on_comma klass on_comma on_op args on_rparen on_ignored_nl on_const on_period UNK on_lparen klass on_comma queue # Creates a job by placing it on a queue. Expects a string queue # name, a string class name, and an optional array of arguments to # pass to the class' `perform` method. # # Raises an exception if no queue or class is given.
UNK on_lparen on_symbeg UNK on_comma UNK on_tstring_beg on_tstring_content on_tstring_end on_op klass on_comma on_tstring_beg on_tstring_content on_tstring_end on_op decode on_lparen encode on_lparen # Instantiating a Resque::Job and calling perform on it so callbacks run # decode(encode(args)) to ensure that args are normalized in the same manner as a non-inline job
def self on_period UNK on_lparen queue on_comma klass on_comma on_op args on_rparen on_ignored_nl klass on_op klass on_period UNK on_nl UNK # Removes a job from a queue. Expects a string queue name, a # string class name, and, optionally, args. # # Returns the number of jobs destroyed. # # If no args are provided, it will remove all jobs of the class # provided. # # That is, for these two jobs: # # { 'class' => 'UpdateGraph', 'args' => ['defunkt'] } # { 'class' => 'UpdateGraph', 'args' => ['mojombo'] } # # The following call will remove both: # # Resque::Job.destroy(queue, 'UpdateGraph') # # Whereas specifying args will only remove the 2nd job: # # Resque::Job.destroy(queue, 'UpdateGraph', 'mojombo') # # This method can be potentially very slow and memory intensive, # depending on the size of your queue, as it loads all jobs into # a Ruby array before processing.
def self on_period UNK on_lparen queue on_rparen on_ignored_nl UNK UNK payload on_op on_const on_period UNK on_lparen queue on_rparen on_nl UNK # Given a string queue name, returns an instance of Resque::Job # if any jobs are available. If not, returns nil.
def UNK on_nl job on_op payload_class on_nl job_args on_op args on_op on_lbracket on_rbracket on_nl UNK on_op UNK on_nl on_ignored_nl UNK # Attempts to perform the work represented by this job instance. # Calls #perform on the class given in the payload with the # arguments given in the payload.
UNK on_ignored_nl UNK on_period UNK do on_op hook on_op on_ignored_nl job on_period UNK on_lparen hook on_comma on_op job_args on_rparen on_nl # Execute before_perform hook. Abort the job gracefully if # Resque::DontPerform is raised.
if UNK on_period UNK on_nl job on_period UNK on_lparen on_op job_args on_rparen on_nl UNK on_op UNK on_nl UNK on_ignored_nl UNK # Execute the job. Do it in an around_perform hook if available.
UNK on_op UNK on_period UNK on_period UNK on_lparen UNK on_rparen do on_op UNK on_comma hook on_op on_ignored_nl if UNK on_nl # We want to nest all around_perform plugins, with the last one # finally calling perform
UNK on_period UNK do on_op hook on_op on_ignored_nl job on_period UNK on_lparen hook on_comma on_op job_args on_rparen on_nl end on_nl # Execute after_perform hook
UNK UNK on_nl on_ignored_nl rescue on_const on_op e on_nl UNK on_lparen e on_rparen on_nl UNK e on_nl end on_nl end # Return true if the job was performed
rescue on_const on_op e on_nl UNK on_lparen e on_rparen on_nl UNK e on_nl end on_nl end on_nl on_ignored_nl def payload_class # If an exception occurs during the job execution, look for an # on_failure hook then re-raise.
def payload_class on_nl on_ivar on_op UNK on_lparen on_ivar on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_rparen on_nl end on_nl on_ignored_nl def UNK # Returns the actual class constant represented in this job's payload.
def UNK on_nl payload_class on_period UNK on_nl rescue on_const on_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl # Returns the payload class as a string without raising NameError
def args on_nl on_ivar on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl end on_nl on_ignored_nl def UNK on_lparen exception on_rparen on_ignored_nl UNK # Returns an array of args represented in this job's payload.
def UNK on_lparen exception on_rparen on_ignored_nl UNK on_ignored_nl UNK on_lparen exception on_rparen on_nl rescue on_const on_op e on_nl UNK e # Given an exception object, hands off the needed parameters to # the Failure module.
def UNK on_nl self on_period class on_period UNK on_lparen queue on_comma payload_class on_comma on_op args on_rparen on_nl end on_nl on_ignored_nl # Creates an identical job, essentially placing this job back on # the queue.
def UNK on_nl UNK on_op on_ivar on_nl on_tstring_beg on_tstring_content on_tstring_end on_op on_lbracket on_ivar on_comma UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket # String representation
def on_op on_lparen UNK on_rparen on_ignored_nl queue on_op UNK on_period queue on_op on_ignored_nl payload_class on_op UNK on_period payload_class on_op on_ignored_nl # Equality
