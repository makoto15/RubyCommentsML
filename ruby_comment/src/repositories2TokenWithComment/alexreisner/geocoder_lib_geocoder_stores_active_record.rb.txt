UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_op on_const on_nl UNK on_const on_nl UNK # -*- coding: utf-8 -*-
UNK on_const on_op on_const on_nl UNK on_const on_nl UNK on_const on_nl on_ignored_nl def self on_period UNK on_lparen UNK on_rparen on_ignored_nl ## # Add geocoding functionality to any ActiveRecord object. #
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK on_const on_nl UNK on_period UNK UNK on_ignored_nl on_ignored_nl UNK ## # Implementation of 'included' hook method. #
UNK on_symbeg UNK on_comma UNK on_lbrace on_ignored_nl where on_lparen on_tstring_beg on_embexpr_beg table_name on_embexpr_end on_tstring_content on_embexpr_beg geocoder_options on_lbracket on_symbeg latitude on_rbracket # scope: geocoded objects
UNK on_symbeg UNK on_comma UNK on_lbrace on_ignored_nl where on_lparen on_tstring_beg on_embexpr_beg table_name on_embexpr_end on_tstring_content on_embexpr_beg geocoder_options on_lbracket on_symbeg latitude on_rbracket # scope: not-geocoded objects
UNK on_symbeg UNK on_comma UNK on_lbrace on_ignored_nl where on_lparen on_tstring_beg on_embexpr_beg table_name on_embexpr_end on_tstring_content on_embexpr_beg geocoder_options on_lbracket on_symbeg UNK on_rbracket # scope: not-reverse geocoded objects
UNK on_symbeg UNK on_comma UNK on_lbrace on_op UNK on_comma on_op args on_op on_ignored_nl latitude on_comma longitude on_op on_const on_op on_const ## # Find all objects within a radius of the given location. # Location may be either a string to geocode or an array of # coordinates (<tt>[lat,lon]</tt>). Also takes an options hash # (see Geocoder::Store::ActiveRecord::ClassMethods.near_scope_options # for details). #
select on_lparen UNK on_lparen nil on_comma UNK on_comma UNK on_rparen on_rparen on_period where on_lparen UNK on_rparen on_nl end on_nl on_rbrace # If no lat/lon given we don't want any results, but we still # need distance and bearing columns so you can add, for example: # .order("distance")
UNK on_symbeg UNK on_comma UNK on_lbrace on_op on_op UNK on_op on_ignored_nl UNK on_comma UNK on_comma UNK on_comma UNK on_op UNK ## # Find all objects within the area of a given bounding box. # Bounds must be an array of locations specifying the southwest # corner followed by the northeast corner of the box # (<tt>[[sw_lat, sw_lon], [ne_lat, ne_lon]]</tt>). #
UNK on_const on_nl on_ignored_nl def UNK on_lparen UNK on_comma on_op args on_rparen on_ignored_nl latitude on_comma longitude on_op on_const on_op on_const ## # Methods which will be class methods of the including class. #
def UNK on_lparen latitude on_comma longitude on_comma radius on_op UNK on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl if options on_lbracket ## # Get options hash suitable for passing to ActiveRecord.find to get # records within a radius (in kilometers) of the given point. # Options hash may include: # # * +:units+ - <tt>:mi</tt> or <tt>:km</tt>; to be used. # for interpreting radius as well as the +distance+ attribute which # is added to each found nearby object. # Use Geocoder.configure[:units] to configure default units. # * +:bearing+ - <tt>:linear</tt> or <tt>:spherical</tt>. # the method to be used for calculating the bearing (direction) # between the given point and each found nearby point; # set to false for no bearing calculation. Use # Geocoder.configure[:distances] to configure default calculation method. # * +:select+ - string with the SELECT SQL fragment (e.g. “id, name”) # * +:select_distance+ - whether to include the distance alias in the # SELECT SQL fragment (e.g. <formula> AS distance) # * +:select_bearing+ - like +:select_distance+ but for bearing. # * +:order+ - column(s) for ORDER BY SQL clause; default is distance; # set to false or nil to omit the ORDER BY clause # * +:exclude+ - an object to exclude (used by the +nearbys+ method) # * +:distance_column+ - used to set the column name of the calculated distance. # * +:bearing_column+ - used to set the column name of the calculated bearing. # * +:min_radius+ - the value to use as the minimum radius. # ignored if database is sqlite. # default is 0.0 #
UNK on_op radius on_period UNK on_lparen on_const on_rparen on_op UNK on_lparen radius on_rparen on_op radius on_nl UNK on_op on_const on_op # If radius is a DB column name, bounding box should include # all rows within the maximum radius appearing in that column. # Note: performance is dependent on variability of radii.
if radius on_period UNK on_lparen on_const on_rparen on_nl UNK on_op on_tstring_beg on_tstring_content on_embexpr_beg radius on_embexpr_end on_tstring_end on_nl UNK on_op on_lbracket # if radius is a DB column name, # find rows between min_radius and value in column
def UNK on_lparen latitude on_comma longitude on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl UNK on_op UNK on_op on_tstring_beg on_tstring_content on_tstring_end ## # SQL for calculating distance based on the current database's # capabilities (trig functions?). #
def UNK on_lparen latitude on_comma longitude on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl if on_op options on_period UNK on_lparen on_symbeg ## # SQL for calculating bearing based on the current database's # capabilities (trig functions?). #
def UNK on_lparen UNK on_comma distance on_op nil on_comma bearing on_op nil on_comma distance_column on_op on_tstring_beg on_tstring_content on_tstring_end on_comma UNK ## # Generate the SELECT clause. #
def UNK on_lparen conditions on_comma UNK on_rparen on_ignored_nl conditions on_op on_lbracket conditions on_rbracket if conditions on_period UNK on_lparen on_const on_rparen ## # Adds a condition to exclude a given object by ID. # Expects conditions as an array or string. Returns array. #
def UNK on_nl UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl UNK ## # Use OID type when running in PosgreSQL #
def UNK on_nl UNK on_op UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def full_column_name on_lparen column on_rparen on_ignored_nl ## # Value which can be passed to where() to produce no results. #
def full_column_name on_lparen column on_rparen on_ignored_nl column on_op column on_period UNK on_nl column on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen ## # Prepend table name if column name doesn't already contain one. #
def UNK on_lparen radius on_op UNK on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl UNK nil unless UNK on_nl options on_period ## # Get nearby geocoded objects. # Takes the same options hash as the near class method (scope). # Returns nil if the object is not geocoded. #
def UNK on_nl UNK on_lparen UNK on_rparen UNK on_op UNK on_comma UNK on_op on_ignored_nl if r on_op UNK on_period UNK ## # Look up coordinates and assign to +latitude+ and +longitude+ attributes # (or other as specified in +geocoded_by+). Returns coordinates (array). #
def UNK on_nl UNK on_lparen UNK on_rparen UNK on_op UNK on_comma UNK on_op on_ignored_nl if r on_op UNK on_period UNK ## # Look up address and assign to +address+ attribute (or other as specified # in +reverse_geocoded_by+). Returns address (string). #
