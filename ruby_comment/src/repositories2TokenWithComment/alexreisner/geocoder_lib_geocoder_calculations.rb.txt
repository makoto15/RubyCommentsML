on_const on_op UNK on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_tstring_end on_nl ## # Compass point names, listed clockwise starting at North. # # If you want bearings named using more, fewer, or different points # override Geocoder::Calculations.COMPASS_POINTS with your own array. #
on_const on_op on_float on_nl on_ignored_nl on_const on_op on_float on_nl on_ignored_nl on_const on_op on_float on_nl on_ignored_nl on_const on_op on_lbrace UNK on_float ## # Conversion factor: multiply by kilometers to get miles. #
on_const on_op on_float on_nl on_ignored_nl on_const on_op on_float on_nl on_ignored_nl on_const on_op on_lbrace UNK on_float on_rbrace on_nl on_const on_lbracket on_symbeg ## # Conversion factor: multiply by nautical miles to get miles. #
on_const on_op on_float on_nl on_ignored_nl on_const on_op on_lbrace UNK on_float on_rbrace on_nl on_const on_lbracket on_symbeg UNK on_rbracket on_op on_const on_lbracket ## # Conversion factor: multiply by radians to get degrees. #
on_const on_op on_lbrace UNK on_float on_rbrace on_nl on_const on_lbracket on_symbeg UNK on_rbracket on_op on_const on_lbracket on_symbeg km on_rbracket on_op on_const ## # Radius of the Earth, in kilometers. # Value taken from: http://en.wikipedia.org/wiki/Earth_radius #
on_ignored_nl on_const on_op UNK on_lparen on_op on_const on_op on_const on_rparen on_op on_op on_const on_op on_const on_op on_int on_op on_float on_nl # TODO: deprecate this constant (use `EARTH_RADII[:km]`)
on_const on_op UNK on_lparen on_op on_const on_op on_const on_rparen on_op on_op on_const on_op on_const on_op on_int on_op on_float on_nl on_ignored_nl # Not a number constant
def UNK on_lparen on_op args on_rparen on_ignored_nl args on_period UNK UNK on_op a on_op on_ignored_nl UNK UNK if on_lparen on_op ## # Returns true if all given arguments are valid latitude/longitude values. #
UNK UNK if on_lparen on_op a on_period UNK on_lparen on_const on_rparen UNK a on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_rparen # note that Float::NAN != Float::NAN # still, this could probably be improved:
def UNK on_lparen units on_op UNK on_rparen on_ignored_nl on_int on_op on_const on_op on_const on_op earth_radius on_lparen units on_rparen on_op on_int ## # Distance spanned by one degree of latitude in the given units. #
def UNK on_lparen UNK on_comma units on_op UNK on_rparen on_ignored_nl UNK on_lparen units on_rparen on_op on_const on_period cos on_lparen to_radians ## # Distance spanned by one degree of longitude at the given latitude. # This ranges from around 69 miles at the equator to zero at the poles. #
def UNK on_lparen point1 on_comma point2 on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl point1 on_op extract_coordinates on_lparen point1 on_rparen on_nl ## # Distance between two points on Earth (Haversine formula). # Takes two points and an options hash. # The points are given in the same way that points are given to all # Geocoder methods that accept points as arguments. They can be: # # * an array of coordinates ([lat,lon]) # * a geocodable address (string) # * a geocoded object (one which implements a +to_coordinates+ method # which returns a [lat,lon] array # # The options hash supports: # # * <tt>:units</tt> - <tt>:mi</tt> or <tt>:km</tt> # Use Geocoder.configure(:units => ...) to configure default units. #
point1 on_op extract_coordinates on_lparen point1 on_rparen on_nl point2 on_op extract_coordinates on_lparen point2 on_rparen on_nl on_ignored_nl point1 on_op to_radians on_lparen point1 # convert to coordinate arrays
point1 on_op to_radians on_lparen point1 on_rparen on_nl point2 on_op to_radians on_lparen point2 on_rparen on_nl on_ignored_nl UNK on_op point2 on_lbracket on_int # convert degrees to radians
UNK on_op point2 on_lbracket on_int on_rbracket on_op point1 on_lbracket on_int on_rbracket on_nl dlon on_op point2 on_lbracket on_int on_rbracket on_op point1 # compute deltas
def UNK on_lparen point1 on_comma point2 on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl on_ignored_nl options on_lbracket on_symbeg UNK on_rbracket on_op ## # Bearing between two points on Earth. # Returns a number of degrees from due north (clockwise). # # See Geocoder::Calculations.distance_between for # ways of specifying the points. Also accepts an options hash: # # * <tt>:method</tt> - <tt>:linear</tt> or <tt>:spherical</tt>; # the spherical method is "correct" in that it returns the shortest path # (one along a great circle) but the linear method is less confusing # (returns due east or west when given two points with the same latitude). # Use Geocoder.configure(:distances => ...) to configure calculation method. # # Based on: http://www.movable-type.co.uk/scripts/latlong.html #
options on_lbracket on_symbeg UNK on_rbracket on_op on_const on_period UNK on_period UNK on_nl options on_lbracket on_symbeg UNK on_rbracket on_op on_symbeg UNK # set default options
point1 on_op extract_coordinates on_lparen point1 on_rparen on_nl point2 on_op extract_coordinates on_lparen point2 on_rparen on_nl on_ignored_nl point1 on_op to_radians on_lparen point1 # convert to coordinate arrays
point1 on_op to_radians on_lparen point1 on_rparen on_nl point2 on_op to_radians on_lparen point2 on_rparen on_nl on_ignored_nl UNK on_op point2 on_lbracket on_int # convert degrees to radians
UNK on_op point2 on_lbracket on_int on_rbracket on_op point1 on_lbracket on_int on_rbracket on_nl dlon on_op point2 on_lbracket on_int on_rbracket on_op point1 # compute deltas
on_lparen on_int on_op UNK on_lparen UNK on_rparen on_op on_int on_rparen on_op on_int on_nl end on_nl on_ignored_nl def UNK on_lparen UNK # Answer is in radians counterclockwise from due east. # Convert to degrees clockwise from due north:
def UNK on_lparen UNK on_comma UNK on_op on_const on_rparen on_ignored_nl UNK on_op on_float on_op UNK on_period UNK on_nl UNK on_lbracket ## # Translate a bearing (float) into a compass direction (string, eg "North"). #
def UNK on_lparen UNK on_rparen on_ignored_nl on_ignored_nl UNK on_op UNK on_period UNK on_lbrace on_op p on_op to_radians on_lparen extract_coordinates on_lparen ## # Compute the geographic center (aka geographic midpoint, center of # gravity) for an array of geocoded objects and/or [lat,lon] arrays # (can be mixed). Any objects missing coordinates are ignored. Follows # the procedure documented at http://www.geomidpoint.com/calculation.html. #
UNK on_op UNK on_period UNK on_lbrace on_op p on_op to_radians on_lparen extract_coordinates on_lparen p on_rparen on_rparen on_rbrace on_nl on_ignored_nl x # convert objects to [lat,lon] arrays and convert degrees to radians
x on_op on_lbracket on_rbracket UNK y on_op on_lbracket on_rbracket UNK UNK on_op on_lbracket on_rbracket on_nl UNK on_period UNK UNK on_op # convert to Cartesian coordinates
UNK on_comma UNK on_comma UNK on_op on_lbracket x on_comma y on_comma UNK on_rbracket on_period UNK UNK on_op UNK on_op on_ignored_nl # compute average coordinate values
lon on_op on_const on_period UNK on_lparen UNK on_comma UNK on_rparen on_nl UNK on_op on_const on_period UNK on_lparen UNK on_op on_int # convert back to latitude/longitude
UNK on_lbracket lat on_comma lon on_rbracket on_nl end on_nl on_ignored_nl def UNK on_lparen point on_comma radius on_comma options on_op on_lbrace # return answer in degrees
def UNK on_lparen point on_comma radius on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl lat on_comma lon on_op extract_coordinates on_lparen point ## # Returns coordinates of the southwest and northeast corners of a box # with the given point at its center. The radius is the shortest distance # from the center point to any side of the box (the length of each side # is twice the radius). # # This is useful for finding corner points of a map viewport, or for # roughly limiting the possible solutions in a geo-spatial search # (ActiveRecord queries use it thusly). # # See Geocoder::Calculations.distance_between for # ways of specifying the point. Also accepts an options hash: # # * <tt>:units</tt> - <tt>:mi</tt> or <tt>:km</tt>. # Use Geocoder.configure(:units => ...) to configure default units. #
def UNK on_lparen UNK on_comma radius on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl UNK on_op on_const on_period UNK on_lparen options ## # Random point within a circle of provided radius centered # around the provided point # Takes one point, one radius, and an options hash. # The points are given in the same way that points are given to all # Geocoder methods that accept points as arguments. They can be: # # * an array of coordinates ([lat,lon]) # * a geocodable address (string) # * a geocoded object (one which implements a +to_coordinates+ method # which returns a [lat,lon] array # # The options hash supports: # # * <tt>:units</tt> - <tt>:mi</tt> or <tt>:km</tt> # Use Geocoder.configure(:units => ...) to configure default units. # * <tt>:seed</tt> - The seed for the random number generator
UNK on_op extract_coordinates on_lparen UNK on_rparen on_nl on_ignored_nl UNK on_op on_int on_op on_const on_op on_const on_op earth_radius on_lparen options on_lbracket # convert to coordinate arrays
UNK on_op on_int on_op on_const on_op on_const on_op UNK on_period UNK on_nl on_ignored_nl UNK on_op on_const on_period UNK on_lparen UNK # random bearing in radians
UNK on_op on_const on_period UNK on_lparen UNK on_period UNK on_rparen on_op UNK on_nl on_ignored_nl UNK on_comma UNK on_op on_lbracket UNK # random radius, use the square root to ensure a uniform # distribution of points over the circle
def UNK on_lparen start on_comma UNK on_comma distance on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl radius on_op earth_radius on_lparen options ## # Given a start point, heading (in degrees), and distance, provides # an endpoint. # The starting point is given in the same way that points are given to all # Geocoder methods that accept points as arguments. It can be: # # * an array of coordinates ([lat,lon]) # * a geocodable address (string) # * a geocoded object (one which implements a +to_coordinates+ method # which returns a [lat,lon] array #
start on_op to_radians on_lparen start on_rparen on_nl on_ignored_nl lat on_op start on_lbracket on_int on_rbracket on_nl lon on_op start on_lbracket on_int # convert degrees to radians
def to_radians on_lparen on_op args on_rparen on_ignored_nl args on_op args on_period first if args on_period first on_period UNK on_lparen on_const ## # Convert degrees to radians. # If an array (or multiple arguments) is passed, # converts each value and returns array. #
def UNK on_lparen on_op args on_rparen on_ignored_nl args on_op args on_period first if args on_period first on_period UNK on_lparen on_const ## # Convert radians to degrees. # If an array (or multiple arguments) is passed, # converts each value and returns array. #
def UNK on_lparen UNK on_rparen on_ignored_nl on_const on_period log on_lparen on_symbeg warn on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl UNK on_op ## # Convert miles to kilometers. #
def UNK on_lparen km on_rparen on_ignored_nl on_const on_period log on_lparen on_symbeg warn on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl km on_op ## # Convert kilometers to miles. #
def UNK on_lparen km on_rparen on_ignored_nl on_const on_period log on_lparen on_symbeg warn on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl km on_op ## # Convert kilometers to nautical miles. #
def earth_radius on_lparen units on_op UNK on_rparen on_ignored_nl on_const on_lbracket units on_op on_const on_period UNK on_period units on_rbracket on_nl end ## # Radius of the Earth in the given units (:mi or :km). # Use Geocoder.configure(:units => ...) to configure default units. #
def UNK on_nl on_const on_period log on_lparen on_symbeg warn on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_nl end on_nl on_ignored_nl ## # Conversion factor: km to mi. #
def UNK on_nl on_const on_period log on_lparen on_symbeg warn on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_nl end on_nl on_ignored_nl ## # Conversion factor: km to nm. #
def UNK on_nl on_const on_period log on_lparen on_symbeg warn on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_float on_op on_const on_nl end ## # Conversion factor: mi to km. #
def UNK on_nl on_const on_period log on_lparen on_symbeg warn on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_float on_op on_const on_nl end ## # Conversion factor: nm to km. #
def extract_coordinates on_lparen point on_rparen on_ignored_nl UNK point on_nl UNK on_const on_nl if point on_period UNK on_op on_int on_nl lat ## # Takes an object which is a [lat,lon] array, a geocodable string, # or an object that implements +to_coordinates+ and returns a # [lat,lon] array. Note that if a string is passed this may be a slow- # running method and may return nil. #
