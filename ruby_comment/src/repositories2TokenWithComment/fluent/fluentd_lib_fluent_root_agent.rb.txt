on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content # # Fluentd # # Licensed under the Apache License, Version 2.0 (the "License"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. #
class on_const on_op on_const on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_period UNK on_ignored_nl def UNK on_lparen on_label on_comma on_label on_const # # Fluentd forms a tree structure to manage plugins: # # RootAgent # | # +------------+-------------+-------------+ # | | | | # <label> <source> <filter> <match> # | # +----+----+ # | | # <filter> <match> # # Relation: # * RootAgent has many <label>, <source>, <filter> and <match> # * <label> has many <match> and <filter> # # Next step: `fluentd/agent.rb` # Next step: 'fluentd/label.rb' #
on_ignored_nl def UNK on_lparen on_label on_comma on_label on_const on_period UNK on_rparen on_ignored_nl UNK on_lparen on_label log on_rparen on_nl on_ignored_nl on_ivar # @ERROR is built-in error label
conf on_period elements on_lparen on_label on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period each do on_op e on_op on_ignored_nl UNK on_op e on_period # initialize <worker> elements
UNK on_op on_lbrace on_rbrace on_nl conf on_period elements on_lparen on_label on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period each on_lbrace on_op e on_op # initialize <label> elements before configuring all plugins to avoid 'label not found' in input, filter and output.
UNK on_period each on_lbrace on_op name on_comma e on_op on_ivar on_lbracket name on_rbracket on_period UNK on_lparen e on_rparen on_rbrace on_nl # Call 'configure' here to avoid 'label not found'
if on_ivar on_nl log on_period UNK on_symbeg UNK on_comma on_tstring_beg on_tstring_content on_tstring_end on_nl else on_ignored_nl conf on_period elements on_lparen on_label # initialize <source> elements
UNK on_period UNK unless UNK on_period UNK on_nl UNK on_period UNK unless UNK on_period UNK on_nl end on_nl end on_nl # instance
UNK on_period UNK unless UNK on_period UNK on_nl end on_nl end on_nl on_ignored_nl def UNK on_nl log on_period UNK on_tstring_beg # Input#start sometimes emits lots of events with in_tail/`read_from_head true` case # and it causes deadlock for small buffer/queue output. To avoid such problem, # buffer related output threads should be run before `Input#start`. # This is why after_start should be called immediately after start call. # This depends on `desc: true` because calling plugin order of `desc: true` is # Output, Filter, Label, Output with Router, then Input.
on_ignored_nl UNK on_op UNK on_lparen method on_comma UNK on_rparen UNK on_ignored_nl lifecycle do on_op instance on_comma kind on_op on_ignored_nl UNK # Fluentd's shutdown sequence is stop, before_shutdown, shutdown, after_shutdown, close, terminate for plugins # These method callers does `rescue Exception` to call methods of shutdown sequence as far as possible # if plugin methods does something like infinite recursive call, `exit`, unregistering signal handlers or others. # Plugins should be separated and be in sandbox to protect data in each plugins/buffers.
operation on_op on_tstring_beg on_tstring_content on_tstring_end log on_period UNK on_tstring_beg on_embexpr_beg operation on_embexpr_end on_tstring_content on_embexpr_beg kind on_embexpr_end on_tstring_content on_tstring_end on_comma on_label # To avoid Input#shutdown and Output#before_shutdown mismatch problem, combine before_shutdown and shutdown call in one sequence. # The problem is in_tail flushes buffered multiline in shutdown but output's flush_at_shutdown is invoked in before_shutdown
log on_period UNK on_tstring_beg on_embexpr_beg operation on_embexpr_end on_tstring_content on_embexpr_beg kind on_embexpr_end on_tstring_content on_tstring_end on_comma on_label on_const on_period UNK on_lparen instance # for logging
UNK on_period call on_lparen on_symbeg UNK on_comma on_symbeg UNK on_rparen on_nl on_ignored_nl UNK on_period call on_lparen on_symbeg UNK on_comma on_symbeg # before_shutdown does force_flush for output plugins: it should block, so it's unsafe operation
input on_period UNK on_op on_ivar on_nl input on_period UNK on_lparen conf on_rparen on_nl on_ivar on_op input on_nl on_ignored_nl input on_nl # <source> emits events to the top-level event router (RootAgent#event_router). # Input#configure overwrites event_router to a label's event_router if it has `@label` parameter. # See also 'fluentd/plugin/input.rb'
log on_period warn on_tstring_beg on_tstring_content on_tstring_end on_comma error_info on_nl on_ivar on_period UNK on_lparen tag on_comma UNK on_comma UNK on_rparen on_nl # A record is not included in the logs because <@ERROR> handles it. This warn is for the notification
