config_section on_symbeg node do on_ignored_nl config_set_default on_symbeg num on_comma on_int on_nl end on_nl config_section on_symbeg description1 do on_ignored_nl config_set_default on_symbeg # config_section :node, param_name: :nodes do # config_argument :num, :integer # config_param :name, :string, default: "node" # config_param :type, :string, default: "b4" # end # config_section :description1, required: false, multi: false do # config_argument :note, :string, default: "desc1" # config_param :text, :string # end # config_section :description2, required: true, multi: false do # config_argument :note, :string, default: "desc2" # config_param :text, :string # end # config_section :description3, required: true, multi: true do # config_argument :note, default: "desc3" do |val| # "desc3: #{val}" # end # config_param :text, :string # end
class on_const on_nl include on_const on_op on_const on_nl config_section on_symbeg appendix on_comma on_label false on_comma on_label false do on_ignored_nl config_param # Show what is allowed in finalized sections # InheritsFinalized < Finalized < Base
config_section on_symbeg appendix on_comma on_label true do on_ignored_nl config_param on_symbeg code on_comma on_symbeg integer on_nl config_set_default on_symbeg name on_comma on_tstring_beg # to non-finalized section # subclass can change type (code) # add default value (name) # change default value (address) # add field (age)
config_section on_symbeg appendix do on_ignored_nl config_set_default on_symbeg code on_comma on_int on_nl config_set_default on_symbeg UNK on_comma on_int on_nl config_param on_symbeg phone_no # to finalized section # subclass can add default value (code) # change default value (age) # add field (phone_no)
class on_const on_nl include on_const on_op on_const on_nl config_section on_symbeg appendix on_comma on_label on_symbeg apd on_comma on_label false on_comma on_label # Show what is allowed/prohibited for finalized sections
class on_const on_op on_const on_nl config_section on_symbeg appendix on_comma on_label true do on_ignored_nl config_set_default on_symbeg name on_comma on_tstring_beg on_tstring_content on_tstring_end # subclass can change init with adding default values
class on_const on_op on_const on_nl config_section on_symbeg appendix do on_ignored_nl config_param on_symbeg name on_comma on_symbeg integer on_nl end on_nl end # subclass cannot change type (name)
class on_const on_op on_const on_nl config_section on_symbeg appendix on_comma on_label on_symbeg UNK do on_ignored_nl end on_nl end on_nl on_ignored_nl class # subclass cannot change param_name
class on_const on_op on_const on_nl config_section on_symbeg appendix on_comma on_label false do on_ignored_nl config_param on_symbeg name on_comma on_symbeg integer on_nl # subclass cannot change final (section)
class on_const on_op on_const on_nl config_section on_symbeg appendix on_comma on_label false do on_ignored_nl end on_nl end on_nl on_ignored_nl class on_const # subclass cannot change required
class on_const on_op on_const on_nl config_section on_symbeg appendix on_comma on_label true do on_ignored_nl end on_nl end on_nl on_ignored_nl class on_const # subclass cannot change multi
class on_const on_op on_const on_nl config_section on_symbeg appendix on_comma on_label on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl end on_nl end on_nl end # subclass cannot change alias
assert_raise on_lparen on_const on_op on_const on_rparen on_lbrace b3 on_period configure on_lparen config_element on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_end on_comma # branch sections required
msg on_op on_tstring_beg on_tstring_content on_tstring_end on_nl assert_raise on_lparen on_const on_op on_const on_period new on_lparen msg on_rparen on_rparen on_lbrace b3 on_period # branch argument required
assert_raise on_lparen on_const on_op on_const on_period new on_lparen msg on_rparen on_rparen on_lbrace b3 on_period configure on_lparen config_element on_lparen on_tstring_beg on_tstring_content #expect{ b3.configure(e('ROOT', '', BASE_ATTRS, [e('branch', '')])) }.to raise_error(Fluent::ConfigError, msg)
assert_nothing_raised on_lbrace b3 on_period configure on_lparen config_element on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_end on_comma on_const on_comma on_lbracket config_element on_lparen # leaf is not required
msg on_op on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_op config_element on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_lbrace on_label # leaf weight required
on_ignored_nl b4 on_op on_const on_op on_const on_period new on_nl on_ignored_nl d1 on_op config_element on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_end ### worm not required
msg on_op on_tstring_beg on_tstring_content on_tstring_end on_nl assert_raise on_lparen on_const on_op on_const on_period new on_lparen msg on_rparen on_rparen on_lbrace b4 on_period # description1 cannot be specified 2 or more
msg on_op on_tstring_beg on_tstring_content on_tstring_end on_nl assert_raise on_lparen on_const on_op on_const on_period new on_lparen msg on_rparen on_rparen on_lbrace b4 on_period # description2 cannot be specified 2 or more
assert_nothing_raised on_lbrace b4 on_period configure on_lparen config_element on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_end on_comma on_const on_comma on_lbracket d1 on_period # description3 can be specified 2 or more
on_ignored_nl assert_equal on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma b3 on_period name1 on_rparen on_nl assert_equal on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma b3 on_period # overwritten
on_ignored_nl assert_equal on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma b4 on_period description1 on_period note on_rparen on_nl assert_equal on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma # config_element('description3', '', {"text" => "dddd3-1"}), # config_element('description3', 'd-3', {"text" => "dddd3-2"}), # config_element('description3', 'd-3a', {"text" => "dddd3-3"}),
assert_equal on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma b4 on_period description1 on_period note on_rparen on_nl assert_equal on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma b4 # NoMethodError: undefined method `class' for <Fluent::Config::Section {...}>:Fluent::Config::Section occurred. Should we add class method to Section? #assert_equal('Fluent::Config::Section', b4.description1.class.name)
assert_equal on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma b4 on_period UNK on_period note on_rparen on_nl assert_equal on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma b4 # same with assert_equal('Fluent::Config::Section', b4.description1) #assert_equal('Fluent::Config::Section', b4.description2)
