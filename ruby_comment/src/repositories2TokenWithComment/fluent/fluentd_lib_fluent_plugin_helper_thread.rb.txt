on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl on_const on_op UNK on_nl # # Fluentd # # Licensed under the Apache License, Version 2.0 (the "License"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. #
on_ignored_nl on_ignored_nl UNK on_symbeg UNK on_ignored_nl def UNK on_nl on_op on_const on_period current on_lbracket on_symbeg _fluentd_plugin_helper_thread_running on_rbracket on_op UNK on_nl # second
on_ignored_nl UNK on_symbeg UNK on_ignored_nl def UNK on_nl on_op on_const on_period current on_lbracket on_symbeg _fluentd_plugin_helper_thread_running on_rbracket on_op UNK on_nl end # stop : mark callback thread as stopped # shutdown : [-] # close : correct stopped threads # terminate: kill all threads
on_ignored_nl def UNK on_nl on_op on_const on_period current on_lbracket on_symbeg _fluentd_plugin_helper_thread_running on_rbracket on_op UNK on_nl end on_nl on_ignored_nl def UNK # for test driver
on_op on_const on_period current on_lbracket on_symbeg _fluentd_plugin_helper_thread_running on_rbracket on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_ivar on_period # checker for code in callback of thread_create
def UNK on_lparen title on_rparen on_ignored_nl UNK on_const on_comma on_tstring_beg on_tstring_content on_tstring_end UNK title on_period UNK on_const on_nl UNK on_const # Ruby 2.2.3 or earlier (and all 2.1.x) cause bug about Threading ("Stack consistency error") # by passing splatted argument to `yield` # https://bugs.ruby-lang.org/issues/11027 # We can enable to pass arguments after expire of Ruby 2.1 (& older 2.2.x) # def thread_create(title, *args) # Thread.new(*args) do |*t_args| # yield *t_args
UNK on_period UNK on_nl UNK on_op UNK on_nl on_op on_const on_period current on_lbracket on_symbeg UNK on_rbracket on_op title on_nl on_op # run thread after that thread is successfully set into @_threads
