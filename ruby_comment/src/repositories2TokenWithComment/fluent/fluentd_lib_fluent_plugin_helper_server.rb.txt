on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content # # Fluentd # # Licensed under the Apache License, Version 2.0 (the "License"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. #
on_ignored_nl on_ignored_nl UNK on_symbeg UNK on_ignored_nl def UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK UNK UNK on_ivar on_period # This plugin helper doesn't support these things for now: # * TCP/TLS keepalive # * TLS session cache/tickets # * unix domain sockets
on_ignored_nl UNK on_symbeg UNK on_ignored_nl def UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK UNK UNK on_ivar on_period UNK # stop : [-] # shutdown : detach server event handler from event loop (event_loop) # close : close listening sockets # terminate: remote all server instances
on_ignored_nl def UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK UNK UNK on_ivar on_period UNK UNK on_op si on_op # for tests
end on_nl on_ignored_nl def UNK on_nl UNK UNK UNK on_ivar on_period UNK UNK on_op si on_op si on_period server on_period # event_loop_wait_until_start works well for this
def UNK on_lparen title on_comma port on_comma on_label nil on_comma on_label on_tstring_beg on_tstring_content on_tstring_end on_comma on_label true on_comma on_label nil # server_create_connection(:title, @port) do |conn| # # on connection # source_addr = conn.remote_host # source_port = conn.remote_port # conn.data do |data| # # on data # conn.write resp # ... # conn.close # end # end
socket_options on_lbracket on_symbeg UNK on_rbracket on_op on_int on_nl end on_nl on_ignored_nl UNK on_lparen proto on_comma on_op socket_options on_rparen on_nl socket_option_setter # default linger_timeout only for server
def UNK on_lparen title on_comma port on_comma on_label nil on_comma on_label on_tstring_beg on_tstring_content on_tstring_end on_comma on_label true on_comma on_label nil # server_create(:title, @port) do |data| # # ... # end # server_create(:title, @port) do |data, conn| # # ... # end # server_create(:title, @port, proto: :udp, max_bytes: 2048) do |data, sock| # sock.remote_host # sock.remote_port # # ... # end
socket_options on_lbracket on_symbeg UNK on_rbracket on_op on_int on_nl end on_nl on_ignored_nl unless UNK on_nl UNK on_lparen proto on_comma on_op socket_options # default linger_timeout only for server
raise on_const on_comma on_tstring_beg on_tstring_content on_tstring_end if backlog on_nl end on_nl if proto on_op on_symbeg udp raise on_const on_comma on_tstring_beg # options to listen/accept connections
raise on_const on_comma on_tstring_beg on_tstring_content on_tstring_end if UNK on_nl raise on_const on_comma on_tstring_beg on_tstring_content on_tstring_end if flags on_op on_int on_nl # UDP options
config_param on_symbeg UNK on_comma on_symbeg string on_comma on_label nil on_nl config_param on_symbeg UNK on_comma on_symbeg string on_comma on_label nil on_nl # Cert signed by public CA
config_param on_symbeg UNK on_comma on_symbeg string on_comma on_label nil on_nl config_param on_symbeg UNK on_comma on_symbeg string on_comma on_label nil on_nl # Cert generated and signed by private CA Certificate
config_param on_symbeg UNK on_comma on_symbeg UNK on_comma on_label on_int on_nl config_param on_symbeg UNK on_comma on_symbeg string on_comma on_label on_tstring_beg on_tstring_content # Options for generating certs by private CA certs or self-signed
config_param on_symbeg UNK on_comma on_symbeg UNK on_comma on_label on_lbracket on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK # 10years later
si on_period server on_period close rescue nil on_nl end on_nl end on_nl on_ignored_nl super on_nl end on_nl on_ignored_nl def UNK # to refuse more connections: (connected sockets are still alive here)
UNK on_op on_const on_period tcp on_lparen bind on_comma port on_rparen on_period UNK on_nl UNK on_period UNK on_op false on_nl on_const # TCPServer.new doesn't set IPV6_V6ONLY flag, so use Addrinfo class instead. # backlog will be set by the caller, we don't need to set backlog here
sock on_period UNK on_lparen on_const on_op on_const on_comma on_const on_op on_const on_rparen sock on_nl end on_nl on_ignored_nl def UNK on_lparen # close-on-exec is set by default in Ruby 2.0 or later (, and it's unavailable on Windows)
sock on_nl end on_nl on_ignored_nl def UNK on_lparen shared on_comma bind on_comma port on_rparen on_ignored_nl sock on_op if shared on_nl # nonblock
UNK on_op on_const on_period udp on_lparen bind on_comma port on_rparen on_period bind on_nl UNK on_period UNK on_op false on_nl on_const # UDPSocket.new doesn't set IPV6_V6ONLY flag, so use Addrinfo class instead.
sock on_period UNK on_lparen on_const on_op on_const on_comma on_const on_op on_const on_rparen sock on_nl end on_nl on_ignored_nl on_const on_op on_lbracket # close-on-exec is set by default in Ruby 2.0 or later (, and it's unavailable on Windows)
sock on_nl end on_nl on_ignored_nl on_const on_op on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma # nonblock
on_const on_op on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl # Use string "?" for port, not integer or nil. "?" is clear than -1 or nil in the log.
on_ignored_nl def initialize on_lparen sock on_comma UNK on_comma flags on_comma close_socket on_comma log on_comma under_plugin_development on_comma on_op callback on_rparen on_ignored_nl # dummy for consistent method call in callbacks
end on_nl on_ignored_nl def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def data on_lparen on_op callback on_rparen on_ignored_nl raise on_tstring_beg # to serialize #write and #close
def initialize on_lparen sock on_comma UNK on_comma socket_option_setter on_comma close_callback on_comma log on_comma under_plugin_development on_comma UNK on_rparen on_ignored_nl raise on_const # It can't use Coolio::TCPSocket, because Coolio::TCPSocket checks that underlying socket (1st argument of super) is TCPSocket.
end on_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def data on_lparen on_op callback on_rparen on_ignored_nl # to serialize #write and #close
if UNK on_op on_symbeg UNK on_op UNK on_op on_symbeg UNK on_nl else on_ignored_nl on_ivar on_op true on_nl on_ignored_nl on_ivar on_op # this method call actually try to do handshake via TLS
else on_ignored_nl on_ivar on_op true on_nl on_ignored_nl on_ivar on_op on_const on_period new on_lparen self on_rparen on_nl on_ivar on_period call on_lparen # retry accept_nonblock: there aren't enough data in underlying socket buffer
on_ivar on_period UNK on_tstring_beg on_tstring_content on_tstring_end on_comma on_label e on_nl close rescue nil on_nl end on_nl on_ignored_nl false on_nl end # Use same log level as on_readable
rescue on_const on_op on_const on_op on_const on_op e on_nl on_ivar on_period UNK on_tstring_beg on_tstring_content on_embexpr_beg e on_embexpr_end on_tstring_end on_nl close # ignore and return with doing nothing
UNK on_op on_ivar on_period UNK on_lparen on_ivar on_rparen on_nl on_ivar on_period UNK on_lparen on_int on_comma UNK on_rparen on_nl end on_nl # Consider write_nonblock with {exception: false} when IO::WaitWritable error happens frequently.
super on_nl on_ignored_nl close if on_ivar on_nl rescue on_const on_op on_const on_comma on_const on_op on_const on_nl return on_nl rescue on_const # No need to call `super` in a synchronized context because TLSServer doesn't use the inner buffer(::IO::Buffer) of Coolio::IO. # Instead of using Coolio::IO's inner buffer, TLSServer has own buffer(`@_handler_write_buffer`). See also TLSServer#write. # Actually, the only reason calling `super` here is call Coolio::IO#disable_write_watcher. # If `super` is called in a synchronized context, it could cause a mutex recursive locking since Coolio::IO#on_write_complete # eventually calls TLSServer#close which try to get a lock.
close rescue nil on_nl return on_nl rescue on_const on_op on_const on_op on_const on_op e on_nl on_ivar on_period UNK on_tstring_beg on_tstring_content # SystemCallError catches Errno::EPIPE & Errno::ECONNRESET amongst others.
