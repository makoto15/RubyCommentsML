UNK nil on_nl end on_nl on_ignored_nl data on_op nil on_nl if chunk on_period UNK on_lparen on_int on_comma on_int on_rparen on_op # size of BUFFER_HEADER (2) + size of data(4)
data on_op on_const on_period UNK on_lparen chunk on_comma on_label UNK on_rparen on_nl end on_nl on_ignored_nl data on_nl end on_nl end # old type
UNK on_op on_int UNK on_op on_int on_lbracket UNK on_op on_int on_comma UNK on_op on_int on_comma UNK on_comma UNK on_rbracket on_period # 1725 is one of `rand(0xfff)`
UNK on_op on_int on_lbracket UNK on_op on_int on_comma UNK on_op on_int on_comma UNK on_comma UNK on_rbracket on_period UNK on_lparen on_tstring_beg # one of rand(0xffffffff)
on_lbracket UNK on_op on_int on_comma UNK on_op on_int on_comma UNK on_comma UNK on_rbracket on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen # ditto
end on_nl on_ignored_nl def hex_id on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period UNK on_lbrace # unique_id.unpack('N*').map{|n| n.to_s(16)}.join => "52fde6425d7406bdb19b936e1a1ba98c"
on_ignored_nl UNK on_op on_const on_period parse on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_period UNK on_lparen UNK on_rparen on_nl on_ivar # append does write_metadata
on_ignored_nl UNK on_lparen on_const on_op on_const on_op on_const on_op on_const on_rparen do on_op UNK on_op on_ignored_nl UNK on_lparen UNK on_rparen # to fix chunk id
assert c on_period read on_lparen on_label on_symbeg gzip on_rparen on_period size on_op on_lbracket on_ivar on_comma on_ivar on_rbracket on_period join on_lparen # check chunk is compressed
