on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl on_const on_op # # Fluentd # # Licensed under the Apache License, Version 2.0 (the "License"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. #
on_ignored_nl on_const on_op on_const on_period new on_lparen on_symbeg UNK on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_label on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl # plugins for fluentd: fluent/plugin/type_NAME.rb # plugins for fluentd plugins: fluent/plugin/type/NAME.rb # ex: storage, buffer chunk, ...
on_const on_op on_const on_period new on_lparen on_symbeg UNK on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_label on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const # first class plugins (instantiated by Engine)
on_const on_op on_const on_period new on_lparen on_symbeg UNK on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_label on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const # feature plugin: second class plugins (instantiated by Plugins or Helpers)
UNK on_tstring_beg on_tstring_content on_tstring_end on_nl register_impl on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_const on_comma type on_comma on_const on_period new UNK on_const # This usage is not recommended for new API
UNK on_tstring_beg on_tstring_content on_tstring_end on_nl register_impl on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_const on_comma type on_comma on_const on_period new UNK on_const # Proc.new { |tag, time, record| } # This usage is not recommended for new API
else on_ignored_nl UNK on_const on_comma on_tstring_beg on_tstring_content on_embexpr_beg klass_or_its_name on_period UNK on_embexpr_end on_tstring_content on_embexpr_beg klass_or_its_name on_embexpr_end on_tstring_end on_nl end on_nl # const_get can't handle qualified klass name (ex: A::B)
UNK on_tstring_beg on_tstring_content on_tstring_end on_nl impl on_op on_const on_op on_const on_period UNK on_lparen type on_rparen on_nl impl on_period UNK on_const # This usage is not recommended for new API... create RegexpParser directly
obj on_op UNK on_period UNK on_lparen type on_rparen on_nl impl on_op UNK on_ignored_nl UNK obj on_period UNK on_lparen on_const on_rparen # "'type' not found" is handled by registry
UNK on_op if self on_period respond_to? on_lparen on_symbeg UNK on_rparen on_op UNK on_period respond_to? on_lparen on_symbeg UNK on_rparen on_nl UNK # extend plugin instance by this module # to run this check after all #configure methods of plugins and plugin helpers
