on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end # # Fluentd # # Licensed under the Apache License, Version 2.0 (the "License"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. #
UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl def UNK on_lparen UNK on_comma # fluent/plugin/buffer is already loaded
on_ignored_nl on_ignored_nl on_ignored_nl def UNK on_lparen UNK on_comma on_label on_symbeg UNK on_rparen on_ignored_nl super on_lparen on_rparen on_nl on_ivar on_op UNK # Chunks has 2 part: # * metadata: contains metadata which should be restored after resume (if possible) # v: {key=>value,key=>value,...} (optional) # t: tag as string (optional) # k: time slice key (optional) # # id: unique_id of chunk (*) # s: size (number of events in chunk) (*) # c: created_at as unix time (*) # m: modified_at as unix time (*) # (*): fields automatically injected by chunk itself # * data: binary data, combined records represented as String, maybe compressed
on_ignored_nl on_ignored_nl def UNK on_lparen UNK on_comma on_label on_symbeg UNK on_rparen on_ignored_nl super on_lparen on_rparen on_nl on_ivar on_op UNK on_nl # NOTE: keys of metadata are named with a single letter # to decread bytesize of metadata I/O
on_ignored_nl def UNK on_lparen UNK on_comma on_label on_symbeg UNK on_rparen on_ignored_nl super on_lparen on_rparen on_nl on_ivar on_op UNK on_nl on_ivar # TODO: CompressedPackedMessage of forward protocol?
on_ivar on_op on_symbeg UNK on_nl on_ignored_nl on_ivar on_op UNK on_nl on_ivar on_op on_const on_op on_const on_period UNK on_nl on_ivar on_op # state: unstaged/staged/queued/closed
def UNK on_nl on_ivar on_op on_const on_period UNK on_lparen on_ivar on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op # for compatibility
def UNK on_nl on_ivar on_op on_const on_period UNK on_lparen on_ivar on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen data on_comma # for compatibility
def UNK on_lparen data on_comma on_op kwargs on_rparen on_ignored_nl raise on_const on_comma on_tstring_beg on_tstring_content on_tstring_end if kwargs on_lbracket on_symbeg UNK # data is array of formatted record string
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl raise on_const on_comma on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK # for event streams which is packed or zipped (and we want not to unpack/uncompress)
