on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end # # Fluentd # # Licensed under the Apache License, Version 2.0 (the "License"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. #
proxy on_op self on_period UNK on_period UNK on_nl proxy on_period UNK on_period UNK on_period UNK UNK on_op name on_op on_ignored_nl # to simulate implicit 'attr_accessor' by config_param / config_section and its value by config_set_default
UNK on_nl UNK on_ignored_nl UNK on_period sections on_lbracket name on_rbracket on_nl end on_nl on_const on_op on_const on_op on_const on_period UNK # root
on_const on_op on_const on_op on_const on_period UNK on_lparen proxy on_comma conf on_comma nil on_comma nil on_rparen on_nl end on_nl on_ignored_nl # take care to raise Fluent::ConfigError if conf mismatched to proxy
UNK on_op on_const on_op on_const on_period UNK on_lparen proxy on_period name on_period to_s on_rparen on_nl UNK on_op on_const on_op on_const # In the nested section, can't get plugin class through proxies so get plugin class here
UNK on_lparen name on_rparen UNK UNK on_lbracket on_symbeg UNK on_rbracket on_op on_const on_op on_const on_op on_const on_op on_const on_period UNK # reserved names '@foo' are invalid as attr_accessor name
UNK on_period map on_lbrace on_op a on_op a on_period configure_proxy on_lparen a on_period name on_op a on_period UNK on_period to_s # 'a.object_id.to_s' is to support anonymous class # which created in tests to overwrite original behavior temporally # # p Module.new.name #=> nil # p Class.new.name #=> nil # p AnyGreatClass.dup.name #=> nil
