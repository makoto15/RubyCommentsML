on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content # # Fluentd # # Licensed under the Apache License, Version 2.0 (the "License"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. #
UNK on_nl end on_nl end on_nl on_ignored_nl UNK seek on_nl UNK on_const on_op on_const on_comma on_ivar on_period UNK on_nl end # eager parsing until valid expression
code on_op UNK on_op code on_nl on_tstring_content UNK UNK on_ignored_nl on_ivar on_period UNK on_lparen code on_rparen on_nl UNK on_const on_op # Add hostname and worker_id to code for preventing unused warnings
c on_nl end on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op nil on_nl on_ignored_nl UNK on_op # symbols
on_ignored_nl UNK on_op on_lparen UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_op on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl line_buffer on_op on_tstring_beg on_tstring_end on_nl # Yajl does not raise ParseError for incomplete json string, like '[1', '{"h"', '{"h":' or '{"h1":1' # This is the reason to use JSON module.
UNK on_op nil on_nl UNK on_ignored_nl UNK on_op on_const on_period UNK on_lparen UNK on_op line_buffer on_period UNK on_period UNK on_lparen # If this is out of json string literals, this object can be parsed correctly # '{"foo":"bar", #' -> '{"foo":"bar"}' (to check)
end on_nl on_ignored_nl if UNK on_nl UNK on_lparen char on_op UNK on_rparen on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl UNK # This '#' is in json string literals
UNK on_lparen char on_op UNK on_rparen on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl UNK on_op line_buffer on_op on_tstring_beg on_tstring_content on_tstring_end # ignore chars as comment before newline
end on_nl UNK on_op line_buffer on_op on_tstring_beg on_tstring_content on_tstring_end on_nl line_buffer on_op on_tstring_beg on_tstring_end on_nl else on_ignored_nl line_buffer on_op char # ignore comment char
line_buffer on_op char on_nl end on_nl on_ignored_nl UNK end on_nl on_ignored_nl if char on_op on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_op # '#' is a char in json string
end on_nl on_ignored_nl if char on_op on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_op line_buffer on_op on_tstring_beg on_tstring_content on_tstring_end on_nl line_buffer on_op # This char '#' MUST NOT terminate json object.
end on_nl end on_nl on_ignored_nl UNK UNK on_nl parse_error! on_tstring_beg on_tstring_content on_embexpr_beg UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_op on_tstring_beg on_tstring_content # Incomplete json string yet
