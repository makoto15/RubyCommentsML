on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content # # Fluentd # # Licensed under the Apache License, Version 2.0 (the "License"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. #
require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl # for TypeConverter
def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op on_lbrace on_rbrace on_nl on_ivar on_op on_const on_op on_const on_period UNK on_nl on_ivar # This implementation now uses mutex because parser is typically used in input. # If this has a performance issue under high concurreny, use concurrent-ruby's map instead.
on_ivar on_period UNK on_lbrace on_ivar on_period UNK on_lparen th on_rparen on_rbrace on_nl end on_nl end on_nl on_ignored_nl UNK on_const on_nl # Need clean up here because if next event is delayed, incorrect exception will be raised in normal flow.
config_param on_symbeg UNK on_comma on_symbeg UNK on_comma on_label on_symbeg UNK on_comma on_label nil on_nl on_ignored_nl on_ignored_nl config_param on_symbeg UNK on_comma ### types can be specified as string-based hash style # field1:type, field2:type, field3:type:option, field4:type:option ### or, JSON format # {"field1":"type", "field2":"type", "field3":"type:option", "field4":"type:option"}
on_ignored_nl config_param on_symbeg UNK on_comma on_symbeg UNK on_comma on_label nil on_nl config_param on_symbeg UNK on_comma on_symbeg UNK on_comma on_label nil # available options are: # array: (1st) delimiter # time : type[, format, timezone] -> type should be a valid "time_type"(string/unixtime/float) # : format[, timezone]
UNK on_symbeg UNK on_nl on_ignored_nl on_const on_op on_lbracket on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_rbracket on_nl def UNK # for tests
UNK nil on_comma nil on_nl end on_nl on_ignored_nl def UNK on_lparen on_op UNK on_comma on_op UNK on_rparen on_ignored_nl parse on_lparen # Return nil instead of raising error. in_tail or other plugin can emit broken line.
parse on_lparen on_op UNK on_comma on_op UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op # Keep backward compatibility for existing plugins # TODO: warn when deprecated
def UNK on_lparen time on_comma record on_rparen on_ignored_nl UNK time on_comma record UNK on_ivar on_nl on_ignored_nl record on_period UNK UNK # def parse(text, &block) # time, record = convert_values(time, record) # yield time, record # end
on_ignored_nl if value on_period UNK on_lparen on_const on_rparen on_op UNK on_lparen value on_rparen on_nl record on_lbracket key on_rbracket on_op nil # nil/null value is always left as-is.
UNK on_op if option on_nl UNK on_op on_tstring_beg on_tstring_content on_tstring_end UNK on_comma time_format on_op option on_period UNK on_lparen on_tstring_beg on_tstring_content # comma-separated: time:[timezone:]time_format # time_format is unixtime/float/string-time-format
UNK on_comma time_format on_op option on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma UNK on_rparen on_nl UNK on_const on_op on_const on_period # estimate
end on_nl UNK on_lparen on_label UNK on_period UNK on_comma on_label time_format on_comma on_label UNK on_rparen on_nl else on_ignored_nl UNK on_lparen # unixtime/float
