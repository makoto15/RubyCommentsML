on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end # # Fluentd # # Licensed under the Apache License, Version 2.0 (the "License"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. #
def UNK on_lparen params on_comma on_label on_lbrace on_rbrace on_rparen on_ignored_nl exist_scope! on_nl params on_op on_lbracket params on_rbracket UNK params on_period # === Example # `init` receives various arguments. # # 1. init(name: 'name') # 2. init({ name: 'name',reset_interval: 20 }, options: {}) # 3. init([{ name: 'name1',reset_interval: 20 }, { name: 'name2',reset_interval: 20 }]) # 4. init([{ name: 'name1',reset_interval: 20 }, { name: 'name2',reset_interval: 20 }], options: {}) # 5. init([{ name: 'name1',reset_interval: 20 }, { name: 'name2',reset_interval: 20 }]) { |res| ... }
if UNK on_nl on_const on_period start do on_ignored_nl UNK res on_period get on_nl end on_nl else on_ignored_nl res on_nl end # if `async` is false or missing, block at this method and return a Future::Result object.
def UNK on_lparen params on_comma on_label on_lbrace on_rbrace on_rparen on_ignored_nl exist_scope! on_nl params on_op on_lbracket params on_rbracket UNK params on_period # === Example # `inc` receives various arguments. # # 1. inc(name: 'name') # 2. inc({ name: 'name',value: 20 }, options: {}) # 3. inc([{ name: 'name1',value: 20 }, { name: 'name2',value: 20 }]) # 4. inc([{ name: 'name1',value: 20 }, { name: 'name2',value: 20 }], options: {})
UNK on_op UNK on_lparen UNK on_comma id on_comma scope on_comma params on_comma opt on_rparen on_nl on_ivar on_period UNK on_lparen UNK # set a response value to this future object at `on_message`
UNK if on_ivar on_period UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_nl res on_op get on_nl if res # Block until `set` method is called and @result is set
end on_nl end on_nl end on_nl end on_nl end on_nl end on_nl EMP EMP EMP EMP EMP EMP EMP EMP # return a lock as soon as possible
