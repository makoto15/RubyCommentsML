on_ignored_nl UNK UNK UNK UNK on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl def UNK on_lparen UNK # # Fluentd # # Licensed under the Apache License, Version 2.0 (the "License"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. #
UNK on_nl end on_nl end on_nl end on_nl on_ignored_nl UNK if locks on_period UNK on_ignored_nl locks on_period UNK do on_op # flush locked keys
on_ignored_nl locks on_period UNK do on_op on_lparen UNK on_comma v on_rparen on_op on_ignored_nl UNK on_ivar on_comma UNK on_nl v on_period # failed to lock all keys
on_ivar on_period unlock on_nl keys on_period UNK on_lparen key on_rparen end on_nl end on_nl end on_nl end on_nl on_ignored_nl UNK # release global lock
end on_nl end on_nl end on_nl end on_nl on_ignored_nl UNK on_const on_nl on_const on_op UNK on_op UNK on_ignored_nl def UNK # failed lock, retry this key
on_ignored_nl def UNK on_lparen UNK on_comma UNK on_comma mutex on_rparen on_ignored_nl on_ivar on_op UNK on_nl on_ivar on_op UNK on_nl on_ivar # 15 min
on_const on_period UNK on_lparen UNK on_rparen do on_ignored_nl on_ivar on_period UNK on_nl end on_nl UNK on_const on_op on_const on_nl on_ivar # Avoid waiting CLEANUP_INTERVAL
UNK UNK mutex on_period UNK on_nl on_ignored_nl on_ivar on_lbracket key on_rbracket on_op UNK on_nl mutex on_period unlock on_nl on_ignored_nl if # v['last_modified_at'] = [sec, nsec]
if mutex on_period UNK on_nl on_ivar on_period UNK on_lparen key on_rparen on_nl mutex on_period unlock on_nl UNK on_ignored_nl on_ivar on_lbracket # Check that a waiting thread is in a lock queue. # Can't get a lock here means this key is used in other places. # So restore a mutex value to a corresponding key.
