on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl class on_const on_nl UNK on_const # # Fluentd # # Licensed under the Apache License, Version 2.0 (the "License"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. #
on_const on_op on_symbeg UNK on_const on_op on_symbeg default on_ignored_nl on_const on_op on_lbracket on_const on_comma on_const on_comma on_const on_rbracket on_period UNK # only in supervisor, or a worker with --no-supervisor
on_const on_op on_symbeg default on_ignored_nl on_const on_op on_lbracket on_const on_comma on_const on_comma on_const on_rbracket on_period UNK on_nl on_ignored_nl def self # only in a worker with worker_id=0 (without showing worker id)
on_ignored_nl on_const on_op on_lbracket on_const on_comma on_const on_comma on_const on_rbracket on_period UNK on_nl on_ignored_nl def self on_period UNK on_lparen UNK # show logs in all supervisor/workers, with worker id in workers (default)
UNK on_op logger on_period class on_period UNK on_lparen on_symbeg UNK on_rparen on_period UNK on_lparen logger on_rparen on_nl UNK on_op self # overwrites logger.level= so that config reloading resets level of Fluentd::Log
logger on_period UNK on_lparen on_symbeg UNK on_rparen on_lbrace on_op level on_op UNK on_period call on_lparen level on_rparen UNK UNK on_period # The original ruby logger sets the number as each log level like below. # DEBUG = 0 # INFO = 1 # WARN = 2 # ERROR = 3 # FATAL = 4 # Serverengine use this original log number. In addition to this, serverengine sets -1 as TRACE level. # TRACE = -1 # # On the other hand, in fluentd side, it sets the number like below. # TRACE = 0 # DEBUG = 1 # INFO = 2 # WARN = 3 # ERROR = 4 # FATAL = 5 # # Then fluentd's level is set as serverengine's level + 1. # So if serverengine's logger level is changed, fluentd's log level will be changed to that + 1.
on_ivar on_op on_lbracket on_rbracket on_nl on_ignored_nl on_ivar on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ivar on_op nil # TODO: This variable name is unclear so we should change to better name.
on_ivar on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ivar on_op nil on_nl on_ivar on_op nil on_nl on_ignored_nl # Fluent::Engine requires Fluent::Log, so we must take that object lazily
on_ivar on_op on_symbeg UNK UNK on_ivar on_nl when on_symbeg UNK on_nl on_ivar on_op true on_nl on_ivar on_op false on_nl when # :supervisor, :worker0, :workers Or :standalone
UNK on_ivar on_nl when on_symbeg UNK on_nl on_ivar on_op true on_nl on_ivar on_op false on_nl when on_symbeg UNK on_nl on_ivar # to keep behavior of existing code
end on_nl on_ignored_nl def dup on_nl UNK on_op on_lbrace on_rbrace on_nl UNK on_lbracket on_symbeg UNK on_rbracket on_op on_ivar on_op on_int # used only for :default log type in workers
UNK on_nl end on_nl on_ignored_nl UNK on_symbeg format on_nl UNK on_symbeg UNK on_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_nl # optional headers/attrs are not copied, because new PluginLogger should have another one of it
on_ivar on_period UNK if on_ivar on_nl nil on_nl end on_nl on_ignored_nl def UNK on_lparen b on_op true on_rparen on_ignored_nl on_ivar # do nothing in @logger.reopen! because it's already reopened in Supervisor.load_config
def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_period UNK on_lparen UNK on_rparen UNK on_ivar on_period UNK on_lparen UNK on_rparen on_nl # If you want to suppress event emitting in specific thread, please use this method. # Events in passed thread are never emitted.
on_ivar on_period UNK on_lparen UNK on_rparen UNK on_ivar on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl # this method is not symmetric with #enable_event.
def skipped_type? on_lparen type on_rparen on_ignored_nl UNK type on_nl when on_const on_nl false on_nl when on_const on_nl on_op on_ivar on_nl # TODO: skip :worker0 logs when Fluentd gracefully restarted
end on_nl alias on_const UNK on_nl on_ignored_nl def UNK on_lparen backtrace on_op on_gvar on_period backtrace on_comma on_label on_symbeg default on_rparen # logger should not raise an exception. This rescue prevents unexpected behaviour.
nil on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_period UNK on_lparen UNK on_rparen on_nl end on_nl # FIXME
alias on_op UNK on_nl on_ignored_nl def flush on_nl on_ivar on_period flush on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period # We need `#<<` method to use this logger class with other # libraries such as aws-sdk
class on_const on_op on_const on_nl def UNK on_lparen logger on_rparen on_ignored_nl on_ivar on_op logger on_nl on_ivar on_op on_ivar on_period level # PluginLogger has own log level separated from global $log object. # This class enables log_level option in each plugin. # # PluginLogger has same functionality as Log but some methods are forwarded to internal logger # for keeping logging action consistency in the process, e.g. color, event, etc.
on_rbrace on_nl end on_nl on_ignored_nl def UNK on_nl super on_nl on_ignored_nl on_ivar on_op on_gvar end on_nl on_ignored_nl UNK on_symbeg UNK # 'log_level' will be warned as deprecated
end on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl super on_nl on_ignored_nl if UNK on_op # Use $log object directly by default
class on_const on_op on_op on_const on_op on_const on_nl def flush on_nl if on_ivar on_period UNK on_lparen on_symbeg flush on_rparen on_nl # This class delegates some methods which are used in `Fluent::Logger` to a instance variable(`dev`) in `Logger::LogDevice` class # https://github.com/ruby/ruby/blob/7b2d47132ff8ee950b0f978ab772dee868d9f1b0/lib/logger.rb#L661
