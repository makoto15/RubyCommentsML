on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content # # Fluentd # # Licensed under the Apache License, Version 2.0 (the "License"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an "AS IS" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. #
UNK type on_op if type on_nl type on_nl UNK conf on_op conf on_period UNK on_lparen on_symbeg on_op on_rparen on_nl raise # storage is already created, but not loaded / started
type on_op if type on_nl type on_nl UNK conf on_op conf on_period UNK on_lparen on_symbeg on_op on_rparen on_nl raise on_const # !s
conf on_op on_const on_lbracket conf on_period UNK on_lbrace on_op UNK on_comma v on_op on_lbracket UNK on_period UNK on_comma v on_rbracket # in code, programmer may use symbols as keys, but Element needs strings
UNK on_symbeg storage on_comma on_label false on_comma on_label true on_comma on_label on_symbeg UNK on_comma on_label true do on_ignored_nl UNK on_symbeg # minimum section definition to instantiate storage plugin instances
on_ignored_nl def UNK on_nl super on_nl on_ivar on_op false on_nl on_ivar on_op on_lbrace on_rbrace end on_nl on_ignored_nl def UNK on_lparen # for tests
end on_nl on_ignored_nl def UNK on_lparen conf on_rparen on_ignored_nl super on_nl on_ignored_nl on_ivar on_period UNK do on_op section on_op on_ignored_nl # usage => storage_state
storage_operate on_lparen on_symbeg UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl storage_operate on_lparen on_symbeg UNK on_rparen on_nl super on_nl # timer stops automatically in super
UNK on_const on_nl on_ignored_nl def UNK on_lparen storage on_rparen on_ignored_nl on_ivar on_op storage on_nl on_ivar on_op on_const on_period new on_nl # PersistentWrapper always provides synchronized operations
