UNK UNK on_gvar on_period out on_period logs on_period UNK on_nl on_ignored_nl UNK on_lbrace on_gvar on_period out on_period logs on_period UNK # In TravisCI with OSX(Xcode), it seems that can't use rpc server. # This test will be passed in such environment.
se_config on_op load_config_proc on_period call on_nl assert_equal on_const on_op on_const on_op on_const on_comma se_config on_lbracket on_symbeg log_level on_rbracket on_nl assert_equal # first call
se_config on_op load_config_proc on_period call on_nl pre_config_mtime on_op se_config on_lbracket on_symbeg windows_daemon_cmdline on_rbracket on_lbracket on_int on_rbracket on_lbracket on_tstring_beg on_tstring_content on_tstring_end # second call immediately(reuse config)
se_config on_op load_config_proc on_period call on_nl pre_config_mtime on_op se_config on_lbracket on_symbeg windows_daemon_cmdline on_rbracket on_lbracket on_int on_rbracket on_lbracket on_tstring_beg on_tstring_content on_tstring_end # third call after 5 seconds(don't reuse config)
se_config on_op load_config_proc on_period call on_nl assert_equal pre_config_mtime on_comma se_config on_lbracket on_symbeg windows_daemon_cmdline on_rbracket on_lbracket on_int on_rbracket on_lbracket on_tstring_beg on_tstring_content # forth call immediately(reuse config)
assert_equal pre_config_mtime on_comma se_config on_lbracket on_symbeg windows_daemon_cmdline on_rbracket on_lbracket on_int on_rbracket on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl assert_equal pre_loadtime on_comma # test that pre_config_mtime and pre_loadtime are not changed from previous one because reused pre_config
se_config on_op load_config_proc on_period call on_nl assert_equal on_const on_op on_const on_op on_const on_comma se_config on_lbracket on_symbeg log_level on_rbracket on_nl UNK # fifth call after changed conf file(don't reuse config)
se_config on_op load_config_proc on_period call on_nl assert_equal on_const on_op on_const on_op on_const on_comma se_config on_lbracket on_symbeg log_level on_rbracket on_nl assert_equal # first call
se_config on_op load_config_proc on_period call on_nl pre_config_mtime on_op se_config on_lbracket on_symbeg windows_daemon_cmdline on_rbracket on_lbracket on_int on_rbracket on_lbracket on_tstring_beg on_tstring_content on_tstring_end # second call immediately(reuse config)
se_config on_op load_config_proc on_period call on_nl pre_config_mtime on_op se_config on_lbracket on_symbeg windows_daemon_cmdline on_rbracket on_lbracket on_int on_rbracket on_lbracket on_tstring_beg on_tstring_content on_tstring_end # third call after 6 seconds(don't reuse config)
se_config on_op load_config_proc on_period call on_nl assert_equal pre_config_mtime on_comma se_config on_lbracket on_symbeg windows_daemon_cmdline on_rbracket on_lbracket on_int on_rbracket on_lbracket on_tstring_beg on_tstring_content # forth call immediately(reuse config)
assert_equal pre_config_mtime on_comma se_config on_lbracket on_symbeg windows_daemon_cmdline on_rbracket on_lbracket on_int on_rbracket on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl assert_equal pre_loadtime on_comma # test that pre_config_mtime and pre_loadtime are not changed from previous one because reused pre_config
se_config on_op load_config_proc on_period call on_nl assert_equal on_const on_op on_const on_op on_const on_comma se_config on_lbracket on_symbeg log_level on_rbracket on_nl UNK # fifth call after changed conf file(don't reuse config)
logger on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl assert_equal on_const on_op on_const on_op on_const on_comma on_gvar on_period UNK on_nl on_ignored_nl # test that DamonLogger#level= overwrites Fluent.log#level
UNK on_lparen sv on_rparen on_period UNK on_lbrace on_const on_op on_const on_period new on_rbrace on_ignored_nl sv on_period UNK on_nl assert_equal UNK # to skip
on_ignored_nl sv on_period UNK on_nl assert_equal UNK on_comma sv on_period instance_variable_get on_lparen on_symbeg on_ivar on_rparen on_nl end on_nl on_ignored_nl def # to skip
