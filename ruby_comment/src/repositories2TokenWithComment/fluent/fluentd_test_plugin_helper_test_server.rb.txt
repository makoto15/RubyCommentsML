require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end # to create certs for tests
sub_test_case on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl methods on_op on_lbrace on_label on_symbeg server_create on_comma on_label on_symbeg server_create_connection on_rbrace on_nl on_ignored_nl data # run tests for tcp, udp, tls and unix
end on_nl on_ignored_nl data on_lparen methods on_rparen on_nl test on_tstring_beg on_tstring_content on_tstring_end do on_op m on_op on_ignored_nl on_ivar on_op d # yes, TCP here
end on_nl on_ignored_nl data on_lparen methods on_rparen on_nl test on_tstring_beg on_tstring_content on_tstring_end do on_op m on_op on_ignored_nl end on_nl on_ignored_nl # OK, it's Coolio::TCPServer
end on_nl on_ignored_nl data on_lparen methods on_rparen on_nl test on_tstring_beg on_tstring_content on_tstring_end do on_op m on_op on_ignored_nl assert_raise on_lparen on_const # pend "not implemented yet"
on_tstring_beg on_tstring_content on_tstring_end on_op on_lbracket on_symbeg server_create_connection on_comma on_symbeg tcp on_rbracket on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op on_lbracket on_symbeg server_create_connection # 'server_create unix' => [:server_create, :unix],
on_rparen on_nl test on_tstring_beg on_tstring_content on_tstring_end do on_op on_lparen m on_comma proto on_rparen on_op on_ignored_nl assert_raise on_const do on_ignored_nl on_ivar # 'server_create_connection tcp' => [:server_create_connection, :unix],
on_tstring_beg on_tstring_content on_tstring_end on_op on_lbracket on_symbeg server_create_connection on_comma on_symbeg tcp on_comma on_lbrace on_rbrace on_rbracket on_comma on_ignored_nl on_rparen on_nl test on_tstring_beg # 'server_create unix' => [:server_create, :unix, {}],
on_rparen on_nl test on_tstring_beg on_tstring_content on_tstring_end do on_op on_lparen m on_comma proto on_comma kwargs on_rparen on_op on_ignored_nl assert_raise on_lparen on_const # 'server_create_connection unix' => [:server_create_connection, :unix, {}],
omit on_tstring_beg on_tstring_content on_tstring_end unless ipv6_enabled? on_nl on_ivar on_period __send__ on_lparen m on_comma on_symbeg myserver on_comma on_const on_comma on_label proto # if available
on_tstring_beg on_tstring_content on_tstring_end on_op on_lbracket on_symbeg server_create on_comma on_symbeg tcp on_comma on_lbrace on_rbrace on_rbracket on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op # 'server_create unix' => [:server_create, :unix, {}],
on_rparen on_nl test on_tstring_beg on_tstring_content on_tstring_end do on_op on_lparen m on_comma proto on_comma kwargs on_rparen on_op on_ignored_nl begin on_ignored_nl d2 # 'server_create_connection unix' => [:server_create, :unix, {}],
on_tstring_beg on_tstring_content on_tstring_end on_op on_lbracket on_symbeg server_create on_comma on_symbeg tls on_comma on_lbrace on_label on_lbrace on_label true on_rbrace on_rbrace on_rbracket on_comma # Disable udp test because the behaviour of SO_REUSEXXX option is different betweeen BSD, Linux and others... # Need to find good way for testing on local, CI service and others. #'server_create udp' => [:server_create, :udp, {max_bytes: 128}],
on_tstring_beg on_tstring_content on_tstring_end on_op on_lbracket on_symbeg server_create on_comma on_symbeg tcp on_comma on_lbrace on_rbrace on_rbracket on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op # 'server_create unix' => [:server_create, :unix, {}],
on_rparen on_nl test on_tstring_beg on_tstring_content on_tstring_end do on_op on_lparen m on_comma proto on_comma kwargs on_rparen on_op on_ignored_nl begin on_ignored_nl d2 # 'server_create_connection unix' => [:server_create, :unix, {}],
on_rparen on_nl test on_tstring_beg on_tstring_content on_tstring_end do on_op on_lparen proto on_comma kwargs on_rparen on_op on_ignored_nl assert_raise on_lparen on_const on_period new # 'unix' => [:unix, {}],
end on_nl end on_nl end on_nl on_ignored_nl test on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl received on_op on_tstring_beg on_tstring_end on_nl on_ivar on_period # ...
end on_nl on_ignored_nl test on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl received on_op on_tstring_beg on_tstring_end on_nl errors on_op on_lbracket on_rbracket on_nl on_ivar # pend "not implemented yet"
assert_equal on_tstring_beg on_tstring_content on_tstring_end on_comma errors on_period first on_period UNK on_nl end on_nl on_ignored_nl test on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl # it might be called twice (or more) when connection was accepted, and then data arrived (or more)
end on_nl sock on_period close on_nl end on_nl end on_nl waiting on_lparen on_int on_rparen on_lbrace sleep on_float until lines on_period # ignore
end on_nl end on_nl end on_nl waiting on_lparen on_int on_rparen on_lbrace sleep on_float until lines on_period size on_op on_int on_op # ignore
end on_nl on_ivar on_period server_create_tcp on_lparen on_symbeg UNK on_comma on_const on_comma on_label on_tstring_beg on_tstring_content on_tstring_end on_comma on_label false on_rparen do # ...
end on_nl end on_nl end on_nl end on_nl on_ignored_nl sub_test_case on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl test on_tstring_beg on_tstring_content on_tstring_end do # ...
end on_nl end on_nl end on_nl on_ignored_nl test on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl received on_op on_tstring_beg on_tstring_end on_nl on_ivar on_period # ...
end on_nl on_ivar on_period server_create_udp on_lparen on_symbeg UNK on_comma on_const on_comma on_label on_tstring_beg on_tstring_content on_tstring_end on_comma on_label false on_comma on_label # ...
end on_nl end on_nl end on_nl end on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_op on_const on_op on_const on_nl end # ...
UNK on_op passphrase on_op key on_period UNK on_lparen on_const on_op on_const on_period new on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_comma passphrase # Write the secret key (raw or encrypted by AES256) in PEM format
on_const on_period open on_lparen cert_path on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen do on_op f on_op on_ignored_nl f on_period write UNK on_period # write chained cert
end on_nl UNK on_ignored_nl context on_period UNK on_op on_const on_op on_const on_op on_const on_nl end on_nl on_const on_op on_const on_period # In test code, using hostname to be connected is very difficult
on_ignored_nl on_ivar on_op on_const on_period join on_lparen on_const on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ivar on_op on_const on_period join on_lparen # to get plugin not configured/started yet
tls_options on_op on_lbrace on_ignored_nl on_label on_symbeg tls on_comma on_ignored_nl on_label on_symbeg on_tstring_content on_tstring_end on_comma on_ignored_nl on_label on_tstring_beg on_tstring_content on_tstring_end on_comma # insecure
end on_nl end on_nl open_tls_session on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_const on_comma on_label false on_rparen do on_op sock on_op on_ignored_nl # cannot connect ....
end on_nl end on_nl open_tls_session on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_const on_comma on_label cert_path on_rparen do on_op sock on_op on_ignored_nl # cannot connect by failing verification without server cert
transport_opts on_op on_lbrace on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_rbrace on_nl transport_conf on_op config_element on_lparen on_tstring_beg # insecure
end on_nl end on_nl open_tls_session on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_const on_comma on_label false on_rparen do on_op sock on_op on_ignored_nl # cannot connect ....
end on_nl end on_nl open_tls_session on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_const on_comma on_label cert_path on_rparen do on_op sock on_op on_ignored_nl # cannot connect by failing verification without server cert
end on_nl end on_nl end on_nl on_ignored_nl test on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl received on_op on_tstring_beg on_tstring_end on_nl on_ivar on_period # ...
open_tls_session on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_const on_comma on_label on_ivar on_rparen do on_op sock on_op on_ignored_nl sock on_period puts on_tstring_beg # open_tls_session('127.0.0.1', PORT, cert_path: @cert_path, hostname: @default_hostname) do |sock|
open_tls_session on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_const on_comma on_label on_ivar on_rparen do on_op sock on_op on_ignored_nl sock on_period puts on_tstring_beg # open_tls_session('::1', PORT, cert_path: @cert_path, hostname: @default_hostname) do |sock|
open_tls_session on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_const on_comma on_label on_ivar on_rparen do on_op sock on_op on_ignored_nl sock on_period puts on_tstring_beg # open_tls_session('127.0.0.1', PORT, cert_path: @cert_path, hostname: @default_hostname) do |sock|
open_tls_session on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_const on_comma on_label on_ivar on_rparen do on_op sock on_op on_ignored_nl sock on_period puts on_tstring_beg # open_tls_session('127.0.0.1', PORT, cert_path: @cert_path, hostname: @default_hostname) do |sock|
end on_nl on_ignored_nl test on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl received on_op on_tstring_beg on_tstring_end on_nl errors on_op on_lbracket on_rbracket on_nl on_ivar # pend "not implemented yet"
end on_nl sock on_period close on_nl end on_nl end on_nl waiting on_lparen on_int on_rparen on_lbrace sleep on_float until lines on_period # ignore
end on_nl end on_nl end on_nl waiting on_lparen on_int on_rparen on_lbrace sleep on_float until lines on_period size on_op on_int on_op # ignore
on_ignored_nl on_ignored_nl end on_nl on_ignored_nl def open_client on_lparen proto on_comma addr on_comma port on_rparen on_ignored_nl UNK on_op UNK proto on_nl # not implemented yet
on_ignored_nl end on_nl on_ignored_nl def open_client on_lparen proto on_comma addr on_comma port on_rparen on_ignored_nl UNK on_op UNK proto on_nl UNK # test 'can accept all keyword arguments valid for unix server' # test 'creates a unix server just to read data' # test 'creates a unix server to read and write data'
end on_nl on_ignored_nl def open_client on_lparen proto on_comma addr on_comma port on_rparen on_ignored_nl UNK on_op UNK proto on_nl UNK on_symbeg # test 'raises error if plugin registers data callback for connection object from #server_create' # test 'can call write_complete callback if registered' # test 'can call close callback if registered'
sub_test_case on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl test on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl assert_raise on_lparen on_const on_period new on_lparen on_tstring_beg on_tstring_content # run tests for tcp, tls and unix
protocols on_op on_lbrace on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op on_lbracket on_symbeg tcp on_comma on_lbrace on_rbrace on_rbracket on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end # def server_create_connection(title, port, proto: :tcp, bind: '0.0.0.0', shared: true, tls_options: nil, resolve_name: false, linger_timeout: 0, backlog: nil, &block)
on_rbrace on_nl on_ignored_nl data on_lparen protocols on_rparen on_nl test on_tstring_beg on_tstring_content on_tstring_end do on_op on_lparen proto on_comma kwargs on_rparen on_op # 'unix' => [:unix, {path: ""}],
end on_nl waiting on_lparen on_int on_rparen on_lbrace sleep on_float until lines on_period size on_op on_int on_rbrace on_nl waiting on_lparen on_int # TCP socket is closed here
UNK on_op true on_nl end on_nl rescue on_nl end on_nl on_ignored_nl UNK UNK on_nl on_ignored_nl received on_op on_tstring_beg on_tstring_end on_nl # expected behavior is connection refused...
rescue on_nl true end on_nl end on_nl on_ignored_nl UNK on_op waiting on_lparen on_int on_rparen on_lbrace UNK on_period UNK on_rbrace on_nl # failed
end on_nl end on_nl on_ignored_nl UNK on_op waiting on_lparen on_int on_rparen on_lbrace UNK on_period UNK on_rbrace on_nl UNK on_op waiting # success
end on_nl end on_nl end on_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP # pend "not implemented yet"
