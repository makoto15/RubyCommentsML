on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma # frozen_string_literal: true
UNK on_const on_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg # Context keeps the variable stack and resolves variables, as well as keywords # # context['variable'] = 'testing' # context['variable'] #=> 'testing' # context['true'] #=> true # context['10.2232'] #=> 10.2232 # # context.stack do # context['bob'] = 'bobsen' # end # # context['bob'] #=> nil class Context
def self on_period UNK on_lparen on_label on_lbrace on_rbrace on_comma on_label on_lbrace on_rbrace on_comma on_label on_lbrace on_rbrace on_comma on_label UNK on_comma # rubocop:disable Metrics/ParameterLists
on_ignored_nl def UNK on_nl on_ivar on_op on_lbracket on_rbracket on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op on_const on_period UNK # rubocop:enable Metrics/ParameterLists
def UNK on_lparen filters on_rparen on_ignored_nl filters on_op on_lbracket filters on_rbracket on_period UNK on_period UNK on_nl on_ivar on_op filters on_nl # Adds filters to this context. # # Note that this does not register the filters with the main Template object. see <tt>Template.register_filter</tt> # for that
def UNK on_nl on_op on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen e on_rparen on_ignored_nl on_ivar on_period UNK # are there any not handled interrupts?
def UNK on_lparen e on_rparen on_ignored_nl on_ivar on_period UNK on_lparen e on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar # push an interrupt to the stack. this interrupt is considered not handled.
def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen e on_comma UNK on_op nil on_rparen on_ignored_nl # pop an interrupt from the stack
def UNK on_lparen UNK on_op on_lbrace on_rbrace on_rparen on_ignored_nl on_ivar on_period UNK on_lparen UNK on_rparen on_nl UNK on_nl end on_nl # Push new local scope on the stack. use <tt>Context#stack</tt> instead
def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_lbracket on_int on_rbracket on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl def # Merge a hash of variables in the current local scope
def UNK on_nl UNK on_const if on_ivar on_period UNK on_op on_int on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def # Pop from the stack. use <tt>Context#stack</tt> instead
def UNK on_lparen UNK on_op on_lbrace on_rbrace on_rparen on_ignored_nl UNK on_lparen UNK on_rparen on_nl UNK on_nl UNK on_ignored_nl UNK on_nl # Pushes a new local scope on the stack, pops it at the end of the block # # Example: # context.stack do # context['var'] = 'hi' # end # # context['var] #=> nil
def UNK on_nl UNK on_nl on_ignored_nl on_const on_period UNK on_lparen on_ignored_nl on_label UNK on_comma on_ignored_nl on_label UNK on_comma on_ignored_nl on_label # Creates a new context inheriting resource limits, filters, environment etc., # but with an isolated scope.
def on_op on_lparen key on_comma value on_rparen on_ignored_nl on_ivar on_lbracket on_int on_rbracket on_lbracket key on_rbracket on_op value on_nl end on_nl # Only allow String, Numeric, Hash, Array, Proc, Boolean or <tt>Liquid::Drop</tt>
def on_op on_lparen UNK on_rparen on_ignored_nl UNK on_lparen on_const on_period UNK on_lparen UNK on_rparen on_rparen on_nl end on_nl on_ignored_nl def # Look up variable, either resolve directly after considering the name. We can directly handle # Strings, digits, floats and booleans (true,false). # If no match is made we lookup the variable in the current scope and # later move up to the parent blocks to see if we can resolve the variable somewhere up the tree. # Some special keywords return symbols. Those symbols are to be called on the rhs object in expressions # # Example: # products == empty #=> products.empty?
def UNK on_lparen key on_comma on_label UNK on_rparen on_ignored_nl UNK on_op on_ivar on_period UNK on_lbrace on_op UNK on_op UNK on_period # Fetches an object starting at the local scope and then moving up the hierachy
UNK on_op on_ivar on_period UNK on_lbrace on_op UNK on_op UNK on_period UNK on_lparen key on_rparen on_rbrace on_nl on_ignored_nl variable on_op # This was changed from find() to find_index() because this is a very hot # path and find_index() is optimized in MRI to reduce object allocation
UNK on_const on_op on_const on_comma UNK UNK UNK on_nl UNK on_const on_op on_const on_op UNK on_nl UNK on_nl end on_nl # raise and catch to set backtrace and cause on exception
end end EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP # squash_instance_assigns_with_environments
end EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP # Context
