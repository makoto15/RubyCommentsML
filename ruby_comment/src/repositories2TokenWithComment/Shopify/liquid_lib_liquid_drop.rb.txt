on_ignored_nl UNK UNK UNK UNK on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK # frozen_string_literal: true
UNK on_const on_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK UNK UNK UNK on_op UNK # A drop in liquid is a class which allows you to export DOM like things to liquid. # Methods of drops are callable. # The main use for liquid drops is to implement lazy loaded objects. # If you would like to make data available to the web designers which you don't want loaded unless needed then # a drop is a great way to do that. # # Example: # # class ProductDrop < Liquid::Drop # def top_sales # Shop.current.products.find(:all, :order => 'sales', :limit => 10 ) # end # end # # tmpl = Liquid::Template.parse( ' {% for product in product.top_sales %} {{ product.name }} {%endfor%} ' ) # tmpl.render('product' => ProductDrop.new ) # will invoke top_sales query. # # Your drop can either implement the methods sans any parameters # or implement the liquid_method_missing(name) method which is a catch all.
def UNK on_lparen UNK on_rparen on_ignored_nl UNK UNK UNK UNK on_op UNK on_nl UNK on_const on_op on_const on_comma UNK UNK # Catch all for the method
def UNK on_lparen UNK on_rparen on_ignored_nl UNK self on_period UNK on_period UNK on_lparen UNK on_rparen on_nl UNK on_lparen UNK on_rparen # called by liquid to invoke a drop
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK on_lparen UNK on_period UNK on_rparen on_nl end on_nl on_ignored_nl # Check for method existence without invoking respond_to?, which creates symbols
