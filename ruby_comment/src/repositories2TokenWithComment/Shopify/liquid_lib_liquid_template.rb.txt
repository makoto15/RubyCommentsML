on_ignored_nl UNK on_const on_nl UNK on_const on_nl attr_accessor on_symbeg UNK on_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl UNK # frozen_string_literal: true
UNK on_const on_nl attr_accessor on_symbeg UNK on_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl UNK on_const on_nl UNK on_const # Templates are central to liquid. # Interpretating templates is a two step process. First you compile the # source code you got. During compile time some extensive error checking is performed. # your code should expect to get some SyntaxErrors. # # After you have a compiled template you can then <tt>render</tt> it. # You can use a compiled template over and over again and keep it cached. # # Example: # # template = Liquid::Template.parse(source) # template.render('user_name' => 'bob') #
attr_accessor on_symbeg UNK on_nl on_const on_period UNK on_op on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen # Sets how strict the parser should be. # :lax acts like liquid 2.5 and silently ignores malformed tags in most cases. # :warn is the default and will give deprecation warnings when invalid syntax is used. # :strict will enforce correct syntax.
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op on_const on_period new on_period UNK on_period UNK on_nl if UNK on_op on_symbeg # Sets how strict the taint checker should be. # :lax is the default, and ignores the taint flag completely # :warn adds a warning, but does not interrupt the rendering # :error raises an error when tainted output is used # @deprecated Since it is being deprecated in ruby itself.
def UNK on_lparen UNK on_rparen on_ignored_nl on_const on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl attr_accessor on_symbeg UNK on_nl # Pass a module with filter methods which should be available # to all liquid views. Good for registering the standard library
def UNK on_lparen source on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl new on_period UNK on_lparen source on_comma options on_rparen on_nl # creates a new <tt>Template</tt> object from liquid source code # To enable profiling, pass in <tt>profile: true</tt> as an option. # See Liquid::Profiler for more information
def UNK on_lparen source on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl on_ivar on_op options on_nl on_ivar on_op options on_lbracket on_symbeg # Parse source code. # Returns self for easy chaining
def UNK on_lparen on_op args on_rparen on_ignored_nl UNK UNK UNK if on_ivar on_period UNK on_nl on_ignored_nl context on_op UNK args # Render takes a hash with local variables. # # if you use the same filters over and over again consider registering them globally # with <tt>Template.register_filter</tt> # # if profiling was enabled in <tt>Template#parse</tt> then the resulting profiling information # will be available via <tt>Template#profiler</tt> # # Following options can be passed: # # * <tt>filters</tt> : array with local filters # * <tt>registers</tt> : hash with register variables. Those can be accessed from # filters and tags and might be useful to integrate liquid more with its host application #
context on_period UNK on_period UNK on_nl on_ignored_nl UNK on_ignored_nl UNK on_lparen context on_rparen UNK on_ignored_nl on_ivar on_period UNK on_lparen context # Retrying a render resets resource usage
UNK on_lparen context on_rparen UNK on_ignored_nl on_ivar on_period UNK on_lparen context on_comma output on_op on_op UNK UNK on_rparen on_nl end # render the nodelist. # for performance reasons we get an array back here. join will make a string out of it.
