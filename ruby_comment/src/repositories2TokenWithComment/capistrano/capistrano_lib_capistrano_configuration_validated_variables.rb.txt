UNK on_const on_op on_const on_nl UNK on_const on_op on_const on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_lparen UNK # Decorates a Variables object to additionally perform an optional set of # user-supplied validation rules. Each rule for a given key is invoked # immediately whenever `set` is called with a value for that key. # # If `set` is called with a callable value or a block, validation is not # performed immediately. Instead, the validation rules are invoked the first # time `fetch` is used to access the value. # # A rule is simply a block that accepts two arguments: key and value. It is # up to the rule to raise an exception when it deems the value is invalid # (or just print a warning). # # Rules can be registered using the DSL like this: # # validate(:my_key) do |key, value| # # rule goes here # end #
def UNK on_lparen key on_comma value on_op UNK on_comma on_op UNK on_rparen on_ignored_nl UNK on_lparen value on_comma UNK on_rparen on_nl # Decorate Variables#set to add validation behavior.
UNK UNK UNK UNK on_period UNK on_lparen key on_rparen on_nl on_ignored_nl UNK on_op UNK on_op value on_nl on_ignored_nl UNK UNK # Skip validation behavior if no validators are registered for this key
def UNK on_lparen key on_comma on_op validator on_rparen on_ignored_nl UNK on_op on_lparen UNK UNK key UNK on_op UNK UNK on_rparen # Register a validation rule for the given key.
def UNK on_lparen key on_comma UNK on_rparen on_ignored_nl UNK on_op UNK UNK on_ignored_nl value on_op UNK on_period UNK on_nl UNK # Given a callable that provides a value, wrap the callable with another # object that responds to `call`. This new object will perform validation # and then return the original callable's value. # # If the callable is a `Question`, the object returned by this method will # also be a `Question` (a `ValidatedQuestion`, to be precise). This # ensures that `is_a?(Question)` remains true even after the validation # wrapper is applied. This is needed so that `Configuration#is_question?` # works as expected. #
def UNK on_lparen key on_comma value on_rparen on_ignored_nl UNK UNK key UNK on_period UNK UNK on_op validator on_op on_ignored_nl validator # Runs all validation rules registered for the given key against the # user-supplied value for that variable. If no validator raises an # exception, the value is assumed to be valid.
