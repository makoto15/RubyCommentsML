UNK on_const on_nl UNK UNK context on_nl on_ignored_nl def UNK on_lparen context on_comma UNK on_rparen on_ignored_nl UNK on_op context on_nl # Base class for SCM strategy providers. # # @abstract # # @attr_reader [Rake] context # # @author Hartog de Mik #
def UNK on_lparen context on_comma UNK on_rparen on_ignored_nl UNK on_op context on_nl UNK on_op UNK on_op UNK UNK UNK UNK # Provide a wrapper for the SCM that loads a strategy for the user. # # @param [Rake] context The context in which the strategy should run # @param [Module] strategy A module to include into the SCM instance. The # module should provide the abstract methods of Capistrano::SCM #
def UNK on_lparen on_op UNK on_rparen on_ignored_nl context on_period UNK on_lparen on_op UNK on_rparen on_nl end on_nl on_ignored_nl def UNK # Call test in context
def UNK on_nl context on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl context on_period UNK on_nl end on_nl on_ignored_nl # The repository URL according to the context
def UNK on_nl context on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl context on_period UNK on_nl end on_nl on_ignored_nl # The repository path according to the context
def UNK on_nl context on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen on_op UNK on_rparen on_ignored_nl context on_period UNK # The release path according to the context
def UNK on_lparen on_op UNK on_rparen on_ignored_nl context on_period UNK on_lparen on_op UNK on_rparen on_nl end on_nl on_ignored_nl def UNK # Fetch a var from the context # @param [Symbol] variable The variable to fetch # @param [Object] default The default value if not found #
def UNK on_nl raise on_const on_comma on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl raise on_const on_comma on_tstring_beg # @abstract # # Your implementation should check the existence of a cache repository on # the deployment target # # @return [Boolean] #
def UNK on_nl raise on_const on_comma on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl raise on_const on_comma on_tstring_beg # @abstract # # Your implementation should check if the specified remote-repository is # available. # # @return [Boolean] #
def UNK on_nl raise on_const on_comma on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl raise on_const on_comma on_tstring_beg # @abstract # # Create a (new) clone of the remote-repository on the deployment target # # @return void #
def UNK on_nl raise on_const on_comma on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl raise on_const on_comma on_tstring_beg # @abstract # # Update the clone on the deployment target # # @return void #
def UNK on_nl raise on_const on_comma on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl raise on_const on_comma on_tstring_beg # @abstract # # Copy the contents of the cache-repository onto the release path # # @return void #
def UNK on_nl raise on_const on_comma on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl end on_nl end on_nl EMP EMP EMP EMP # @abstract # # Identify the SHA of the commit that will be deployed. This will most likely involve SshKit's capture method. # # @return void #
