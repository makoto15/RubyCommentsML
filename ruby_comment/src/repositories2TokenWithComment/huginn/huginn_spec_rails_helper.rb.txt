on_const on_lbracket on_const on_period UNK on_period UNK UNK on_tstring_beg on_tstring_content on_tstring_end UNK on_rbracket on_period UNK UNK on_op UNK on_op require # Requires supporting ruby files with custom matchers and macros, etc, # in spec/support/ and its subdirectories.
on_const on_op on_const on_period UNK UNK on_op config on_op on_ignored_nl config on_period UNK UNK on_op UNK on_op on_ignored_nl UNK on_period # Mix in shoulda matchers
config on_period UNK on_op on_tstring_beg UNK on_op on_const on_period UNK UNK on_tstring_content on_tstring_end on_nl on_ignored_nl config on_period UNK on_op UNK # Remove this line if you're not using ActiveRecord or ActiveRecord fixtures
config on_period UNK on_op UNK on_nl on_ignored_nl config on_period UNK on_nl on_ignored_nl config on_period UNK on_op UNK on_nl on_ignored_nl UNK # If you're not using ActiveRecord, or you'd prefer not to run each of your # examples within a transaction, remove the following line or assign false # instead of true.
config on_period UNK on_nl on_ignored_nl config on_period UNK on_op UNK on_nl on_ignored_nl UNK on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op # rspec-rails 3 will no longer automatically infer an example group's spec type # from the file location. You can explicitly opt-in to this feature using this # snippet:
config on_period UNK on_op UNK on_nl on_ignored_nl UNK on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op on_tstring_beg on_tstring_content on_tstring_end on_nl config # If true, the base class of anonymous controllers will be inferred # automatically. This will be the default behavior in future versions of # rspec-rails.
UNK on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op on_tstring_beg on_tstring_content on_tstring_end on_nl config on_period UNK on_symbeg UNK on_nl end on_nl # These two settings work together to allow you to limit a spec run # to individual examples or groups you care about by tagging them with # `:focus` metadata. When nothing is tagged with `:focus`, all examples # get run.
config on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl config on_period UNK on_op on_symbeg UNK on_nl on_ignored_nl config on_period UNK on_nl # Run specs in random order to surface order dependencies. If you find an # order dependency and want to debug it, you can fix the order by providing # the seed, which is printed after each run. # --seed 1234
