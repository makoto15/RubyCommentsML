on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg # frozen_string_literal: true
UNK on_const on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg # \Deprecation specifies the API used by Rails to deprecate methods, instance # variables, objects and constants.
require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl # active_support.rb sets an autoload for ActiveSupport::Deprecation. # # If these requires were at the top of the file the constant would not be # defined by the time their files were loaded. Since some of them reopen # ActiveSupport::Deprecation its autoload would be triggered, resulting in # a circular require warning for active_support/deprecation.rb. # # So, we define the constant first, and load dependencies later.
UNK UNK UNK on_nl on_ignored_nl UNK UNK UNK UNK on_op on_tstring_beg on_tstring_content on_tstring_end UNK UNK on_op on_tstring_beg on_tstring_content on_tstring_end UNK # The version number in which the deprecated behavior will be removed, by default.
UNK UNK UNK UNK on_op on_tstring_beg on_tstring_content on_tstring_end UNK UNK on_op on_tstring_beg on_tstring_content on_tstring_end UNK on_ignored_nl UNK UNK UNK on_op # It accepts two parameters on initialization. The first is a version of library # and the second is a library name. # # ActiveSupport::Deprecation.new('2.0', 'MyLibrary')
UNK UNK UNK on_op UNK on_nl UNK UNK UNK on_op UNK on_nl UNK on_nl UNK on_nl UNK on_nl EMP EMP # By default, warnings are not silenced and debugging is off.
