on_ignored_nl UNK UNK UNK UNK on_nl on_ignored_nl UNK on_const on_nl def UNK on_period UNK on_lparen UNK on_rparen on_ignored_nl database on_op # frozen_string_literal: true
UNK on_const on_nl def UNK on_period UNK on_lparen UNK on_rparen on_ignored_nl database on_op on_const on_period UNK on_lparen UNK on_rparen on_nl # # `CacheStoreDatabase` acts as an interface to a persistent storage mechanism # residing in the `HOMEBREW_CACHE`. #
def UNK on_period UNK on_lparen UNK on_rparen on_ignored_nl database on_op on_const on_period UNK on_lparen UNK on_rparen on_nl UNK on_op UNK # Yields the cache store database. # Closes the database after use if it has been loaded. # # @param [Symbol] type # @yield [CacheStoreDatabase] self
def UNK on_lparen key UNK UNK on_rparen on_ignored_nl db UNK key UNK on_op UNK on_nl end on_nl on_ignored_nl def UNK # Sets a value in the underlying database (and creates it if necessary).
def UNK on_lparen key on_rparen on_ignored_nl UNK UNK UNK on_nl on_ignored_nl db UNK key UNK on_nl end on_nl on_ignored_nl def # Gets a value from the underlying database (if it already exists).
def UNK on_lparen key on_rparen on_ignored_nl UNK UNK UNK on_nl on_ignored_nl db on_period UNK on_lparen key on_rparen on_nl end on_nl # Gets a value from the underlying database (if it already exists).
def UNK on_nl UNK UNK on_ivar on_nl on_ignored_nl cache_path on_period UNK on_period UNK on_nl cache_path on_period UNK on_lparen on_const on_period # Closes the underlying database (if it is created and open).
def UNK on_nl cache_path on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK UNK UNK on_nl on_ignored_nl cache_path on_period # Returns `true` if the cache file has been created for the given `@type` # # @return [Boolean]
def UNK on_nl UNK UNK UNK on_nl on_ignored_nl cache_path on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen on_op UNK # Returns the modification time of the cache file (if it already exists). # # @return [Time]
def UNK on_lparen on_op UNK on_rparen on_ignored_nl db on_period UNK on_lparen on_op UNK on_rparen on_nl end on_nl on_ignored_nl def UNK # Performs a `select` on the underlying database. # # @return [Array]
def UNK on_nl db on_period UNK on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl def db on_nl on_ivar on_op UNK on_ignored_nl # Returns `true` if the cache is empty. # # @return [Boolean]
def db on_nl on_ivar on_op UNK on_ignored_nl on_const on_period UNK on_lparen cache_path on_period UNK on_rparen UNK UNK on_nl UNK on_const # Lazily loaded database in read/write mode. If this method is called, a # database file with be created in the `HOMEBREW_CACHE` with name # corresponding to the `@type` instance variable # # @return [Hash] db
def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def cache_path on_nl on_const on_op UNK UNK # Creates a CacheStoreDatabase # # @param [Symbol] type # @return [nil]
def cache_path on_nl on_const on_op UNK UNK on_ivar UNK UNK UNK on_nl end on_nl end on_nl on_ignored_nl UNK on_const on_nl # The path where the database resides in the `HOMEBREW_CACHE` for the given # `@type` # # @return [String]
UNK on_const on_nl def UNK on_lparen database on_rparen on_ignored_nl on_ivar on_op database on_nl end on_nl on_ignored_nl def UNK on_lparen on_op # # `CacheStore` provides methods to mutate and fetch data from a persistent # storage mechanism. #
def UNK on_lparen database on_rparen on_ignored_nl on_ivar on_op database on_nl end on_nl on_ignored_nl def UNK on_lparen on_op on_rparen on_ignored_nl UNK # @param [CacheStoreDatabase] database # @return [nil]
def UNK on_lparen on_op on_rparen on_ignored_nl UNK on_const on_nl end on_nl on_ignored_nl def UNK on_lparen on_op on_rparen on_ignored_nl UNK on_const # Inserts new values or updates existing cached values to persistent storage # mechanism # # @abstract
def UNK on_lparen on_op on_rparen on_ignored_nl UNK on_const on_nl end on_nl on_ignored_nl def UNK on_lparen on_op on_rparen on_ignored_nl UNK on_const # Fetches cached values in persistent storage according to the type of data # stored # # @abstract
def UNK on_lparen on_op on_rparen on_ignored_nl UNK on_const on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl UNK UNK database on_nl end # Deletes data from the cache based on a condition defined in a concrete class # # @abstract
UNK UNK database on_nl end on_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP # @return [CacheStoreDatabase]
