UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK # frozen_string_literal: false
def UNK stream on_comma UNK on_op nil on_comma UNK on_op nil on_comma UNK on_op UNK on_nl UNK on_lparen UNK on_rparen # Create a new entity. Simple entities can be constructed by passing a # name, value to the constructor; this creates a generic, plain entity # reference. For anything more complicated, you have to pass a Source to # the constructor with the entity definition, or use the accessor methods. # +WARNING+: There is no validation of entity state except when the entity # is read from a stream. If you start poking around with the accessors, # you can easily create a non-conformant Entity. # # e = Entity.new( 'amp', '&' )
def on_const on_op UNK UNK on_nl on_lparen on_const on_op UNK on_rparen on_op on_int on_nl end on_nl on_ignored_nl def UNK on_nl # Evaluates whether the given string matches an entity definition, # returning true if so, and false otherwise.
def UNK on_nl UNK on_period UNK UNK UNK on_period UNK on_nl UNK on_op UNK on_lparen on_rparen on_nl UNK nil if # Evaluates to the unnormalized value of this entity; that is, replacing # all entities -- both %ent; and &ent; entities. This differs from # +value()+ in that +value+ only replaces %ent; entities.
on_ignored_nl def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK out on_comma UNK on_op on_op on_int on_nl out on_op #once :unnormalized
def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK out on_comma UNK on_op on_op on_int on_nl out on_op on_tstring_beg # Returns the value of this entity unprocessed -- raw. This is the # normalized value; that is, with all %ent; and &ent; entities intact
def UNK out on_comma UNK on_op on_op on_int on_nl out on_op on_tstring_beg on_tstring_content on_tstring_end on_nl out on_op on_tstring_beg on_tstring_content on_tstring_end # Write out a fully formed, correct entity definition (assuming the Entity # object itself is valid.) # # out:: # An object implementing <TT>&lt;&lt;</TT> to which the entity will be # output # indent:: # *DEPRECATED* and ignored
def UNK on_nl rv on_op on_tstring_beg on_tstring_end on_nl UNK rv on_nl rv on_nl end on_nl on_ignored_nl on_const on_op UNK on_embexpr_beg # Returns this entity as a string. See write().
def UNK on_nl if on_ivar on_nl UNK on_op on_ivar on_period UNK on_lparen on_const on_rparen on_nl rv on_op on_ivar on_period UNK # Returns the value of this entity. At the moment, only internal entities # are processed. If the value contains internal references (IE, # %blah;), those are replaced with their values. IE, if the doctype # contains: # <!ENTITY % foo "bar"> # <!ENTITY yada "nanoo %foo; nanoo> # then: # doctype.entity('yada').value #-> "nanoo bar nanoo"
UNK on_const on_nl on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_op # This is a set of entity constants -- the ones defined in the XML # specification. These are +gt+, +lt+, +amp+, +quot+ and +apos+. # CAUTION: these entities does not have parent and document
on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_op on_const on_period UNK # +>+
on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_op on_const on_period UNK # +<+
on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_op on_const on_period UNK # +&+
on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_const on_op on_const on_period UNK # +"+
on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl end on_nl EMP # +'+
