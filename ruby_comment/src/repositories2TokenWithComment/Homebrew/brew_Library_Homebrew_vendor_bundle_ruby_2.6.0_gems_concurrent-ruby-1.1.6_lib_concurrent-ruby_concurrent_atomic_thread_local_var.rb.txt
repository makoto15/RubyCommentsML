on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_const UNK UNK on_ignored_nl UNK on_const UNK UNK on_nl on_const on_nl ###################################################################
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_const UNK UNK on_ignored_nl UNK on_const UNK UNK on_nl on_const on_nl UNK # @!macro thread_local_var_method_initialize # # Creates a thread local variable. # # @param [Object] default the default value when otherwise unset # @param [Proc] default_block Optional block that gets called to obtain the # default value for each thread
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_const UNK UNK on_ignored_nl UNK on_const UNK UNK on_nl on_const on_nl UNK on_ignored_nl # @!macro thread_local_var_method_get # # Returns the value in the current thread's copy of this thread-local variable. # # @return [Object] the current value
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_const UNK UNK on_ignored_nl UNK on_const UNK UNK on_nl on_const on_nl UNK on_ignored_nl on_const # @!macro thread_local_var_method_set # # Sets the current thread's copy of this thread-local variable to the specified value. # # @param [Object] value the value to set # @return [Object] the new value
on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_ignored_nl on_const UNK UNK on_ignored_nl UNK on_const UNK UNK on_nl on_const on_nl UNK on_ignored_nl on_const on_nl # @!macro thread_local_var_method_bind # # Bind the given value to thread local storage during # execution of the given block. # # @param [Object] value the value to bind # @yield the operation to be performed with the bound variable # @return [Object] the value
on_ignored_nl on_ignored_nl on_ignored_nl on_const UNK UNK on_ignored_nl UNK on_const UNK UNK on_nl on_const on_nl UNK on_ignored_nl on_const on_nl UNK on_nl ###################################################################
on_ignored_nl on_ignored_nl on_const UNK UNK on_ignored_nl UNK on_const UNK UNK on_nl on_const on_nl UNK on_ignored_nl on_const on_nl UNK on_nl UNK # @!macro thread_local_var_public_api # # @!method initialize(default = nil, &default_block) # @!macro thread_local_var_method_initialize # # @!method value # @!macro thread_local_var_method_get # # @!method value=(value) # @!macro thread_local_var_method_set # # @!method bind(value, &block) # @!macro thread_local_var_method_bind
on_ignored_nl on_const UNK UNK on_ignored_nl UNK on_const UNK UNK on_nl on_const on_nl UNK on_ignored_nl on_const on_nl UNK on_nl UNK UNK ###################################################################
on_const UNK UNK on_ignored_nl UNK on_const UNK UNK on_nl on_const on_nl UNK on_ignored_nl on_const on_nl UNK on_nl UNK UNK on_const # @!visibility private # @!macro internal_implementation_note
UNK on_const UNK on_const on_nl UNK on_nl UNK on_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP # @!macro thread_local_var # # A `ThreadLocalVar` is a variable where the value is different for each thread. # Each variable may have a default value, but when you modify the variable only # the current thread will ever see that change. # # @!macro thread_safe_variable_comparison # # @example # v = ThreadLocalVar.new(14) # v.value #=> 14 # v.value = 2 # v.value #=> 2 # # @example # v = ThreadLocalVar.new(14) # # t1 = Thread.new do # v.value #=> 14 # v.value = 1 # v.value #=> 1 # end # # t2 = Thread.new do # v.value #=> 14 # v.value = 2 # v.value #=> 2 # end # # v.value #=> 14 # # @see https://docs.oracle.com/javase/7/docs/api/java/lang/ThreadLocal.html Java ThreadLocal # # @!macro thread_local_var_public_api
