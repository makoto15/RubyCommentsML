class on_const on_op on_const on_nl end on_nl on_ignored_nl class on_const on_op on_const on_nl end on_nl on_ignored_nl class on_const on_op on_const # AmbiguousTime is raised to indicates that a specified time in a local # timezone has more than one possible equivalent UTC time. This happens when # transitioning from daylight savings time to standard time where the clocks # are rolled back. # # AmbiguousTime is raised by period_for_local and local_to_utc when using an # ambiguous time and not specifying any means to resolve the ambiguity.
class on_const on_op on_const on_nl end on_nl on_ignored_nl class on_const on_op on_const on_nl end on_nl on_ignored_nl class on_const on_op on_const # PeriodNotFound is raised to indicate that no TimezonePeriod matching a given # time could be found.
class on_const on_op on_const on_nl end on_nl on_ignored_nl class on_const on_op on_const on_nl end on_nl on_ignored_nl class on_const on_nl UNK # Raised by Timezone#get if the identifier given is not valid.
class on_const on_op on_const on_nl end on_nl on_ignored_nl class on_const on_nl UNK on_const on_nl on_ignored_nl on_cvar on_op nil on_nl on_ignored_nl # Raised if an attempt is made to use a timezone created with # Timezone.new(nil).
class on_const on_nl UNK on_const on_nl on_ignored_nl on_cvar on_op nil on_nl on_ignored_nl on_cvar on_op nil on_nl on_ignored_nl def self on_period # Timezone is the base class of all timezones. It provides a factory method, # 'get', to access timezones by identifier. Once a specific Timezone has been # retrieved, DateTimes, Times and timestamps can be converted between the UTC # and the local time for the zone. For example: # # tz = TZInfo::Timezone.get('America/New_York') # puts tz.utc_to_local(DateTime.new(2005,8,29,15,35,0)).to_s # puts tz.local_to_utc(Time.utc(2005,8,29,11,35,0)).to_s # puts tz.utc_to_local(1125315300).to_s # # Each time conversion method returns an object of the same type it was # passed. # # The Timezone class is thread-safe. It is safe to use class and instance # methods of Timezone in concurrently executing threads. Instances of Timezone # can be shared across thread boundaries.
on_cvar on_op nil on_nl on_ignored_nl on_cvar on_op nil on_nl on_ignored_nl def self on_period UNK on_lparen UNK on_rparen on_ignored_nl on_cvar on_op # Cache of loaded zones by identifier to avoid using require if a zone # has already been loaded. # # @!visibility private
on_cvar on_op nil on_nl on_ignored_nl def self on_period UNK on_lparen UNK on_rparen on_ignored_nl on_cvar on_op UNK on_period UNK on_op nil # Default value of the dst parameter of the local_to_utc and # period_for_local methods. # # @!visibility private
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl on_cvar on_op UNK on_period UNK on_op nil on_op on_op on_op UNK on_nl # Sets the default value of the optional dst parameter of the # local_to_utc and period_for_local methods. Can be set to nil, true or # false. # # The value of default_dst defaults to nil if unset.
def self on_period UNK on_nl on_cvar on_nl end on_nl on_ignored_nl def self on_period get on_lparen identifier on_rparen on_ignored_nl instance on_op # Gets the default value of the optional dst parameter of the # local_to_utc and period_for_local methods. Can be set to nil, true or # false.
def self on_period get on_lparen identifier on_rparen on_ignored_nl instance on_op on_cvar on_lbracket identifier on_rbracket on_nl on_ignored_nl UNK instance on_nl UNK # Returns a timezone by its identifier (e.g. "Europe/London", # "America/Chicago" or "UTC"). # # Raises InvalidTimezoneIdentifier if the timezone couldn't be found.
UNK on_op UNK on_period UNK on_lparen identifier on_rparen on_nl instance on_op UNK on_period UNK on_nl on_cvar on_lbracket instance on_period identifier # Thread-safety: It is possible that multiple equivalent Timezone # instances could be created here in concurrently executing threads. # The consequences of this are that the data may be loaded more than # once (depending on the data source) and memoized calculations could # be discarded. The performance benefit of ensuring that only a single # instance is created is unlikely to be worth the overhead of only # allowing one Timezone to be loaded at a time.
def self on_period UNK on_lparen identifier on_rparen on_ignored_nl on_const on_period UNK on_lparen identifier on_rparen on_nl end on_nl on_ignored_nl def self # Returns a proxy for the Timezone with the given identifier. The proxy # will cause the real timezone to be loaded when an attempt is made to # find a period or convert a time. get_proxy will not validate the # identifier. If an invalid identifier is specified, no exception will be # raised until the proxy is used.
def self on_period UNK on_lparen identifier on_op nil on_rparen on_ignored_nl if identifier on_nl get on_lparen identifier on_rparen on_nl else on_ignored_nl # If identifier is nil calls super(), otherwise calls get. An identfier # should always be passed in when called externally.
def self on_period UNK on_nl UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl def self on_period UNK on_nl UNK on_period # Returns an array containing all the available Timezones. # # Returns TimezoneProxy objects to avoid the overhead of loading Timezone # definitions until a conversion is actually required.
def self on_period UNK on_nl UNK on_period UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_nl UNK on_lparen UNK # Returns an array containing the identifiers of all the available # Timezones.
def self on_period UNK on_nl UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl def self on_period UNK on_nl UNK on_period # Returns an array containing all the available Timezones that are based # on data (are not links to other Timezones). # # Returns TimezoneProxy objects to avoid the overhead of loading Timezone # definitions until a conversion is actually required.
def self on_period UNK on_nl UNK on_period UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_nl UNK on_lparen UNK # Returns an array containing the identifiers of all the available # Timezones that are based on data (are not links to other Timezones)..
def self on_period UNK on_nl UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl def self on_period UNK on_nl UNK on_period # Returns an array containing all the available Timezones that are links # to other Timezones. # # Returns TimezoneProxy objects to avoid the overhead of loading Timezone # definitions until a conversion is actually required.
def self on_period UNK on_nl UNK on_period UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_nl on_const on_period UNK # Returns an array containing the identifiers of all the available # Timezones that are links to other Timezones.
def self on_period UNK on_nl on_const on_period UNK on_period UNK on_lparen on_lbracket on_rbracket on_rparen UNK on_op zones on_comma UNK on_op # Returns all the Timezones defined for all Countries. This is not the # complete set of Timezones as some are not country specific (e.g. # 'Etc/GMT'). # # Returns TimezoneProxy objects to avoid the overhead of loading Timezone # definitions until a conversion is actually required.
def self on_period UNK on_nl on_const on_period UNK on_period UNK on_lparen on_lbracket on_rbracket on_rparen UNK on_op zones on_comma UNK on_op # Returns all the zone identifiers defined for all Countries. This is not the # complete set of zone identifiers as some are not country specific (e.g. # 'Etc/GMT'). You can obtain a Timezone instance for a given identifier # with the get method.
def self on_period UNK on_nl on_const on_period get on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period zones on_nl end on_nl on_ignored_nl def # Returns all US Timezone instances. A shortcut for # TZInfo::Country.get('US').zones. # # Returns TimezoneProxy objects to avoid the overhead of loading Timezone # definitions until a conversion is actually required.
def self on_period UNK on_nl on_const on_period get on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period UNK on_nl end on_nl on_ignored_nl def # Returns all US zone identifiers. A shortcut for # TZInfo::Country.get('US').zone_identifiers.
def identifier on_nl raise_unknown_timezone on_nl end on_nl on_ignored_nl def UNK on_nl identifier on_nl end on_nl on_ignored_nl def UNK on_nl UNK # The identifier of the timezone, e.g. "Europe/Paris".
def UNK on_nl identifier on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_tstring_beg # An alias for identifier.
identifier on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_tstring_beg on_tstring_content on_embexpr_beg self # Don't use alias, as identifier gets overridden.
def UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_tstring_beg on_tstring_content on_embexpr_beg self on_period class on_embexpr_end on_tstring_content on_embexpr_beg # Returns a friendlier version of the identifier.
def UNK on_nl on_tstring_beg on_tstring_content on_embexpr_beg self on_period class on_embexpr_end on_tstring_content on_embexpr_beg identifier on_embexpr_end on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl # Returns internal object state as a programmer-readable string.
def UNK on_lparen UNK on_op UNK on_rparen on_ignored_nl parts on_op identifier on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl if # Returns a friendlier version of the identifier. Set skip_first_part to # omit the first part of the identifier (typically a region name) where # there is more than one part. # # For example: # # Timezone.get('Europe/Paris').friendly_identifier(false) #=> "Europe - Paris" # Timezone.get('Europe/Paris').friendly_identifier(true) #=> "Paris" # Timezone.get('America/Indiana/Knox').friendly_identifier(false) #=> "America - Knox, Indiana" # Timezone.get('America/Indiana/Knox').friendly_identifier(true) #=> "Knox, Indiana"
identifier on_nl UNK parts on_period UNK on_op on_int on_nl parts on_lbracket on_int on_rbracket on_nl else on_ignored_nl UNK on_op UNK on_op # shouldn't happen
part on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl part on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end # Missing a space if a lower case followed by an upper case and the # name isn't McXxxx.
part on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl part on_nl end on_nl # Missing an apostrophe if two consecutive upper case characters.
def period_for_utc on_lparen utc on_rparen on_ignored_nl raise_unknown_timezone on_nl end on_nl on_ignored_nl def UNK on_lparen local on_rparen on_ignored_nl raise_unknown_timezone on_nl end # Returns the TimezonePeriod for the given UTC time. utc can either be # a DateTime, Time or integer timestamp (Time.to_i). Any timezone # information in utc is ignored (it is treated as a UTC time).
def UNK on_lparen local on_rparen on_ignored_nl raise_unknown_timezone on_nl end on_nl on_ignored_nl def UNK on_lparen utc_to on_comma utc_from on_op nil on_rparen # Returns the set of TimezonePeriod instances that are valid for the given # local time as an array. If you just want a single period, use # period_for_local instead and specify how ambiguities should be resolved. # Returns an empty array if no periods are found for the given time.
def UNK on_lparen utc_to on_comma utc_from on_op nil on_rparen on_ignored_nl raise_unknown_timezone on_nl end on_nl on_ignored_nl def UNK on_nl raise_unknown_timezone on_nl # Returns an Array of TimezoneTransition instances representing the times # where the UTC offset of the timezone changes. # # Transitions are returned up to a given date and time up to a given date # and time, specified in UTC (utc_to). # # A from date and time may also be supplied using the utc_from parameter # (also specified in UTC). If utc_from is not nil, only transitions from # that date and time onwards will be returned. # # Comparisons with utc_to are exclusive. Comparisons with utc_from are # inclusive. If a transition falls precisely on utc_to, it will be excluded. # If a transition falls on utc_from, it will be included. # # Transitions returned are ordered by when they occur, from earliest to # latest. # # utc_to and utc_from can be specified using either DateTime, Time or # integer timestamps (Time.to_i). # # If utc_from is specified and utc_to is not greater than utc_from, then # transitions_up_to raises an ArgumentError exception.
def UNK on_nl raise_unknown_timezone on_nl end on_nl on_ignored_nl def UNK on_lparen local on_comma dst on_op on_const on_period UNK on_rparen on_ignored_nl # Returns the canonical Timezone instance for this Timezone. # # The IANA Time Zone database contains two types of definition: Zones and # Links. Zones are defined by rules that set out when transitions occur. # Links are just references to fully defined Zone, creating an alias for # that Zone. # # Links are commonly used where a time zone has been renamed in a # release of the Time Zone database. For example, the Zone US/Eastern was # renamed as America/New_York. A US/Eastern Link was added in its place, # linking to (and creating an alias for) for America/New_York. # # Links are also used for time zones that are currently identical to a full # Zone, but that are administered seperately. For example, Europe/Vatican is # a Link to (and alias for) Europe/Rome. # # For a full Zone, canonical_zone returns self. # # For a Link, canonical_zone returns a Timezone instance representing the # full Zone that the link targets. # # TZInfo can be used with different data sources (see the documentation for # TZInfo::DataSource). Please note that some DataSource implementations may # not support distinguishing between full Zones and Links and will treat all # time zones as full Zones. In this case, the canonical_zone will always # return self. # # There are two built-in DataSource implementations. RubyDataSource (which # will be used if the tzinfo-data gem is available) supports Link zones. # ZoneinfoDataSource returns Link zones as if they were full Zones. If the # canonical_zone or canonical_identifier methods are required, the # tzinfo-data gem should be installed. # # The TZInfo::DataSource.get method can be used to check which DataSource # implementation is being used.
def UNK on_lparen local on_comma dst on_op on_const on_period UNK on_rparen on_ignored_nl results on_op UNK on_lparen local on_rparen on_nl on_ignored_nl # Returns the TimezonePeriod for the given local time. local can either be # a DateTime, Time or integer timestamp (Time.to_i). Any timezone # information in local is ignored (it is treated as a time in the current # timezone). # # Warning: There are local times that have no equivalent UTC times (e.g. # in the transition from standard time to daylight savings time). There are # also local times that have more than one UTC equivalent (e.g. in the # transition from daylight savings time to standard time). # # In the first case (no equivalent UTC time), a PeriodNotFound exception # will be raised. # # In the second case (more than one equivalent UTC time), an AmbiguousTime # exception will be raised unless the optional dst parameter or block # handles the ambiguity. # # If the ambiguity is due to a transition from daylight savings time to # standard time, the dst parameter can be used to select whether the # daylight savings time or local time is used. For example, # # Timezone.get('America/New_York').period_for_local(DateTime.new(2004,10,31,1,30,0)) # # would raise an AmbiguousTime exception. # # Specifying dst=true would the daylight savings period from April to # October 2004. Specifying dst=false would return the standard period # from October 2004 to April 2005. # # If the dst parameter does not resolve the ambiguity, and a block is # specified, it is called. The block must take a single parameter - an # array of the periods that need to be resolved. The block can select and # return a single period or return nil or an empty array # to cause an AmbiguousTime exception to be raised. # # The default value of the dst parameter can be specified by setting # Timezone.default_dst. If default_dst is not set, or is set to nil, then # an AmbiguousTime exception will be raised in ambiguous situations unless # a block is given to resolve the ambiguity.
on_ignored_nl if on_op dst on_period UNK on_nl UNK on_op results on_period UNK UNK on_op period on_op period on_period UNK on_op # ambiguous result try to resolve
on_ignored_nl if UNK on_nl results on_op UNK results on_nl end on_nl on_ignored_nl if results on_period UNK on_lparen on_const on_rparen on_nl # still ambiguous, try the block
def UNK on_lparen utc on_rparen on_ignored_nl on_const on_period UNK on_lparen utc on_rparen UNK on_op wrapped on_op on_ignored_nl period_for_utc on_lparen wrapped # Converts a time in UTC to the local timezone. utc can either be # a DateTime, Time or timestamp (Time.to_i). The returned time has the same # type as utc. Any timezone information in utc is ignored (it is treated as # a UTC time).
def UNK on_lparen local on_comma dst on_op on_const on_period UNK on_rparen on_ignored_nl on_const on_period UNK on_lparen local on_rparen UNK on_op # Converts a time in the local timezone to UTC. local can either be # a DateTime, Time or timestamp (Time.to_i). The returned time has the same # type as local. Any timezone information in local is ignored (it is treated # as a local time). # # Warning: There are local times that have no equivalent UTC times (e.g. # in the transition from standard time to daylight savings time). There are # also local times that have more than one UTC equivalent (e.g. in the # transition from daylight savings time to standard time). # # In the first case (no equivalent UTC time), a PeriodNotFound exception # will be raised. # # In the second case (more than one equivalent UTC time), an AmbiguousTime # exception will be raised unless the optional dst parameter or block # handles the ambiguity. # # If the ambiguity is due to a transition from daylight savings time to # standard time, the dst parameter can be used to select whether the # daylight savings time or local time is used. For example, # # Timezone.get('America/New_York').local_to_utc(DateTime.new(2004,10,31,1,30,0)) # # would raise an AmbiguousTime exception. # # Specifying dst=true would return 2004-10-31 5:30:00. Specifying dst=false # would return 2004-10-31 6:30:00. # # If the dst parameter does not resolve the ambiguity, and a block is # specified, it is called. The block must take a single parameter - an # array of the periods that need to be resolved. The block can return a # single period to use to convert the time or return nil or an empty array # to cause an AmbiguousTime exception to be raised. # # The default value of the dst parameter can be specified by setting # Timezone.default_dst. If default_dst is not set, or is set to nil, then # an AmbiguousTime exception will be raised in ambiguous situations unless # a block is given to resolve the ambiguity.
def UNK on_lparen utc_to on_comma utc_from on_op nil on_rparen on_ignored_nl utc_to on_op on_const on_period UNK on_lparen utc_to on_rparen on_nl UNK # Returns information about offsets used by the Timezone up to a given # date and time, specified using UTC (utc_to). The information is returned # as an Array of TimezoneOffset instances. # # A from date and time may also be supplied using the utc_from parameter # (also specified in UTC). If utc_from is not nil, only offsets used from # that date and time forward will be returned. # # Comparisons with utc_to are exclusive. Comparisons with utc_from are # inclusive. # # Offsets may be returned in any order. # # utc_to and utc_from can be specified using either DateTime, Time or # integer timestamps (Time.to_i). # # If utc_from is specified and utc_to is not greater than utc_from, then # offsets_up_to raises an ArgumentError exception.
on_ignored_nl if utc_from on_nl period on_op period_for_utc on_lparen utc_from on_rparen on_nl else on_ignored_nl on_ignored_nl period on_op period_for_utc on_lparen utc_to on_period # No transitions in the range, find the period that covers it.
period on_op period_for_utc on_lparen utc_from on_rparen on_nl else on_ignored_nl on_ignored_nl period on_op period_for_utc on_lparen utc_to on_period UNK on_lparen on_op on_int # Use the from date as it is inclusive.
on_ignored_nl period on_op period_for_utc on_lparen utc_to on_period UNK on_lparen on_op on_int on_rparen on_rparen on_nl end on_nl on_ignored_nl on_lbracket period on_period # utc_to is exclusive, so this can't be used with period_for_utc. # However, any time earlier than utc_to can be used.
period on_op period_for_utc on_lparen utc_to on_period UNK on_lparen on_op on_int on_rparen on_rparen on_nl end on_nl on_ignored_nl on_lbracket period on_period UNK # Subtract 1 hour (since this is one of the cached OffsetRationals). # Use add_with_convert so that conversion to DateTime is performed if # required.
def UNK on_nl UNK on_period identifier on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_lparen on_const on_period UNK on_period utc # Returns the canonical identifier for this Timezone. # # This is a shortcut for calling canonical_zone.identifier. Please refer # to the canonical_zone documentation for further information.
def UNK on_nl UNK on_lparen on_const on_period UNK on_period utc on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl period_for_utc on_lparen # Returns the current time in the timezone as a Time.
def UNK on_nl period_for_utc on_lparen on_const on_period UNK on_period utc on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl utc on_op # Returns the TimezonePeriod for the current time.
def UNK on_nl utc on_op on_const on_period UNK on_period utc on_nl period on_op period_for_utc on_lparen utc on_rparen on_nl on_lbracket period # Returns the current Time and TimezonePeriod as an array. The first element # is the time, the second element is the period.
def UNK on_lparen UNK on_comma utc on_op on_const on_period UNK on_period utc on_rparen on_ignored_nl utc on_op on_const on_period UNK on_lparen # Converts a time in UTC to local time and returns it as a string according # to the given format. # # The formatting is identical to Time.strftime and DateTime.strftime, except # %Z and %z are replaced with the timezone abbreviation (for example, EST or # EDT) and offset for the specified Timezone and time. # # The offset can be formatted as follows: # # - %z - hour and minute (e.g. +0500) # - %:z - hour and minute separated with a colon (e.g. +05:00) # - %::z - hour minute and second separated with colons (e.g. +05:00:00) # - %:::z - hour only (e.g. +05) # # Timezone#strftime currently handles the replacement of %z. From TZInfo # version 2.0.0, %z will be passed to Time#strftime and DateTime#strftime # instead. Some of the formatting options may cease to be available # depending on the version of Ruby in use (for example, %:::z is only # supported by Time#strftime from MRI version 2.0.0 onwards).
on_tstring_beg on_embvar on_backref on_tstring_content on_embvar on_backref on_tstring_end on_nl UNK on_backref on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_tstring_beg on_embvar on_backref on_embexpr_beg utc # Escaped literal percent or series of percents. Pass on to strftime.
on_tstring_beg on_embvar on_backref on_tstring_content on_embvar on_backref on_tstring_end on_nl end on_nl end on_nl end on_nl on_ignored_nl local on_period UNK on_lparen UNK # more than 3 colons - not a valid option # Passing the invalid format string through to Time#strftime or # DateTime#strtime would normally result in it being returned in the # result. However, with Ruby 1.8.7 on Windows (as tested with Ruby # 1.8.7-p374 from https://rubyinstaller.org/downloads/archives), # this causes Time#strftime to always return an empty string (e.g. # Time.now.strftime('a %::::z b') returns ''). # # Escape the percent to force it to be evaluated as a literal.
def on_op on_lparen UNK on_rparen on_ignored_nl UNK nil UNK UNK on_period UNK on_lparen on_const on_rparen on_nl identifier on_op UNK on_period # Compares two Timezones based on their identifier. Returns -1 if tz is less # than self, 0 if tz is equal to self and +1 if tz is greater than self. # # Returns nil if tz is not comparable with Timezone instances.
def UNK on_lparen UNK on_rparen on_ignored_nl self on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl identifier on_period UNK on_nl # Returns true if and only if the identifier of tz is equal to the # identifier of this Timezone.
def UNK on_nl identifier on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl identifier on_nl end on_nl # Returns a hash of this Timezone.
def UNK on_lparen UNK on_rparen on_ignored_nl identifier on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen UNK on_rparen on_ignored_nl on_const # Dumps this Timezone for marshalling.
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl on_const on_period get on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl UNK on_nl # Loads a marshalled Timezone.
def self on_period UNK on_nl on_cvar on_op on_const on_op on_const on_period UNK on_nl end on_nl UNK on_nl on_ignored_nl def self # Initializes @@loaded_zones.
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK UNK on_op identifier on_op UNK on_lparen identifier on_rparen UNK # Returns an array of proxies corresponding to the given array of # identifiers.
def self on_period UNK on_nl on_const on_period get on_nl end on_nl on_ignored_nl def raise_unknown_timezone on_nl UNK on_const on_comma on_tstring_beg on_tstring_content # Returns the current DataSource.
def raise_unknown_timezone on_nl UNK on_const on_comma on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl end on_nl end on_nl EMP EMP EMP EMP # Raises an UnknownTimezone exception.
