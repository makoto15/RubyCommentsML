on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl on_const on_op UNK UNK UNK # frozen_string_literal: true
UNK on_const on_op on_const on_nl on_const on_op UNK UNK UNK on_nl on_ignored_nl UNK UNK UNK on_comma UNK on_nl UNK UNK # Checks for stubbed test subjects. # # @see https://robots.thoughtbot.com/don-t-stub-the-system-under-test # @see https://samphippen.com/introducing-rspec-smells-and-where-to-find-them#smell-1-stubject # @see https://github.com/rubocop-hq/rspec-style-guide#dont-stub-subject # # @example # # bad # describe Foo do # subject(:bar) { baz } # # before do # allow(bar).to receive(:qux?).and_return(true) # end # end #
UNK UNK UNK on_comma UNK on_nl UNK UNK on_ignored_nl UNK UNK UNK on_comma UNK on_nl UNK UNK on_const on_op on_const # @!method subject(node) # Find a named or unnamed subject definition # # @example anonymous subject # subject(parse('subject { foo }').ast) do |name| # name # => :subject # end # # @example named subject # subject(parse('subject(:thing) { foo }').ast) do |name| # name # => :thing # end # # @param node [RuboCop::Node] # # @yield [Symbol] subject name
UNK UNK UNK on_comma UNK on_nl UNK UNK on_const on_op on_const UNK UNK UNK UNK UNK on_ignored_nl UNK UNK UNK # @!method message_expectation?(node, method_name) # Match `allow` and `expect(...).to receive` # # @example source that matches # allow(foo).to receive(:bar) # allow(foo).to receive(:bar).with(1) # allow(foo).to receive(:bar).with(1).and_return(2) # expect(foo).to receive(:bar) # expect(foo).to receive(:bar).with(1) # expect(foo).to receive(:bar).with(1).and_return(2) #
UNK UNK on_lparen node on_comma on_op block on_rparen on_ignored_nl UNK on_lparen node on_rparen UNK on_op subject_name on_comma UNK on_op on_ignored_nl # Find subjects within tree and then find (send) nodes for that subject # # @param node [RuboCop::Node] example group # # @yield [RuboCop::Node] message expectations for subject
UNK UNK on_lparen node on_comma subject_name on_comma on_op block on_rparen on_ignored_nl UNK UNK UNK on_lparen node on_rparen on_op UNK on_lparen # Find a subject message expectation # # @param node [RuboCop::Node] # @param subject_name [Symbol] name of subject # # @yield [RuboCop::Node] message expectation
UNK UNK UNK on_lparen node on_rparen on_op UNK on_lparen node on_rparen on_nl on_ignored_nl UNK on_lparen node on_rparen UNK UNK on_lparen # Do not search node if it is an example group with its own subject.
UNK on_lparen node on_rparen UNK UNK on_lparen node on_comma subject_name on_rparen on_nl on_ignored_nl node UNK UNK UNK on_op child on_op # Yield the current node if it is a message expectation.
node UNK UNK UNK on_op child on_op on_ignored_nl UNK on_lparen child on_comma subject_name on_comma on_op block on_rparen on_nl end on_nl # Recurse through node's children looking for a message expectation.
UNK UNK on_lparen node on_rparen on_ignored_nl node UNK UNK UNK UNK UNK on_op child on_op on_ignored_nl UNK on_lparen child on_rparen # Check if node's children contain a subject definition # # @param node [RuboCop::Node] # # @return [Boolean]
UNK UNK on_lparen node on_comma UNK UNK on_comma on_op block on_rparen on_ignored_nl subject_name on_op UNK on_lparen node on_rparen on_op UNK # Find a subject definition # # @param node [RuboCop::Node] # @param parent [RuboCop::Node,nil] # # @yieldparam subject_name [Symbol] name of subject being defined # @yieldparam parent [RuboCop::Node] parent of subject definition
subject_name on_op UNK on_lparen node on_rparen on_op UNK UNK on_nl on_ignored_nl UNK on_lparen subject_name on_comma UNK on_rparen UNK UNK on_nl # An implicit subject is defined by RSpec when no subject is declared
