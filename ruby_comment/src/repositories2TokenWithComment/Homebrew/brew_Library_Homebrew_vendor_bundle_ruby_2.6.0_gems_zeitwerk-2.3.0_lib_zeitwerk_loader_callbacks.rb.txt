UNK UNK on_lparen file on_rparen on_ignored_nl cref on_op UNK on_period UNK on_lparen file on_rparen on_nl UNK on_lbracket UNK on_lparen on_op # Invoked from our decorated Kernel#require when a managed file is autoloaded. # # @private # @param file [String] # @return [void]
UNK UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK UNK on_ignored_nl if cref on_op UNK on_period UNK on_lparen UNK on_rparen # Invoked from our decorated Kernel#require when a managed directory is # autoloaded. # # @private # @param dir [String] # @return [void]
UNK on_period UNK UNK on_ignored_nl if cref on_op UNK on_period UNK on_lparen UNK on_rparen on_nl UNK on_op cref on_lbracket UNK # Module#autoload does not serialize concurrent requires, and we handle # directories ourselves, so the callback needs to account for concurrency. # # Multi-threading would introduce a race condition here in which thread t1 # autovivifies the module, and while autoloads for its children are being # set, thread t2 autoloads the same namespace. # # Without the mutex and subsequent delete call, t2 would reset the module. # That not only would reassign the constant (undesirable per se) but, worse, # the module object created by t2 wouldn't have any of the autoloads for its # children, since t1 would have correctly deleted its lazy_subdirs entry.
UNK on_op UNK on_nl on_ignored_nl UNK on_lparen UNK on_rparen on_nl end on_nl end on_nl end on_nl on_ignored_nl UNK UNK on_lparen # We don't unregister `dir` in the registry because concurrent threads # wouldn't find a loader associated to it in Kernel#require and would # try to require the directory. Instead, we are going to keep track of # these to be able to unregister later if eager loading.
UNK UNK on_lparen UNK on_rparen on_ignored_nl if UNK on_op UNK on_period UNK on_lparen UNK on_lparen UNK on_rparen on_rparen on_nl UNK # Invoked when a class or module is created or reopened, either from the # tracer or from module autovivification. If the namespace has matching # subdirectories, we descend into them now. # # @private # @param namespace [Module] # @return [void]
