UNK on_const on_period UNK on_op on_op UNK UNK on_const on_op on_const UNK on_nl UNK on_const on_nl on_const on_op on_const on_op # Shim for TruffleRuby::AtomicReference
UNK on_const on_nl on_const on_op on_const on_op on_const on_nl end on_nl end on_nl on_ignored_nl UNK on_const on_nl on_ignored_nl UNK on_const # @!visibility private
UNK on_const on_nl on_ignored_nl UNK UNK on_nl UNK UNK compare_and_set UNK old_value on_op get on_comma new_value on_op UNK UNK old_value # Define update methods that use direct paths # # @!visibility private # @!macro internal_implementation_note
UNK UNK on_nl UNK UNK compare_and_set UNK old_value on_op get on_comma new_value on_op UNK UNK old_value UNK UNK on_nl new_value # @!macro atomic_reference_method_update # # Pass the current value to the given block, replacing it # with the block's result. May retry if the value changes # during the block's execution. # # @yield [Object] Calculate a new value for the atomic reference using # given (old) value # @yieldparam [Object] old_value the starting value of the atomic reference # @return [Object] the new value
UNK UNK on_nl old_value on_op get on_nl new_value on_op UNK old_value on_nl on_ignored_nl UNK UNK compare_and_set old_value on_comma new_value on_nl # @!macro atomic_reference_method_try_update # # Pass the current value to the given block, replacing it # with the block's result. Return nil if the update fails. # # @yield [Object] Calculate a new value for the atomic reference using # given (old) value # @yieldparam [Object] old_value the starting value of the atomic reference # @note This method was altered to avoid raising an exception by default. # Instead, this method now returns `nil` in case of failure. For more info, # please see: https://github.com/ruby-concurrency/concurrent-ruby/pull/336 # @return [Object] the new value, or nil if update failed
UNK UNK on_nl old_value on_op get on_nl new_value on_op UNK old_value on_nl UNK compare_and_set UNK old_value on_comma new_value UNK on_nl # @!macro atomic_reference_method_try_update! # # Pass the current value to the given block, replacing it # with the block's result. Raise an exception if the update # fails. # # @yield [Object] Calculate a new value for the atomic reference using # given (old) value # @yieldparam [Object] old_value the starting value of the atomic reference # @note This behavior mimics the behavior of the original # `AtomicReference#try_update` API. The reason this was changed was to # avoid raising exceptions (which are inherently slow) by default. For more # info: https://github.com/ruby-concurrency/concurrent-ruby/pull/336 # @return [Object] the new value # @raise [Concurrent::ConcurrentUpdateError] if the update fails
on_ignored_nl on_ignored_nl class on_const on_op on_const on_nl on_const on_op UNK on_tstring_beg on_tstring_content on_tstring_end UNK on_period UNK on_nl end on_nl on_ignored_nl # @!macro atomic_reference # # An object reference that may be updated atomically. All read and write # operations have java volatile semantic. # # @!macro thread_safe_variable_comparison # # @see http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReference.html # @see http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/package-summary.html # # @!method initialize(value = nil) # @!macro atomic_reference_method_initialize # @param [Object] value The initial value. # # @!method get # @!macro atomic_reference_method_get # Gets the current value. # @return [Object] the current value # # @!method set(new_value) # @!macro atomic_reference_method_set # Sets to the given value. # @param [Object] new_value the new value # @return [Object] the new value # # @!method get_and_set(new_value) # @!macro atomic_reference_method_get_and_set # Atomically sets to the given value and returns the old value. # @param [Object] new_value the new value # @return [Object] the old value # # @!method compare_and_set(old_value, new_value) # @!macro atomic_reference_method_compare_and_set # # Atomically sets the value to the given updated value if # the current value == the expected value. # # @param [Object] old_value the expected value # @param [Object] new_value the new value # # @return [Boolean] `true` if successful. A `false` return indicates # that the actual value was not equal to the expected value. # # @!method update # @!macro atomic_reference_method_update # # @!method try_update # @!macro atomic_reference_method_try_update # # @!method try_update! # @!macro atomic_reference_method_try_update!
class on_const on_op on_const on_nl on_const on_op UNK on_tstring_beg on_tstring_content on_tstring_end UNK on_period UNK on_nl end on_nl on_ignored_nl on_const on_op # @!macro internal_implementation_note
on_const on_op UNK on_tstring_beg on_tstring_content on_tstring_end UNK on_period UNK on_nl end on_nl on_ignored_nl on_const on_op UNK on_ignored_nl UNK on_const on_period # frozen pre-allocated backtrace to speed ConcurrentUpdateError
on_const on_op UNK on_ignored_nl UNK on_const on_period UNK on_op on_const on_period UNK on_nl class on_const on_nl include on_const on_nl include # @!macro internal_implementation_note
class on_const on_nl include on_const on_nl include on_const on_nl alias_method on_symbeg UNK on_comma on_symbeg compare_and_set on_nl end on_nl on_const on_nl # @!visibility private # @!macro internal_implementation_note
class on_const on_nl include on_const on_nl end on_nl on_const on_nl UNK on_const on_period UNK on_nl class on_const on_op on_const on_op # @!visibility private # @!macro internal_implementation_note
class on_const on_op on_const on_op on_const on_nl alias_method on_symbeg UNK on_comma on_symbeg compare_and_set on_nl include on_const on_nl include on_const on_nl # @note Extends `Rubinius::AtomicReference` version adding aliases # and numeric logic. # # @!visibility private # @!macro internal_implementation_note
class on_const on_op on_const on_nl on_ignored_nl UNK UNK on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_comma UNK UNK UNK on_op on_op UNK # @!macro atomic_reference
UNK UNK on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_comma UNK UNK UNK on_op on_op UNK UNK on_comma get on_nl end on_nl # @return [String] Short string representation.
