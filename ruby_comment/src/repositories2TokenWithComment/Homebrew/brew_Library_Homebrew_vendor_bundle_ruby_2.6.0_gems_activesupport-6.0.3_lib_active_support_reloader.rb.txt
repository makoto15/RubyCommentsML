on_ignored_nl UNK UNK UNK UNK on_nl UNK UNK UNK UNK on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_op on_const on_nl # frozen_string_literal: true
UNK on_const on_op on_const on_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl def self on_period UNK on_lparen #-- # This class defines several callbacks: # # to_prepare -- Run once at application startup, and also from # +to_run+. # # to_run -- Run before a work run that is reloading. If # +reload_classes_only_on_change+ is true (the default), the class # unload will have already occurred. # # to_complete -- Run after a work run that has reloaded. If # +reload_classes_only_on_change+ is false, the class unload will # have occurred after the work run, but before this callback. # # before_class_unload -- Run immediately before the classes are # unloaded. # # after_class_unload -- Run immediately after the classes are # unloaded. #
def self on_period UNK on_lparen on_op args on_comma on_op block on_rparen on_ignored_nl UNK on_lparen on_symbeg UNK on_comma on_op args on_comma # Registers a callback that will run once at application startup and every time the code is reloaded.
def self on_period UNK on_lparen on_op args on_comma on_op block on_rparen on_ignored_nl UNK on_lparen on_symbeg UNK on_comma on_op args on_comma # Registers a callback that will run immediately before the classes are unloaded.
def self on_period UNK on_lparen on_op args on_comma on_op block on_rparen on_ignored_nl UNK on_lparen on_symbeg UNK on_comma on_symbeg UNK on_comma # Registers a callback that will run immediately after the classes are unloaded.
def self on_period UNK on_nl UNK on_period UNK UNK on_ignored_nl UNK on_period UNK UNK on_op UNK on_op on_ignored_nl UNK on_period # Initiate a manual reload
UNK UNK on_nl UNK on_nl UNK on_ignored_nl on_const on_nl end on_nl end on_nl on_ignored_nl def self on_period UNK on_nl UNK # :nodoc:
def self on_period UNK on_nl UNK on_period UNK UNK on_ignored_nl UNK on_nl end on_nl end on_nl on_ignored_nl UNK on_symbeg UNK # Run the supplied block as a work unit, reloading code as needed
on_ivar on_op UNK on_period UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_ivar on_op UNK on_nl end on_nl on_ignored_nl # :nodoc:
on_ivar on_op UNK on_nl end on_nl on_ignored_nl def self on_period UNK UNK on_period UNK on_lparen on_symbeg UNK on_rparen on_nl end # :nodoc:
UNK on_period UNK on_lparen on_symbeg UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_nl on_ivar on_op UNK on_nl # :nodoc:
def UNK on_nl UNK on_ivar on_nl on_const on_op on_const on_period UNK on_period UNK on_nl on_ivar on_op UNK on_nl end on_nl # Acquire the ActiveSupport::Dependencies::Interlock unload lock, # ensuring it will be released automatically
def UNK on_nl UNK on_ivar on_nl on_ivar on_op UNK on_nl on_const on_op on_const on_period UNK on_period UNK on_nl end on_nl # Release the unload lock if it has been previously obtained
UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_lparen on_op block on_rparen UNK on_nl UNK on_lparen on_symbeg UNK on_comma # :nodoc:
UNK on_nl UNK on_lparen on_symbeg UNK on_comma on_op block on_rparen on_nl end on_nl on_ignored_nl def UNK UNK on_nl self on_period # :nodoc:
UNK on_nl self on_period UNK on_period UNK on_nl UNK on_ignored_nl UNK on_nl end on_nl end on_nl end on_nl EMP EMP # :nodoc:
