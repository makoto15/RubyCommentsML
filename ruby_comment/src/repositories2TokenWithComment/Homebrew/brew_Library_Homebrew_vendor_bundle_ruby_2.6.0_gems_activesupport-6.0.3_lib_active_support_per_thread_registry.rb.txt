on_ignored_nl UNK UNK UNK UNK on_nl on_ignored_nl UNK UNK on_nl UNK UNK on_nl UNK UNK on_period UNK UNK UNK UNK # frozen_string_literal: true
UNK UNK on_nl UNK UNK on_period UNK UNK UNK UNK on_ignored_nl UNK on_period UNK UNK UNK UNK on_comma UNK on_period # NOTE: This approach has been deprecated for end-user code in favor of {thread_mattr_accessor}[rdoc-ref:Module#thread_mattr_accessor] and friends. # Please use that approach instead. # # This module is used to encapsulate access to thread local variables. # # Instead of polluting the thread locals namespace: # # Thread.current[:connection_handler] # # you define a class that extends this module: # # module ActiveRecord # class RuntimeRegistry # extend ActiveSupport::PerThreadRegistry # # attr_accessor :connection_handler # end # end # # and invoke the declared instance accessors as class methods. So # # ActiveRecord::RuntimeRegistry.connection_handler = connection_handler # # sets a connection handler local to the current thread, and # # ActiveRecord::RuntimeRegistry.connection_handler # # returns a connection handler local to the current thread. # # This feature is accomplished by instantiating the class and storing the # instance as a thread local keyed by the class name. In the example above # a key "ActiveRecord::RuntimeRegistry" is stored in <tt>Thread.current</tt>. # The class methods proxy to said thread local instance. # # If the class has an initializer, it must accept no arguments.
UNK on_period UNK UNK on_comma UNK UNK UNK on_nl on_ignored_nl UNK UNK UNK on_comma UNK UNK on_comma UNK UNK UNK # Caches the method definition as a singleton method of the receiver. # # By letting #delegate handle it, we avoid an enclosure that'll capture args.
