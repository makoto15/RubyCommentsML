on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl on_ignored_nl UNK # frozen_string_literal: true
UNK on_const on_nl UNK on_const on_nl on_ignored_nl UNK on_symbeg keg_only_deps on_comma on_symbeg deps on_comma on_symbeg UNK on_nl UNK on_symbeg UNK # ### Why `superenv`? # # 1. Only specify the environment we need (NO LDFLAGS for cmake) # 2. Only apply compiler specific options when we are calling that compiler # 3. Force all incpaths and libpaths into the cc instantiation (less bugs) # 4. Cater toolchain usage to specific Xcode versions # 5. Remove flags that we don't want or that will break builds # 6. Simpler code # 7. Simpler formula that *just work* # 8. Build-system agnostic configuration of the tool-chain
UNK on_symbeg keg_only_deps on_comma on_symbeg deps on_comma on_symbeg UNK on_nl UNK on_symbeg UNK on_nl on_ignored_nl def self on_period UNK on_lparen # @private
def self on_period UNK UNK end on_nl on_ignored_nl def UNK on_nl UNK on_nl UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl # @private
UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_op UNK on_rparen on_ignored_nl UNK on_nl # Configure scripts generated by autoconf 2.61 or later export as_nl, which # we use as a heuristic for running under configure
def UNK on_lparen UNK on_op UNK on_rparen on_ignored_nl UNK on_nl UNK on_lparen UNK on_rparen on_nl on_ignored_nl self on_lbracket on_tstring_beg on_tstring_content # @private
end on_nl UNK UNK UNK on_nl on_ignored_nl UNK on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl self on_lbracket on_tstring_beg on_tstring_content # The HOMEBREW_CCCFG ENV variable is used by the ENV/cc tool to control # compiler flag stripping. It consists of a string of characters which act # as flags. Some of these flags are mutually exclusive. # # O - Enables argument refurbishing. Only active under the # make/bsdmake wrappers currently. # x - Enable C++11 mode. # g - Enable "-stdlib=libc++" for clang. # h - Enable "-stdlib=libstdc++" for clang. # K - Don't strip -arch <arch>, -m32, or -m64 # w - Pass -no_weak_imports to the linker # # These flags will also be present: # s - apply fix for sed's Unicode support # a - apply fix for apr-1-config path
path on_period append on_lparen deps on_period map on_lparen on_op on_symbeg UNK on_rparen on_rparen on_nl path on_period append on_lparen UNK on_rparen # Formula dependencies can override standard tools.
UNK on_nl end on_nl on_ignored_nl path on_period existing on_nl end on_nl on_ignored_nl def UNK on_nl on_lbracket on_rbracket on_nl end on_nl # Don't fail and don't add these formulae to the path if they don't exist.
def UNK on_nl UNK on_op UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl if UNK on_nl UNK on_ignored_nl UNK on_nl UNK # Removes the MAKEFLAGS environment variable, causing make to use a single job. # This is useful for makefiles with race conditions. # When passed a block, MAKEFLAGS is removed only for the duration of the block and is restored after its completion.
def UNK on_nl append_to_cccfg on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl UNK on_tstring_content UNK on_tstring_content UNK on_tstring_content UNK on_tstring_content UNK # @private
