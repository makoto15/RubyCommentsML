UNK UNK UNK UNK on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_op on_const on_nl on_const on_op UNK UNK UNK on_nl # frozen_string_literal: false
UNK UNK UNK UNK on_comma UNK on_op UNK on_comma UNK on_op UNK UNK on_ignored_nl UNK UNK UNK on_comma UNK on_comma # Constructor. CData is data between <![CDATA[ ... ]]> # # _Examples_ # CData.new( source ) # CData.new( "Here is some CDATA" ) # CData.new( "Some unprocessed data", respect_whitespace_TF, parent_element )
UNK UNK on_nl on_const UNK UNK UNK on_nl end on_nl on_ignored_nl UNK UNK on_nl UNK on_nl end on_nl on_ignored_nl UNK # Make a copy of this object # # _Examples_ # c = CData.new( "Some text" ) # d = c.clone # d.to_s # -> "Some text"
UNK UNK on_nl UNK on_nl end on_nl on_ignored_nl UNK UNK on_nl UNK on_nl end on_nl on_ignored_nl UNK UNK UNK UNK # Returns the content of this CData object # # _Examples_ # c = CData.new( "Some text" ) # c.to_s # -> "Some text"
UNK UNK UNK UNK on_op UNK on_comma UNK on_op on_op UNK on_comma UNK on_op UNK on_comma UNK on_op UNK UNK # == DEPRECATED # See the rexml/formatters package # # Generates XML output of this object # # output:: # Where to write the string. Defaults to $stdout # indent:: # The amount to indent this node by # transitive:: # Ignored # ie_hack:: # Ignored # # _Examples_ # c = CData.new( " Some text " ) # c.write( $stdout ) #-> <![CDATA[ Some text ]]>
