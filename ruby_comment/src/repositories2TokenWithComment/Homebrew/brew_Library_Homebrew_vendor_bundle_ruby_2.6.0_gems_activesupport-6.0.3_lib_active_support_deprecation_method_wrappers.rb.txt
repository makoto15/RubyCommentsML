on_ignored_nl UNK UNK UNK UNK on_nl UNK UNK UNK UNK on_nl on_ignored_nl UNK UNK on_nl UNK UNK on_nl UNK UNK # frozen_string_literal: true
UNK UNK on_lparen target_module on_comma on_op UNK on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_nl UNK on_op UNK on_period UNK # Declare that a method has been deprecated. # # class Fred # def aaa; end # def bbb; end # def ccc; end # def ddd; end # def eee; end # end # # Using the default deprecator: # ActiveSupport::Deprecation.deprecate_methods(Fred, :aaa, bbb: :zzz, ccc: 'use Bar#ccc instead') # # => Fred # # Fred.new.aaa # # DEPRECATION WARNING: aaa is deprecated and will be removed from Rails 5.1. (called from irb_binding at (irb):10) # # => nil # # Fred.new.bbb # # DEPRECATION WARNING: bbb is deprecated and will be removed from Rails 5.1 (use zzz instead). (called from irb_binding at (irb):11) # # => nil # # Fred.new.ccc # # DEPRECATION WARNING: ccc is deprecated and will be removed from Rails 5.1 (use Bar#ccc instead). (called from irb_binding at (irb):12) # # => nil # # Passing in a custom deprecator: # custom_deprecator = ActiveSupport::Deprecation.new('next-release', 'MyGem') # ActiveSupport::Deprecation.deprecate_methods(Fred, ddd: :zzz, deprecator: custom_deprecator) # # => [:ddd] # # Fred.new.ddd # DEPRECATION WARNING: ddd is deprecated and will be removed from MyGem next-release (use zzz instead). (called from irb_binding at (irb):15) # # => nil # # Using a custom deprecator directly: # custom_deprecator = ActiveSupport::Deprecation.new('next-release', 'MyGem') # custom_deprecator.deprecate_methods(Fred, eee: :zzz) # # => [:eee] # # Fred.new.eee # DEPRECATION WARNING: eee is deprecated and will be removed from MyGem next-release (use zzz instead). (called from irb_binding at (irb):18) # # => nil
