on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end # frozen_string_literal: true
def fetch UNK end on_nl on_ignored_nl def UNK on_nl on_ivar on_op true on_nl end on_nl on_ignored_nl def puts on_lparen on_op # Download and cache the resource as {#cached_location}.
def UNK on_nl on_ivar on_op true on_nl end on_nl on_ignored_nl def puts on_lparen on_op args on_rparen on_ignored_nl super on_lparen on_op # Suppress output
def UNK on_nl on_const on_period UNK on_lparen cached_location on_comma on_ignored_nl on_label true on_comma on_ignored_nl on_label on_ivar on_comma on_label on_ivar on_rparen # Unpack {#cached_location} into the current working directory, and possibly # chdir into the newly-unpacked directory. # Unlike {Resource#stage}, this does not take a block.
def source_modified_time on_nl on_const on_period UNK on_period UNK on_lparen on_symbeg UNK on_rparen on_period UNK on_lparen on_op on_symbeg UNK on_rparen on_period # @!attribute [r] source_modified_time # Returns the most recent modified time for all files in the current working directory after stage.
def UNK on_nl UNK on_lparen cached_location on_rparen on_nl end on_nl on_ignored_nl def basename on_nl cached_location on_period basename on_nl end on_nl # Remove {#cached_location} and any other files associated with the resource # from the cache.
def last_commit on_nl source_modified_time on_period UNK on_period to_s on_nl end on_nl on_ignored_nl private on_nl on_ignored_nl def cache_tag on_nl raise on_const # Return last commit's unique identifier for the repository. # Return most recent modified timestamp unless overridden.
on_const on_period new on_lparen UNK on_rparen on_period UNK do on_op path on_op on_ignored_nl UNK on_op path on_period UNK on_lbracket on_regexp_beg # We need a Pathname because we've monkeypatched extname to support double # extensions (e.g. tar.gz). # Given a URL like https://example.com/download.php?file=foo-1.0.tar.gz # the basename we want is "foo-1.0.tar.gz", not "download.php".
def UNK on_nl args on_op on_lbracket on_rbracket on_nl on_ignored_nl args on_op on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma meta on_period fetch on_lparen # Curl options to be always passed to curl, # with raw head calls (`curl --head`) or with actual `fetch`.
class on_const on_op on_const on_nl def UNK on_nl return on_ivar if UNK on_lparen on_ivar on_rparen on_nl on_ignored_nl UNK on_op UNK # Detect and download from Apache Mirror.
class on_const on_op on_const on_nl private on_nl on_ignored_nl def UNK on_lparen on_label on_comma on_label on_rparen on_ignored_nl args on_op if meta # Download via an HTTP POST. # Query parameters on the URL are converted into POST parameters.
class on_const on_op on_const on_nl def UNK on_nl on_const on_op on_const on_period new on_lparen cached_location on_rparen on_ignored_nl on_period UNK on_lparen # Use this strategy to download but not unzip a file. # Useful for installing jars.
class on_const on_op on_const on_nl def initialize on_lparen path on_rparen on_ignored_nl on_ivar on_op path on_nl end on_nl end on_nl on_ignored_nl # This strategy extracts local binary packages.
args on_op on_lbracket on_rbracket on_nl args on_op on_tstring_beg on_tstring_content on_tstring_end unless on_const on_period args on_period UNK on_nl on_ignored_nl if revision # Use "svn update" when the repository already exists locally. # This saves on bandwidth and will have a similar effect to verifying the # cache as it will make any changes to get the right revision.
UNK on_op on_ivar on_lbracket on_symbeg UNK on_rbracket on_nl UNK cached_location on_comma on_ivar on_comma UNK on_comma true on_nl on_ignored_nl UNK do # nil is OK for main_revision, as fetch_repo will then get latest
def UNK on_nl UNK on_op system_command! on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_label on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content # When checking out Git repositories with recursive submodules, some Git # versions create `.git` files with absolute instead of relative `gitdir:` # pointers. This works for the cached location, but breaks various Git # operations once the affected Git resource is staged, i.e. recursively # copied to a new location. (This bug was introduced in Git 2.7.0 and fixed # in 2.8.3. Clones created with affected version remain broken.) # See https://github.com/Homebrew/homebrew-core/pull/1520 for an example.
UNK on_op UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl UNK unless UNK on_period UNK on_nl on_ignored_nl git_dir on_op UNK on_period UNK # Only check and fix if `.git` is a regular file, not a directory.
UNK unless git_dir on_period start_with? on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ignored_nl UNK on_op on_const on_period new on_lparen git_dir on_rparen # Only attempt to fix absolute paths.
UNK on_op on_const on_period new on_lparen git_dir on_rparen on_period UNK on_lparen UNK on_rparen on_nl UNK on_period UNK on_lparen on_tstring_beg on_tstring_content # Make the `gitdir:` reference relative to the working directory.
UNK on_op on_const on_period UNK on_lparen on_int on_rparen on_nl cached_location on_period UNK do on_op UNK on_op on_ignored_nl on_const on_period UNK # Filter CVS's files because the timestamp for each of them is the moment # of clone.
system_command! on_tstring_beg on_tstring_content on_tstring_end on_comma on_label on_lbracket on_op UNK on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_ivar on_comma on_tstring_beg on_tstring_content on_tstring_end on_rbracket # Login is only needed (and allowed) with pserver; skip for anoncvs.
system_command! on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_label on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_ivar on_comma cached_location on_rbracket # "lightweight" means history-less
