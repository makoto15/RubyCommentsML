on_ignored_nl UNK UNK UNK UNK on_nl UNK UNK UNK UNK on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK UNK # frozen_string_literal: true
UNK on_const on_nl UNK UNK on_lparen UNK UNK UNK on_op UNK UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl on_ivar on_op # KeyGenerator is a simple wrapper around OpenSSL's implementation of PBKDF2. # It can be used to derive a number of keys for various purposes from a given secret. # This lets Rails applications have a single secure secret, but avoid reusing that # key in multiple incompatible contexts.
on_ivar on_op UNK UNK UNK UNK UNK on_op UNK on_op UNK on_nl end on_nl on_ignored_nl UNK UNK on_lparen UNK UNK # The default iterations are higher than required for our key derivation uses # on the off chance someone uses this for password storage
UNK UNK on_lparen UNK UNK UNK on_op UNK on_rparen on_ignored_nl on_const on_op on_const UNK UNK on_lparen on_ivar UNK UNK UNK # Returns a derived key suitable for use. The default key_size is chosen # to be compatible with the default settings of ActiveSupport::MessageVerifier. # i.e. OpenSSL::Digest::SHA1#block_length
UNK on_const on_nl UNK UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl on_ivar on_op on_const on_op on_const UNK UNK # CachingKeyGenerator is a wrapper around KeyGenerator which allows users to avoid # re-executing the key generation process when it's called using the same salt and # key_size.
UNK UNK on_lparen on_op UNK on_rparen on_ignored_nl on_ivar UNK UNK UNK UNK UNK on_op on_ivar UNK UNK on_lparen on_op UNK # Returns a derived key suitable for use.
