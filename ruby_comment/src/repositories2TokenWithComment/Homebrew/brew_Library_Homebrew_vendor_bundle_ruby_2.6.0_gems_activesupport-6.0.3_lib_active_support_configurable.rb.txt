on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const # frozen_string_literal: true
UNK on_const on_nl UNK on_const on_op on_const on_nl on_ignored_nl UNK on_const on_op on_const on_op on_const on_nl def UNK on_nl UNK # Configurable provides a <tt>config</tt> method to store and retrieve # configuration options as an <tt>OrderedHash</tt>.
def UNK on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK UNK on_op UNK on_op UNK on_lparen UNK on_rparen UNK # Compiles reader methods so we don't have to go through method_missing.
on_const on_period UNK on_lparen on_const on_rparen on_period UNK on_nl end on_nl end on_nl on_ignored_nl def UNK on_nl UNK config on_nl # create a new "anonymous" class that will host the compiled reader methods
def UNK on_lparen on_op UNK on_comma UNK UNK on_comma UNK UNK on_comma UNK UNK on_rparen UNK on_period UNK UNK on_op # Allows you to add shortcut so that you don't have to refer to attribute # through config. Also look at the example for config to contrast. # # Defines both class and instance config accessors. # # class User # include ActiveSupport::Configurable # config_accessor :allowed_access # end # # User.allowed_access # => nil # User.allowed_access = false # User.allowed_access # => false # # user = User.new # user.allowed_access # => false # user.allowed_access = true # user.allowed_access # => true # # User.allowed_access # => false # # The attribute name must be a valid method name in Ruby. # # class User # include ActiveSupport::Configurable # config_accessor :"1_Badname" # end # # => NameError: invalid config attribute name # # To omit the instance writer method, pass <tt>instance_writer: false</tt>. # To omit the instance reader method, pass <tt>instance_reader: false</tt>. # # class User # include ActiveSupport::Configurable # config_accessor :allowed_access, instance_reader: false, instance_writer: false # end # # User.allowed_access = false # User.allowed_access # => false # # User.new.allowed_access = true # => NoMethodError # User.new.allowed_access # => NoMethodError # # Or pass <tt>instance_accessor: false</tt>, to omit both instance methods. # # class User # include ActiveSupport::Configurable # config_accessor :allowed_access, instance_accessor: false # end # # User.allowed_access = false # User.allowed_access # => false # # User.new.allowed_access = true # => NoMethodError # User.new.allowed_access # => NoMethodError # # Also you can pass a block to set up the attribute with a default value. # # class User # include ActiveSupport::Configurable # config_accessor :hair_colors do # [:brown, :black, :blonde, :red] # end # end # # User.hair_colors # => [:brown, :black, :blonde, :red]
UNK on_period UNK UNK on_op name on_op on_ignored_nl UNK on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen UNK UNK on_tstring_content # :doc:
def config on_nl UNK on_op UNK on_period UNK on_period config on_period UNK on_nl end on_nl end on_nl end on_nl EMP # Reads and writes attributes from a configuration <tt>OrderedHash</tt>. # # require 'active_support/configurable' # # class User # include ActiveSupport::Configurable # end # # user = User.new # # user.config.allowed_access = true # user.config.level = 1 # # user.config.allowed_access # => true # user.config.level # => 1
