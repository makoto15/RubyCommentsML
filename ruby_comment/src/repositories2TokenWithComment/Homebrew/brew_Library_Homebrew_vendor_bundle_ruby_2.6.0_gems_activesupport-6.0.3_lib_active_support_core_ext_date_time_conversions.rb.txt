on_ignored_nl UNK UNK UNK UNK on_nl UNK UNK UNK UNK on_nl UNK UNK UNK UNK on_nl UNK UNK UNK UNK # frozen_string_literal: true
def UNK on_lparen UNK on_op on_symbeg UNK on_rparen on_ignored_nl UNK UNK on_op on_op on_const on_op on_const UNK UNK UNK on_nl # Convert to a formatted string. See Time::DATE_FORMATS for predefined formats. # # This method is aliased to <tt>to_s</tt>. # # === Examples # datetime = DateTime.civil(2007, 12, 4, 0, 0, 0, 0) # => Tue, 04 Dec 2007 00:00:00 +0000 # # datetime.to_formatted_s(:db) # => "2007-12-04 00:00:00" # datetime.to_s(:db) # => "2007-12-04 00:00:00" # datetime.to_s(:number) # => "20071204000000" # datetime.to_formatted_s(:short) # => "04 Dec 00:00" # datetime.to_formatted_s(:long) # => "December 04, 2007 00:00" # datetime.to_formatted_s(:long_ordinal) # => "December 4th, 2007 00:00" # datetime.to_formatted_s(:rfc822) # => "Tue, 04 Dec 2007 00:00:00 +0000" # datetime.to_formatted_s(:iso8601) # => "2007-12-04T00:00:00+00:00" # # == Adding your own datetime formats to to_formatted_s # DateTime formats are shared with Time. You can add your own to the # Time::DATE_FORMATS hash. Use the format name as the hash key and # either a strftime string or Proc instance that takes a time or # datetime argument as the value. # # # config/initializers/time_formats.rb # Time::DATE_FORMATS[:month_and_year] = '%B %Y' # Time::DATE_FORMATS[:short_ordinal] = lambda { |time| time.strftime("%B #{time.day.ordinalize}") }
def UNK on_lparen UNK on_op UNK on_comma UNK on_op UNK on_rparen on_ignored_nl UNK on_op UNK on_op on_const on_op on_const on_period # Returns a formatted string of the offset from UTC, or an alternative # string if the time zone is already UTC. # # datetime = DateTime.civil(2000, 1, 1, 0, 0, 0, Rational(-6, 24)) # datetime.formatted_offset # => "-06:00" # datetime.formatted_offset(false) # => "-0600"
def UNK on_nl UNK on_lparen on_symbeg UNK on_rparen on_nl end on_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_nl UNK on_symbeg # Overrides the default inspect method with a human readable one, e.g., "Mon, 21 Feb 2005 14:30:00 +0000".
def UNK on_period UNK on_lparen UNK on_comma UNK on_comma UNK on_op on_int on_comma UNK on_op on_int on_comma UNK on_op on_int # Returns DateTime with local offset for given year if format is local else # offset is zero. # # DateTime.civil_from_format :local, 2012 # # => Sun, 01 Jan 2012 00:00:00 +0300 # DateTime.civil_from_format :local, 2012, 12, 17 # # => Mon, 17 Dec 2012 00:00:00 +0000
def UNK on_nl UNK on_period UNK on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_period UNK on_nl end # Converts +self+ to a floating-point number of seconds, including fractional microseconds, since the Unix epoch.
def UNK on_nl UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_lparen UNK on_op on_int on_rparen on_period UNK # Converts +self+ to an integer number of seconds since the Unix epoch.
def UNK on_nl on_lparen UNK on_op on_int on_rparen on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_lparen UNK on_op # Returns the fraction of a second as microseconds
def UNK on_nl on_lparen UNK on_op on_int on_rparen on_period UNK on_nl end on_nl on_ignored_nl UNK on_nl def UNK on_nl on_lparen # Returns the fraction of a second as nanoseconds
