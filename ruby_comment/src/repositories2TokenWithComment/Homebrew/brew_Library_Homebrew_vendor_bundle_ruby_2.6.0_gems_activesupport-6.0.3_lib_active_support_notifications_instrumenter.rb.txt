on_ignored_nl UNK UNK UNK UNK on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_symbeg UNK on_nl # frozen_string_literal: true
UNK on_const on_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl on_ivar on_op # Instrumenters are stored in a thread local.
def UNK on_lparen name on_comma payload on_op UNK UNK on_rparen on_ignored_nl UNK on_op UNK name on_comma payload on_nl UNK on_ignored_nl # Given a block, instrument it by measuring the time taken to execute # and publish it. Without a block, simply send a message via the # notifier. Notice that events get sent even if an error occurs in the # passed-in block.
UNK on_op UNK name on_comma payload on_nl UNK on_ignored_nl UNK payload UNK UNK on_nl UNK on_const on_op UNK on_nl payload # some of the listeners might have state
def UNK on_lparen name on_comma payload on_rparen on_ignored_nl on_ivar on_period UNK name on_comma on_ivar on_comma payload on_nl end on_nl on_ignored_nl # Send a start notification with +name+ and +payload+.
def UNK on_lparen name on_comma payload on_rparen on_ignored_nl on_ivar on_period UNK name on_comma on_ivar on_comma payload on_nl end on_nl on_ignored_nl # Send a finish notification with +name+ and +payload+.
UNK on_lparen on_const on_op on_const on_rparen on_op on_ignored_nl on_op on_const on_period UNK on_op on_ignored_nl on_op on_const on_period UNK on_lparen UNK # :nodoc:
def UNK on_nl on_ivar on_op UNK on_nl on_ivar on_op UNK on_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def UNK # Record information at the time this event starts
def UNK on_nl on_ivar on_op UNK on_nl on_ivar on_op UNK on_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def UNK # Record information at the time this event finishes
def UNK on_nl on_lparen on_ivar on_op on_ivar on_rparen on_op on_int on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op UNK # Returns the CPU time (in milliseconds) passed since the call to # +start!+ and the call to +finish!+
def UNK on_nl UNK on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op on_ivar on_nl end on_nl on_ignored_nl # Returns the idle time time (in milliseconds) passed since the call to # +start!+ and the call to +finish!+
def UNK on_nl on_ivar on_op on_ivar on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op on_lparen UNK on_period end on_op # Returns the number of allocations made since the call to +start!+ and # the call to +finish!+
def UNK on_nl UNK on_op on_lparen UNK on_period end on_op UNK on_rparen on_nl end on_nl on_ignored_nl def on_op on_lparen UNK # Returns the difference in milliseconds between when the execution of the # event started and when it ended. # # ActiveSupport::Notifications.subscribe('wait') do |*args| # @event = ActiveSupport::Notifications::Event.new(*args) # end # # ActiveSupport::Notifications.instrument('wait') do # sleep 1 # end # # @event.duration # => 1000.138
