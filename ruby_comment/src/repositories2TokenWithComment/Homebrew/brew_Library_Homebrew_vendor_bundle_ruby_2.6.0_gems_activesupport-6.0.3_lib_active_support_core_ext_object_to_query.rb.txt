on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl class on_const on_nl def to_param on_nl UNK on_nl end on_nl on_ignored_nl def to_query # frozen_string_literal: true
def to_param on_nl UNK on_nl end on_nl on_ignored_nl def to_query on_lparen key on_rparen on_ignored_nl on_tstring_beg UNK on_const on_period UNK on_lparen # Alias of <tt>to_s</tt>.
def to_query on_lparen key on_rparen on_ignored_nl on_tstring_beg UNK on_const on_period UNK on_lparen key on_period to_param on_rparen UNK on_tstring_content UNK on_const # Converts an object into a string suitable for use as a URL query string, # using the given <tt>key</tt> as the param name.
def to_param on_nl UNK on_nl end on_nl end on_nl on_ignored_nl class on_const on_nl def to_param on_nl UNK on_nl end on_nl # Returns +self+.
def to_param on_nl UNK on_nl end on_nl end on_nl on_ignored_nl class on_const on_nl def to_param on_nl UNK on_nl end on_nl # Returns +self+.
def to_param on_nl UNK on_nl end on_nl end on_nl on_ignored_nl class on_const on_nl def to_param on_nl UNK on_lparen on_op UNK # Returns +self+.
def to_param on_nl UNK on_lparen on_op UNK to_param on_rparen on_period UNK on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def to_query # Calls <tt>to_param</tt> on all its elements and joins the result with # slashes. This is used by <tt>url_for</tt> in Action Pack.
def to_query on_lparen key on_rparen on_ignored_nl UNK on_op on_tstring_beg UNK key UNK on_tstring_content on_tstring_end on_nl on_ignored_nl UNK UNK on_nl UNK # Converts an array into a string suitable for use as a URL query string, # using the given +key+ as the param name. # # ['Rails', 'coding'].to_query('hobbies') # => "hobbies%5B%5D=Rails&hobbies%5B%5D=coding"
def to_query on_lparen UNK on_op UNK on_rparen on_ignored_nl UNK on_op UNK UNK on_op key UNK value on_op on_ignored_nl UNK on_lparen # Returns a string representation of the receiver suitable for use as a URL # query string: # # {name: 'David', nationality: 'Danish'}.to_query # # => "name=David&nationality=Danish" # # An optional namespace can be passed to enclose key names: # # {name: 'David', nationality: 'Danish'}.to_query('user') # # => "user%5Bname%5D=David&user%5Bnationality%5D=Danish" # # The string pairs "key=value" that conform the query string # are sorted lexicographically in ascending order. # # This method is also aliased as +to_param+.
