on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_nl on_ignored_nl on_const on_op on_const on_period new on_lparen on_tstring_beg # frozen_string_literal: true
def UNK on_nl UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl case on_const on_period version on_nl when on_tstring_beg on_tstring_content on_tstring_end then on_tstring_beg # Bump these when a new version is available from the App Store and our # CI systems have been updated. # This may be a beta version for a beta macOS.
UNK on_nl end on_nl end on_nl on_ignored_nl def UNK on_nl case on_const on_period version on_nl when on_tstring_beg on_tstring_content on_tstring_end then # Default to newest known version of Xcode for unreleased macOS versions.
def UNK on_nl case on_const on_period version on_nl when on_tstring_beg on_tstring_content on_tstring_end then on_tstring_beg on_tstring_content on_tstring_end on_nl when on_tstring_beg on_tstring_content # Bump these if things are badly broken (e.g. no SDK for this macOS) # without this. Generally this will be the first Xcode release on that # macOS version (which may initially be a beta if that version of macOS is # also in beta).
def UNK on_nl on_ivar on_op on_ignored_nl UNK on_ignored_nl UNK on_op on_const on_period UNK on_nl on_ignored_nl if UNK on_period UNK on_op # Returns a Pathname object corresponding to Xcode.app's Developer # directory or nil if Xcode.app is not installed
on_const on_period new on_lparen UNK on_rparen on_period UNK on_nl end on_nl end on_nl end on_nl on_ignored_nl def UNK on_nl on_const # Use cleanpath to avoid pathological trailing slash
return on_const if on_const on_period UNK on_nl on_ignored_nl on_const on_period UNK on_lparen on_const on_comma on_const on_rparen on_nl end on_nl on_ignored_nl # Use the default location if it exists.
on_const on_period UNK on_lparen on_const on_comma on_const on_rparen on_nl end on_nl on_ignored_nl def installed? on_nl on_op UNK on_period UNK on_nl # Ask Spotlight where Xcode is. If the user didn't install the # helper tools and installed Xcode in a non-conventional place, this # is our only option. See: https://superuser.com/questions/390757
if on_ivar on_op UNK on_nl on_op on_const on_period new on_ivar on_nl else on_ignored_nl on_op on_const on_op on_const on_nl end on_nl # may return a version string # that is guessed based on the compiler, so do not # use it in order to check if Xcode is installed.
return if on_op on_const on_op on_const on_period installed? on_op on_op on_const on_op on_const on_period installed? on_nl on_ignored_nl UNK UNK on_embexpr_beg # This is a separate function as you can't cache the value out of a block # if return is used in the middle, which we do many times in here.
case UNK UNK UNK on_tstring_content UNK on_comma on_int UNK on_nl when on_tstring_beg on_tstring_content on_tstring_end then return on_tstring_beg on_tstring_content on_tstring_end on_nl # Xcode 2.x's xcodebuild has a different version string
UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl case on_lparen on_const on_period UNK on_period UNK on_op on_int on_rparen on_period UNK on_nl when # This logic provides a fake Xcode version based on the # installed CLT version. This is useful as they are packaged # simultaneously so workarounds need to apply to both based on their # comparable version.
on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl def installed? # The original Mavericks CLT package ID
on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl def installed? on_nl on_op version on_period UNK on_nl end on_nl on_ignored_nl def UNK # obsolete
def installed? on_nl on_op version on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl version on_op on_tstring_beg on_tstring_content on_tstring_end on_op # Returns true even if outdated tools are installed
def UNK on_nl case on_const on_period version on_nl when on_tstring_beg on_tstring_content on_tstring_end then on_tstring_beg on_tstring_content on_tstring_end on_nl when on_tstring_beg on_tstring_content # Bump these when the new version is distributed through Software Update # and our CI systems have been updated.
def UNK on_nl case on_const on_period version on_nl when on_tstring_beg on_tstring_content on_tstring_end then on_tstring_beg on_tstring_content on_tstring_end on_nl when on_tstring_beg on_tstring_content # Bump these if things are badly broken (e.g. no SDK for this macOS) # without this. Generally this will be the first stable CLT release on # that macOS version.
def version on_nl if on_ivar on_op UNK on_nl on_op on_const on_period new on_ivar on_nl else on_ignored_nl on_op on_const on_op on_const # Version string (a pretty long one) of the CLT package. # Note, that different ways to install the CLTs lead to different # version numbers.
