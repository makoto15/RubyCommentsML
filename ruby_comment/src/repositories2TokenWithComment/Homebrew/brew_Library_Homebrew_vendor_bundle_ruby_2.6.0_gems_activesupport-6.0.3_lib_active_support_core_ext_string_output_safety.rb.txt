on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end # frozen_string_literal: true
def UNK on_lparen s on_rparen on_ignored_nl UNK on_lparen s on_rparen on_period UNK on_nl end on_nl on_ignored_nl UNK on_symbeg UNK on_nl # A utility method for escaping HTML tag characters. # This method is also aliased as <tt>h</tt>. # # puts html_escape('is a > 0 & a < 10?') # # => is a &gt; 0 &amp; a &lt; 10?
def UNK on_lparen s on_rparen s on_op s on_period UNK on_nl if s on_period html_safe? on_nl s on_nl UNK on_ignored_nl # HTML escapes strings but doesn't wrap them with an ActiveSupport::SafeBuffer. # This method is not for public consumption! Seriously!
s on_op s on_period UNK on_nl if s on_period html_safe? on_nl s on_nl UNK on_ignored_nl on_const on_period UNK on_lparen on_const # :nodoc:
def UNK on_lparen s on_rparen on_ignored_nl result on_op on_const on_op on_const on_op on_const on_period UNK on_lparen s on_period UNK on_rparen # A utility method for escaping HTML without affecting existing escaped entities. # # html_escape_once('1 < 2 &amp; 3') # # => "1 &lt; 2 &amp; 3" # # html_escape_once('&lt;&lt; Accept & Checkout') # # => "&lt;&lt; Accept &amp; Checkout"
def UNK on_lparen s on_rparen on_ignored_nl result on_op s on_period UNK on_period UNK on_lparen on_const on_comma on_const on_rparen on_nl s # A utility method for escaping HTML entities in JSON strings. Specifically, the # &, > and < characters are replaced with their equivalent unicode escaped form - # \u0026, \u003e, and \u003c. The Unicode sequences \u2028 and \u2029 are also # escaped as they are treated as newline characters in some JavaScript engines. # These sequences have identical meaning as the original characters inside the # context of a JSON string, so assuming the input is a valid and well-formed # JSON value, the output will have equivalent meaning when parsed: # # json = JSON.generate({ name: "</script><script>alert('PWNED!!!')</script>"}) # # => "{\"name\":\"</script><script>alert('PWNED!!!')</script>\"}" # # json_escape(json) # # => "{\"name\":\"\\u003C/script\\u003E\\u003Cscript\\u003Ealert('PWNED!!!')\\u003C/script\\u003E\"}" # # JSON.parse(json) == JSON.parse(json_escape(json)) # # => true # # The intended use case for this method is to escape JSON strings before including # them inside a script tag to avoid XSS vulnerability: # # <script> # var currentUser = <%= raw json_escape(current_user.to_json) %>; # </script> # # It is necessary to +raw+ the result of +json_escape+, so that quotation marks # don't get converted to <tt>&quot;</tt> entities. +json_escape+ doesn't # automatically flag the result as HTML safe, since the raw value is unsafe to # use inside HTML attributes. # # If your JSON is being used downstream for insertion into the DOM, be aware of # whether or not it is being inserted via +html()+. Most jQuery plugins do this. # If that is the case, be sure to +html_escape+ or +sanitize+ any user-generated # content returned by your JSON. # # If you need to output JSON elsewhere in your HTML, you can just do something # like this, as any unsafe characters (including quotation marks) will be # automatically escaped for you: # # <div data-user-info="<%= current_user.to_json %>">...</div> # # WARNING: this helper only works with valid JSON. Using this on non-JSON values # will open up serious XSS vulnerabilities. For example, if you replace the # +current_user.to_json+ in the example above with user input instead, the browser # will happily eval() that string as JavaScript. # # The escaping performed in this method is identical to those performed in the # Active Support JSON encoder when +ActiveSupport.escape_html_entities_in_json+ is # set to true. Because this transformation is idempotent, this helper can be # applied even if +ActiveSupport.escape_html_entities_in_json+ is already true. # # Therefore, when you are unsure if +ActiveSupport.escape_html_entities_in_json+ # is enabled, or if you are unsure where your JSON string originated from, it # is recommended that you always apply this helper (other libraries, such as the # JSON gem, do not provide this kind of protection by default; also some gems # might override +to_json+ to bypass Active Support's encoder).
class on_const on_op on_const on_nl on_const on_op UNK on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content #:nodoc:
class on_const on_op on_const on_nl def UNK on_nl super on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl end on_nl on_ignored_nl def on_op # Raised when <tt>ActiveSupport::SafeBuffer#safe_concat</tt> is called on unsafe buffers.
end on_nl end on_nl end on_nl on_ignored_nl class on_const on_nl def UNK on_nl on_const on_op on_const on_period UNK on_lparen UNK # Can't create binding from C level Proc
def UNK on_nl on_const on_op on_const on_period UNK on_lparen UNK on_rparen on_nl end on_nl end on_nl EMP EMP EMP EMP # Marks a string as trusted safe. It will be inserted into HTML with no # additional escaping performed. It is your responsibility to ensure that the # string contains no malicious content. This method is equivalent to the # +raw+ helper in views. It is recommended that you use +sanitize+ instead of # this method. It should never be called on user input.
