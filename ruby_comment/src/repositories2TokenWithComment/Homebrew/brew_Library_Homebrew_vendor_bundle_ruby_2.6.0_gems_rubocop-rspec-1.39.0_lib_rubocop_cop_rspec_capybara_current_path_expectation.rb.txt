on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl on_const on_op # frozen_string_literal: true
UNK on_const on_op on_const on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_tstring_beg on_tstring_content on_tstring_end on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK UNK # Checks that no expectations are set on Capybara's `current_path`. # # The `have_current_path` matcher (https://www.rubydoc.info/github/ # teamcapybara/capybara/master/Capybara/RSpecMatchers#have_current_path- # instance_method) should be used on `page` to set expectations on # Capybara's current path, since it uses Capybara's waiting # functionality (https://github.com/teamcapybara/capybara/blob/master/ # README.md#asynchronous-javascript-ajax-and-friends) which ensures that # preceding actions (like `click_link`) have completed. # # @example # # bad # expect(current_path).to eq('/callback') # expect(page.current_path).to match(/widgets/) # # # good # expect(page).to have_current_path("/callback") # expect(page).to have_current_path(/widgets/) #
UNK UNK UNK on_comma UNK on_nl on_tstring_content UNK on_const on_op on_const on_period UNK UNK on_tstring_content UNK on_ignored_nl UNK UNK UNK # Supported matchers: eq(...) / match(/regexp/) / match('regexp')
UNK UNK on_lparen corrector on_comma node on_rparen on_ignored_nl UNK on_op node on_period UNK on_period UNK on_nl UNK on_op UNK on_period # `have_current_path` with no options will include the querystring # while `page.current_path` does not. # This ensures the option `ignore_query: true` is added # except when the expectation is a regexp or string
