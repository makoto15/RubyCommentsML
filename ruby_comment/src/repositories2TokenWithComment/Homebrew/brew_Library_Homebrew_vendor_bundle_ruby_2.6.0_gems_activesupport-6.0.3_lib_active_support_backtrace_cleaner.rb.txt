on_ignored_nl UNK on_const on_nl UNK on_const on_nl def UNK on_nl on_ivar UNK on_ivar on_op on_lbracket on_rbracket UNK on_lbracket on_rbracket on_nl # frozen_string_literal: true
UNK on_const on_nl def UNK on_nl on_ivar UNK on_ivar on_op on_lbracket on_rbracket UNK on_lbracket on_rbracket on_nl UNK on_nl UNK on_nl # Backtraces often include many lines that are not relevant for the context # under review. This makes it hard to find the signal amongst the backtrace # noise, and adds debugging time. With a BacktraceCleaner, filters and # silencers are used to remove the noisy lines, so that only the most relevant # lines remain. # # Filters are used to modify lines of data, while silencers are used to remove # lines entirely. The typical filter use case is to remove lengthy path # information from the start of each line, and view file paths relevant to the # app directory instead of the file system root. The typical silencer use case # is to exclude the output of a noisy library from the backtrace, so that you # can focus on the rest. # # bc = ActiveSupport::BacktraceCleaner.new # bc.add_filter { |line| line.gsub(Rails.root.to_s, '') } # strip the Rails.root prefix # bc.add_silencer { |line| line =~ /puma|rubygems/ } # skip any lines from puma or rubygems # bc.clean(exception.backtrace) # perform the cleanup # # To reconfigure an existing BacktraceCleaner (like the default one in Rails) # and show as much data as possible, you can always call # <tt>BacktraceCleaner#remove_silencers!</tt>, which will restore the # backtrace to a pristine state. If you need to reconfigure an existing # BacktraceCleaner so that it does not filter or modify the paths of any lines # of the backtrace, you can call <tt>BacktraceCleaner#remove_filters!</tt> # These two methods will give you a completely untouched backtrace. # # Inspired by the Quiet Backtrace gem by thoughtbot.
def UNK on_lparen backtrace UNK UNK on_op UNK UNK on_rparen on_ignored_nl UNK on_op UNK on_lparen backtrace on_rparen on_nl on_ignored_nl UNK # Returns the backtrace after all filters and silencers have been run # against it. Filters run first, then silencers.
def UNK on_lparen on_op UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def UNK on_lparen on_op UNK on_rparen # Adds a filter from the block provided. Each line in the backtrace will be # mapped against this filter. # # # Will turn "/my/rails/root/app/models/person.rb" into "/app/models/person.rb" # backtrace_cleaner.add_filter { |line| line.gsub(Rails.root, '') }
def UNK on_lparen on_op UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op on_lbracket # Adds a silencer from the block provided. If the silencer returns +true+ # for a given line, it will be excluded from the clean backtrace. # # # Will reject all lines that include the word "puma", like "/gems/puma/server.rb" or "/app/my_puma_server/rb" # backtrace_cleaner.add_silencer { |line| line =~ /puma/ }
def UNK on_nl on_ivar on_op on_lbracket on_rbracket on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op on_lbracket on_rbracket on_nl end # Removes all silencers, but leaves in the filters. Useful if your # context of debugging suddenly expands as you suspect a bug in one of # the libraries you use.
def UNK on_nl on_ivar on_op on_lbracket on_rbracket on_nl end on_nl on_ignored_nl UNK on_nl on_const on_op UNK on_tstring_content UNK on_nl on_ignored_nl # Removes all filters, but leaves in the silencers. Useful if you suddenly # need to see entire filepaths in the backtrace that you had already # filtered out.
