def self on_period UNK on_lparen level on_op on_const on_op on_const on_comma output on_op UNK on_rparen on_ignored_nl UNK UNK on_op UNK # @return [Logger] Logger with provided level and output.
UNK UNK on_op UNK on_comma progname on_comma message on_op UNK on_comma on_op block on_op on_ignored_nl UNK UNK UNK UNK on_op # TODO (pitr-ch 24-Dec-2016): figure out why it had to be replaced, stdlogger was deadlocking
def self on_period UNK on_lparen level on_op on_const on_op on_const on_comma output on_op UNK on_rparen on_ignored_nl on_const on_period UNK on_op # Use logger created by #create_simple_logger to log concurrent-ruby messages.
def self on_period UNK on_lparen level on_op on_const on_op on_const on_comma output on_op UNK on_rparen on_ignored_nl UNK on_op on_const on_period # @return [Logger] Logger with provided level and output. # @deprecated
def self on_period UNK on_lparen level on_op on_const on_op on_const on_comma output on_op UNK on_rparen on_ignored_nl on_const on_period UNK on_op # Use logger created by #create_stdlib_logger to log concurrent-ruby messages. # @deprecated
on_ignored_nl on_const on_op UNK on_lbrace on_op level on_comma progname on_comma message on_op UNK on_comma on_op block on_op on_rbrace on_nl on_ignored_nl # TODO (pitr-ch 27-Dec-2016): remove deadlocking stdlib_logger methods
on_const on_op UNK on_lbrace on_op level on_comma progname on_comma message on_op UNK on_comma on_op block on_op on_rbrace on_nl on_ignored_nl on_const # Suppresses all output when used for logging.
on_const on_op on_const on_period new on_lparen UNK on_lparen on_const on_op on_const on_rparen on_rparen on_nl UNK on_symbeg on_const on_nl on_ignored_nl def # @!visibility private
on_const on_op on_const on_period new on_lbrace on_const on_period UNK on_rbrace on_nl UNK on_symbeg on_const on_nl on_ignored_nl on_const on_op on_const on_period # @!visibility private
on_const on_op on_const on_period new on_lbrace on_const on_period UNK on_rbrace on_nl UNK on_symbeg on_const on_nl on_ignored_nl on_const on_op on_const on_period # @!visibility private
on_const on_op on_const on_period new on_lbrace on_const on_period new on_rbrace on_nl UNK on_symbeg on_const on_nl on_ignored_nl on_const on_op on_const on_period # @!visibility private
on_const on_op on_const on_period new on_nl UNK on_symbeg on_const on_nl on_ignored_nl def self on_period UNK on_nl UNK on_tstring_beg on_tstring_content on_tstring_end # @!visibility private
def self on_period UNK on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def self on_period UNK on_nl on_const on_period # Disables AtExit handlers including pool auto-termination handlers. # When disabled it will be the application programmer's responsibility # to ensure that the handlers are shutdown properly prior to application # exit by calling `AtExit.run` method. # # @note this option should be needed only because of `at_exit` ordering # issues which may arise when running some of the testing frameworks. # E.g. Minitest's test-suite runs itself in `at_exit` callback which # executes after the pools are already terminated. Then auto termination # needs to be disabled and called manually after test-suite ends. # @note This method should *never* be called # from within a gem. It should *only* be used from within the main # application and even then it should be used only when necessary. # @deprecated Has no effect since it is no longer needed, see https://github.com/ruby-concurrency/concurrent-ruby/pull/841. #
def self on_period UNK on_nl on_const on_period value on_nl end on_nl on_ignored_nl def self on_period UNK on_nl on_const on_period value # Global thread pool optimized for short, fast *operations*. # # @return [ThreadPoolExecutor] the thread pool
def self on_period UNK on_nl on_const on_period value on_nl end on_nl on_ignored_nl def self on_period UNK on_nl on_const on_nl end # Global thread pool optimized for long, blocking (IO) *tasks*. # # @return [ThreadPoolExecutor] the thread pool
def self on_period UNK on_nl on_const on_period value on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen UNK on_rparen on_ignored_nl # Global thread pool user for global *timers*. # # @return [Concurrent::TimerSet] the thread pool
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl on_const on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl def self # General access point to global executors. # @param [Symbol, Executor] executor_identifier symbols: # - :fast - {Concurrent.global_fast_executor} # - :io - {Concurrent.global_io_executor} # - :immediate - {Concurrent.global_immediate_executor} # @return [Executor]
on_label UNK on_comma on_label on_symbeg UNK on_comma on_label on_tstring_beg on_tstring_content on_tstring_end on_nl on_rparen on_nl end on_nl on_ignored_nl def self on_period # 1 minute
on_label on_symbeg UNK on_comma on_label on_tstring_beg on_tstring_content on_tstring_end on_nl on_rparen on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen UNK # unlimited
on_label on_tstring_beg on_tstring_content on_tstring_end on_nl on_rparen on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen UNK on_op on_lbrace on_rbrace on_rparen # shouldn't matter -- 0 max queue
on_label on_tstring_beg on_tstring_content on_tstring_end on_nl on_rparen on_nl end on_nl end on_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP # shouldn't matter -- 0 max queue
