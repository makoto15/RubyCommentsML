on_ignored_nl UNK UNK UNK UNK on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl on_const on_op UNK on_ignored_nl on_label on_int on_comma # frozen_string_literal: true
def UNK on_nl advance on_lparen on_label on_op on_int on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl advance on_lparen on_label on_int # Returns a new date/time representing yesterday.
def UNK on_nl advance on_lparen on_label on_int on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op on_op on_const on_period # Returns a new date/time representing tomorrow.
def UNK on_nl UNK on_op on_op on_const on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl self on_op self on_period # Returns true if the date/time is today.
def UNK on_nl self on_op self on_period UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl self on_op self # Returns true if the date/time is in the past.
def UNK on_nl self on_op self on_period UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_const on_period UNK # Returns true if the date/time is in the future.
def UNK on_nl on_const on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl on_op on_const on_period UNK # Returns true if the date/time falls on a Saturday or Sunday.
def UNK on_nl on_op on_const on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen date_or_time on_rparen on_ignored_nl # Returns true if the date/time does not fall on a Saturday or Sunday.
def UNK on_lparen date_or_time on_rparen on_ignored_nl self on_op date_or_time on_nl end on_nl on_ignored_nl def UNK on_lparen date_or_time on_rparen on_ignored_nl self # Returns true if the date/time falls before <tt>date_or_time</tt>.
def UNK on_lparen date_or_time on_rparen on_ignored_nl self on_op date_or_time on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl advance # Returns true if the date/time falls after <tt>date_or_time</tt>.
def UNK on_lparen UNK on_rparen on_ignored_nl advance on_lparen on_label on_op UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen UNK # Returns a new date/time the specified number of days ago.
def UNK on_lparen UNK on_rparen on_ignored_nl advance on_lparen on_label UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen # Returns a new date/time the specified number of days in the future.
def UNK on_lparen UNK on_rparen on_ignored_nl advance on_lparen on_label on_op UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen UNK # Returns a new date/time the specified number of weeks ago.
def UNK on_lparen UNK on_rparen on_ignored_nl advance on_lparen on_label UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen # Returns a new date/time the specified number of weeks in the future.
def UNK on_lparen UNK on_rparen on_ignored_nl advance on_lparen on_label on_op UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen UNK # Returns a new date/time the specified number of months ago.
def UNK on_lparen UNK on_rparen on_ignored_nl advance on_lparen on_label UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen # Returns a new date/time the specified number of months in the future.
def UNK on_lparen UNK on_rparen on_ignored_nl advance on_lparen on_label on_op UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen UNK # Returns a new date/time the specified number of years ago.
def UNK on_lparen UNK on_rparen on_ignored_nl advance on_lparen on_label UNK on_rparen on_nl end on_nl on_ignored_nl def beginning_of_month on_nl UNK on_lparen # Returns a new date/time the specified number of years in the future.
def beginning_of_month on_nl UNK on_lparen change on_lparen on_label on_int on_rparen on_rparen on_nl end on_nl alias on_symbeg UNK on_symbeg beginning_of_month on_nl # Returns a new date/time at the start of the month. # # today = Date.today # => Thu, 18 Jun 2015 # today.beginning_of_month # => Mon, 01 Jun 2015 # # +DateTime+ objects will have a time set to 0:00. # # now = DateTime.current # => Thu, 18 Jun 2015 15:23:13 +0000 # now.beginning_of_month # => Mon, 01 Jun 2015 00:00:00 +0000
def UNK on_nl UNK on_op UNK on_op on_lparen on_int on_op UNK on_rparen on_op on_int on_nl beginning_of_month on_period change on_lparen on_label # Returns a new date/time at the start of the quarter. # # today = Date.today # => Fri, 10 Jul 2015 # today.beginning_of_quarter # => Wed, 01 Jul 2015 # # +DateTime+ objects will have a time set to 0:00. # # now = DateTime.current # => Fri, 10 Jul 2015 18:41:29 +0000 # now.beginning_of_quarter # => Wed, 01 Jul 2015 00:00:00 +0000
def UNK on_nl UNK on_op UNK on_op on_lparen on_int on_op UNK on_rparen on_op on_int on_nl beginning_of_month on_period change on_lparen on_label # Returns a new date/time at the end of the quarter. # # today = Date.today # => Fri, 10 Jul 2015 # today.end_of_quarter # => Wed, 30 Sep 2015 # # +DateTime+ objects will have a time set to 23:59:59. # # now = DateTime.current # => Fri, 10 Jul 2015 18:41:29 +0000 # now.end_of_quarter # => Wed, 30 Sep 2015 23:59:59 +0000
def UNK on_nl change on_lparen on_label on_int on_rparen on_period beginning_of_month on_nl end on_nl alias on_symbeg UNK on_symbeg UNK on_nl on_ignored_nl # Returns a new date/time at the beginning of the year. # # today = Date.today # => Fri, 10 Jul 2015 # today.beginning_of_year # => Thu, 01 Jan 2015 # # +DateTime+ objects will have a time set to 0:00. # # now = DateTime.current # => Fri, 10 Jul 2015 18:41:29 +0000 # now.beginning_of_year # => Thu, 01 Jan 2015 00:00:00 +0000
def UNK on_lparen UNK on_op on_const on_period beginning_of_week on_comma on_label UNK on_rparen on_ignored_nl result on_op UNK on_lparen UNK on_lparen on_int # Returns a new date/time representing the given day in the next week. # # today = Date.today # => Thu, 07 May 2015 # today.next_week # => Mon, 11 May 2015 # # The +given_day_in_next_week+ defaults to the beginning of the week # which is determined by +Date.beginning_of_week+ or +config.beginning_of_week+ # when set. # # today = Date.today # => Thu, 07 May 2015 # today.next_week(:friday) # => Fri, 15 May 2015 # # +DateTime+ objects have their time set to 0:00 unless +same_time+ is true. # # now = DateTime.current # => Thu, 07 May 2015 13:31:16 +0000 # now.next_week # => Mon, 11 May 2015 00:00:00 +0000
def UNK on_nl UNK UNK on_period UNK on_nl UNK on_lparen on_symbeg UNK on_comma on_label UNK on_rparen on_nl UNK on_ignored_nl UNK # Returns a new date/time representing the next weekday.
def UNK on_nl UNK on_lparen on_int on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen start_day on_op on_const on_period beginning_of_week on_comma # Short-hand for months_since(3)
def UNK on_lparen start_day on_op on_const on_period beginning_of_week on_comma on_label UNK on_rparen on_ignored_nl result on_op UNK on_lparen UNK on_lparen on_int # Returns a new date/time representing the given day in the previous week. # Week is assumed to start on +start_day+, default is # +Date.beginning_of_week+ or +config.beginning_of_week+ when set. # DateTime objects have their time set to 0:00 unless +same_time+ is true.
def UNK on_nl UNK UNK on_period UNK on_nl UNK on_lparen beginning_of_week on_lparen on_symbeg UNK on_rparen on_rparen on_nl UNK on_ignored_nl UNK # Returns a new date/time representing the previous weekday.
def UNK on_nl UNK on_lparen on_int on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_lparen on_int on_rparen on_nl end # Short-hand for months_ago(1).
def UNK on_nl UNK on_lparen on_int on_rparen on_nl end on_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl def UNK # Short-hand for months_ago(3).
def UNK on_nl UNK on_lparen on_int on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen start_day on_op on_const on_period beginning_of_week on_rparen # Short-hand for years_ago(1).
def UNK on_lparen start_day on_op on_const on_period beginning_of_week on_rparen on_ignored_nl UNK on_op on_const on_period UNK on_lparen start_day on_rparen on_nl on_lparen # Returns the number of days to the start of the week on the given day. # Week is assumed to start on +start_day+, default is # +Date.beginning_of_week+ or +config.beginning_of_week+ when set.
def beginning_of_week on_lparen start_day on_op on_const on_period beginning_of_week on_rparen on_ignored_nl result on_op UNK on_lparen UNK on_lparen start_day on_rparen on_rparen on_nl # Returns a new date/time representing the start of this week on the given day. # Week is assumed to start on +start_day+, default is # +Date.beginning_of_week+ or +config.beginning_of_week+ when set. # +DateTime+ objects have their time set to 0:00.
def UNK on_nl beginning_of_week on_lparen on_symbeg UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen start_day on_op on_const on_period beginning_of_week # Returns Monday of this week assuming that week starts on Monday. # +DateTime+ objects have their time set to 0:00.
def UNK on_lparen start_day on_op on_const on_period beginning_of_week on_rparen on_ignored_nl UNK on_lparen UNK on_lparen on_int on_op UNK on_lparen start_day on_rparen # Returns a new date/time representing the end of this week on the given day. # Week is assumed to start on +start_day+, default is # +Date.beginning_of_week+ or +config.beginning_of_week+ when set. # DateTime objects have their time set to 23:59:59.
def UNK on_nl UNK on_lparen on_symbeg UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op on_op on_const on_period # Returns Sunday of this week assuming that week starts on Monday. # +DateTime+ objects have their time set to 23:59:59.
def UNK on_nl UNK on_op on_op on_const on_period UNK on_lparen UNK on_comma UNK on_rparen on_nl UNK on_lparen UNK on_lparen UNK # Returns a new date/time representing the end of the month. # DateTime objects will have a time set to 23:59:59.
def UNK on_nl change on_lparen on_label on_int on_rparen on_period UNK on_nl end on_nl alias on_symbeg UNK on_symbeg UNK on_nl on_ignored_nl # Returns a new date/time representing the end of the year. # DateTime objects will have a time set to 23:59:59.
def UNK on_nl UNK on_op UNK on_nl end on_nl on_ignored_nl def UNK on_lparen start_day on_op on_const on_period beginning_of_week on_rparen on_ignored_nl # Returns a Range representing the whole day of the current date/time.
def UNK on_lparen start_day on_op on_const on_period beginning_of_week on_rparen on_ignored_nl beginning_of_week on_lparen start_day on_rparen on_op UNK on_lparen start_day on_rparen on_nl # Returns a Range representing the whole week of the current date/time. # Week starts on start_day, default is <tt>Date.beginning_of_week</tt> or <tt>config.beginning_of_week</tt> when set.
def UNK on_nl beginning_of_month on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op UNK on_nl end on_nl on_ignored_nl # Returns a Range representing the whole month of the current date/time.
def UNK on_nl UNK on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op UNK on_nl end on_nl on_ignored_nl # Returns a Range representing the whole quarter of the current date/time.
def UNK on_nl UNK on_op UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op on_const on_period # Returns a Range representing the whole year of the current date/time.
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op on_const on_period UNK on_lparen UNK on_rparen on_op UNK on_nl UNK on_op on_int # Returns a new date/time representing the next occurrence of the specified day of week. # # today = Date.today # => Thu, 14 Dec 2017 # today.next_occurring(:monday) # => Mon, 18 Dec 2017 # today.next_occurring(:thursday) # => Thu, 21 Dec 2017
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_op on_const on_period UNK on_lparen UNK on_rparen on_nl UNK on_op on_int # Returns a new date/time representing the previous occurrence of the specified day of week. # # today = Date.today # => Thu, 14 Dec 2017 # today.prev_occurring(:monday) # => Mon, 11 Dec 2017 # today.prev_occurring(:thursday) # => Thu, 07 Dec 2017
