on_ignored_nl UNK UNK on_nl UNK UNK on_lparen on_op syms on_comma on_label true on_comma on_label true on_comma on_label UNK on_rparen on_ignored_nl # frozen_string_literal: true
UNK UNK on_nl UNK UNK on_lparen on_op syms on_comma on_label true on_comma on_label true on_comma on_label UNK on_rparen on_ignored_nl syms # Extends the module object with class/module and instance accessors for # class/module attributes, just like the native attr* accessors for instance # attributes.
UNK UNK on_lparen on_op syms on_comma on_label true on_comma on_label true on_comma on_label UNK on_rparen on_ignored_nl syms on_period UNK UNK # Defines a class attribute and creates a class and instance reader methods. # The underlying class variable is set to +nil+, if it is not previously # defined. All class and instance methods created will be public, even if # this method is called with a private or protected access modifier. # # module HairColors # mattr_reader :hair_colors # end # # HairColors.hair_colors # => nil # HairColors.class_variable_set("@@hair_colors", [:brown, :black]) # HairColors.hair_colors # => [:brown, :black] # # The attribute name must be a valid method name in Ruby. # # module Foo # mattr_reader :"1_Badname" # end # # => NameError: invalid attribute name: 1_Badname # # To omit the instance reader method, pass # <tt>instance_reader: false</tt> or <tt>instance_accessor: false</tt>. # # module HairColors # mattr_reader :hair_colors, instance_reader: false # end # # class Person # include HairColors # end # # Person.new.hair_colors # => NoMethodError # # You can set a default value for the attribute. # # module HairColors # mattr_reader :hair_colors, default: [:brown, :black, :blonde, :red] # end # # class Person # include HairColors # end # # Person.new.hair_colors # => [:brown, :black, :blonde, :red]
UNK UNK on_lparen on_op syms on_comma on_label true on_comma on_label true on_comma on_label UNK on_rparen on_ignored_nl syms on_period UNK UNK # Defines a class attribute and creates a class and instance writer methods to # allow assignment to the attribute. All class and instance methods created # will be public, even if this method is called with a private or protected # access modifier. # # module HairColors # mattr_writer :hair_colors # end # # class Person # include HairColors # end # # HairColors.hair_colors = [:brown, :black] # Person.class_variable_get("@@hair_colors") # => [:brown, :black] # Person.new.hair_colors = [:blonde, :red] # HairColors.class_variable_get("@@hair_colors") # => [:blonde, :red] # # To omit the instance writer method, pass # <tt>instance_writer: false</tt> or <tt>instance_accessor: false</tt>. # # module HairColors # mattr_writer :hair_colors, instance_writer: false # end # # class Person # include HairColors # end # # Person.new.hair_colors = [:blonde, :red] # => NoMethodError # # You can set a default value for the attribute. # # module HairColors # mattr_writer :hair_colors, default: [:brown, :black, :blonde, :red] # end # # class Person # include HairColors # end # # Person.class_variable_get("@@hair_colors") # => [:brown, :black, :blonde, :red]
UNK UNK on_lparen on_op syms on_comma on_label true on_comma on_label true on_comma on_label true on_comma on_label UNK on_comma on_op UNK # Defines both class and instance accessors for class attributes. # All class and instance methods created will be public, even if # this method is called with a private or protected access modifier. # # module HairColors # mattr_accessor :hair_colors # end # # class Person # include HairColors # end # # HairColors.hair_colors = [:brown, :black, :blonde, :red] # HairColors.hair_colors # => [:brown, :black, :blonde, :red] # Person.new.hair_colors # => [:brown, :black, :blonde, :red] # # If a subclass changes the value then that would also change the value for # parent class. Similarly if parent class changes the value then that would # change the value of subclasses too. # # class Citizen < Person # end # # Citizen.new.hair_colors << :blue # Person.new.hair_colors # => [:brown, :black, :blonde, :red, :blue] # # To omit the instance writer method, pass <tt>instance_writer: false</tt>. # To omit the instance reader method, pass <tt>instance_reader: false</tt>. # # module HairColors # mattr_accessor :hair_colors, instance_writer: false, instance_reader: false # end # # class Person # include HairColors # end # # Person.new.hair_colors = [:brown] # => NoMethodError # Person.new.hair_colors # => NoMethodError # # Or pass <tt>instance_accessor: false</tt>, to omit both instance methods. # # module HairColors # mattr_accessor :hair_colors, instance_accessor: false # end # # class Person # include HairColors # end # # Person.new.hair_colors = [:brown] # => NoMethodError # Person.new.hair_colors # => NoMethodError # # You can set a default value for the attribute. # # module HairColors # mattr_accessor :hair_colors, default: [:brown, :black, :blonde, :red] # end # # class Person # include HairColors # end # # Person.class_variable_get("@@hair_colors") # => [:brown, :black, :blonde, :red]
