on_ignored_nl UNK UNK on_nl def UNK on_lparen UNK UNK UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl on_ivar on_op UNK on_nl # frozen_string_literal: true
def UNK on_lparen UNK UNK UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def # @private
def include? on_lparen name on_rparen on_ignored_nl on_ivar on_period include? on_lparen on_tstring_beg on_tstring_content UNK name UNK on_tstring_end on_rparen on_nl end on_nl # True if a {Formula} is being built with a specific option # (which isn't named `with-*` or `without-*`). # @deprecated
def UNK on_lparen val on_rparen on_ignored_nl UNK on_op val on_period UNK on_lparen UNK UNK on_rparen on_op val on_period UNK on_op # True if a {Formula} is being built with a specific option. # <pre>args << "--i-want-spam" if build.with? "spam" # # args << "--qt-gui" if build.with? "qt" # "--with-qt" ==> build.with? "qt" # # # If a formula presents a user with a choice, but the choice must be fulfilled: # if build.with? "example2" # args << "--with-example2" # else # args << "--with-example1" # end</pre>
def UNK on_lparen val on_rparen on_ignored_nl on_op UNK on_lparen val on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl include? on_tstring_beg # True if a {Formula} is being built without a specific option. # <pre>args << "--no-spam-plz" if build.without? "spam"</pre>
def UNK on_nl include? on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl include? on_tstring_beg on_tstring_content on_tstring_end on_nl end # True if a {Formula} is being built as a bottle (i.e. binary package).
def UNK on_nl include? on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl include? on_tstring_beg on_tstring_content on_tstring_end on_nl end # True if a {Formula} is being built with {Formula.head} instead of {Formula.stable}. # <pre>args << "--some-new-stuff" if build.head?</pre> # <pre># If there are multiple conditional arguments use a block instead of lines. # if build.head? # args << "--i-want-pizza" # args << "--and-a-cold-beer" if build.with? "cold-beer" # end</pre>
def UNK on_nl include? on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl on_op on_lparen UNK on_op UNK on_rparen # True if a {Formula} is being built with {Formula.devel} instead of {Formula.stable}. # <pre>args << "--some-beta" if build.devel?</pre>
def UNK on_nl on_op on_lparen UNK on_op UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl include? on_lparen on_tstring_beg on_tstring_content # True if a {Formula} is being built with {Formula.stable} instead of {Formula.devel} # or {Formula.head}. This is the default. # <pre>args << "--some-beta" if build.devel?</pre>
def UNK on_nl include? on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl # True if a {Formula} is being built universally. # e.g. on newer Intel Macs this means a combined x86_64/x86 binary/library. # <pre>args << "--universal-binary" if build.universal?</pre>
def UNK on_nl include? on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_op UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl # True if a {Formula} is being built in C++11 mode.
def UNK on_nl on_op on_ivar on_period UNK on_op on_op on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar # True if the build has any arguments or options specified.
def UNK on_nl on_ivar on_op on_ivar on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op on_ivar on_nl end on_nl on_ignored_nl # @private
def UNK on_nl on_ivar on_op on_ivar on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl def UNK on_lparen name on_rparen on_ignored_nl on_ivar # @private
