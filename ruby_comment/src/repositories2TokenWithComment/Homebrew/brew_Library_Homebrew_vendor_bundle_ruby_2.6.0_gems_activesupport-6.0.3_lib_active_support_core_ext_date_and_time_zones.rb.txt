on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK UNK on_lparen zone on_op on_op on_const on_period zone on_rparen on_ignored_nl UNK on_op # frozen_string_literal: true
UNK UNK on_lparen zone on_op on_op on_const on_period zone on_rparen on_ignored_nl UNK on_op on_op on_const on_period UNK zone on_nl time # Returns the simultaneous time in <tt>Time.zone</tt> if a zone is given or # if Time.zone_default is set. Otherwise, it returns the current time. # # Time.zone = 'Hawaii' # => 'Hawaii' # Time.utc(2000).in_time_zone # => Fri, 31 Dec 1999 14:00:00 HST -10:00 # Date.new(2000).in_time_zone # => Sat, 01 Jan 2000 00:00:00 HST -10:00 # # This method is similar to Time#localtime, except that it uses <tt>Time.zone</tt> as the local zone # instead of the operating system's time zone. # # You can also pass in a TimeZone instance or string that identifies a TimeZone as an argument, # and the conversion will be based on that zone instead of <tt>Time.zone</tt>. # # Time.utc(2000).in_time_zone('Alaska') # => Fri, 31 Dec 1999 15:00:00 AKST -09:00 # Date.new(2000).in_time_zone('Alaska') # => Sat, 01 Jan 2000 00:00:00 AKST -09:00
