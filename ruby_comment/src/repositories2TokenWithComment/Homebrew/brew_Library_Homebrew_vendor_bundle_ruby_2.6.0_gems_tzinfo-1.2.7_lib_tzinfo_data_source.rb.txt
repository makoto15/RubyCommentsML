UNK on_const on_op on_const on_nl end on_nl on_ignored_nl UNK on_const on_op on_const on_nl end on_nl on_ignored_nl UNK on_const on_nl on_cvar # InvalidDataSource is raised if the DataSource is used doesn't implement one # of the required methods.
UNK on_const on_op on_const on_nl end on_nl on_ignored_nl UNK on_const on_nl on_cvar on_op UNK on_nl on_ignored_nl on_cvar on_op on_const on_period # DataSourceNotFound is raised if no data source could be found (i.e. # if 'tzinfo/data' cannot be found on the load path and no valid zoneinfo # directory can be found on the system).
UNK on_const on_nl on_cvar on_op UNK on_nl on_ignored_nl on_cvar on_op on_const on_period UNK on_nl on_ignored_nl def UNK on_period UNK on_nl # The base class for data sources of timezone and country data. # # Use DataSource.set to change the data source being used.
on_cvar on_op UNK on_nl on_ignored_nl on_cvar on_op on_const on_period UNK on_nl on_ignored_nl def UNK on_period UNK on_nl on_ignored_nl on_ignored_nl on_ignored_nl # The currently selected data source.
on_cvar on_op on_const on_period UNK on_nl on_ignored_nl def UNK on_period UNK on_nl on_ignored_nl on_ignored_nl on_ignored_nl UNK on_cvar on_nl on_cvar on_period # Mutex used to ensure the default data source is only created once.
def UNK on_period UNK on_nl on_ignored_nl on_ignored_nl on_ignored_nl UNK on_cvar on_nl on_cvar on_period UNK UNK on_ignored_nl UNK on_lparen UNK on_rparen # Returns the currently selected DataSource instance.
on_ignored_nl on_ignored_nl on_ignored_nl UNK on_cvar on_nl on_cvar on_period UNK UNK on_ignored_nl UNK on_lparen UNK on_rparen UNK on_cvar on_nl end on_nl # If a DataSource hasn't been manually set when the first request is # made to obtain a DataSource, then a Default data source is created.
on_ignored_nl on_ignored_nl UNK on_cvar on_nl on_cvar on_period UNK UNK on_ignored_nl UNK on_lparen UNK on_rparen UNK on_cvar on_nl end on_nl end # This is done at the first request rather than when TZInfo is loaded to # avoid unnecessary (or in some cases potentially harmful) attempts to # find a suitable DataSource.
on_ignored_nl UNK on_cvar on_nl on_cvar on_period UNK UNK on_ignored_nl UNK on_lparen UNK on_rparen UNK on_cvar on_nl end on_nl end on_nl # A Mutex is used to ensure that only a single default instance is # created (having two different DataSources in use simultaneously could # cause unexpected results).
def UNK on_period UNK on_lparen UNK UNK on_op UNK on_rparen on_ignored_nl UNK UNK on_period UNK on_lparen on_const on_rparen on_nl on_cvar # Sets the currently selected data source for Timezone and Country data. # # This should usually be set to one of the two standard data source types: # # * +:ruby+ - read data from the Ruby modules included in the TZInfo::Data # library (tzinfo-data gem). # * +:zoneinfo+ - read data from the zoneinfo files included with most # Unix-like operating sytems (e.g. in /usr/share/zoneinfo). # # To set TZInfo to use one of the standard data source types, call # \TZInfo::DataSource.set in one of the following ways: # # TZInfo::DataSource.set(:ruby) # TZInfo::DataSource.set(:zoneinfo) # TZInfo::DataSource.set(:zoneinfo, zoneinfo_dir) # TZInfo::DataSource.set(:zoneinfo, zoneinfo_dir, iso3166_tab_file) # # \DataSource.set(:zoneinfo) will automatically search for the zoneinfo # directory by checking the paths specified in # ZoneinfoDataSource.search_paths. ZoneinfoDirectoryNotFound will be raised # if no valid zoneinfo directory could be found. # # \DataSource.set(:zoneinfo, zoneinfo_dir) uses the specified zoneinfo # directory as the data source. If the directory is not a valid zoneinfo # directory, an InvalidZoneinfoDirectory exception will be raised. # # \DataSource.set(:zoneinfo, zoneinfo_dir, iso3166_tab_file) uses the # specified zoneinfo directory as the data source, but loads the iso3166.tab # file from an alternate path. If the directory is not a valid zoneinfo # directory, an InvalidZoneinfoDirectory exception will be raised. # # Custom data sources can be created by subclassing TZInfo::DataSource and # implementing the following methods: # # * \load_timezone_info # * \timezone_identifiers # * \data_timezone_identifiers # * \linked_timezone_identifiers # * \load_country_info # * \country_codes # # To have TZInfo use the custom data source, call \DataSource.set # as follows: # # TZInfo::DataSource.set(CustomDataSource.new) # # To avoid inconsistent data, \DataSource.set should be called before # accessing any Timezone or Country data. # # If \DataSource.set is not called, TZInfo will by default use TZInfo::Data # as the data source. If TZInfo::Data is not available (i.e. if require # 'tzinfo/data' fails), then TZInfo will search for a zoneinfo directory # instead (using the search path specified by # TZInfo::ZoneinfoDataSource::DEFAULT_SEARCH_PATH).
def UNK on_lparen UNK on_rparen on_ignored_nl raise_invalid_data_source on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl raise_invalid_data_source # Returns a TimezoneInfo instance for a given identifier. The TimezoneInfo # instance should derive from either DataTimzoneInfo for timezones that # define their own data or LinkedTimezoneInfo for links or aliases to # other timezones. # # Raises InvalidTimezoneIdentifier if the timezone is not found or the # identifier is invalid.
def UNK on_nl raise_invalid_data_source on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl raise_invalid_data_source on_lparen on_tstring_beg on_tstring_content # Returns an array of all the available timezone identifiers.
def UNK on_nl raise_invalid_data_source on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl raise_invalid_data_source on_lparen on_tstring_beg on_tstring_content # Returns an array of all the available timezone identifiers for # data timezones (i.e. those that actually contain definitions).
def UNK on_nl raise_invalid_data_source on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl raise_invalid_data_source # Returns an array of all the available timezone identifiers that # are links to other timezones.
def UNK on_lparen UNK on_rparen on_ignored_nl raise_invalid_data_source on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl raise_invalid_data_source # Returns a CountryInfo instance for the given ISO 3166-1 alpha-2 # country code. Raises InvalidCountryCode if the country could not be found # or the code is invalid.
def UNK on_nl raise_invalid_data_source on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl on_tstring_beg on_tstring_content on_tstring_end on_nl # Returns an array of all the available ISO 3166-1 alpha-2 # country codes.
def UNK on_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl on_tstring_beg on_tstring_content UNK UNK on_period UNK UNK # Returns the name of this DataSource.
def UNK on_nl on_tstring_beg on_tstring_content UNK UNK on_period UNK UNK on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl def # Returns internal object state as a programmer-readable string.
def UNK on_period UNK on_nl UNK on_op UNK on_nl on_ignored_nl UNK on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_op UNK # Creates a DataSource instance for use as the default. Used if # no preference has been specified manually.
