UNK on_const on_op on_const on_op on_const on_nl on_ignored_nl UNK on_nl on_ignored_nl UNK UNK on_nl UNK on_const on_nl end on_nl on_ignored_nl # @!visibility private
UNK UNK on_nl UNK on_const on_nl end on_nl on_ignored_nl UNK UNK UNK UNK on_op UNK UNK on_op UNK UNK on_ignored_nl # @!macro synchronization_object_method_synchronize # # @yield runs the block synchronized against this object, # equivalent of java's `synchronize(this) {}` # @note can by made public in descendants if required by `public :synchronize`
UNK UNK UNK UNK on_op UNK UNK on_op UNK UNK on_ignored_nl UNK UNK on_nl UNK on_op on_const UNK UNK on_op # @!macro synchronization_object_method_ns_wait_until # # Wait until condition is met or timeout passes, # protects against spurious wake-ups. # @param [Numeric, nil] timeout in seconds, `nil` means no timeout # @yield condition to be met # @yieldreturn [true, false] # @return [true, false] if condition met # @note only to be used inside synchronized block # @note to provide direct access to this method in a descendant add method # ``` # def wait_until(timeout = nil, &condition) # synchronize { ns_wait_until(timeout, &condition) } # end # ```
UNK UNK UNK UNK on_op UNK UNK on_ignored_nl UNK on_const on_nl end on_nl on_ignored_nl UNK UNK on_nl UNK on_const on_nl # @!macro synchronization_object_method_ns_wait # # Wait until another thread calls #signal or #broadcast, # spurious wake-ups can happen. # # @param [Numeric, nil] timeout in seconds, `nil` means no timeout # @return [self] # @note only to be used inside synchronized block # @note to provide direct access to this method in a descendant add method # ``` # def wait(timeout = nil) # synchronize { ns_wait(timeout) } # end # ```
UNK UNK on_nl UNK on_const on_nl end on_nl on_ignored_nl UNK UNK on_nl UNK on_const on_nl end on_nl on_ignored_nl end on_nl # @!macro synchronization_object_method_ns_signal # # Signal one waiting thread. # @return [self] # @note only to be used inside synchronized block # @note to provide direct access to this method in a descendant add method # ``` # def signal # synchronize { ns_signal } # end # ```
UNK UNK on_nl UNK on_const on_nl end on_nl on_ignored_nl end on_nl end on_nl end on_nl EMP EMP EMP EMP EMP # @!macro synchronization_object_method_ns_broadcast # # Broadcast to all waiting threads. # @return [self] # @note only to be used inside synchronized block # @note to provide direct access to this method in a descendant add method # ``` # def broadcast # synchronize { ns_broadcast } # end # ```
