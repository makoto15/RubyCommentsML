UNK UNK UNK UNK on_nl on_ignored_nl UNK UNK on_nl UNK UNK on_nl UNK UNK on_nl UNK UNK parent on_ignored_nl def # frozen_string_literal: false
UNK UNK on_nl UNK UNK on_nl UNK UNK parent on_ignored_nl def UNK on_lparen parent UNK UNK on_rparen on_ignored_nl on_ivar UNK ## # A Child object is something contained by a parent, and this class # contains methods to support that. Most user code will not use this # class directly.
on_ignored_nl def UNK on_lparen parent UNK UNK on_rparen on_ignored_nl on_ivar UNK UNK on_nl parent on_period UNK on_lparen self on_rparen UNK # The Parent of this object
def UNK on_lparen parent UNK UNK on_rparen on_ignored_nl on_ivar UNK UNK on_nl parent on_period UNK on_lparen self on_rparen UNK parent # Constructor. Any inheritors of this class should call super to make # sure this method is called. # parent:: # if supplied, the parent of this child will be set to the # supplied value, and self will be added to the parent
parent on_period UNK on_lparen self on_rparen UNK parent on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_period # Declare @parent, but don't define it. The next line sets the # parent.
def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_period UNK on_lparen self UNK UNK on_rparen on_nl self on_nl end on_nl on_ignored_nl # Replaces this object with another object. Basically, calls # Parent.replace_child # # Returns:: self
def UNK on_nl UNK on_ivar on_period UNK on_nl on_ivar on_period UNK self on_nl end on_nl self on_nl end on_nl on_ignored_nl # Removes this child from the parent. # # Returns:: self
def UNK on_lparen other on_rparen on_ignored_nl UNK on_ivar UNK on_ivar UNK other on_nl on_ivar on_period UNK self UNK UNK on_ivar # Sets the parent of this child to the supplied argument. # # other:: # Must be a Parent object. If this object is the same object as the # existing parent of this child, no action is taken. Otherwise, this # child is removed from the current parent (if one exists), and is added # to the new parent. # Returns:: The parent added
def UNK on_lparen other on_rparen on_ignored_nl parent on_period UNK self UNK other on_nl end on_nl on_ignored_nl def UNK on_lparen other # Sets the next sibling of this child. This can be used to insert a child # after some other child. # a = Element.new("a") # b = a.add_element("b") # c = Element.new("c") # b.next_sibling = c # # => <a><b/><c/></a>
def UNK on_lparen other on_rparen on_ignored_nl parent on_period UNK self UNK other on_nl end on_nl on_ignored_nl def UNK on_nl UNK # Sets the previous sibling of this child. This can be used to insert a # child before some other child. # a = Element.new("a") # b = a.add_element("b") # c = Element.new("c") # b.previous_sibling = c # # => <a><b/><c/></a>
def UNK on_nl UNK parent on_period UNK UNK parent on_period UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_nl # Returns:: the document this child belongs to, or nil if this child # belongs to no document
def UNK on_nl UNK on_period UNK on_nl on_ignored_nl UNK on_nl end on_nl end on_nl end on_nl EMP EMP EMP EMP # This doesn't yet handle encodings
