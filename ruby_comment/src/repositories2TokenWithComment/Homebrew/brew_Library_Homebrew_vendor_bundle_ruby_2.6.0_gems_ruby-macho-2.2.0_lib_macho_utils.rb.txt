UNK on_const on_nl def self on_period round on_lparen UNK on_comma round on_rparen on_ignored_nl round on_op UNK on_nl UNK on_op round # A collection of utility functions used throughout ruby-macho.
def self on_period round on_lparen UNK on_comma round on_rparen on_ignored_nl round on_op UNK on_nl UNK on_op round on_nl UNK on_op # Rounds a value to the next multiple of the given round. # @param value [Integer] the number being rounded # @param round [Integer] the number being rounded with # @return [Integer] the rounded value # @see http://www.opensource.apple.com/source/cctools/cctools-870/libstuff/rnd.c
def self on_period UNK on_lparen size on_comma UNK on_rparen on_ignored_nl round on_lparen size on_comma UNK on_rparen on_op size on_nl end # Returns the number of bytes needed to pad the given size to the given # alignment. # @param size [Integer] the unpadded size # @param alignment [Integer] the number to alignment the size with # @return [Integer] the number of pad bytes required
def self on_period UNK on_lparen size on_rparen on_ignored_nl UNK on_const on_comma on_tstring_beg UNK UNK size UNK on_tstring_end UNK size on_period # Returns a string of null bytes of the requested (non-negative) size # @param size [Integer] the size of the nullpad # @return [String] the null string (or empty string, for `size = 0`) # @raise [ArgumentError] if a non-positive nullpad is requested
def self on_period UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK on_op UNK on_op UNK UNK on_op on_tstring_beg UNK on_tstring_end # Converts an abstract (native-endian) String#unpack format to big or # little. # @param format [String] the format string being converted # @param endianness [Symbol] either `:big` or `:little` # @return [String] the converted string
def self on_period UNK on_lparen UNK on_comma UNK on_comma UNK on_op UNK UNK on_rparen on_ignored_nl UNK on_op UNK UNK on_nl # Packs tagged strings into an aligned payload. # @param fixed_offset [Integer] the baseline offset for the first packed # string # @param alignment [Integer] the alignment value to use for packing # @param strings [Hash] the labeled strings to pack # @return [Array<String, Hash>] the packed string and labeled offsets
def self on_period UNK on_lparen num on_rparen on_ignored_nl on_const on_op on_const on_period UNK on_lparen num on_rparen on_nl end on_nl on_ignored_nl # Compares the given number to valid Mach-O magic numbers. # @param num [Integer] the number being checked # @return [Boolean] whether `num` is a valid Mach-O magic number
def self on_period UNK on_lparen num on_rparen on_ignored_nl on_lbracket on_const on_op on_const on_comma on_const on_op on_const on_rbracket on_period UNK num # Compares the given number to valid Fat magic numbers. # @param num [Integer] the number being checked # @return [Boolean] whether `num` is a valid Fat magic number
def self on_period UNK on_lparen num on_rparen on_ignored_nl num on_op on_const on_op on_const on_nl end on_nl on_ignored_nl def self on_period # Compares the given number to valid 32-bit Fat magic numbers. # @param num [Integer] the number being checked # @return [Boolean] whether `num` is a valid 32-bit fat magic number
def self on_period UNK on_lparen num on_rparen on_ignored_nl num on_op on_const on_op on_const on_nl end on_nl on_ignored_nl def self on_period # Compares the given number to valid 64-bit Fat magic numbers. # @param num [Integer] the number being checked # @return [Boolean] whether `num` is a valid 64-bit fat magic number
def self on_period UNK on_lparen num on_rparen on_ignored_nl on_lbracket on_const on_op on_const on_comma on_const on_op on_const on_rbracket on_period UNK num # Compares the given number to valid 32-bit Mach-O magic numbers. # @param num [Integer] the number being checked # @return [Boolean] whether `num` is a valid 32-bit magic number
def self on_period UNK on_lparen num on_rparen on_ignored_nl on_lbracket on_const on_op on_const on_comma on_const on_op on_const on_rbracket on_period UNK num # Compares the given number to valid 64-bit Mach-O magic numbers. # @param num [Integer] the number being checked # @return [Boolean] whether `num` is a valid 64-bit magic number
def self on_period UNK on_lparen num on_rparen on_ignored_nl on_lbracket on_const on_op on_const on_comma on_const on_op on_const on_rbracket on_period UNK num # Compares the given number to valid little-endian magic numbers. # @param num [Integer] the number being checked # @return [Boolean] whether `num` is a valid little-endian magic number
def self on_period UNK on_lparen num on_rparen on_ignored_nl on_lbracket on_const on_op on_const on_comma on_const on_op on_const on_rbracket on_period UNK num # Compares the given number to valid big-endian magic numbers. # @param num [Integer] the number being checked # @return [Boolean] whether `num` is a valid big-endian magic number
