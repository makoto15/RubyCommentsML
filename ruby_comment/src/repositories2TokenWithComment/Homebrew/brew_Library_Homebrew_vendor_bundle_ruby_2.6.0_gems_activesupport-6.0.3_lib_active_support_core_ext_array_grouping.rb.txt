on_ignored_nl UNK UNK on_nl UNK UNK on_lparen number UNK fill_with on_op UNK on_rparen on_ignored_nl if number on_period UNK on_op on_int # frozen_string_literal: true
UNK UNK on_lparen number UNK fill_with on_op UNK on_rparen on_ignored_nl if number on_period UNK on_op on_int on_nl UNK UNK UNK # Splits or iterates over the array in groups of size +number+, # padding any remaining slots with +fill_with+ unless it is +false+. # # %w(1 2 3 4 5 6 7 8 9 10).in_groups_of(3) {|group| p group} # ["1", "2", "3"] # ["4", "5", "6"] # ["7", "8", "9"] # ["10", nil, nil] # # %w(1 2 3 4 5).in_groups_of(2, '&nbsp;') {|group| p group} # ["1", "2"] # ["3", "4"] # ["5", "&nbsp;"] # # %w(1 2 3 4 5).in_groups_of(2, false) {|group| p group} # ["1", "2"] # ["3", "4"] # ["5"]
UNK on_op on_lparen number on_op UNK on_op number on_rparen on_op number on_nl UNK on_op UNK on_period UNK on_lparen UNK on_period # size % number gives how many extra we have; # subtracting from number gives how many to add; # modulo number ensures we don't add group of just fill.
UNK UNK on_lparen number UNK fill_with on_op UNK on_rparen on_ignored_nl UNK on_op UNK on_period UNK number on_nl UNK on_op UNK # Splits or iterates over the array in +number+ of groups, padding any # remaining slots with +fill_with+ unless it is +false+. # # %w(1 2 3 4 5 6 7 8 9 10).in_groups(3) {|group| p group} # ["1", "2", "3", "4"] # ["5", "6", "7", nil] # ["8", "9", "10", nil] # # %w(1 2 3 4 5 6 7 8 9 10).in_groups(3, '&nbsp;') {|group| p group} # ["1", "2", "3", "4"] # ["5", "6", "7", "&nbsp;"] # ["8", "9", "10", "&nbsp;"] # # %w(1 2 3 4 5 6 7).in_groups(3, false) {|group| p group} # ["1", "2", "3"] # ["4", "5"] # ["6", "7"]
UNK on_op UNK on_period UNK number on_nl UNK on_op UNK on_op number on_nl on_ignored_nl UNK on_op UNK UNK on_nl UNK # size.div number gives minor group size; # size % number gives how many objects need extra accommodation; # each group hold either division or division + 1 items.
UNK on_op UNK UNK on_nl UNK on_op on_int on_nl on_ignored_nl number on_period UNK UNK on_op UNK on_op on_ignored_nl UNK on_op # create a new array avoiding dup
UNK UNK on_lparen UNK on_op UNK on_rparen on_ignored_nl arr on_op UNK on_nl UNK on_op UNK UNK on_nl if UNK on_nl # Divides the array into one or more subarrays based on a delimiting +value+ # or the result of an optional block. # # [1, 2, 3, 4, 5].split(3) # => [[1, 2], [4, 5]] # (1..10).to_a.split { |i| i % 3 == 0 } # => [[1, 2], [4, 5], [7, 8], [10]]
