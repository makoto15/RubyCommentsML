UNK on_const on_op on_const on_nl on_ignored_nl def UNK on_lparen opts on_op on_lbrace on_rbrace on_rparen on_ignored_nl UNK on_lparen opts on_rparen on_nl # Executes a collection of tasks, each after a given delay. A master task # monitors the set and schedules each task for execution at the appropriate # time. Tasks are run on the global thread pool or on the supplied executor. # Each task is represented as a `ScheduledTask`. # # @see Concurrent::ScheduledTask # # @!macro monotonic_clock_warning
def UNK on_lparen opts on_op on_lbrace on_rbrace on_rparen on_ignored_nl UNK on_lparen opts on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen # Create a new set of timed tasks. # # @!macro executor_options # # @param [Hash] opts the options used to specify the executor on which to perform actions # @option opts [Executor] :executor when set use the given `Executor` instance. # Three special values are also supported: `:task` returns the global task pool, # `:operation` returns the global operation pool, and `:immediate` returns a new # `ImmediateExecutor` object.
def UNK on_lparen UNK on_comma on_op UNK on_comma on_op task on_rparen on_ignored_nl UNK on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end # Post a task to be execute run after a given delay (in seconds). If the # delay is less than 1/100th of a second the task will be immediately post # to the executor. # # @param [Float] delay the number of seconds to wait for before executing the task. # @param [Array<Object>] args the arguments passed to the task on execution. # # @yield the task to be performed. # # @return [Concurrent::ScheduledTask, false] IVar representing the task if the post # is successful; false after shutdown. # # @raise [ArgumentError] if the intended execution time is not in the future. # @raise [ArgumentError] if no block is given.
task on_period UNK on_op UNK on_op task on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_nl end on_nl on_ignored_nl UNK # may raise exception
def UNK on_nl UNK on_nl end on_nl on_ignored_nl UNK UNK on_op on_nl on_ignored_nl UNK on_nl on_ignored_nl def UNK on_lparen opts # Begin an immediate shutdown. In-progress tasks will be allowed to # complete but enqueued tasks will be dismissed and no new tasks # will be accepted. Has no additional effect if the thread pool is # not running.
def UNK on_lparen opts on_rparen on_ignored_nl on_ivar on_op on_const on_op on_const on_period UNK on_lparen UNK UNK UNK on_rparen on_nl on_ivar # Initialize the object. # # @param [Hash] opts the options to create the object with. # @!visibility private
end on_nl on_ignored_nl def UNK on_lparen task on_rparen on_ignored_nl UNK on_lbrace UNK on_lparen task on_rparen on_rbrace on_nl end on_nl on_ignored_nl # detects if Ruby has forked
def UNK on_lparen task on_rparen on_ignored_nl UNK on_lbrace UNK on_lparen task on_rparen on_rbrace on_nl end on_nl on_ignored_nl def UNK on_lparen # Post the task to the internal queue. # # @note This is intended as a callback method from ScheduledTask # only. It is not intended to be used directly. Post a task # by using the `SchedulesTask#execute` method. # # @!visibility private
def UNK on_lparen task on_rparen on_ignored_nl UNK UNK UNK UNK on_nl UNK on_nl UNK on_lparen task on_period UNK on_rparen on_op # @!visibility private
on_ivar on_period UNK on_lparen on_op UNK on_lparen UNK UNK on_rparen on_rparen UNK on_ivar on_period UNK on_op UNK on_nl on_ivar on_period # only post the process method when the queue is empty
def UNK on_lparen task on_rparen on_ignored_nl UNK on_lbrace on_ivar on_period UNK on_lparen task on_rparen on_rbrace on_nl end on_nl on_ignored_nl def # Remove the given task from the queue. # # @note This is intended as a callback method from `ScheduledTask` # only. It is not intended to be used directly. Cancel a task # by using the `ScheduledTask#cancel` method. # # @!visibility private
def UNK on_nl UNK on_nl on_ivar on_period UNK on_nl on_ivar on_period UNK on_nl UNK on_period UNK on_nl end on_nl on_ignored_nl # `ExecutorService` callback called during shutdown. # # @!visibility private
def UNK on_nl UNK UNK on_ignored_nl task on_op UNK on_lbrace on_ivar on_period UNK UNK on_ivar on_period UNK on_rbrace on_nl UNK # Run a loop and execute tasks in the scheduled order and at the approximate # scheduled time. If no tasks remain the thread will exit gracefully so that # garbage collection can occur. If there are no ready tasks it will sleep # for up to 60 seconds waiting for the next scheduled task. # # @!visibility private
task on_op UNK on_lbrace on_ivar on_period UNK on_rbrace on_nl task on_period UNK on_period UNK on_lbrace task on_period UNK on_rbrace on_nl # We need to remove the task from the queue before passing # it to the executor, to avoid race conditions where we pass # the peek'ed task to the executor and then pop a different # one that's been added in the meantime. # # Note that there's no race condition between the peek and # this pop - this pop could retrieve a different task from # the peek, but that task would be due to fire now anyway # (because @queue is a priority queue, and this thread is # the only reader, so whatever timer is at the head of the # queue now must have the same pop time, or a closer one, as # when we peeked).
