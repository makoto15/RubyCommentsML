on_ignored_nl UNK UNK UNK UNK on_nl on_ignored_nl UNK on_const on_nl UNK on_op UNK on_nl def UNK on_nl on_op on_const on_period # frozen_string_literal: true
def UNK on_nl on_op on_const on_period UNK on_op on_op on_const on_period UNK on_period UNK on_period UNK on_op on_op on_const on_period # Returns <tt>Time.zone.now.to_datetime</tt> when <tt>Time.zone</tt> or # <tt>config.time_zone</tt> are set, otherwise returns # <tt>Time.now.to_datetime</tt>.
def UNK on_nl sec on_op on_lparen min on_op on_int on_rparen on_op on_lparen hour on_op on_int on_rparen on_nl end on_nl on_ignored_nl # Returns the number of seconds since 00:00:00. # # DateTime.new(2012, 8, 29, 0, 0, 0).seconds_since_midnight # => 0 # DateTime.new(2012, 8, 29, 12, 34, 56).seconds_since_midnight # => 45296 # DateTime.new(2012, 8, 29, 23, 59, 59).seconds_since_midnight # => 86399
def UNK on_nl UNK on_period UNK on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_nl end on_nl on_ignored_nl # Returns the number of seconds until 23:59:59. # # DateTime.new(2012, 8, 29, 0, 0, 0).seconds_until_end_of_day # => 86399 # DateTime.new(2012, 8, 29, 12, 34, 56).seconds_until_end_of_day # => 41103 # DateTime.new(2012, 8, 29, 23, 59, 59).seconds_until_end_of_day # => 0
def UNK on_nl UNK on_nl end on_nl on_ignored_nl def change on_lparen options on_rparen on_ignored_nl UNK UNK on_op options on_lbracket on_symbeg # Returns the fraction of a second as a +Rational+ # # DateTime.new(2012, 8, 29, 0, 0, 0.5).subsec # => (1/2)
def change on_lparen options on_rparen on_ignored_nl UNK UNK on_op options on_lbracket on_symbeg UNK on_rbracket on_nl UNK on_const on_comma UNK UNK # Returns a new DateTime where one or more of the elements have been changed # according to the +options+ parameter. The time options (<tt>:hour</tt>, # <tt>:min</tt>, <tt>:sec</tt>) reset cascadingly, so if only the hour is # passed, then minute and sec is set to 0. If the hour and minute is passed, # then sec is set to 0. The +options+ parameter takes a hash with any of these # keys: <tt>:year</tt>, <tt>:month</tt>, <tt>:day</tt>, <tt>:hour</tt>, # <tt>:min</tt>, <tt>:sec</tt>, <tt>:offset</tt>, <tt>:start</tt>. # # DateTime.new(2012, 8, 29, 22, 35, 0).change(day: 1) # => DateTime.new(2012, 8, 1, 22, 35, 0) # DateTime.new(2012, 8, 29, 22, 35, 0).change(year: 1981, day: 1) # => DateTime.new(1981, 8, 1, 22, 35, 0) # DateTime.new(2012, 8, 29, 22, 35, 0).change(year: 1981, hour: 0) # => DateTime.new(1981, 8, 29, 0, 0, 0)
def UNK on_lparen options on_rparen on_ignored_nl UNK options on_lbracket on_symbeg UNK on_rbracket on_period UNK on_nl options on_lbracket on_symbeg UNK on_rbracket # Uses Date to provide precise Time calculations for years, months, and days. # The +options+ parameter takes a hash with any of these keys: <tt>:years</tt>, # <tt>:months</tt>, <tt>:weeks</tt>, <tt>:days</tt>, <tt>:hours</tt>, # <tt>:minutes</tt>, <tt>:seconds</tt>.
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_lparen on_op UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen # Returns a new DateTime representing the time a number of seconds ago. # Do not use this method in combination with x.months, use months_ago instead!
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op on_const on_lparen UNK on_comma on_int on_rparen on_nl end on_nl alias on_symbeg UNK # Returns a new DateTime representing the time a number of seconds since the # instance time. Do not use this method in combination with x.months, use # months_since instead!
def UNK on_nl change on_lparen on_label on_int on_rparen on_nl end on_nl alias on_symbeg UNK on_symbeg UNK on_nl alias on_symbeg UNK # Returns a new DateTime representing the start of the day (0:00).
def middle_of_day on_nl change on_lparen on_label on_int on_rparen on_nl end on_nl alias on_symbeg UNK on_symbeg middle_of_day on_nl alias on_symbeg UNK # Returns a new DateTime representing the middle of the day (12:00)
def UNK on_nl change on_lparen on_label on_int on_comma on_label on_int on_comma on_label on_int on_comma on_label on_const on_lparen on_int on_comma on_int # Returns a new DateTime representing the end of the day (23:59:59).
def UNK on_nl change on_lparen on_label on_int on_rparen on_nl end on_nl alias on_symbeg UNK on_symbeg UNK on_nl on_ignored_nl def UNK # Returns a new DateTime representing the start of the hour (hh:00:00).
def UNK on_nl change on_lparen on_label on_int on_comma on_label on_int on_comma on_label on_const on_lparen on_int on_comma on_int on_rparen on_rparen on_nl # Returns a new DateTime representing the end of the hour (hh:59:59).
def UNK on_nl change on_lparen on_label on_int on_rparen on_nl end on_nl alias on_symbeg UNK on_symbeg UNK on_nl on_ignored_nl def UNK # Returns a new DateTime representing the start of the minute (hh:mm:00).
def UNK on_nl change on_lparen on_label on_int on_comma on_label on_const on_lparen on_int on_comma on_int on_rparen on_rparen on_nl end on_nl alias # Returns a new DateTime representing the end of the minute (hh:mm:59).
def UNK on_lparen UNK on_op UNK on_rparen on_ignored_nl utc on_op UNK on_lparen on_int on_rparen on_nl on_ignored_nl on_const on_period utc on_lparen # Returns a <tt>Time</tt> instance of the simultaneous time in the system timezone.
def utc on_nl utc on_op UNK on_lparen on_int on_rparen on_nl on_ignored_nl on_const on_period utc on_lparen on_ignored_nl utc on_period UNK on_comma # Returns a <tt>Time</tt> instance of the simultaneous time in the UTC timezone. # # DateTime.civil(2005, 2, 21, 10, 11, 12, Rational(-6, 24)) # => Mon, 21 Feb 2005 10:11:12 -0600 # DateTime.civil(2005, 2, 21, 10, 11, 12, Rational(-6, 24)).utc # => Mon, 21 Feb 2005 16:11:12 UTC
def UNK on_nl UNK on_op on_int on_nl end on_nl on_ignored_nl def UNK on_nl on_lparen UNK on_op on_int on_rparen on_period UNK # Returns +true+ if <tt>offset == 0</tt>.
def UNK on_nl on_lparen UNK on_op on_int on_rparen on_period UNK on_nl end on_nl on_ignored_nl def on_op on_lparen UNK on_rparen on_ignored_nl # Returns the offset value in seconds.
def on_op on_lparen UNK on_rparen on_ignored_nl UNK UNK on_period UNK on_symbeg UNK on_nl UNK UNK on_period UNK UNK UNK on_nl # Layers additional behavior on DateTime#<=> so that Time and # ActiveSupport::TimeWithZone instances can be compared with a DateTime.
