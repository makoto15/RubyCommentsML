UNK UNK UNK UNK on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl def UNK # frozen_string_literal: false
UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl def UNK parent on_op UNK on_nl UNK on_lparen parent on_rparen on_nl # A parent has children, and has methods for accessing them. The Parent # class is never encountered except as the superclass for some other # object.
def UNK parent on_op UNK on_nl UNK on_lparen parent on_rparen on_nl on_ivar on_op on_lbracket on_rbracket on_nl end on_nl on_ignored_nl def # Constructor # @param parent if supplied, will be set as the parent of this object
def on_op on_lparen index on_rparen on_ignored_nl on_ivar on_lbracket index on_rbracket on_nl end on_nl on_ignored_nl UNK on_symbeg UNK on_symbeg UNK on_nl # Fetches a child at a given index # @param index the Integer index of the child to fetch
def on_op on_lparen on_op UNK on_rparen on_ignored_nl UNK on_lbracket on_op on_int on_rbracket on_period parent on_op self on_nl on_ivar on_lbracket on_op # Set an index entry. See Array.[]= # @param index the index of the element to set # @param opt either the object to set, or an Integer length # @param child if opt is an Integer, this is the child to set # @return the parent (self)
def UNK on_lparen child1 on_comma child2 on_rparen on_ignored_nl if child1 on_period UNK on_const on_nl child1 on_op on_const on_period UNK on_lparen # Inserts an child before another child # @param child1 this is either an xpath or an Element. If an Element, # child2 will be inserted before child1 in the child list of the parent. # If an xpath, child2 will be inserted before the first child to match # the xpath. # @param child2 the child to insert # @return the parent (self)
def UNK on_lparen child1 on_comma child2 on_rparen on_ignored_nl if child1 on_period UNK on_const on_nl child1 on_op on_const on_period UNK on_lparen # Inserts an child after another child # @param child1 this is either an xpath or an Element. If an Element, # child2 will be inserted after child1 in the child list of the parent. # If an xpath, child2 will be inserted after the first child to match # the xpath. # @param child2 the child to insert # @return the parent (self)
def index on_lparen child on_rparen on_ignored_nl UNK on_op on_op on_int on_nl on_ivar on_period UNK UNK on_op UNK on_op UNK on_op # Fetches the index of a given child # @param child the child to get the index of # @return the index of the child, or nil if the object is not a child # of this parent.
def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl UNK on_symbeg UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen # @return the number of children of this parent
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl on_ivar on_period UNK UNK on_op UNK on_op UNK on_period UNK on_lparen UNK # Replaces one child with another, making sure the nodelist is correct # @param to_replace the child to replace (must be a Child) # @param replacement the child to insert into the nodelist (must be a # Child)
def UNK on_nl UNK on_op UNK on_lparen on_rparen on_nl UNK UNK on_op child on_op on_ignored_nl if child on_period UNK on_const # Deeply clones this object. This creates a complete duplicate of this # Parent, including all descendants.
