on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl def self on_period UNK on_lparen python on_rparen # frozen_string_literal: true
UNK on_const on_nl UNK on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_const on_op on_const on_op on_const on_period UNK on_lparen # Mixin module for {Formula} adding shebang rewrite features.
def UNK on_lparen UNK on_rparen on_ignored_nl on_const on_op on_const on_op on_const on_period UNK on_lparen on_ignored_nl on_regexp_beg on_tstring_content on_regexp_end on_comma on_ignored_nl # @private
UNK on_comma on_ignored_nl on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen formula on_op self on_rparen on_ignored_nl UNK on_op formula on_period # the length of "#! /usr/bin/env pythonx.yyy$"
UNK on_const on_nl def self on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK do on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end # Mixin module for {Formula} adding virtualenv support features.
def UNK on_lparen UNK on_comma python on_op on_tstring_beg on_tstring_content on_tstring_end on_comma formula on_op self on_rparen on_ignored_nl on_const on_period UNK on_nl # Instantiates, creates, and yields a {Virtualenv} object for use from # {Formula#install}, which provides helper methods for instantiating and # installing packages into a Python virtualenv. # @param venv_root [Pathname, String] the path to the root of the virtualenv # (often `libexec/"venv"`) # @param python [String] which interpreter to use (e.g. "python" # or "python2") # @param formula [Formula] the active Formula # @return [Virtualenv] a {Virtualenv} instance
UNK on_op formula on_period UNK on_nl UNK on_op UNK on_period UNK do on_op UNK on_op on_ignored_nl next if UNK on_period # Find any Python bindings provided by recursive dependencies
def UNK on_lparen python on_rparen on_ignored_nl UNK UNK if UNK on_period UNK on_lparen python on_rparen on_nl on_ignored_nl on_lparen UNK on_period # Returns true if a formula option for the specified python is currently # active or if the specified python is required by the formula. Valid # inputs are "python", "python2", :python, and :python2. Note that # "with-python", "without-python", "with-python@2", and "without-python@2" # formula options are handled correctly even if not associated with any # corresponding depends_on statement. # @api private
def UNK on_lparen UNK on_op on_lbrace on_rbrace on_rparen on_ignored_nl python on_op UNK on_lbracket on_symbeg UNK on_rbracket on_nl if python on_period # Helper method for the common case of installing a Python application. # Creates a virtualenv in `libexec`, installs all `resource`s defined # on the formula, and then installs the formula. An options hash may be # passed (e.g., `:using => "python"`) to override the default, guessed # formula preference for python or python@x.y, or to resolve an ambiguous # case where it's not clear whether python or python@x.y should be the # default guess.
UNK on_const on_nl def UNK on_lparen formula on_comma UNK on_comma python on_rparen on_ignored_nl on_ivar on_op formula on_nl on_ivar on_op on_const # Convenience wrapper for creating and installing packages into Python # virtualenvs.
def UNK on_lparen formula on_comma UNK on_comma python on_rparen on_ignored_nl on_ivar on_op formula on_nl on_ivar on_op on_const on_period UNK on_lparen # Initializes a Virtualenv instance. This does not create the virtualenv # on disk; {#create} does that. # @param formula [Formula] the active Formula # @param venv_root [Pathname, String] the path to the root of the # virtualenv # @param python [String] which interpreter to use, i.e. "python" or # "python2"
def UNK on_nl UNK if on_lparen on_ivar on_op on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period UNK on_nl on_ignored_nl on_ivar on_period UNK on_lparen # Obtains a copy of the virtualenv library and creates a new virtualenv # on disk. # @return [void]
on_ivar on_period UNK do on_op UNK on_op on_ignored_nl next unless UNK on_period UNK on_nl next unless on_lparen UNK on_op UNK # Robustify symlinks to survive python patch upgrades
def UNK on_lparen targets on_rparen on_ignored_nl targets on_op on_lbracket targets on_rbracket unless targets on_period UNK on_const on_nl targets on_period UNK # Installs packages represented by `targets` into the virtualenv. # @param targets [String, Pathname, Resource, # Array<String, Pathname, Resource>] (A) token(s) passed to pip # representing the object to be installed. This can be a directory # containing a setup.py, a {Resource} which will be staged and # installed, or a package identifier to be fetched from PyPI. # Multiline strings are allowed and treated as though they represent # the contents of a `requirements.txt`. # @return [void]
def UNK on_lparen targets on_rparen on_ignored_nl UNK on_op on_const on_lbracket on_ivar on_op on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period UNK on_nl on_ignored_nl # Installs packages represented by `targets` into the virtualenv, but # unlike {#pip_install} also links new scripts to {Formula#bin}. # @param (see #pip_install) # @return (see #pip_install)
