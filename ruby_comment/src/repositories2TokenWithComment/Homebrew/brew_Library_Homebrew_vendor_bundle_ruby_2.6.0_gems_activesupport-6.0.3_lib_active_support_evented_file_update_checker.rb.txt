on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl # frozen_string_literal: true
UNK on_const def UNK on_lparen UNK on_comma dirs on_op on_lbrace on_rbrace on_comma on_op UNK on_rparen on_ignored_nl UNK UNK on_nl UNK # Allows you to "listen" to changes in a file system. # The evented file updater does not hit disk when checking for updates # instead it uses platform specific file system events to trigger a change # in state. # # The file checker takes an array of files to watch or a hash specifying directories # and file extensions to watch. It also takes a block that is called when # EventedFileUpdateChecker#execute is run or when EventedFileUpdateChecker#execute_if_updated # is run and there have been changes to the file system. # # Note: Forking will cause the first call to `updated?` to return `true`. # # Example: # # checker = ActiveSupport::EventedFileUpdateChecker.new(["/tmp/foo"]) { puts "changed" } # checker.updated? # # => false # checker.execute_if_updated # # => nil # # FileUtils.touch("/tmp/foo") # # checker.updated? # # => true # checker.execute_if_updated # # => "changed" #
def UNK on_lparen UNK on_comma dirs on_op on_lbrace on_rbrace on_comma on_op UNK on_rparen on_ignored_nl UNK UNK on_nl UNK on_const on_comma #:nodoc: all
UNK do on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_const on_op UNK on_nl UNK on_const on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma # Loading listen triggers warnings. These are originated by a legit # usage of attr_* macros for private attributes, but adds a lot of noise # to our test suite. Thus, we lazy load it and disable warnings locally.
def UNK on_lparen UNK on_rparen on_ignored_nl UNK if UNK on_period UNK on_nl on_ignored_nl lcsp on_op on_const on_period UNK on_lparen UNK # Given a collection of Pathname objects returns the longest subpath # common to all of them, or +nil+ if there is none.
UNK on_nl UNK on_ignored_nl lcsp on_op lcsp on_period UNK on_nl end on_nl end on_nl end on_nl on_ignored_nl lcsp on_nl end # If we get here a root directory is not an ascendant of path. # This may happen if there are paths in different drives on # Windows.
def UNK on_lparen dir on_rparen on_ignored_nl dir on_period UNK do on_op UNK on_op on_ignored_nl UNK UNK if UNK on_period UNK # Returns the deepest existing ascendant, which could be the argument itself.
def UNK on_lparen dirs on_rparen on_ignored_nl UNK dirs if dirs on_period UNK on_op UNK on_nl on_ignored_nl UNK on_op dirs on_period # Filters out directories which are descendants of others in the collection (stable).
dirs on_op UNK on_nl end on_nl on_ignored_nl UNK on_nl def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK on_op UNK # Array#- preserves order.
