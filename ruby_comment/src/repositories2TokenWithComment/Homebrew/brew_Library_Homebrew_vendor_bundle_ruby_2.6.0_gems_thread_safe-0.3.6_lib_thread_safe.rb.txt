on_const on_op on_const on_period UNK on_nl on_ignored_nl UNK UNK UNK on_const UNK on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK # Various classes within allows for +nil+ values to be stored, so a special +NULL+ token is required to indicate the "nil-ness".
UNK on_const on_op on_op on_const on_nl UNK on_const on_op on_const on_nl end on_nl on_ignored_nl UNK on_const on_op on_op on_const on_nl # A thread-safe subclass of Array. This version locks # against the object itself for every method call, # ensuring only one thread can be reading or writing # at a time. This includes iteration methods like # #each.
UNK on_const on_op on_op on_const on_nl UNK on_const on_op on_const on_nl end on_nl UNK on_op UNK UNK on_const UNK on_op # A thread-safe subclass of Hash. This version locks # against the object itself for every method call, # ensuring only one thread can be reading or writing # at a time. This includes iteration methods like # #each.
on_const on_op on_op on_const on_nl on_const on_op on_op on_const on_nl UNK UNK UNK on_const UNK on_op on_const on_op on_tstring_beg on_tstring_content # Because MRI never runs code in parallel, the existing # non-thread-safe structures should usually work fine.
end on_nl on_ignored_nl UNK UNK on_period UNK on_nl UNK on_op UNK on_nl UNK on_period UNK UNK UNK UNK UNK on_nl # avoid double initialisation
