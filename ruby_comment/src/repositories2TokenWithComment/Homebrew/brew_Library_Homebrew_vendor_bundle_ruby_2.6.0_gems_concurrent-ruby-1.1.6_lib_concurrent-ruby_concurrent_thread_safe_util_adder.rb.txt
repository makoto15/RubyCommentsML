UNK UNK on_nl on_ignored_nl UNK UNK on_nl on_ignored_nl UNK UNK on_op UNK on_nl UNK UNK on_lparen x on_rparen on_ignored_nl UNK # @!visibility private
UNK UNK on_nl on_ignored_nl UNK UNK on_op UNK on_nl UNK UNK on_lparen x on_rparen on_ignored_nl UNK on_lparen UNK on_op UNK # @!visibility private
UNK UNK on_op UNK on_nl UNK UNK on_lparen x on_rparen on_ignored_nl UNK on_lparen UNK on_op UNK on_rparen on_op on_op UNK # A Ruby port of the Doug Lea's jsr166e.LondAdder class version 1.8 # available in public domain. # # Original source code available here: # http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/jsr166e/LongAdder.java?revision=1.8 # # One or more variables that together maintain an initially zero # sum. When updates (method +add+) are contended across threads, # the set of variables may grow dynamically to reduce contention. # Method +sum+ returns the current total combined across the # variables maintaining the sum. # # This class is usually preferable to single +Atomic+ reference when # multiple threads update a common sum that is used for purposes such # as collecting statistics, not for fine-grained synchronization # control. Under low update contention, the two classes have similar # characteristics. But under high contention, expected throughput of # this class is significantly higher, at the expense of higher space # consumption. # # @!visibility private
UNK UNK on_lparen x on_rparen on_ignored_nl UNK on_lparen UNK on_op UNK on_rparen on_op on_op UNK UNK on_op UNK on_op UNK # Adds the given value.
UNK UNK on_nl x on_op UNK on_nl UNK UNK on_op UNK on_nl UNK UNK UNK UNK on_op UNK on_op on_ignored_nl # Returns the current sum. The returned value is _NOT_ an # atomic snapshot: Invocation in the absence of concurrent # updates returns an accurate result, but concurrent updates that # occur while the sum is being calculated might not be # incorporated.
