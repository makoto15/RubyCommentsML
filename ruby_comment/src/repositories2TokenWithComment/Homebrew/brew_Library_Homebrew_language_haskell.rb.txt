on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl def UNK on_lparen options on_op UNK UNK on_rparen on_ignored_nl UNK # frozen_string_literal: true
UNK on_op on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op UNK on_nl on_ignored_nl UNK # pretend HOME is elsewhere, so that ~/.cabal is kept as untouched # as possible (except for ~/.cabal/setup-exe-cache) # https://github.com/haskell/cabal/issues/1234
UNK on_op on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl on_const on_period UNK on_tstring_beg on_tstring_content on_tstring_end on_comma UNK on_nl on_ignored_nl UNK # make available any tools that will be installed in the sandbox
UNK on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end UNK on_lparen UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period UNK on_nl on_ignored_nl # avoid updating the cabal package database more than once
UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl on_ignored_nl UNK UNK UNK options # remove the sandbox and all build products
UNK UNK UNK options on_lbracket on_symbeg UNK on_rbracket on_nl on_ignored_nl on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op UNK on_nl on_const # avoid installing any Haskell libraries, as a matter of policy
on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op UNK on_nl on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op UNK on_nl end on_nl # restore the environment
UNK on_op on_lparen on_const on_period UNK on_op UNK on_rparen on_op UNK on_op on_const on_period UNK on_nl on_ignored_nl UNK on_tstring_beg on_tstring_content # cabal hardcodes 64 as the maximum number of parallel jobs # https://github.com/Homebrew/legacy-homebrew/issues/49509
UNK on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content UNK UNK UNK on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma # cabal-install's dependency-resolution backtracking strategy can easily # need more than the default 2,000 maximum number of "backjumps," since # Hackage is a fast-moving, rolling-release target. The highest known # needed value by a formula at this time (February 2016) was 43,478 for # git-annex, so 100,000 should be enough to avoid most gratuitous # backjumps build failures.
UNK on_period UNK UNK on_op UNK on_op UNK UNK UNK on_nl on_ignored_nl UNK on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl # install tools sequentially, as some tools can depend on other tools
UNK on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl end on_nl on_ignored_nl def UNK on_lparen on_op args on_comma on_op options on_rparen # unregister packages installed as dependencies for the tools, so # that they can't cause dependency conflicts for the main package
flags on_op on_tstring_beg on_tstring_content UNK options on_lbracket on_symbeg flags on_rbracket on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen UNK on_tstring_end UNK # if we have build flags, we have to pass them to cabal install to resolve the necessary # dependencies, and call cabal configure afterwards to set the flags again for compile
UNK on_tstring_beg on_tstring_content on_tstring_end on_comma on_op UNK on_nl on_ignored_nl UNK flags UNK flags on_period UNK on_nl on_ignored_nl UNK on_tstring_beg on_tstring_content # install dependencies in the sandbox
UNK flags UNK flags on_period UNK on_nl on_ignored_nl UNK on_tstring_beg on_tstring_content UNK UNK UNK on_tstring_end on_comma on_op args on_nl on_ignored_nl # call configure if build flags are set
UNK on_tstring_beg on_tstring_content UNK UNK UNK on_tstring_end on_comma on_op args on_nl on_ignored_nl UNK UNK UNK on_nl end on_nl end on_nl # install the main package in the destination dir
