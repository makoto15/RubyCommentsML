UNK on_const on_nl UNK on_const on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl on_const on_op UNK on_lparen on_const on_op on_const on_rparen # A fixed size array with volatile (synchronized, thread safe) getters/setters. # Mixes in Ruby's `Enumerable` module for enhanced search, sort, and traversal. # # @example # tuple = Concurrent::Tuple.new(16) # # tuple.set(0, :foo) #=> :foo | volatile write # tuple.get(0) #=> :foo | volatile read # tuple.compare_and_set(0, :foo, :bar) #=> true | strong CAS # tuple.cas(0, :foo, :baz) #=> false | strong CAS # tuple.get(0) #=> :bar | volatile read # # @see https://en.wikipedia.org/wiki/Tuple Tuple entry at Wikipedia # @see http://www.erlang.org/doc/reference_manual/data_types.html#id70396 Erlang Tuple # @see http://ruby-doc.org/core-2.2.2/Enumerable.html Enumerable
UNK on_symbeg UNK on_nl on_ignored_nl on_const on_op UNK on_lparen on_const on_op on_const on_rparen on_op on_const on_op on_const on_op on_op on_const # The (fixed) size of the tuple.
on_const on_op UNK on_lparen on_const on_op on_const on_rparen on_op on_const on_op on_const on_op on_op on_const on_nl UNK on_symbeg on_const on_nl # @!visibility private
UNK UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl on_ivar on_op UNK on_op on_const on_period UNK on_lparen UNK on_rparen # Create a new tuple of the given size. # # @param [Integer] size the number of elements in the tuple
UNK UNK on_lparen i on_rparen on_ignored_nl UNK UNK UNK i on_op on_ivar on_op i on_op UNK on_nl on_ivar UNK i # Get the value of the element at the given index. # # @param [Integer] i the index from which to retrieve the value # @return [Object] the value at the given index or nil if the index is out of bounds
UNK UNK on_lparen i on_comma UNK on_rparen on_ignored_nl UNK UNK UNK i on_op on_ivar on_op i on_op UNK on_nl on_ivar # Set the element at the given index to the given value # # @param [Integer] i the index for the element to set # @param [Object] value the value to set at the given index # # @return [Object] the new value of the element at the given index or nil if the index is out of bounds
UNK UNK on_lparen i on_comma UNK on_comma UNK on_rparen on_ignored_nl UNK UNK UNK i on_op on_ivar on_op i on_op UNK # Set the value at the given index to the new value if and only if the current # value matches the given old value. # # @param [Integer] i the index for the element to set # @param [Object] old_value the value to compare against the current value # @param [Object] new_value the value to set at the given index # # @return [Boolean] true if the value at the given element was set else false
UNK UNK on_nl on_ivar on_period UNK UNK on_op UNK on_op UNK UNK on_period UNK UNK on_nl end on_nl end on_nl # Calls the given block once for each element in self, passing that element as a parameter. # # @yieldparam [Object] ref the `Concurrent::AtomicReference` object at the current index
