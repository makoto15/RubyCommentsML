on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK UNK version on_comma # frozen_string_literal: true
UNK UNK v on_op on_lparen on_op UNK on_period UNK on_op UNK on_period version on_op on_const on_op on_const on_period version on_rparen # Only return an SDK older than the OS version if it was specifically requested
UNK on_op on_const on_period UNK sdk_prefix on_nl UNK UNK on_nl UNK on_ignored_nl UNK on_op UNK UNK on_nl on_ignored_nl on_const on_lbracket # Bail out if there is no SDK prefix at all
sdk_prefix on_op on_tstring_beg UNK on_const on_period UNK UNK on_tstring_content on_tstring_end on_nl UNK on_op on_const on_period UNK on_lparen on_const on_period UNK # Xcode.prefix is pretty smart, so let's look inside to find the sdk
UNK on_op on_const on_period UNK on_lparen on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period # Finally query Xcode itself (this is slow, so check it last)
def sdk_prefix on_nl on_ivar on_op UNK on_ignored_nl UNK on_op on_const on_period UNK on_nl on_tstring_beg on_tstring_end on_nl UNK on_ignored_nl on_tstring_beg UNK # While CLT SDKs existed prior to Xcode 10, those packages also # installed a traditional Unix-style header layout and we prefer # using that # As of Xcode 10, the Unix-style headers are installed via a # separate package, so we can't rely on their being present. # This will only look up SDKs on Xcode 10 or newer, and still # return nil SDKs for Xcode 9 and older.
