UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl # frozen_string_literal: false
UNK on_const on_nl UNK on_const on_nl on_const on_op on_lbrace on_rbrace on_nl on_ignored_nl UNK on_const on_op UNK on_lparen element on_comma path # Wrapper class. Use this class to access the XPath functions.
on_const on_op on_lbrace on_rbrace on_nl on_ignored_nl UNK on_const on_op UNK on_lparen element on_comma path on_op nil on_comma namespaces on_op nil # A base Hash object, supposing to be used when initializing a # default empty namespaces set, but is currently unused. # TODO: either set the namespaces=EMPTY_HASH, or deprecate this.
UNK on_const on_op UNK on_lparen element on_comma path on_op nil on_comma namespaces on_op nil on_comma variables on_op on_lbrace on_rbrace on_comma # Finds and returns the first node that matches the supplied xpath. # element:: # The context element # path:: # The xpath to search for. If not supplied or nil, returns the first # node matching '*'. # namespaces:: # If supplied, a Hash which defines a namespace mapping. # variables:: # If supplied, a Hash which maps $variables in the query # to values. This can be used to avoid XPath injection attacks # or to automatically handle escaping string values. # # XPath.first( node ) # XPath.first( doc, "//b"} ) # XPath.first( node, "a/x:b", { "x"=>"http://doofus" } ) # XPath.first( node, '/book/publisher/text()=$publisher', {}, {"publisher"=>"O'Reilly"})
UNK on_const on_op UNK on_lparen element on_comma path on_op nil on_comma namespaces on_op nil on_comma variables on_op on_lbrace on_rbrace on_comma # Iterates over nodes that match the given path, calling the supplied # block with the match. # element:: # The context element # path:: # The xpath to search for. If not supplied or nil, defaults to '*' # namespaces:: # If supplied, a Hash which defines a namespace mapping # variables:: # If supplied, a Hash which maps $variables in the query # to values. This can be used to avoid XPath injection attacks # or to automatically handle escaping string values. # # XPath.each( node ) { |el| ... } # XPath.each( node, '/*[@attr='v']' ) { |el| ... } # XPath.each( node, 'ancestor::x' ) { |el| ... } # XPath.each( node, '/book/publisher/text()=$publisher', {}, {"publisher"=>"O'Reilly"}) \ # {|el| ... }
UNK on_const on_op UNK on_lparen element on_comma path on_op nil on_comma namespaces on_op nil on_comma variables on_op on_lbrace on_rbrace on_comma # Returns an array of nodes matching a given XPath.
