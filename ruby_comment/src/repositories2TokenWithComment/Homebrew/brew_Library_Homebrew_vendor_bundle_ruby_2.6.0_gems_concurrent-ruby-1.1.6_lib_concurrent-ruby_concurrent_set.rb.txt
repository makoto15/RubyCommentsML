on_ignored_nl on_ignored_nl on_const on_op UNK on_ignored_nl UNK on_const on_period UNK on_nl on_op on_const on_nl on_ignored_nl UNK on_const on_period UNK on_nl # @!macro concurrent_set # # A thread-safe subclass of Set. This version locks against the object # itself for every method call, ensuring only one thread can be reading # or writing at a time. This includes iteration methods like `#each`. # # @note `a += b` is **not** a **thread-safe** operation on # `Concurrent::Set`. It reads Set `a`, then it creates new `Concurrent::Set` # which is union of `a` and `b`, then it writes the union to `a`. # The read and write are independent operations they do not form a single atomic # operation therefore when two `+=` operations are executed concurrently updates # may be lost. Use `#merge` instead. # # @see http://ruby-doc.org/stdlib-2.4.0/libdoc/set/rdoc/Set.html Ruby standard library `Set`
on_const on_op UNK on_ignored_nl UNK on_const on_period UNK on_nl on_op on_const on_nl on_ignored_nl UNK on_const on_period UNK on_nl require on_tstring_beg # @!macro internal_implementation_note
on_op on_const on_nl on_ignored_nl UNK on_const on_period UNK on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_op on_op on_const # Because MRI never runs code in parallel, the existing # non-thread-safe structures should usually work fine.
UNK on_const on_op on_const on_nl end on_nl end on_nl on_ignored_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP # @!macro concurrent_set
