on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl # frozen_string_literal: true
keg_files_dylibs on_lbracket file on_rbracket on_op on_ignored_nl file on_period UNK on_lparen on_label on_symbeg on_const on_rparen on_nl end on_nl end on_nl on_ignored_nl # weakly loaded dylibs may not actually exist on disk, so skip them # when checking for broken linkage
def UNK on_lparen dylib on_rparen on_ignored_nl on_lbracket on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_rbracket on_period # Whether or not dylib is a harmless broken link, meaning that it's # okay to skip (and not report) as broken.
on_lbracket on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_rbracket on_period include? on_lparen dylib on_rparen on_nl end # libgcc_s_* is referenced by programs that use the Java Service Wrapper, # and is harmless on x86(_64) machines
def display_items on_lparen UNK on_comma things on_comma on_label UNK on_rparen on_ignored_nl UNK if things on_period empty? on_nl on_ignored_nl UNK on_op # Display a list of things. # Things may either be an array, or a hash of (label -> array)
