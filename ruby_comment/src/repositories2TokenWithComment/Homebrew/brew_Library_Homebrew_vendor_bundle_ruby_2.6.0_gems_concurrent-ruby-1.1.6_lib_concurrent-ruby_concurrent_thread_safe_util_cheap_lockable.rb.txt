UNK on_const on_nl on_ignored_nl UNK on_const on_nl on_ignored_nl UNK on_const on_nl UNK on_nl UNK on_op UNK on_lparen on_const on_rparen on_op # @!visibility private
UNK on_const on_nl on_ignored_nl UNK on_const on_nl UNK on_nl UNK on_op UNK on_lparen on_const on_rparen on_op on_const on_nl UNK UNK # @!visibility private
UNK on_const on_nl UNK on_nl UNK on_op UNK on_lparen on_const on_rparen on_op on_const on_nl UNK UNK on_op on_tstring_beg on_tstring_content on_tstring_end # Provides a cheapest possible (mainly in terms of memory usage) +Mutex+ # with the +ConditionVariable+ bundled in. # # Usage: # class A # include CheapLockable # # def do_exlusively # cheap_synchronize { yield } # end # # def wait_for_something # cheap_synchronize do # cheap_wait until resource_available? # do_something # cheap_broadcast # wake up others # end # end # end # # @!visibility private
def UNK on_nl on_const on_period UNK on_lparen self on_rparen on_nl UNK on_ignored_nl UNK on_nl UNK on_ignored_nl on_const on_period UNK on_lparen # Making use of the Rubinius' ability to lock via object headers to avoid the overhead of the extra Mutex objects.
waiters on_period UNK on_op UNK UNK waiters on_period UNK on_nl end on_nl end on_nl on_ignored_nl self on_nl end on_nl on_ignored_nl # we timed out, but got signaled afterwards (e.g. while waiting to # acquire @lock), so pass that signal on to the next waiter
UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl def UNK on_nl on_const on_period UNK on_lparen self on_rparen on_period UNK UNK UNK UNK # Use Java's native synchronized (this) { wait(); notifyAll(); } to avoid the overhead of the extra Mutex objects
def UNK on_nl UNK UNK on_lparen UNK on_op UNK on_rparen on_op UNK on_lparen UNK UNK UNK on_op on_const on_period UNK # Non-reentrant Mutex#syncrhonize
def UNK on_nl UNK on_op UNK on_op on_const on_period UNK on_nl UNK on_period UNK on_lparen UNK on_rparen on_nl end on_nl # Releases this object's +cheap_synchronize+ lock and goes to sleep waiting for other threads to +cheap_broadcast+, reacquires the lock on wakeup. # Must only be called in +cheap_broadcast+'s block.
def UNK on_nl UNK UNK on_op UNK on_nl UNK on_period UNK on_nl end on_nl end on_nl end on_nl end on_nl # Wakes up all threads waiting for this object's +cheap_synchronize+ lock. # Must only be called in +cheap_broadcast+'s block.
