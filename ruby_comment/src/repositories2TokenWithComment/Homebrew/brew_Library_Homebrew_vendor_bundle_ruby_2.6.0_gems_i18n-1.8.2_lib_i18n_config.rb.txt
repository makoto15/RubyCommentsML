on_ignored_nl UNK UNK UNK UNK on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl def locale on_nl UNK on_lparen UNK on_rparen # frozen_string_literal: true
def locale on_nl UNK on_lparen UNK on_rparen on_op UNK on_op nil on_op UNK on_op UNK on_nl end on_nl on_ignored_nl def # The only configuration value that is not global and scoped to thread is :locale. # It defaults to the default_locale.
def UNK on_lparen locale on_rparen on_ignored_nl on_const on_period UNK on_lparen locale on_rparen on_nl UNK on_op locale on_op locale on_period UNK # Sets the current locale pseudo-globally, i.e. in the Thread.current hash.
def UNK on_nl on_cvar on_op on_const on_op on_const on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl # Returns the current backend. Defaults to +Backend::Simple+.
def UNK on_lparen UNK on_rparen on_ignored_nl on_cvar on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_cvar on_op UNK UNK # Sets the current backend. Used to set a custom backend.
def UNK on_nl on_cvar on_op UNK UNK on_nl end on_nl on_ignored_nl def UNK on_lparen locale on_rparen on_ignored_nl on_const on_period UNK # Returns the current default locale. Defaults to :'en'
def UNK on_lparen locale on_rparen on_ignored_nl on_const on_period UNK on_lparen locale on_rparen on_nl on_cvar on_op locale on_op locale on_period UNK # Sets the current default locale. Used to set a custom default locale.
def UNK on_nl on_cvar on_op nil on_nl on_cvar on_op UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_cvar on_op # Returns an array of locales for which translations are available. # Unless you explicitely set these through I18n.available_locales= # the call will be delegated to the backend.
def UNK on_cvar on_op UNK on_period UNK on_lparen on_const on_period UNK on_rparen UNK on_op UNK UNK locale on_op on_ignored_nl UNK # Caches the available locales list as both strings and symbols in a Set, so # that we can have faster lookups to do the available locales enforce check.
on_cvar on_op UNK on_period UNK on_lparen on_const on_period UNK on_rparen UNK on_op UNK UNK locale on_op on_ignored_nl UNK on_op locale #:nodoc:
def UNK on_lparen UNK on_rparen on_ignored_nl on_cvar on_op on_const on_lparen UNK on_rparen on_period UNK UNK on_op locale on_op locale on_period # Sets the available locales.
def UNK on_nl on_lparen on_op on_op UNK on_lparen on_cvar on_rparen on_op on_op on_op on_cvar on_rparen on_nl end on_nl on_ignored_nl def # Returns true if the available_locales have been initialized
def UNK on_cvar on_op nil on_nl end on_nl on_ignored_nl def UNK on_nl on_cvar on_op UNK UNK UNK on_nl end on_nl # Clears the available locales set so it can be recomputed again after I18n # gets reloaded.
on_cvar on_op nil on_nl end on_nl on_ignored_nl def UNK on_nl on_cvar on_op UNK UNK UNK on_nl end on_nl on_ignored_nl def #:nodoc:
def UNK on_nl on_cvar on_op UNK UNK UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_cvar on_op # Returns the current default scope separator. Defaults to '.'
def UNK on_lparen UNK on_rparen on_ignored_nl on_cvar on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_cvar on_op on_const on_period # Sets the current default scope separator.
def UNK on_nl on_cvar on_op on_const on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_cvar on_op # Returns the current exception handler. Defaults to an instance of # I18n::ExceptionHandler.
def UNK on_lparen UNK on_rparen on_ignored_nl on_cvar on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_cvar on_op UNK UNK # Sets the exception handler.
def UNK on_nl on_cvar on_op UNK UNK on_op UNK UNK UNK UNK UNK on_op on_ignored_nl UNK on_const on_period UNK on_lparen # Returns the current handler for situations when interpolation argument # is missing. MissingInterpolationArgument will be raised by default.
def UNK on_lparen UNK on_rparen on_ignored_nl on_cvar on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_cvar on_op UNK UNK # Sets the missing interpolation argument handler. It can be any # object that responds to #call. The arguments that will be passed to #call # are the same as for MissingInterpolationArgument initializer. Use +Proc.new+ # if you don't care about arity. # # == Example: # You can supress raising an exception and return string instead: # # I18n.config.missing_interpolation_argument_handler = Proc.new do |key| # "#{key} is missing" # end
def UNK on_nl on_cvar on_op UNK UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_cvar on_op UNK # Allow clients to register paths providing translation data sources. The # backend defines acceptable sources. # # E.g. the provided SimpleBackend accepts a list of paths to translation # files which are either named *.rb and contain plain Ruby Hashes or are # named *.yml and contain YAML data. So for the SimpleBackend clients may # register translation files like this: # I18n.load_path << 'path/to/locale/en.yml'
def UNK on_lparen UNK on_rparen on_ignored_nl on_cvar on_op UNK on_nl on_cvar on_op nil on_nl UNK on_period UNK on_nl end on_nl # Sets the load path instance. Custom implementations are expected to # behave like a Ruby Array.
on_cvar on_op UNK on_nl def UNK on_nl on_cvar on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_cvar on_op # Whether or not to verify if locales are in the list of available locales. # Defaults to true.
def UNK on_nl on_cvar on_op on_const on_op on_const on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl # Returns the current interpolation patterns. Defaults to # I18n::DEFAULT_INTERPOLATION_PATTERNS.
def UNK on_lparen UNK on_rparen on_ignored_nl on_cvar on_op UNK on_nl end on_nl end on_nl end on_nl EMP EMP EMP EMP # Sets the current interpolation patterns. Used to set a interpolation # patterns. # # E.g. using {{}} as a placeholder like "{{hello}}, world!": # # I18n.config.interpolation_patterns << /\{\{(\w+)\}\}/
