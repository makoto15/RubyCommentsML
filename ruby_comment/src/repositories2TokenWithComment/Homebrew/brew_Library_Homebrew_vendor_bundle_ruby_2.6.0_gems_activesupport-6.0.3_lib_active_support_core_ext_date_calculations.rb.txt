on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end # frozen_string_literal: true
def UNK on_nl on_const on_period UNK on_lbracket on_symbeg UNK on_rbracket on_op UNK on_op on_symbeg UNK on_nl end on_nl on_ignored_nl def # Returns the week start (e.g. :monday) for the current request, if this has been set (via Date.beginning_of_week=). # If <tt>Date.beginning_of_week</tt> has not been set for the current request, returns the week start specified in <tt>config.beginning_of_week</tt>. # If no config.beginning_of_week was specified, returns :monday.
def UNK on_lparen week_start on_rparen on_ignored_nl on_const on_period UNK on_lbracket on_symbeg UNK on_rbracket on_op UNK on_lparen week_start on_rparen on_nl end # Sets <tt>Date.beginning_of_week</tt> to a week start (e.g. :monday) for current request/thread. # # This method accepts any of the following day symbols: # :monday, :tuesday, :wednesday, :thursday, :friday, :saturday, :sunday
def UNK on_lparen week_start on_rparen on_ignored_nl UNK on_const on_comma on_tstring_beg on_tstring_content UNK week_start UNK on_tstring_end UNK on_op on_const on_op on_const # Returns week start day symbol (e.g. :monday), or raises an +ArgumentError+ for invalid day symbol.
def UNK on_nl on_op on_const on_period UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_op on_const on_period UNK # Returns a new Date representing the date 1 day ago (i.e. yesterday's date).
def UNK on_nl on_op on_const on_period UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_op on_const on_period UNK # Returns a new Date representing the date 1 day after today (i.e. tomorrow's date).
def UNK on_nl on_op on_const on_period UNK on_op on_op on_const on_period UNK on_period UNK on_op on_op on_const on_period UNK on_nl # Returns Time.zone.today when <tt>Time.zone</tt> or <tt>config.time_zone</tt> are set, otherwise just returns Date.today.
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK on_lparen on_op UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen # Converts Date to a Time (or DateTime if necessary) with the time portion set to the beginning of the day (0:00) # and then subtracts the specified number of seconds.
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK on_lparen UNK on_rparen on_nl end on_nl alias on_symbeg UNK on_symbeg UNK # Converts Date to a Time (or DateTime if necessary) with the time portion set to the beginning of the day (0:00) # and then adds the specified number of seconds
def UNK on_nl UNK on_nl end on_nl alias on_symbeg UNK on_symbeg UNK on_nl alias on_symbeg UNK on_symbeg UNK on_nl alias # Converts Date to a Time (or DateTime if necessary) with the time portion set to the beginning of the day (0:00)
def middle_of_day on_nl UNK on_period middle_of_day on_nl end on_nl alias on_symbeg UNK on_symbeg middle_of_day on_nl alias on_symbeg UNK on_symbeg middle_of_day # Converts Date to a Time (or DateTime if necessary) with the time portion set to the middle of the day (12:00)
def UNK on_nl UNK on_period UNK on_nl end on_nl alias on_symbeg UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen other # Converts Date to a Time (or DateTime if necessary) with the time portion set to the end of the day (23:59:59)
if on_const on_op on_const on_op other on_nl other on_period UNK on_lparen UNK on_rparen on_nl UNK on_ignored_nl UNK on_lparen other on_rparen #:nodoc:
if on_const on_op on_const on_op other on_nl UNK on_lparen on_op other on_rparen on_nl UNK on_ignored_nl UNK on_lparen other on_rparen on_nl #:nodoc:
def UNK on_lparen options on_rparen on_ignored_nl d on_op UNK on_nl on_ignored_nl d on_op d on_op options on_lbracket on_symbeg UNK on_rbracket # Provides precise Date calculations for years, months, and days. The +options+ parameter takes a hash with # any of these keys: <tt>:years</tt>, <tt>:months</tt>, <tt>:weeks</tt>, <tt>:days</tt>.
def UNK on_lparen options on_rparen on_ignored_nl on_op on_const on_period UNK on_lparen on_ignored_nl options on_period UNK on_lparen on_symbeg UNK on_comma UNK # Returns a new Date where one or more of the elements have been changed according to the +options+ parameter. # The +options+ parameter is a hash with a combination of these keys: <tt>:year</tt>, <tt>:month</tt>, <tt>:day</tt>. # # Date.new(2007, 5, 12).change(day: 1) # => Date.new(2007, 5, 1) # Date.new(2007, 5, 12).change(year: 2005, month: 1) # => Date.new(2005, 1, 12)
def UNK on_lparen other on_rparen on_ignored_nl if other on_period UNK on_lparen on_const on_rparen on_nl UNK on_op other on_nl UNK on_ignored_nl # Allow Date to be compared with Time by converting to DateTime and relying on the <=> from there.
