UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl # frozen_string_literal: false
UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl on_ignored_nl UNK UNK UNK on_nl UNK UNK UNK on_nl on_const on_op # Defines an Element Attribute; IE, a attribute=value pair, as in: # <element attribute="value"/>. Attributes can be in their own # namespaces. General users of REXML will not interact with the # Attribute class much.
UNK UNK UNK on_nl UNK UNK UNK on_nl on_const on_op UNK on_tstring_content on_embexpr_beg on_const on_embexpr_end on_tstring_content UNK on_nl on_ignored_nl on_const # The element to which this attribute belongs
UNK UNK UNK on_nl on_const on_op UNK on_tstring_content on_embexpr_beg on_const on_embexpr_end on_tstring_content UNK on_nl on_ignored_nl on_const on_op UNK on_tstring_content on_embexpr_beg # The normalized value of this attribute. That is, the attribute with # entities intact.
def UNK on_lparen first on_comma UNK on_op nil on_comma UNK on_op nil on_rparen on_ignored_nl on_ivar on_op on_ivar on_op on_ivar on_op # Constructor. # FIXME: The parser doesn't catch illegal characters in attributes # # first:: # Either: an Attribute, which this new attribute will become a # clone of; or a String, which is the name of this attribute # second:: # If +first+ is an Attribute, then this may be an Element, or nil. # If nil, then the Element parent of this attribute is the parent # of the +first+ Attribute. If the first argument is a String, # then this must also be a String, and is the content of the attribute. # If this is the content, it must be fully normalized (contain no # illegal characters). # parent:: # Ignored unless +first+ is a String; otherwise, may be the Element # parent of this attribute, or nil. # # # Attribute.new( attribute_to_clone ) # Attribute.new( attribute_to_clone, parent_element ) # Attribute.new( "attr", "attr_value" ) # Attribute.new( "attr", "attr_value", parent_element )
def UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK UNK on_op nil on_nl UNK on_op UNK if UNK on_period # Returns the namespace of the attribute. # # e = Element.new( "elns:myelement" ) # e.add_attribute( "nsa:a", "aval" ) # e.add_attribute( "b", "bval" ) # e.attributes.get_attribute( "a" ).prefix # -> "nsa" # e.attributes.get_attribute( "b" ).prefix # -> "" # a = Attribute.new( "x", "y" ) # a.prefix # -> ""
def UNK UNK on_op nil on_nl UNK on_op UNK if UNK on_period UNK on_nl if UNK on_op on_tstring_beg on_tstring_end on_nl # Returns the namespace URL, if defined, or nil otherwise # # e = Element.new("el") # e.add_namespace("ns", "http://url") # e.add_attribute("ns:a", "b") # e.add_attribute("nsx:a", "c") # e.attribute("ns:a").namespace # => "http://url" # e.attribute("nsx:a").namespace # => nil # # This method always returns "" for no namespace attribute. Because # the default namespace doesn't apply to attribute names. # # From https://www.w3.org/TR/xml-names/#uniqAttrs # # > the default namespace does not apply to attribute names # # e = REXML::Element.new("el") # e.add_namespace("", "http://example.com/") # e.namespace # => "http://example.com/" # e.add_attribute("a", "b") # e.attribute("a").namespace # => ""
def on_op on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK on_lparen on_const on_rparen UNK UNK on_period name on_op name UNK UNK # Returns true if other is an Attribute and has the same name and value, # false otherwise.
def UNK on_nl name on_period UNK on_op UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl if on_ivar UNK # Creates (and returns) a hash from both the name and value
def UNK on_nl if on_ivar UNK on_ivar on_period UNK UNK on_ivar on_period UNK UNK UNK UNK UNK on_op UNK UNK # Returns this attribute out as XML source, expanding the name # # a = Attribute.new( "x", "y" ) # a.to_string # -> "x='y'" # b = Attribute.new( "ns:x", "y" ) # b.to_string # -> "ns:x='y'"
def UNK on_nl UNK on_ivar if on_ivar on_nl on_ignored_nl on_ivar on_op on_const on_op UNK on_lparen on_ivar on_comma UNK on_rparen on_nl # Returns the attribute value, with entities replaced
def UNK on_nl UNK on_ivar if on_ivar on_nl on_ivar on_op on_const on_op UNK on_lparen on_ivar on_comma UNK on_rparen on_nl on_ivar # Returns the UNNORMALIZED value of this attribute. That is, entities # have been expanded to their values
def UNK on_nl on_const on_period UNK self on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op UNK # Returns a copy of this attribute
def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl on_ignored_nl if on_ivar on_nl on_const on_period UNK on_lparen on_ivar on_comma # Sets the element of which this object is an attribute. Normally, this # is not directly called. # # Returns this attribute
def UNK on_nl on_ivar on_period UNK on_period UNK self on_period name UNK on_ivar on_period UNK on_nl end on_nl on_ignored_nl def # Removes this Attribute from the tree, and returns true if successful # # This method is usually not called directly.
def UNK on_lparen UNK on_comma UNK on_op on_op UNK on_rparen on_ignored_nl UNK on_op UNK on_nl end on_nl on_ignored_nl def UNK # Writes this attribute (EG, puts 'key="value"' to the output)
