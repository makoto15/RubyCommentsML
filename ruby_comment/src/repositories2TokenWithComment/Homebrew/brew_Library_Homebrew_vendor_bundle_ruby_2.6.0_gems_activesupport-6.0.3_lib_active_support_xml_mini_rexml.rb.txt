on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl # frozen_string_literal: true
UNK UNK on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl def UNK on_lparen data on_rparen on_ignored_nl if on_op data #:nodoc:
def UNK on_lparen data on_rparen on_ignored_nl if on_op data on_period UNK on_lparen UNK UNK on_rparen on_nl data on_op on_const on_period # Parse an XML Document string or IO into a simple hash. # # Same as XmlSimple::xml_in but doesn't shoot itself in the foot, # and uses the defaults from Active Support. # # data:: # XML Document string or IO to parse
def UNK on_lparen hash on_comma element on_comma depth on_rparen on_ignored_nl UNK on_const on_op on_const on_comma on_tstring_beg on_tstring_content on_tstring_end if depth # Convert an XML element and merge into the hash # # hash:: # Hash to merge the converted element into. # element:: # XML element to merge into hash
def UNK on_lparen element on_comma depth on_rparen on_ignored_nl hash on_op UNK on_lparen element on_rparen on_nl on_ignored_nl if element on_period UNK # Actually converts an XML document element into a data structure. # # element:: # The document element to be collapsed.
def UNK on_lparen hash on_comma element on_rparen on_ignored_nl UNK element on_period UNK on_nl hash on_nl else on_ignored_nl UNK on_op on_op # Merge all the texts of an element into the hash # # hash:: # Hash to add the converted element to. # element:: # XML element whose texts are to me merged into the hash
UNK on_op on_op on_tstring_beg on_tstring_end on_nl element on_period UNK on_period UNK on_lbrace on_op UNK on_op UNK on_op UNK on_period value # must use value to prevent double-escaping
def UNK on_lparen hash on_comma key on_comma value on_rparen on_ignored_nl if hash on_period UNK on_lparen key on_rparen on_nl if hash # Adds a new key/value pair to an existing Hash. If the key to be added # already exists and the existing value associated with key is not # an Array, it will be wrapped in an Array. Then the new value is # appended to that Array. # # hash:: # Hash to add key/value pair to. # key:: # Key to be added. # value:: # Value to be associated with key.
def UNK on_lparen element on_rparen on_ignored_nl UNK on_op on_lbrace on_rbrace on_nl element on_period UNK on_period UNK on_lbrace on_op UNK on_comma # Converts the attributes array of an XML element into a hash. # Returns an empty Hash if node has no attributes. # # element:: # XML element to extract attributes from.
def UNK on_lparen element on_rparen on_ignored_nl element on_period UNK on_period UNK on_period UNK on_nl end on_nl end on_nl end on_nl # Determines if a document element has text content # # element:: # XML element to be checked.
