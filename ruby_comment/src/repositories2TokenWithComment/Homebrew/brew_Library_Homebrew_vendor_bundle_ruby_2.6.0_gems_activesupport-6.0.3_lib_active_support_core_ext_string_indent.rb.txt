UNK UNK UNK on_nl UNK UNK UNK UNK on_comma indent_string on_op UNK on_comma UNK on_op UNK UNK UNK indent_string on_op # frozen_string_literal: true
UNK UNK UNK UNK on_comma indent_string on_op UNK on_comma UNK on_op UNK UNK UNK indent_string on_op indent_string on_op UNK UNK # Same as +indent+, except it indents the receiver in-place. # # Returns the indented string, or +nil+ if there was nothing to indent.
UNK UNK UNK UNK on_comma indent_string on_op UNK on_comma UNK on_op UNK UNK UNK UNK UNK UNK UNK on_op UNK # Indents the lines in the receiver: # # <<EOS.indent(2) # def some_method # some_code # end # EOS # # => # def some_method # some_code # end # # The second argument, +indent_string+, specifies which indent string to # use. The default is +nil+, which tells the method to make a guess by # peeking at the first indented line, and fallback to a space if there is # none. # # " foo".indent(2) # => " foo" # "foo\n\t\tbar".indent(2) # => "\t\tfoo\n\t\t\t\tbar" # "foo".indent(2, "\t") # => "\t\tfoo" # # While +indent_string+ is typically one space or tab, it may be any string. # # The third argument, +indent_empty_lines+, is a flag that says whether # empty lines should be indented. Default is false. # # "foo\n\nbar".indent(2) # => " foo\n\n bar" # "foo\n\nbar".indent(2, nil, true) # => " foo\n \n bar" #
