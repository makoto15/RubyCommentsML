UNK on_tstring_beg UNK on_tstring_end on_nl UNK on_tstring_beg UNK on_tstring_end on_nl UNK on_tstring_beg UNK on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK # frozen_string_literal: false
UNK on_const on_nl def UNK on_nl return UNK UNK on_ivar on_period UNK on_nl on_ivar UNK on_ivar on_period UNK on_lparen self # Represents a node in the tree. Nodes are never encountered except as # superclasses of other objects. Nodes have siblings.
def UNK on_nl return UNK UNK on_ivar on_period UNK on_nl on_ivar UNK on_ivar on_period UNK on_lparen self on_rparen on_op on_int # @return the next sibling (nil if unset)
def UNK on_nl return UNK UNK on_ivar on_period UNK on_nl ind on_op on_ivar on_period UNK on_lparen self on_rparen on_nl return # @return the previous sibling (nil if unset)
def UNK UNK on_op UNK on_nl UNK UNK on_period UNK on_nl on_const on_period UNK on_lparen on_tstring_beg UNK self on_period UNK # indent:: # *DEPRECATED* This parameter is now ignored. See the formatters in the # REXML::Formatters package for changing the output style.
def UNK on_lparen on_op UNK on_rparen self on_period UNK on_period UNK UNK on_op node on_op on_ignored_nl UNK on_period UNK on_lparen # Visit all subnodes of +self+ recursively
self on_period UNK on_period UNK UNK on_op node on_op on_ignored_nl UNK on_period UNK on_lparen node on_rparen on_nl node on_period UNK # :yields: node
def UNK on_lparen on_op UNK on_rparen UNK UNK on_op node on_op on_ignored_nl return node UNK UNK on_period UNK on_lparen node # Find (and return) first subnode (recursively) for which the block # evaluates to true. Returns +nil+ if none was found.
UNK UNK on_op node on_op on_ignored_nl return node UNK UNK on_period UNK on_lparen node on_rparen on_nl UNK on_nl return UNK # :yields: node
def UNK on_nl UNK on_period UNK on_lparen self on_rparen on_op on_int on_nl end on_nl end on_nl end on_nl EMP EMP # Returns the position that +self+ holds in its parent's array, indexed # from 1.
