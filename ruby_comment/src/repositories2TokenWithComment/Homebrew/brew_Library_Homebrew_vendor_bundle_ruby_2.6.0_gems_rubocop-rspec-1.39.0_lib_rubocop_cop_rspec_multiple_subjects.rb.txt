on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl on_const # frozen_string_literal: true
UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op UNK UNK UNK on_nl on_ignored_nl UNK UNK on_lparen node # Checks if an example group defines `subject` multiple times. # # @example # # # bad # describe Foo do # subject(:user) { User.new } # subject(:post) { Post.new } # end # # # good # describe Foo do # let(:user) { User.new } # subject(:post) { Post.new } # end # # The autocorrect behavior for this cop depends on the type of # duplication: # # - If multiple named subjects are defined then this probably indicates # that the overwritten subjects (all subjects except the last # definition) are effectively being used to define helpers. In this # case they are replaced with `let`. # # - If multiple unnamed subjects are defined though then this can *only* # be dead code and we remove the overwritten subject definitions. # # - If subjects are defined with `subject!` then we don't autocorrect. # This is enough of an edge case that people can just move this to # a `before` hook on their own
on_ignored_nl UNK UNK on_lparen node on_rparen on_nl UNK on_lparen node on_rparen on_nl UNK on_ignored_nl UNK on_lparen node on_rparen on_nl end # Ignore `subject!`
