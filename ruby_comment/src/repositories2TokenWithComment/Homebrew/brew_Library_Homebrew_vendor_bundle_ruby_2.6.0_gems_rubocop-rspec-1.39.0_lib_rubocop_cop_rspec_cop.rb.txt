on_ignored_nl UNK on_const on_nl UNK on_const on_nl on_const on_op on_const on_period UNK on_nl on_ignored_nl UNK on_const on_nl UNK on_op UNK # frozen_string_literal: true
UNK on_const on_nl UNK on_op UNK on_nl UNK UNK on_nl def UNK on_lparen on_op on_rparen end on_nl end on_nl on_ignored_nl # Clone of the the normal RuboCop::Cop::Cop class so we can rewrite # the inherited method without breaking functionality
UNK on_op UNK on_nl UNK UNK on_nl def UNK on_lparen on_op on_rparen end on_nl end on_nl on_ignored_nl def UNK on_period # Remove the Cop.inherited method to be a noop. Our RSpec::Cop # class will invoke the inherited hook instead
def UNK on_period on_op on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK on_lparen on_const on_op on_const on_op on_const on_rparen on_op UNK # Special case `Module#<` so that the rspec support rubocop exports # is compatible with our subclass
UNK on_const on_op on_const on_nl UNK on_const on_op on_const on_op on_const on_nl UNK on_const on_op on_const on_op on_const on_op on_const # @abstract parent class to rspec cops # # The criteria for whether rubocop-rspec analyzes a certain ruby file # is configured via `AllCops/RSpec`. For example, if you want to # customize your project to scan all files within a `test/` directory # then you could add this to your configuration: # # @example configuring analyzed paths # # AllCops: # RSpec: # Patterns: # - '_test.rb$' # - '(?:^|/)test/'
def UNK on_period UNK on_lparen UNK on_rparen on_ignored_nl on_const on_op on_const on_op on_const on_period UNK on_lparen UNK on_rparen on_nl end # Invoke the original inherited hook so our cops are recognized
