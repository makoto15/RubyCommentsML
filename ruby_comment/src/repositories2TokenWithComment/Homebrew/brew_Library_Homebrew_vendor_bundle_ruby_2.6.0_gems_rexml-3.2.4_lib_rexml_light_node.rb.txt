UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl on_const on_op UNK on_tstring_content on_embexpr_beg # frozen_string_literal: false
UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl on_const on_op UNK on_tstring_content on_embexpr_beg on_const on_op on_const on_embexpr_end on_tstring_content on_embexpr_beg # [ :element, parent, name, attributes, children* ] # a = Node.new # a << "B" # => <a>B</a> # a.b # => <a>B<b/></a> # a.b[1] # => <a>B<b/><b/><a> # a.b[1]["x"] = "y" # => <a>B<b/><b x="y"/></a> # a.b[0].c # => <a>B<b><c/></b><b x="y"/></a> # a.b.c << "D" # => <a>B<b><c>D</c></b><b x="y"/></a>
UNK on_const on_nl on_const on_op UNK on_tstring_content on_embexpr_beg on_const on_op on_const on_embexpr_end on_tstring_content on_embexpr_beg on_const on_op on_const on_embexpr_end on_tstring_content UNK # Represents a tagged XML element. Elements are characterized by # having children, attributes, and names, and can themselves be # children.
def UNK node on_op nil on_nl on_ivar on_op node on_nl if node on_period kind_of? on_const on_nl node on_op on_lbracket on_symbeg # Create a new element.
def on_op on_lparen reference on_comma ns on_comma value on_op nil on_rparen on_ignored_nl if reference on_period kind_of? on_const on_nl value on_op # Doesn't handle namespaces yet
def on_op UNK on_nl if UNK on_lparen on_rparen on_op on_symbeg UNK on_nl at on_lparen on_op on_int on_rparen on_op UNK on_nl # Append a child to this element, optionally under a provided namespace. # The namespace argument is ignored if the element argument is an Element # object. Otherwise, the element argument is a string, the namespace (if # provided) is the namespace the element is created in.
