on_ignored_nl on_ignored_nl UNK on_op UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen UNK UNK UNK UNK on_nl on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end # frozen_string_literal: true
on_ignored_nl UNK on_op UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen UNK UNK UNK UNK on_nl on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl # This script is loaded by formula_installer as a separate instance. # Thrown exceptions are propagated back to the parent process over a pipe
UNK UNK formula on_period UNK on_period UNK on_op UNK on_period UNK UNK on_op UNK on_op UNK on_period UNK on_period UNK # Only allow Homebrew-approved directories into the PATH, unless # a formula opts-in to allowing the user's path.
on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op formula on_period prefix on_nl on_ignored_nl UNK on_period UNK if on_const on_period args on_period # For head builds, HOMEBREW_FORMULA_PREFIX should include the commit, # which is not known until after the formula has been staged.
formula on_period prefix on_period UNK formula on_period UNK on_nl formula on_period prefix on_period UNK formula on_period UNK if formula on_period # Find and link metafiles
UNK on_period UNK on_lparen UNK UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen f on_rparen on_ignored_nl UNK on_op if # The stdlib recorded in the install receipt is used during dependency # compatibility checks, so we only care about the stdlib that libraries # link against.
error_hash on_op on_const on_period UNK e on_period UNK on_nl on_ignored_nl if error_hash on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op on_tstring_beg on_tstring_content # rubocop:disable Lint/RescueException
if error_hash on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op on_tstring_beg on_tstring_content on_tstring_end on_nl error_hash on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op e # Special case: need to recreate BuildErrors in full # for proper analytics reporting and error messages. # BuildErrors are specific to build processes and not other # children, which is why we create the necessary state here # and not in Utils.safe_fork.
