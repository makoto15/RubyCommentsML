on_ignored_nl UNK UNK on_tstring_content UNK on_nl on_ignored_nl class on_const on_nl UNK on_const on_nl UNK on_const on_nl on_ignored_nl UNK on_symbeg name # frozen_string_literal: true
class on_const on_nl UNK on_const on_nl UNK on_const on_nl on_ignored_nl UNK on_symbeg name on_comma on_symbeg tags on_comma on_symbeg env_proc on_comma # A dependency on another Homebrew formula.
def UNK on_lparen on_op on_rparen on_ignored_nl on_const on_period UNK on_lparen on_lbracket name on_comma tags on_rbracket on_rparen on_nl end on_nl on_ignored_nl # Define marshaling semantics because we cannot serialize @env_proc
end on_nl on_ignored_nl class on_op UNK on_nl def UNK on_lparen dependent on_comma deps on_op dependent on_period deps on_comma on_op UNK # rubocop:disable Security/MarshalLoad
def UNK on_lparen dependent on_comma deps on_op dependent on_period deps on_comma on_op UNK on_rparen on_ignored_nl on_ivar on_op on_lbracket on_rbracket on_nl # Expand the dependencies of dependent recursively, optionally yielding # `[dependent, dep]` pairs to allow callers to apply arbitrary filters to # the list. # The default filter, which is applied when a block is not given, omits # optionals and recommendeds based on what the dependent has asked for.
on_ivar on_op on_lbracket on_rbracket on_nl on_ivar on_period UNK dependent on_period name on_nl on_ignored_nl expanded_deps on_op on_lbracket on_rbracket on_nl on_ignored_nl deps # Keep track dependencies to avoid infinite cyclic dependency recursion.
UNK if dep on_period UNK on_op on_ivar on_period UNK on_op UNK on_nl on_ignored_nl UNK action on_lparen dependent on_comma dep on_comma # we only care about one level of test dependencies.
def UNK on_nl UNK on_lparen on_symbeg action on_comma on_symbeg UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_lparen # Prune a dependency and its dependencies recursively
def UNK on_nl UNK on_lparen on_symbeg action on_comma on_symbeg UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_lparen # Prune a single dependency but do not prune its dependencies
def UNK on_nl UNK on_lparen on_symbeg action on_comma on_symbeg UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen # Keep a dependency, but prune its dependencies
if deps on_period UNK UNK on_op dep on_op on_op dep on_period UNK on_op on_op dep on_period UNK UNK on_nl on_lbracket # Cannot use `deps.any?(&:required?)` here due to its definition.
UNK deps on_period UNK on_lparen on_op on_symbeg UNK on_rparen on_nl on_lbracket on_symbeg UNK on_rbracket on_nl UNK on_lbracket on_symbeg UNK on_rbracket # Means required dependency.
on_lbracket on_symbeg UNK on_rbracket on_nl end on_nl end on_nl on_ignored_nl def UNK on_lparen deps on_rparen on_ignored_nl UNK on_lbracket on_rbracket UNK # deps.all?(&:optional?)
UNK on_lbracket on_rbracket UNK deps on_period UNK on_lparen on_op on_symbeg UNK on_rparen on_nl on_ignored_nl on_lbracket on_symbeg UNK on_rbracket on_nl end # Means both build and runtime dependency.
