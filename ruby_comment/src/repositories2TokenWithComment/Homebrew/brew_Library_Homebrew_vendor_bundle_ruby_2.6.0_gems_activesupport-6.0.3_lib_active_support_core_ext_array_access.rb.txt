on_ignored_nl UNK UNK on_nl def UNK on_lparen position on_rparen on_ignored_nl self on_lbracket position UNK UNK on_rbracket on_op on_lbracket on_rbracket on_nl # frozen_string_literal: true
def UNK on_lparen position on_rparen on_ignored_nl self on_lbracket position UNK UNK on_rbracket on_op on_lbracket on_rbracket on_nl end on_nl on_ignored_nl def # Returns the tail of the array from +position+. # # %w( a b c d ).from(0) # => ["a", "b", "c", "d"] # %w( a b c d ).from(2) # => ["c", "d"] # %w( a b c d ).from(10) # => [] # %w().from(0) # => [] # %w( a b c d ).from(-2) # => ["c", "d"] # %w( a b c ).from(-10) # => []
def UNK on_lparen position on_rparen on_ignored_nl UNK position on_op on_int on_nl UNK position on_op on_int on_nl UNK on_ignored_nl self on_lbracket # Returns the beginning of the array up to +position+. # # %w( a b c d ).to(0) # => ["a"] # %w( a b c d ).to(2) # => ["a", "b", "c"] # %w( a b c d ).to(10) # => ["a", "b", "c", "d"] # %w().to(0) # => [] # %w( a b c d ).to(-2) # => ["a", "b", "c"] # %w( a b c ).to(-10) # => []
def UNK on_lparen on_op elements on_rparen on_ignored_nl self on_op elements UNK UNK on_lparen on_int on_rparen on_nl end on_nl on_ignored_nl def # Returns a new array that includes the passed elements. # # [ 1, 2, 3 ].including(4, 5) # => [ 1, 2, 3, 4, 5 ] # [ [ 0, 1 ] ].including([ [ 1, 0 ] ]) # => [ [ 0, 1 ], [ 1, 0 ] ]
def UNK on_lparen on_op elements on_rparen on_ignored_nl self on_op elements UNK UNK on_lparen on_int on_rparen on_nl end on_nl on_ignored_nl def # Returns a copy of the Array excluding the specified elements. # # ["David", "Rafael", "Aaron", "Todd"].excluding("Aaron", "Todd") # => ["David", "Rafael"] # [ [ 0, 1 ], [ 1, 0 ] ].excluding([ [ 1, 0 ] ]) # => [ [ 0, 1 ] ] # # Note: This is an optimization of <tt>Enumerable#excluding</tt> that uses <tt>Array#-</tt> # instead of <tt>Array#reject</tt> for performance reasons.
def UNK on_lparen on_op elements on_rparen on_ignored_nl UNK on_lparen on_op elements on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl self # Alias for #excluding.
def UNK on_nl self on_lbracket on_int on_rbracket on_nl end on_nl on_ignored_nl def UNK on_nl self on_lbracket on_int on_rbracket on_nl end # Equal to <tt>self[1]</tt>. # # %w( a b c d e ).second # => "b"
def UNK on_nl self on_lbracket on_int on_rbracket on_nl end on_nl on_ignored_nl def UNK on_nl self on_lbracket on_int on_rbracket on_nl end # Equal to <tt>self[2]</tt>. # # %w( a b c d e ).third # => "c"
def UNK on_nl self on_lbracket on_int on_rbracket on_nl end on_nl on_ignored_nl def UNK on_nl self on_lbracket on_int on_rbracket on_nl end # Equal to <tt>self[3]</tt>. # # %w( a b c d e ).fourth # => "d"
def UNK on_nl self on_lbracket on_int on_rbracket on_nl end on_nl on_ignored_nl def UNK on_nl self on_lbracket on_int on_rbracket on_nl end # Equal to <tt>self[4]</tt>. # # %w( a b c d e ).fifth # => "e"
def UNK on_nl self on_lbracket on_int on_rbracket on_nl end on_nl on_ignored_nl def UNK on_nl self on_lbracket on_op on_int on_rbracket on_nl # Equal to <tt>self[41]</tt>. Also known as accessing "the reddit". # # (1..42).to_a.forty_two # => 42
def UNK on_nl self on_lbracket on_op on_int on_rbracket on_nl end on_nl on_ignored_nl def UNK on_nl self on_lbracket on_op on_int on_rbracket # Equal to <tt>self[-3]</tt>. # # %w( a b c d e ).third_to_last # => "c"
def UNK on_nl self on_lbracket on_op on_int on_rbracket on_nl end on_nl end on_nl EMP EMP EMP EMP EMP EMP EMP # Equal to <tt>self[-2]</tt>. # # %w( a b c d e ).second_to_last # => "d"
