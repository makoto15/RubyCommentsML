on_ignored_nl UNK UNK on_nl UNK UNK on_nl UNK UNK UNK UNK UNK UNK UNK on_ignored_nl UNK UNK UNK UNK UNK # frozen_string_literal: true
UNK UNK UNK UNK UNK UNK UNK on_ignored_nl UNK UNK UNK UNK UNK UNK UNK UNK UNK UNK UNK UNK # Very basic snake case -> camel case conversion. # # inflector = Zeitwerk::Inflector.new # inflector.camelize("post", ...) # => "Post" # inflector.camelize("users_controller", ...) # => "UsersController" # inflector.camelize("api", ...) # => "Api" # # Takes into account hard-coded mappings configured with `inflect`. # # @param basename [String] # @param _abspath [String] # @return [String]
UNK UNK UNK UNK UNK on_ignored_nl UNK UNK UNK UNK UNK UNK on_nl UNK on_nl on_ignored_nl UNK on_nl on_ignored_nl UNK # Configures hard-coded inflections: # # inflector = Zeitwerk::Inflector.new # inflector.inflect( # "html_parser" => "HTMLParser", # "mysql_adapter" => "MySQLAdapter" # ) # # inflector.camelize("html_parser", abspath) # => "HTMLParser" # inflector.camelize("mysql_adapter", abspath) # => "MySQLAdapter" # inflector.camelize("users_controller", abspath) # => "UsersController" # # @param inflections [{String => String}] # @return [void]
UNK UNK on_nl UNK UNK UNK UNK on_nl UNK on_nl UNK on_nl UNK on_nl EMP EMP EMP EMP EMP EMP # Hard-coded basename to constant name user maps that override the default # inflection logic. # # @return [{String => String}]
