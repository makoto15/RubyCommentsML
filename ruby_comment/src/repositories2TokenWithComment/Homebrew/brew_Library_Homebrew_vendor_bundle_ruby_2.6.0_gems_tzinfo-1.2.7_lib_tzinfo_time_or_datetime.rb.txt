UNK on_const on_nl UNK on_const on_nl on_ignored_nl def UNK on_lparen timeordatetime on_rparen on_ignored_nl on_ivar on_op UNK on_nl on_ivar on_op UNK # Used by TZInfo internally to represent either a Time, DateTime or # an Integer timestamp (seconds since 1970-01-01 00:00:00).
def UNK on_lparen timeordatetime on_rparen on_ignored_nl on_ivar on_op UNK on_nl on_ivar on_op UNK on_nl on_ivar on_op UNK on_nl on_ignored_nl if # Constructs a new TimeOrDateTime. timeOrDateTime can be a Time, DateTime # or Integer. If using a Time or DateTime, any time zone information # is ignored. # # Integer timestamps must be within the range supported by Time on the # platform being used.
UNK on_op on_const on_period UNK on_lparen on_ivar on_rparen on_nl usec on_op UNK on_op on_int on_op on_int on_op UNK on_op on_int # Avoid using the slower Rational class unless necessary.
def to_time on_nl on_ignored_nl unless on_ivar on_nl result on_op if on_ivar on_nl on_const on_period UNK on_lparen on_ivar on_rparen on_period UNK # Returns the time as a Time. # # When converting from a DateTime, the result is truncated to microsecond # precision.
on_ignored_nl unless on_ivar on_nl result on_op if on_ivar on_nl on_const on_period UNK on_lparen on_ivar on_rparen on_period UNK on_nl else on_ignored_nl # Thread-safety: It is possible that the value of @time may be # calculated multiple times in concurrently executing threads. It is not # worth the overhead of locking to ensure that @time is only # calculated once.
def UNK on_nl on_ignored_nl unless on_ivar on_nl UNK on_op usec on_nl UNK on_op UNK on_op on_int on_op sec on_op on_const # Returns the time as a DateTime. # # When converting from a Time, the result is truncated to microsecond # precision.
on_ignored_nl unless on_ivar on_nl UNK on_op usec on_nl UNK on_op UNK on_op on_int on_op sec on_op on_const on_lparen sec on_op # Thread-safety: It is possible that the value of @datetime may be # calculated multiple times in concurrently executing threads. It is not # worth the overhead of locking to ensure that @datetime is only # calculated once.
UNK on_op usec on_nl UNK on_op UNK on_op on_int on_op sec on_op on_const on_lparen sec on_op on_int on_op UNK on_comma # Avoid using Rational unless necessary.
def to_i on_nl on_ignored_nl unless on_ivar on_nl result on_op to_time on_period to_i on_nl UNK result if UNK on_nl on_ivar on_op # Returns the time as an integer timestamp.
on_ignored_nl unless on_ivar on_nl result on_op to_time on_period to_i on_nl UNK result if UNK on_nl on_ivar on_op result on_nl end # Thread-safety: It is possible that the value of @timestamp may be # calculated multiple times in concurrently executing threads. It is not # worth the overhead of locking to ensure that @timestamp is only # calculated once.
def UNK on_nl on_ivar on_nl end on_nl on_ignored_nl def UNK on_nl if on_ivar on_period is_a? on_lparen on_const on_rparen on_nl on_tstring_beg # Returns the time as the original time passed to new.
def UNK on_nl if on_ivar on_period is_a? on_lparen on_const on_rparen on_nl on_tstring_beg on_tstring_content UNK on_ivar on_period UNK UNK on_tstring_end on_nl # Returns a string representation of the TimeOrDateTime.
def UNK on_nl on_tstring_beg on_tstring_content UNK UNK on_period UNK UNK on_tstring_content UNK on_ivar on_period UNK UNK on_tstring_content on_tstring_end on_nl end # Returns internal object state as a programmer-readable string.
def year on_nl if on_ivar on_nl on_ivar on_period year on_nl elsif on_ivar on_nl on_ivar on_period year on_nl else on_ignored_nl to_time # Returns the year.
def mon on_nl if on_ivar on_nl on_ivar on_period mon on_nl elsif on_ivar on_nl on_ivar on_period mon on_nl else on_ignored_nl to_time # Returns the month of the year (1..12).
def mday on_nl if on_ivar on_nl on_ivar on_period mday on_nl elsif on_ivar on_nl on_ivar on_period mday on_nl else on_ignored_nl to_time # Returns the day of the month (1..n).
def hour on_nl if on_ivar on_nl on_ivar on_period hour on_nl elsif on_ivar on_nl on_ivar on_period hour on_nl else on_ignored_nl to_time # Returns the hour of the day (0..23).
def min on_nl if on_ivar on_nl on_ivar on_period min on_nl elsif on_ivar on_nl on_ivar on_period min on_nl else on_ignored_nl to_time # Returns the minute of the hour (0..59).
def sec on_nl if on_ivar on_nl on_ivar on_period sec on_nl elsif on_ivar on_nl on_ivar on_period sec on_nl else on_ignored_nl to_time # Returns the second of the minute (0..60). (60 for a leap second).
def usec on_nl if on_ivar on_nl on_ivar on_period usec on_nl elsif on_ivar on_nl on_ignored_nl on_lparen on_lparen on_ivar on_period UNK on_op # Returns the number of microseconds for the time.
on_ignored_nl on_lparen on_lparen on_ivar on_period UNK on_op on_const on_period UNK on_lparen on_ivar on_period hour on_op on_int on_op on_ivar on_period min # Ruby 1.8 has sec_fraction (of which the documentation says # 'I do NOT recommend you to use this method'). sec_fraction no longer # exists in Ruby 1.9.
on_lparen on_lparen on_ivar on_period UNK on_op on_const on_period UNK on_lparen on_ivar on_period hour on_op on_int on_op on_ivar on_period min on_op # Calculate the sec_fraction from the day_fraction.
def on_op on_lparen timeordatetime on_rparen on_ignored_nl UNK UNK unless timeordatetime on_period is_a? on_lparen on_const on_rparen on_op on_ignored_nl timeordatetime on_period is_a? # Compares this TimeOrDateTime with another Time, DateTime, timestamp # (Integer) or TimeOrDateTime. Returns -1, 0 or +1 depending # whether the receiver is less than, equal to, or greater than # timeOrDateTime. # # Returns nil if the passed in timeOrDateTime is not comparable with # TimeOrDateTime instances. # # Comparisons involving a DateTime will be performed using DateTime#<=>. # Comparisons that don't involve a DateTime, but include a Time will be # performed with Time#<=>. Otherwise comparisons will be performed with # Integer#<=>.
UNK on_op timeordatetime on_period UNK on_nl elsif on_ivar on_period is_a? on_lparen on_const on_rparen on_op UNK on_period is_a? on_lparen on_const on_rparen # If either is a DateTime, assume it is there for a reason # (i.e. for its larger range of acceptable values on 32-bit systems).
def on_op on_lparen seconds on_rparen on_ignored_nl if seconds on_op on_int on_nl UNK on_nl else on_ignored_nl if on_ivar on_period is_a? on_lparen # Adds a number of seconds to the TimeOrDateTime. Returns a new # TimeOrDateTime, preserving what the original constructed type was. # If the original type is a Time and the resulting calculation goes out of # range for Times, then an exception will be raised by the Time class.
on_const on_period new on_lparen on_ivar on_op seconds on_rparen on_nl end on_nl end on_nl end on_nl on_ignored_nl def on_op on_lparen seconds # + defined for Time and Integer
def on_op on_lparen seconds on_rparen on_ignored_nl UNK on_op on_lparen on_op seconds on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen seconds # Subtracts a number of seconds from the TimeOrDateTime. Returns a new # TimeOrDateTime, preserving what the original constructed type was. # If the original type is a Time and the resulting calculation goes out of # range for Times, then an exception will be raised by the Time class.
def UNK on_lparen seconds on_rparen on_ignored_nl if seconds on_op on_int on_nl UNK on_nl else on_ignored_nl if on_ivar on_period is_a? on_lparen # Similar to the + operator, but converts to a DateTime based TimeOrDateTime # where the Time or Integer timestamp to go out of the allowed range for a # Time, converts to a DateTime based TimeOrDateTime. # # Note that the range of Time varies based on the platform.
result on_op to_i on_op seconds on_nl on_ignored_nl if on_lparen on_lparen result on_op on_int on_op result on_op on_op on_int on_rparen on_op # A Time or timestamp.
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK on_lparen on_const on_rparen on_op UNK on_period UNK on_lparen UNK on_period UNK # Returns true if todt represents the same time and was originally # constructed with the same type (DateTime, Time or timestamp) as this # TimeOrDateTime.
def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_period UNK on_lparen timeordatetime on_rparen on_ignored_nl t on_op # Returns a hash of this TimeOrDateTime.
def UNK on_period UNK on_lparen timeordatetime on_rparen on_ignored_nl t on_op timeordatetime on_period is_a? on_lparen on_const on_rparen on_op timeordatetime on_op on_const # If no block is given, returns a TimeOrDateTime wrapping the given # timeOrDateTime. If a block is specified, a TimeOrDateTime is constructed # and passed to the block. The result of the block must be a TimeOrDateTime. # # The result of the block will be converted to the type of the originally # passed in timeOrDateTime and then returned as the result of wrap. # # timeOrDateTime can be a Time, DateTime, timestamp (Integer) or # TimeOrDateTime. If a TimeOrDateTime is passed in, no new TimeOrDateTime # will be constructed and the value passed to wrap will be used when # calling the block.
