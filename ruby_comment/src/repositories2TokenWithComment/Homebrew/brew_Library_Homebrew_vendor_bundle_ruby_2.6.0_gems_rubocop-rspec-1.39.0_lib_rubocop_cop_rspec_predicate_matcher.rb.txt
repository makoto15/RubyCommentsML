on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_op on_const on_nl # frozen_string_literal: true
UNK on_const on_nl UNK on_const on_op on_const on_op on_const on_nl UNK on_const on_op on_const on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content # A helper for `inflected` style
def UNK on_lparen name on_rparen on_ignored_nl case name on_op name on_period UNK on_nl when on_tstring_beg on_tstring_content on_tstring_end on_nl on_tstring_beg on_tstring_content # rubocop:disable Metrics/MethodLength
on_ignored_nl def UNK on_lparen node on_rparen on_ignored_nl UNK on_lparen node on_rparen do on_op predicate on_comma UNK on_comma matcher on_op on_ignored_nl # rubocop:enable Metrics/MethodLength
UNK on_const on_nl UNK on_const on_op on_const on_op on_const on_nl UNK on_const on_op on_const on_nl on_ignored_nl on_const on_op on_tstring_beg on_tstring_content # A helper for `explicit` style # rubocop:disable Metrics/ModuleLength
UNK on_lparen node on_rparen do on_op UNK on_comma matcher on_op on_ignored_nl UNK on_lparen on_ignored_nl node on_comma on_ignored_nl on_label UNK on_lparen # rubocop:disable Metrics/MethodLength
def UNK on_lparen matcher on_rparen on_ignored_nl case matcher on_op matcher on_period UNK on_nl when on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content # rubocop:disable Metrics/MethodLength
on_ignored_nl def UNK on_lparen node on_rparen on_ignored_nl case on_lbracket UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_comma node on_period method_name on_op # rubocop:enable Metrics/MethodLength
on_ignored_nl UNK on_const on_op on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl on_ignored_nl def UNK on_lparen node # rubocop:enable Metrics/ModuleLength
UNK on_const on_op on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl on_ignored_nl def UNK on_lparen node on_rparen # Prefer using predicate matcher over using predicate method directly. # # RSpec defines magic matchers for predicate methods. # This cop recommends to use the predicate matcher instead of using # predicate method directly. # # @example Strict: true, EnforcedStyle: inflected (default) # # bad # expect(foo.something?).to be_truthy # # # good # expect(foo).to be_something # # # also good - It checks "true" strictly. # expect(foo).to be(true) # # @example Strict: false, EnforcedStyle: inflected # # bad # expect(foo.something?).to be_truthy # expect(foo).to be(true) # # # good # expect(foo).to be_something # # @example Strict: true, EnforcedStyle: explicit # # bad # expect(foo).to be_something # # # good - the above code is rewritten to it by this cop # expect(foo.something?).to be(true) # # @example Strict: false, EnforcedStyle: explicit # # bad # expect(foo).to be_something # # # good - the above code is rewritten to it by this cop # expect(foo.something?).to be_truthy
def UNK on_lparen send_node on_rparen on_ignored_nl send_node on_period loc on_period UNK on_period end on_period UNK on_lparen on_ignored_nl on_label send_node on_period # returns args location with whitespace # @example # foo 1, 2 # ^^^^^
def block_loc on_lparen send_node on_rparen on_ignored_nl UNK on_op send_node on_period UNK on_nl UNK UNK UNK on_period UNK on_nl on_ignored_nl send_node # returns block location with whitespace # @example # foo { bar } # ^^^^^^^^
