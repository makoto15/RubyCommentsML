on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl on_const on_op UNK on_tstring_content UNK # frozen_string_literal: true
UNK on_const on_op on_const on_nl on_const on_op UNK on_tstring_content UNK UNK on_tstring_content UNK on_nl on_ignored_nl UNK on_symbeg UNK UNK UNK # Checks for explicitly referenced test subjects. # # RSpec lets you declare an "implicit subject" using `subject { ... }` # which allows for tests like `it { is_expected.to be_valid }`. # If you need to reference your test subject you should explicitly # name it using `subject(:your_subject_name) { ... }`. Your test subjects # should be the most important object in your tests so they deserve # a descriptive name. # # This cop can be configured in your configuration using the # `IgnoreSharedExamples` which will not report offenses for implicit # subjects in shared example groups. # # @example # # bad # RSpec.describe User do # subject { described_class.new } # # it 'is valid' do # expect(subject.valid?).to be(true) # end # end # # # good # RSpec.describe Foo do # subject(:user) { described_class.new } # # it 'is valid' do # expect(user.valid?).to be(true) # end # end # # # also good # RSpec.describe Foo do # subject(:user) { described_class.new } # # it { is_expected.to be_valid } # end
