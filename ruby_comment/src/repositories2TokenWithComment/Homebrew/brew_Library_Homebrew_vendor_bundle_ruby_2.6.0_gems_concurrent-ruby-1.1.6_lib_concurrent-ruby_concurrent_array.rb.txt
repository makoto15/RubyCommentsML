on_ignored_nl on_const on_op UNK on_ignored_nl UNK on_const on_period UNK on_nl on_op on_const on_nl on_ignored_nl UNK on_const on_period UNK on_nl require # @!macro concurrent_array # # A thread-safe subclass of Array. This version locks against the object # itself for every method call, ensuring only one thread can be reading # or writing at a time. This includes iteration methods like `#each`. # # @note `a += b` is **not** a **thread-safe** operation on # `Concurrent::Array`. It reads array `a`, then it creates new `Concurrent::Array` # which is concatenation of `a` and `b`, then it writes the concatenation to `a`. # The read and write are independent operations they do not form a single atomic # operation therefore when two `+=` operations are executed concurrently updates # may be lost. Use `#concat` instead. # # @see http://ruby-doc.org/core-2.2.0/Array.html Ruby standard library `Array`
on_const on_op UNK on_ignored_nl UNK on_const on_period UNK on_nl on_op on_const on_nl on_ignored_nl UNK on_const on_period UNK on_nl require on_tstring_beg # @!macro internal_implementation_note
on_op on_const on_nl on_ignored_nl UNK on_const on_period UNK on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_op on_op on_const # Array is thread-safe in practice because CRuby runs # threads one at a time and does not do context # switching during the execution of C functions.
UNK on_const on_op on_const on_nl end on_nl on_ignored_nl end on_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP # @!macro concurrent_array
