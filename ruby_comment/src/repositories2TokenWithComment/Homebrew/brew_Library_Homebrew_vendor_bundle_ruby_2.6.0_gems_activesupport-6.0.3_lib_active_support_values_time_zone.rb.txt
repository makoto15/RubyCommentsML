on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl on_const on_op # frozen_string_literal: true
UNK on_const on_nl on_const on_op UNK on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op # The TimeZone class serves as a wrapper around TZInfo::Timezone instances. # It allows us to do the following: # # * Limit the set of zones provided by TZInfo to a meaningful subset of 134 # zones. # * Retrieve and display zones with a friendlier name # (e.g., "Eastern Time (US & Canada)" instead of "America/New_York"). # * Lazily load TZInfo::Timezone instances only when they're needed. # * Create ActiveSupport::TimeWithZone instances via TimeZone's +local+, # +parse+, +at+ and +now+ methods. # # If you set <tt>config.time_zone</tt> in the Rails Application, you can # access this TimeZone object via <tt>Time.zone</tt>: # # # application.rb: # class Application < Rails::Application # config.time_zone = 'Eastern Time (US & Canada)' # end # # Time.zone # => #<ActiveSupport::TimeZone:0x514834...> # Time.zone.name # => "Eastern Time (US & Canada)" # Time.zone.now # => Sun, 18 May 2008 14:30:44 EDT -04:00
on_const on_op UNK on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op on_tstring_beg on_tstring_content on_tstring_end on_comma on_ignored_nl on_tstring_beg on_tstring_content on_tstring_end on_op on_tstring_beg on_tstring_content on_tstring_end # Keys are Rails TimeZone names, values are TZInfo identifiers.
on_const on_op on_const on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_end on_rparen UNK on_symbeg on_const on_comma on_symbeg on_const on_nl # :nodoc:
UNK on_symbeg on_const on_comma on_symbeg on_const on_nl on_ignored_nl on_ivar on_op on_const on_op on_const on_period new on_nl on_ivar on_op on_const on_op # :nodoc:
def UNK on_lparen seconds on_comma UNK on_op UNK on_rparen on_ignored_nl UNK on_op UNK on_op on_const on_op on_const on_nl UNK on_op # Assumes self represents an offset from UTC in seconds (as returned from # Time#utc_offset) and turns this into an +HH:MM formatted string. # # ActiveSupport::TimeZone.seconds_to_utc_offset(-21_600) # => "-06:00"
def new on_lparen name on_rparen on_ignored_nl self on_lbracket name on_rbracket on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op UNK # Returns a TimeZone instance with the given name, or +nil+ if no # such TimeZone instance exists. (This exists to support the use of # this class with the +composed_of+ macro.)
def UNK on_nl on_ivar on_op UNK on_period UNK on_period UNK on_nl end on_nl on_ignored_nl def on_op on_lparen arg on_rparen on_ignored_nl # Returns an array of all TimeZone objects. There are multiple # TimeZone objects per time zone, in many cases, to make it easier # for users to find their own time zone.
def on_op on_lparen arg on_rparen on_ignored_nl UNK arg on_nl UNK on_const on_nl UNK on_ignored_nl on_ivar on_lbracket arg on_rbracket on_op UNK # Locate a specific time zone object. If the argument is a string, it # is interpreted to mean the name of the timezone to locate. If it is a # numeric value it is either the hour offset, or the second offset, of the # timezone to find. (The first one with that offset will be returned.) # Returns +nil+ if no such time zone is known to the system.
def UNK on_nl UNK on_lparen on_symbeg UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op # A convenience method for returning a collection of TimeZone objects # for time zones in the USA.
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_period UNK on_nl on_ivar on_lbracket UNK on_rbracket on_op UNK # A convenience method for returning a collection of TimeZone objects # for time zones in the country specified by its ISO 3166-1 Alpha2 code.
on_ivar on_op on_const on_op on_const on_period new on_nl on_ivar on_op on_const on_op on_const on_period new on_nl on_ivar on_op nil on_nl #:nodoc:
def UNK on_lparen name on_comma utc_offset on_op nil on_comma tzinfo on_op nil on_rparen on_ignored_nl on_ivar on_op name on_nl on_ivar on_op # Create a new TimeZone object with the given name and offset. The # offset is the number of seconds that this time zone is offset from UTC # (GMT). Seconds were chosen as the offset unit because that is the unit # that Ruby uses to represent time zone offsets (see Time#utc_offset).
def utc_offset on_nl if on_ivar on_nl on_ivar on_nl else on_ignored_nl tzinfo on_period UNK on_period utc_offset if tzinfo on_op tzinfo on_period # Returns the offset of this time zone from UTC in seconds.
def UNK on_lparen UNK on_op UNK on_comma UNK on_op nil on_rparen on_ignored_nl utc_offset on_op on_int on_op UNK on_op self on_period # Returns a formatted string of the offset from UTC, or an alternative # string if the time zone is already UTC. # # zone = ActiveSupport::TimeZone['Central Time (US & Canada)'] # zone.formatted_offset # => "-06:00" # zone.formatted_offset(false) # => "-0600"
def on_op on_lparen UNK on_rparen on_ignored_nl UNK UNK UNK on_period UNK on_symbeg utc_offset on_nl UNK on_op on_lparen utc_offset on_op UNK # Compare this time zone to the parameter. The two are compared first on # their offsets, and then by name.
def on_op on_lparen UNK on_rparen on_ignored_nl UNK on_op name on_op UNK on_op on_const on_lbracket name on_rbracket on_nl end on_nl on_ignored_nl # Compare #name and TZInfo identifier to a supplied regexp, returning +true+ # if a match is found.
def UNK on_nl on_tstring_beg on_tstring_content UNK UNK UNK on_tstring_content UNK name UNK on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_lparen # Returns a textual representation of this time zone.
def UNK on_lparen on_op UNK on_rparen on_ignored_nl time on_op on_const on_period utc on_lparen on_op UNK on_rparen on_nl on_const on_op on_const # Method for creating new ActiveSupport::TimeWithZone instance in time zone # of +self+ from given values. # # Time.zone = 'Hawaii' # => "Hawaii" # Time.zone.local(2007, 2, 1, 15, 30, 45) # => Thu, 01 Feb 2007 15:30:45 HST -10:00
def UNK on_lparen on_op UNK on_rparen on_ignored_nl on_const on_period UNK on_lparen on_op UNK on_rparen on_period utc on_period UNK on_lparen self # Method for creating new ActiveSupport::TimeWithZone instance in time zone # of +self+ from number of seconds since the Unix epoch. # # Time.zone = 'Hawaii' # => "Hawaii" # Time.utc(2000).to_f # => 946684800.0 # Time.zone.at(946684800.0) # => Fri, 31 Dec 1999 14:00:00 HST -10:00 # # A second argument can be supplied to specify sub-second precision. # # Time.zone = 'Hawaii' # => "Hawaii" # Time.at(946684800, 123456.789).nsec # => 123456789
def UNK on_lparen str on_rparen on_ignored_nl parts on_op on_const on_period UNK on_lparen str on_rparen on_nl on_ignored_nl UNK on_const on_comma on_tstring_beg # Method for creating new ActiveSupport::TimeWithZone instance in time zone # of +self+ from an ISO 8601 string. # # Time.zone = 'Hawaii' # => "Hawaii" # Time.zone.iso8601('1999-12-31T14:00:00') # => Fri, 31 Dec 1999 14:00:00 HST -10:00 # # If the time components are missing then they will be set to zero. # # Time.zone = 'Hawaii' # => "Hawaii" # Time.zone.iso8601('1999-12-31') # => Fri, 31 Dec 1999 00:00:00 HST -10:00 # # If the string is invalid then an +ArgumentError+ will be raised unlike +parse+ # which usually returns +nil+ when given an invalid date string.
def UNK on_lparen str on_comma now on_op now on_lparen on_rparen on_rparen on_ignored_nl UNK on_lparen on_const on_period UNK on_lparen str on_comma # Method for creating new ActiveSupport::TimeWithZone instance in time zone # of +self+ from parsed string. # # Time.zone = 'Hawaii' # => "Hawaii" # Time.zone.parse('1999-12-31 14:00:00') # => Fri, 31 Dec 1999 14:00:00 HST -10:00 # # If upper components are missing from the string, they are supplied from # TimeZone#now: # # Time.zone.now # => Fri, 31 Dec 1999 14:00:00 HST -10:00 # Time.zone.parse('22:30:00') # => Fri, 31 Dec 1999 22:30:00 HST -10:00 # # However, if the date component is not provided, but any other upper # components are supplied, then the day of the month defaults to 1: # # Time.zone.parse('Mar 2000') # => Wed, 01 Mar 2000 00:00:00 HST -10:00 # # If the string is invalid then an +ArgumentError+ could be raised.
def UNK on_lparen str on_rparen on_ignored_nl parts on_op on_const on_period UNK on_lparen str on_rparen on_nl on_ignored_nl UNK on_const on_comma on_tstring_beg # Method for creating new ActiveSupport::TimeWithZone instance in time zone # of +self+ from an RFC 3339 string. # # Time.zone = 'Hawaii' # => "Hawaii" # Time.zone.rfc3339('2000-01-01T00:00:00Z') # => Fri, 31 Dec 1999 14:00:00 HST -10:00 # # If the time or zone components are missing then an +ArgumentError+ will # be raised. This is much stricter than either +parse+ or +iso8601+ which # allow for missing components. # # Time.zone = 'Hawaii' # => "Hawaii" # Time.zone.rfc3339('1999-12-31') # => ArgumentError: invalid date
def UNK on_lparen str on_comma UNK on_comma now on_op now on_lparen on_rparen on_rparen on_ignored_nl UNK on_lparen on_const on_period UNK on_lparen # Parses +str+ according to +format+ and returns an ActiveSupport::TimeWithZone. # # Assumes that +str+ is a time in the time zone +self+, # unless +format+ includes an explicit time zone. # (This is the same behavior as +parse+.) # In either case, the returned TimeWithZone has the timezone of +self+. # # Time.zone = 'Hawaii' # => "Hawaii" # Time.zone.strptime('1999-12-31 14:00:00', '%Y-%m-%d %H:%M:%S') # => Fri, 31 Dec 1999 14:00:00 HST -10:00 # # If upper components are missing from the string, they are supplied from # TimeZone#now: # # Time.zone.now # => Fri, 31 Dec 1999 14:00:00 HST -10:00 # Time.zone.strptime('22:30:00', '%H:%M:%S') # => Fri, 31 Dec 1999 22:30:00 HST -10:00 # # However, if the date component is not provided, but any other upper # components are supplied, then the day of the month defaults to 1: # # Time.zone.strptime('Mar 2000', '%b %Y') # => Wed, 01 Mar 2000 00:00:00 HST -10:00
def now on_nl UNK on_period utc on_period UNK on_lparen self on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl tzinfo on_period # Returns an ActiveSupport::TimeWithZone instance representing the current # time in the time zone represented by +self+. # # Time.zone = 'Hawaii' # => "Hawaii" # Time.zone.now # => Wed, 23 Jan 2008 20:24:27 HST -10:00
def UNK on_nl tzinfo on_period now on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op on_int on_nl end # Returns the current date in this time zone.
def UNK on_nl UNK on_op on_int on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op on_int on_nl end on_nl on_ignored_nl # Returns the next date in this time zone.
def UNK on_nl UNK on_op on_int on_nl end on_nl on_ignored_nl def UNK on_lparen time on_rparen on_ignored_nl tzinfo on_period UNK on_lparen # Returns the previous date in this time zone.
def UNK on_lparen time on_rparen on_ignored_nl tzinfo on_period UNK on_lparen time on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen time # Adjust the given time to the simultaneous time in the time zone # represented by +self+. Returns a Time.utc() instance -- if you want an # ActiveSupport::TimeWithZone instance, use Time#in_time_zone() instead.
def UNK on_lparen time on_comma UNK on_op UNK on_rparen on_ignored_nl tzinfo on_period UNK on_lparen time on_comma UNK on_rparen on_nl end # Adjust the given time to the simultaneous time in UTC. Returns a # Time.utc() instance.
def UNK on_lparen time on_rparen on_ignored_nl tzinfo on_period UNK on_lparen time on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen time # Available so that TimeZone instances respond like TZInfo::Timezone # instances.
def UNK on_lparen time on_comma UNK on_op UNK on_rparen on_ignored_nl tzinfo on_period UNK on_lparen time on_comma UNK on_rparen UNK on_op # Available so that TimeZone instances respond like TZInfo::Timezone # instances.
tzinfo on_period UNK on_lparen time on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen UNK on_lparen UNK on_lbracket on_tstring_beg #:nodoc:
UNK on_lparen UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen UNK on_period #:nodoc:
UNK on_period UNK on_op on_tstring_beg on_tstring_content UNK self on_period UNK UNK on_tstring_end on_nl UNK on_period UNK on_op UNK on_tstring_beg on_tstring_content #:nodoc:
