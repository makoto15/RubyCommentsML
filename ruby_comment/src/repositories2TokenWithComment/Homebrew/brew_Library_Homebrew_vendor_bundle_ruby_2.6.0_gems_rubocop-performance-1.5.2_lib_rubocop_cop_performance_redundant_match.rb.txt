on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl on_const on_op UNK UNK UNK # frozen_string_literal: true
UNK on_const on_op on_const on_nl on_const on_op UNK UNK UNK UNK UNK UNK on_nl on_ignored_nl UNK UNK UNK UNK UNK # This cop identifies the use of `Regexp#match` or `String#match`, which # returns `#<MatchData>`/`nil`. The return value of `=~` is an integral # index/`nil` and is more performant. # # @example # # bad # do_something if str.match(/regex/) # while regex.match('str') # do_something # end # # # good # method(str =~ /regex/) # return value unless regex =~ 'str'
UNK UNK UNK UNK UNK on_nl UNK UNK on_ignored_nl UNK UNK UNK UNK UNK on_nl UNK UNK on_ignored_nl UNK UNK # 'match' is a fairly generic name, so we don't flag it unless we see # a string or regexp literal on one side or the other
UNK UNK node on_period UNK on_period UNK on_nl on_ignored_nl UNK on_op on_ignored_nl node on_period UNK on_period UNK on_op UNK UNK # Regexp#match can take a second argument, but this cop doesn't # register an offense in that case
