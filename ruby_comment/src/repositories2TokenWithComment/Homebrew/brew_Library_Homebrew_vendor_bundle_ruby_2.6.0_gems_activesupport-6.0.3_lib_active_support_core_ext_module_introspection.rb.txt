on_ignored_nl UNK UNK on_tstring_content UNK on_nl UNK UNK on_tstring_content UNK on_nl on_ignored_nl UNK on_const on_nl def module_parent_name on_nl UNK UNK # frozen_string_literal: true
def module_parent_name on_nl UNK UNK on_lparen UNK on_rparen on_nl UNK on_nl UNK on_ignored_nl UNK on_op UNK on_op UNK on_tstring_content UNK # Returns the name of the module containing this one. # # M::N.module_parent_name # => "M"
def UNK on_nl module_parent_name on_op on_const on_op on_const on_period UNK on_lparen module_parent_name on_rparen on_op on_const on_nl end on_nl on_ignored_nl def # Returns the module which contains this one according to its name. # # module M # module N # end # end # X = M::N # # M::N.module_parent # => M # X.module_parent # => M # # The parent of top-level and anonymous modules is Object. # # M.module_parent # => Object # Module.new.module_parent # => Object
def UNK on_nl parents on_op UNK UNK on_nl UNK module_parent_name on_nl UNK on_op module_parent_name on_period UNK on_lparen UNK on_tstring_content UNK # Returns all the parents of this module according to its name, ordered from # nested outwards. The receiver is not contained within the result. # # module M # module N # end # end # X = M::N # # M.module_parents # => [Object] # M::N.module_parents # => [M, Object] # X.module_parents # => [M, Object]
