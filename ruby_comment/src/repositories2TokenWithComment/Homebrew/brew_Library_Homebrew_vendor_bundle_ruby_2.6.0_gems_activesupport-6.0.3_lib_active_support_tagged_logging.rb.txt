on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end # frozen_string_literal: true
UNK on_const on_nl UNK on_const def UNK on_lparen UNK on_comma UNK on_comma UNK on_comma UNK on_rparen on_ignored_nl UNK on_lparen UNK # Wraps any standard Logger object to provide tagging capabilities. # # logger = ActiveSupport::TaggedLogging.new(Logger.new(STDOUT)) # logger.tagged('BCX') { logger.info 'Stuff' } # Logs "[BCX] Stuff" # logger.tagged('BCX', "Jason") { logger.info 'Stuff' } # Logs "[BCX] [Jason] Stuff" # logger.tagged('BCX') { logger.tagged('Jason') { logger.info 'Stuff' } } # Logs "[BCX] [Jason] Stuff" # # This is used by the default Rails.logger as configured by Railties to make # it easy to stamp log lines with subdomains, request ids, and anything else # to aid debugging of multi-user production applications.
def UNK on_lparen UNK on_comma UNK on_comma UNK on_comma UNK on_rparen on_ignored_nl UNK on_lparen UNK on_comma UNK on_comma UNK on_comma # :nodoc: # This method is invoked when a log event occurs.
UNK on_op UNK on_op on_tstring_beg on_tstring_content UNK UNK UNK on_tstring_end on_nl on_const on_period UNK UNK UNK UNK on_op UNK UNK # We use our object ID here to avoid conflicting with other instances
logger on_period formatter on_op on_const on_op on_const on_op on_const on_period UNK on_nl end on_nl on_ignored_nl logger on_period formatter on_period UNK # Ensure we set a default formatter so we aren't extending nil!
