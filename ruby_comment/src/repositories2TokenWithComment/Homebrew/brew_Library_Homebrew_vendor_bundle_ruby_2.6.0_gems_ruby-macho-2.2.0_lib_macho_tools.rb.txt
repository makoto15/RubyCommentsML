UNK on_const on_nl def self on_period UNK on_lparen filename on_rparen on_ignored_nl file on_op on_const on_period open on_lparen filename on_rparen on_nl # A collection of convenient methods for common operations on Mach-O and Fat # binaries.
def self on_period UNK on_lparen filename on_rparen on_ignored_nl file on_op on_const on_period open on_lparen filename on_rparen on_nl on_ignored_nl file on_period # @param filename [String] the Mach-O or Fat binary being read # @return [Array<String>] an array of all dylibs linked to the binary
def self on_period UNK on_lparen filename on_comma UNK on_comma options on_op UNK UNK on_rparen on_ignored_nl file on_op on_const on_period open # Changes the dylib ID of a Mach-O or Fat binary, overwriting the source # file. # @param filename [String] the Mach-O or Fat binary being modified # @param new_id [String] the new dylib ID for the binary # @param options [Hash] # @option options [Boolean] :strict (true) whether or not to fail loudly # with an exception if the change cannot be performed # @return [void]
def self on_period UNK on_lparen filename on_comma UNK on_comma UNK on_comma options on_op UNK UNK on_rparen on_ignored_nl file on_op on_const # Changes a shared library install name in a Mach-O or Fat binary, # overwriting the source file. # @param filename [String] the Mach-O or Fat binary being modified # @param old_name [String] the old shared library name # @param new_name [String] the new shared library name # @param options [Hash] # @option options [Boolean] :strict (true) whether or not to fail loudly # with an exception if the change cannot be performed # @return [void]
def self on_period UNK on_lparen filename on_comma UNK on_comma UNK on_comma options on_op UNK UNK on_rparen on_ignored_nl file on_op on_const # Changes a runtime path in a Mach-O or Fat binary, overwriting the source # file. # @param filename [String] the Mach-O or Fat binary being modified # @param old_path [String] the old runtime path # @param new_path [String] the new runtime path # @param options [Hash] # @option options [Boolean] :strict (true) whether or not to fail loudly # with an exception if the change cannot be performed # @return [void]
def self on_period UNK on_lparen filename on_comma UNK on_comma options on_op UNK UNK on_rparen on_ignored_nl file on_op on_const on_period open # Add a runtime path to a Mach-O or Fat binary, overwriting the source file. # @param filename [String] the Mach-O or Fat binary being modified # @param new_path [String] the new runtime path # @param options [Hash] # @option options [Boolean] :strict (true) whether or not to fail loudly # with an exception if the change cannot be performed # @return [void]
def self on_period UNK on_lparen filename on_comma UNK on_comma options on_op UNK UNK on_rparen on_ignored_nl file on_op on_const on_period open # Delete a runtime path from a Mach-O or Fat binary, overwriting the source # file. # @param filename [String] the Mach-O or Fat binary being modified # @param old_path [String] the old runtime path # @param options [Hash] # @option options [Boolean] :strict (true) whether or not to fail loudly # with an exception if the change cannot be performed # @return [void]
def self on_period UNK on_lparen filename on_comma on_op UNK on_comma UNK UNK on_rparen on_ignored_nl UNK on_op UNK on_period UNK UNK # Merge multiple Mach-Os into one universal (Fat) binary. # @param filename [String] the fat binary to create # @param files [Array<String>] the files to merge # @param fat64 [Boolean] whether to use {Headers::FatArch64}s to represent each slice # @return [void]
