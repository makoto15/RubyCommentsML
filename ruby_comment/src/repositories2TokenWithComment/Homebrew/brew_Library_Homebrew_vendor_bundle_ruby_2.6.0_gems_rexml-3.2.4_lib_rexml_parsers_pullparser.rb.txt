UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end # frozen_string_literal: false
UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl on_ignored_nl UNK on_lparen on_symbeg on_ivar on_comma on_symbeg UNK on_rparen on_nl UNK # = Using the Pull Parser # <em>This API is experimental, and subject to change.</em> # parser = PullParser.new( "<a>text<b att='val'/>txet</a>" ) # while parser.has_next? # res = parser.next # puts res[1]['att'] if res.start_tag? and res[0] == 'b' # end # See the PullEvent class for information on the content of the results. # The data is identical to the arguments passed for the various events to # the StreamListener API. # # Notice that: # parser = PullParser.new( "<a>BAD DOCUMENT" ) # while parser.has_next? # res = parser.next # raise res[1] if res.error? # end # # Nat Price gave me some good ideas for the API.
UNK on_const on_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def on_op on_lparen start # A parsing event. The contents of the event are accessed as an +Array?, # and the type is given either by the ...? methods, or by accessing the # +type+ accessor. The contents of this object vary from event to event, # but are identical to the arguments passed to +StreamListener+s for each # event.
def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def on_op on_lparen start on_comma UNK on_op # The type of this event. Will be one of :tag_start, :tag_end, :text, # :processing_instruction, :comment, :doctype, :attlistdecl, :entitydecl, # :notationdecl, :entity, :cdata, :xmldecl, or :error.
def UNK on_nl on_ivar on_lbracket on_int on_rbracket on_op on_symbeg UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_lbracket on_int # Content: [ String tag_name, Hash attributes ]
def UNK on_nl on_ivar on_lbracket on_int on_rbracket on_op on_symbeg UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_lbracket on_int # Content: [ String tag_name ]
def UNK on_nl on_ivar on_lbracket on_int on_rbracket on_op on_symbeg UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_lbracket on_int # Content: [ String raw_text, String unnormalized_text ]
def UNK on_nl on_ivar on_lbracket on_int on_rbracket on_op on_symbeg UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_lbracket on_int # Content: [ String text ]
def UNK on_nl on_ivar on_lbracket on_int on_rbracket on_op on_symbeg UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_lbracket on_int # Content: [ String text ]
def UNK on_nl on_ivar on_lbracket on_int on_rbracket on_op on_symbeg UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_lbracket on_int # Content: [ String name, String pub_sys, String long_name, String uri ]
def UNK on_nl on_ivar on_lbracket on_int on_rbracket on_op on_symbeg UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_lbracket on_int # Content: [ String text ]
def UNK on_nl on_ivar on_lbracket on_int on_rbracket on_op on_symbeg UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_lbracket on_int # Content: [ String text ]
def UNK on_nl on_ivar on_lbracket on_int on_rbracket on_op on_symbeg UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_lbracket on_int # Due to the wonders of DTDs, an entity declaration can be just about # anything. There's no way to normalize it; you'll have to interpret the # content yourself. However, the following is true: # # * If the entity declaration is an internal entity: # [ String name, String value ] # Content: [ String text ]
def UNK on_nl on_ivar on_lbracket on_int on_rbracket on_op on_symbeg UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_lbracket on_int # Content: [ String text ]
def UNK on_nl on_ivar on_lbracket on_int on_rbracket on_op on_symbeg UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_lbracket on_int # Content: [ String text ]
def UNK on_nl on_ivar on_lbracket on_int on_rbracket on_op on_symbeg UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_lbracket on_int # Content: [ String text ]
def UNK on_nl on_ivar on_lbracket on_int on_rbracket on_op on_symbeg UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_lbracket on_int # Content: [ String version, String encoding, String standalone ]
