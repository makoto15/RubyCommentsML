UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl def on_const on_op UNK on_lparen arg on_rparen on_ignored_nl # coding: US-ASCII # frozen_string_literal: false
UNK on_const on_nl def on_const on_op UNK on_lparen arg on_rparen on_ignored_nl if arg on_period respond_to? on_symbeg UNK and on_ignored_nl arg # Generates Source-s. USE THIS CLASS.
def on_const on_op UNK on_lparen arg on_rparen on_ignored_nl if arg on_period respond_to? on_symbeg UNK and on_ignored_nl arg on_period respond_to? on_symbeg # Generates a Source object # @param arg Either a String, or an IO # @return a Source, or nil if a bad argument was given
UNK on_const on_nl UNK on_const on_nl UNK on_symbeg UNK on_nl UNK on_symbeg UNK on_nl UNK on_symbeg encoding on_nl on_ignored_nl def # A Source can be searched for patterns, and wraps buffers and other # objects and provides consumption of text
UNK on_symbeg UNK on_nl UNK on_symbeg UNK on_nl UNK on_symbeg encoding on_nl on_ignored_nl def UNK on_lparen arg on_comma encoding on_op # The current buffer (what we're going to read next)
UNK on_symbeg UNK on_nl UNK on_symbeg encoding on_nl on_ignored_nl def UNK on_lparen arg on_comma encoding on_op nil on_rparen on_ignored_nl on_ivar # The line number of the last consumed text
def UNK on_lparen arg on_comma encoding on_op nil on_rparen on_ignored_nl on_ivar on_op on_ivar on_op arg on_nl if encoding on_nl UNK # Constructor # @param arg must be a String, and should be a valid XML document # @param encoding if non-null, sets the encoding of the source to this # value, overriding all encoding detection
def UNK on_lparen UNK on_rparen on_ignored_nl return UNK super on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_lparen pattern on_comma # Inherited from Encoding # Overridden to support optimized en/decoding
def UNK on_lparen pattern on_comma cons on_op false on_rparen on_ignored_nl return nil if on_ivar on_period nil? on_nl rv on_op on_ivar # Scans the source for a given pattern. Note, that this is not your # usual scan() method. For one thing, the pattern argument has some # requirements; for another, the source can be consumed. You can easily # confuse this method. Originally, the patterns were easier # to construct and this method more robust, because this method # generated search regexps on the fly; however, this was # computationally expensive and slowed down the entire REXML package # considerably, since this is by far the most commonly called method. # @param pattern must be a Regexp, and must be in the form of # /^\s*(#{your pattern, with no groups})(.*)/. The first group # will be returned; the second group is used if the consume flag is # set. # @param consume if true, the pattern returned will be consumed, leaving # everything after it in the Source. # @return the pattern, if found, or nil if the Source is empty or the # pattern is not found.
def UNK on_nl on_ivar on_op on_tstring_beg on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK on_lparen on_ivar on_rparen # @return true if the Source is exhausted
def UNK on_nl UNK on_op on_ivar on_period UNK on_nl res on_op UNK on_period UNK on_ivar on_lbracket on_int on_op on_int on_rbracket # @return the current line in the source
UNK on_const on_op on_const on_nl on_ignored_nl def UNK on_lparen arg on_comma UNK on_op on_int on_comma encoding on_op nil on_rparen on_ignored_nl # A Source that wraps an IO. See the Source class for method # documentation
on_ignored_nl def UNK on_lparen arg on_comma UNK on_op on_int on_comma encoding on_op nil on_rparen on_ignored_nl on_ivar on_op on_ivar on_op arg #attr_reader :block_size
def UNK on_lparen arg on_comma UNK on_op on_int on_comma encoding on_op nil on_rparen on_ignored_nl on_ivar on_op on_ivar on_op arg on_nl # block_size has been deprecated
if rv on_period UNK on_op on_int on_nl UNK on_ivar on_op pattern UNK on_ivar on_period nil? on_nl begin on_ignored_nl on_ivar on_op # You'll notice that this next section is very similar to the same # section in match(), but just a liiittle different. This is # because it is a touch faster to do it this way with scan() # than the way match() does it; enough faster to warrant duplicating # some code
def UNK on_nl begin on_ignored_nl pos on_op on_ivar on_period pos UNK on_op on_ivar on_period UNK on_ivar on_period UNK on_nl UNK # @return the current line in the source
UNK on_op on_ivar on_period UNK on_ivar on_period UNK on_nl UNK on_op on_int begin on_ignored_nl UNK on_ivar on_period pos on_op pos # The byte position in the source
on_ivar on_period UNK on_nl UNK on_op on_int begin on_ignored_nl UNK on_ivar on_period pos on_op pos on_nl on_ivar on_period readline on_nl # The XML < position in the source
begin on_ignored_nl UNK on_ivar on_period pos on_op pos on_nl on_ivar on_period readline on_nl UNK on_op on_int on_nl end on_nl rescue # The \r\n position in the source
