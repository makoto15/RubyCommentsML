on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_period # frozen_string_literal: true
UNK on_const on_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_lparen on_op on_const on_period UNK on_lparen # Extracts cop descriptions from YARD docstrings
UNK on_const on_nl on_const on_op UNK on_tstring_content UNK on_tstring_content UNK on_period UNK on_nl on_const on_op UNK on_tstring_content UNK on_nl on_ignored_nl # Decorator of a YARD code object for working with documented rspec cops
def UNK on_nl UNK on_op on_ignored_nl UNK on_op on_ignored_nl UNK on_op on_ignored_nl on_op UNK on_nl end on_nl on_ignored_nl def UNK # Test if the YARD code object documents a concrete rspec cop class # # @return [Boolean]
def UNK on_nl UNK UNK on_op UNK UNK on_tstring_content UNK on_op UNK UNK UNK on_nl end on_nl on_ignored_nl UNK on_nl # Configuration for the documented cop that would live in default.yml # # @return [Hash]
on_const on_period UNK on_lparen yardoc on_period UNK on_period UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl yardoc on_period UNK # YARD superclass resolution is a bit flaky: All classes loaded before # RuboCop::Cop::WorkaroundCop are shown as having RuboCop::Cop as # superclass, while all the following classes are listed as having # RuboCop::Cop::RSpec::Cop as their superclass.
