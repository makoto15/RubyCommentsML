on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end # frozen_string_literal: true
on_const on_period UNK UNK on_const on_period UNK on_nl on_ignored_nl args on_period formulae on_period UNK UNK on_op f on_op on_ignored_nl if # if the user's flags will prevent bottle only-installations when no # developer tools are available, we need to stop them early on
if on_op args on_period UNK on_op f on_period UNK on_period nil? on_op f on_period UNK on_period nil? on_nl UNK on_heredoc_beg # head-only without --HEAD is an error
if on_op args on_period UNK on_op f on_period UNK on_period nil? on_op f on_period UNK on_period nil? on_nl UNK on_heredoc_beg # devel-only without --devel is an error
UNK on_tstring_beg on_tstring_content on_embexpr_beg f on_period full_name on_embexpr_end on_tstring_end if args on_period UNK on_op f on_period UNK on_period nil? on_nl # --HEAD, fail with no head defined
UNK on_tstring_beg on_tstring_content on_embexpr_beg f on_period full_name on_embexpr_end on_tstring_end if args on_period UNK on_op f on_period UNK on_period nil? on_nl # --devel, fail with no devel defined
if f on_period UNK on_nl UNK on_op on_const on_period UNK on_lparen f on_period UNK on_rparen on_period UNK on_nl UNK on_heredoc_beg # keg-only install is only possible when no other version is # linked to opt, because installing without any warnings can break # dependencies. Therefore before performing other checks we need to be # sure --force flag is passed.
on_ignored_nl UNK on_op if args on_period UNK on_nl f on_period UNK on_nl else on_ignored_nl f on_period UNK on_nl end on_nl # After we're sure that --force flag is passed for linked to opt # keg-only we need to be sure that the version we're attempting to # install is not already installed.
UNK on_heredoc_beg on_nl on_ignored_sp on_embexpr_beg f on_period UNK on_embexpr_end on_tstring_content on_ignored_sp on_tstring_content on_embexpr_beg f on_embexpr_end on_tstring_content on_ignored_sp on_tstring_content on_embexpr_beg f # Check if the formula we try to install is the same as installed # but not migrated one. If --force is passed then install anyway.
formulae on_op f on_nl end on_nl on_ignored_nl UNK UNK f on_period UNK on_period UNK on_nl on_ignored_nl UNK on_op on_const on_period # If none of the above is true and the formula is linked, then # FormulaInstaller will handle this case.
UNK UNK f on_period UNK on_period UNK on_nl on_ignored_nl UNK on_op on_const on_period UNK on_lparen f on_period UNK on_period UNK # Even if we don't install this formula mark it as no longer just # installed as a dependency.
ofail e on_period UNK on_nl UNK on_const on_op e on_nl if e on_period name on_op on_tstring_beg on_tstring_content on_tstring_end on_nl ofail # Need to rescue before `FormulaUnavailableError` (superclass of this) # is handled, as searching for a formula doesn't make sense here (the # formula was found, but there's a problem with its implementation).
UNK if e on_period name on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl taps_search_results # Do not search taps if the formula name is qualified
UNK on_nl UNK on_const on_op e on_nl ofail e on_period UNK on_nl end on_nl end on_nl EMP EMP EMP EMP # We already attempted to install f as part of the dependency tree of # another formula. In that case, don't generate an error, just move on.
