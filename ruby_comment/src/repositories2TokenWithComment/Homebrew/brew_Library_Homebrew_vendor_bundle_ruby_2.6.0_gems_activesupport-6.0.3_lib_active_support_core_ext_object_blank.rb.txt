on_ignored_nl UNK UNK UNK UNK on_nl on_ignored_nl class on_const on_nl def blank? on_nl UNK UNK UNK UNK UNK on_op on_op # frozen_string_literal: true
def blank? on_nl UNK UNK UNK UNK UNK on_op on_op on_op UNK on_op on_op UNK on_nl end on_nl on_ignored_nl def # An object is blank if it's false, empty, or a whitespace string. # For example, +nil+, '', ' ', [], {}, and +false+ are all blank. # # This simplifies # # !address || address.empty? # # to # # address.blank? # # @return [true, false]
def UNK on_nl on_op blank? on_nl end on_nl on_ignored_nl def UNK on_nl UNK UNK UNK on_nl end on_nl end on_nl # An object is present if it's not blank. # # @return [true, false]
def UNK on_nl UNK UNK UNK on_nl end on_nl end on_nl on_ignored_nl class on_const on_nl def blank? on_nl UNK on_nl # Returns the receiver if it's present otherwise returns +nil+. # <tt>object.presence</tt> is equivalent to # # object.present? ? object : nil # # For example, something like # # state = params[:state] if params[:state].present? # country = params[:country] if params[:country].present? # region = state || country || 'US' # # becomes # # region = params[:state].presence || params[:country].presence || 'US' # # @return [Object]
def blank? on_nl UNK on_nl end on_nl end on_nl on_ignored_nl class on_const on_nl def blank? on_nl UNK on_nl end on_nl # +nil+ is blank: # # nil.blank? # => true # # @return [true]
def blank? on_nl UNK on_nl end on_nl end on_nl on_ignored_nl class on_const on_nl def blank? on_nl UNK on_nl end on_nl # +false+ is blank: # # false.blank? # => true # # @return [true]
def blank? on_nl UNK on_nl end on_nl end on_nl on_ignored_nl class on_const on_nl UNK UNK blank? UNK UNK UNK on_nl # +true+ is not blank: # # true.blank? # => false # # @return [false]
UNK UNK blank? UNK UNK UNK on_nl end on_nl on_ignored_nl class on_const on_nl UNK UNK blank? UNK UNK UNK on_nl # An array is blank if it's empty: # # [].blank? # => true # [1,2,3].blank? # => false # # @return [true, false]
UNK UNK blank? UNK UNK UNK on_nl end on_nl on_ignored_nl class on_const on_nl on_const on_op UNK UNK UNK on_nl on_const # A hash is blank if it's empty: # # {}.blank? # => true # { key: 'value' }.blank? # => false # # @return [true, false]
def blank? on_nl UNK on_op on_ignored_nl UNK on_ignored_nl on_const on_period UNK UNK UNK UNK on_nl UNK on_const on_op on_const on_nl # A string is blank if it's empty or contains whitespaces only: # # ''.blank? # => true # ' '.blank? # => true # "\t\n\r".blank? # => true # ' blah '.blank? # => false # # Unicode whitespace is supported: # # "\u00a0".blank? # => true # # @return [true, false]
UNK on_op on_ignored_nl UNK on_ignored_nl on_const on_period UNK UNK UNK UNK on_nl UNK on_const on_op on_const on_nl on_const UNK UNK # The regexp that matches blank strings is expensive. For the case of empty # strings we can speed up this method (~3.5x) with an empty? call. The # penalty for the rest of strings is marginal.
def blank? on_nl UNK on_nl end on_nl end on_nl on_ignored_nl class on_const def blank? on_nl UNK on_nl end on_nl end #:nodoc: # No number is blank: # # 1.blank? # => false # 0.blank? # => false # # @return [false]
def blank? on_nl UNK on_nl end on_nl end on_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP #:nodoc: # No Time is blank: # # Time.now.blank? # => false # # @return [false]
