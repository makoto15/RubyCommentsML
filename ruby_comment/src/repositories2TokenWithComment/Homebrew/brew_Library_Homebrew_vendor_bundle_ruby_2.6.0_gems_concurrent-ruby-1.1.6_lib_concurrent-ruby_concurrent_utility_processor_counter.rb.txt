UNK on_const on_nl def UNK on_nl UNK on_op on_const on_period UNK UNK UNK UNK on_nl UNK on_op on_const on_period UNK # @!visibility private
def UNK on_nl UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_period UNK on_nl end on_nl on_ignored_nl # Number of processors seen by the OS and used for process scheduling. For # performance reasons the calculated value will be memoized on the first # call. # # When running under JRuby the Java runtime call # `java.lang.Runtime.getRuntime.availableProcessors` will be used. According # to the Java documentation this "value may change during a particular # invocation of the virtual machine... [applications] should therefore # occasionally poll this property." Subsequently the result will NOT be # memoized under JRuby. # # Ruby's Etc.nprocessors will be used if available (MRI 2.2+). # # On Windows the Win32 API will be queried for the # `NumberOfLogicalProcessors from Win32_Processor`. This will return the # total number "logical processors for the current instance of the # processor", which taked into account hyperthreading. # # * AIX: /usr/sbin/pmcycles (AIX 5+), /usr/sbin/lsdev # * Alpha: /usr/bin/nproc (/proc/cpuinfo exists but cannot be used) # * BSD: /sbin/sysctl # * Cygwin: /proc/cpuinfo # * Darwin: /usr/bin/hwprefs, /usr/sbin/sysctl # * HP-UX: /usr/sbin/ioscan # * IRIX: /usr/sbin/sysconf # * Linux: /proc/cpuinfo # * Minix 3+: /proc/cpuinfo # * Solaris: /usr/sbin/psrinfo # * Tru64 UNIX: /usr/sbin/psrinfo # * UnixWare: /usr/sbin/psrinfo # # @return [Integer] number of processors seen by the OS or Java runtime # # @see https://github.com/grosser/parallel/blob/4fc8b89d08c7091fe0419ca8fba1ec3ce5a8d185/lib/parallel.rb # # @see http://docs.oracle.com/javase/6/docs/api/java/lang/Runtime.html#availableProcessors() # @see http://msdn.microsoft.com/en-us/library/aa394373(v=vs.85).aspx
def UNK on_nl UNK on_period UNK on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl def UNK on_nl UNK on_const on_period UNK # Number of physical processor cores on the current system. For performance # reasons the calculated value will be memoized on the first call. # # On Windows the Win32 API will be queried for the `NumberOfCores from # Win32_Processor`. This will return the total number "of cores for the # current instance of the processor." On Unix-like operating systems either # the `hwprefs` or `sysctl` utility will be called in a subshell and the # returned value will be used. In the rare case where none of these methods # work or an exception is raised the function will simply return 1. # # @return [Integer] number physical processor cores on the current system # # @see https://github.com/grosser/parallel/blob/4fc8b89d08c7091fe0419ca8fba1ec3ce5a8d185/lib/parallel.rb # # @see http://msdn.microsoft.com/en-us/library/aa394373(v=vs.85).aspx # @see http://www.unix.com/man-page/osx/1/HWPREFS/ # @see http://linux.die.net/man/8/sysctl
on_int on_nl end on_nl end on_nl UNK on_nl UNK on_int on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op UNK # TODO (pitr-ch 05-Nov-2016): warn about failures
UNK on_op on_int on_nl on_const on_period read on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end on_rparen UNK # unique physical ID / core ID combinations
UNK on_op on_int on_op UNK on_op UNK on_nl UNK on_nl UNK on_int on_nl end on_nl end on_nl end on_nl on_ignored_nl # fall back to logical count if physical info is invalid
UNK on_op on_const on_op on_const on_period UNK on_nl UNK on_period UNK on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl def UNK # create the default ProcessorCounter on load
