on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl # frozen_string_literal: true
def UNK on_lparen on_op UNK on_rparen on_ignored_nl UNK on_op on_const on_period UNK if UNK on_period UNK on_nl UNK on_period UNK # Accepts a list of paths to translation files. Loads translations from # plain Ruby (*.rb), YAML files (*.yml), or JSON files (*.json). See #load_rb, #load_yml, and #load_json # for details.
def UNK on_lparen locale on_comma data on_comma options on_op on_const on_rparen on_ignored_nl raise on_const on_nl end on_nl on_ignored_nl def UNK # This method receives a locale, a data hash and options for storing translations. # Should be implemented
def UNK on_lparen locale on_comma object on_comma format on_op on_symbeg default on_comma options on_op on_const on_rparen on_ignored_nl if object on_period # Acts the same as +strftime+, but uses a localized version of the # format string. Takes a key from the date/time formats translations as # a format argument (<em>e.g.</em>, <tt>:short</tt> in <tt>:'date.formats'</tt>).
def UNK on_nl raise on_const on_nl end on_nl on_ignored_nl def UNK on_nl UNK if UNK on_nl end on_nl on_ignored_nl def # Returns an array of locales for which translations are available # ignoring the reserved translation meta data key :i18n.
def UNK on_lparen locale on_comma key on_comma UNK on_op on_lbracket on_rbracket on_comma options on_op on_const on_rparen on_ignored_nl raise on_const on_nl # The method which actually looks up for the translation in the store.
def default on_lparen locale on_comma object on_comma subject on_comma options on_op on_const on_rparen on_ignored_nl options on_op options on_period UNK on_lbrace # Evaluates defaults. # If given subject is an Array, it walks the array and returns the # first translation that can be resolved. Otherwise it tries to resolve # the translation directly.
def resolve on_lparen locale on_comma object on_comma subject on_comma options on_op on_const on_rparen on_ignored_nl return subject if options on_lbracket on_symbeg # Resolves a translation. # If the given subject is a Symbol, it will be translated with the # given options. If it is a Proc then it will be evaluated. All other # subjects will be returned directly.
def UNK on_lparen locale on_comma entry on_comma count on_rparen on_ignored_nl return entry unless entry on_period is_a? on_lparen on_const on_rparen on_op # Picks a translation from a pluralized mnemonic subkey according to English # pluralization rules : # - It will pick the :one subkey if count is equal to 1. # - It will pick the :other subkey otherwise. # - It will pick the :zero subkey in the special case where count is # equal to 0 and there is a :zero subkey present. This behaviour is # not standard with regards to the CLDR pluralization rules. # Other backends can implement more flexible or complex pluralization rules.
def UNK on_lparen locale on_comma subject on_comma values on_op on_const on_rparen on_ignored_nl return subject if values on_period UNK on_nl on_ignored_nl # Interpolates values into a given subject. # # if the given subject is a string then: # method interpolates "file %{file} opened by %%{user}", :file => 'test.txt', :user => 'Mr. X' # # => "file test.txt opened by %{user}" # # if the given subject is an array then: # each element of the array is recursively interpolated (until it finds a string) # method interpolates ["yes, %{user}", ["maybe no, %{user}, "no, %{user}"]], :user => "bartuz" # # => "["yes, bartuz",["maybe no, bartuz", "no, bartuz"]]"
def UNK on_lparen locale on_comma data on_comma values on_op on_const on_rparen on_ignored_nl return data if values on_period UNK on_nl on_ignored_nl # Deep interpolation # # deep_interpolate { people: { ann: "Ann is %{ann}", john: "John is %{john}" } }, # ann: 'good', john: 'big' # #=> { people: { ann: "Ann is good", john: "John is big" } }
def UNK on_lparen filename on_rparen on_ignored_nl type on_op on_const on_period UNK on_lparen filename on_rparen on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end # Loads a single translations file by delegating to #load_rb or # #load_yml depending on the file extension and directly merges the # data to the existing translations. Raises I18n::UnknownFileType # for all other file extensions.
def UNK on_lparen filename on_rparen on_ignored_nl UNK on_lparen on_const on_period UNK on_lparen filename on_rparen on_comma UNK on_comma filename on_rparen on_nl # Loads a plain Ruby translations file. eval'ing the file must yield # a Hash containing translation data with locales as toplevel keys.
def UNK on_lparen filename on_rparen on_ignored_nl UNK on_ignored_nl on_const on_period UNK on_lparen filename on_rparen on_nl UNK on_const on_comma on_const on_comma # Loads a YAML translations file. The data must have locales as # toplevel keys.
def UNK on_lparen filename on_rparen on_ignored_nl UNK on_ignored_nl on_op on_const on_period UNK on_lparen on_const on_period UNK on_lparen filename on_rparen on_rparen # Loads a JSON translations file. The data must have locales as # toplevel keys.
