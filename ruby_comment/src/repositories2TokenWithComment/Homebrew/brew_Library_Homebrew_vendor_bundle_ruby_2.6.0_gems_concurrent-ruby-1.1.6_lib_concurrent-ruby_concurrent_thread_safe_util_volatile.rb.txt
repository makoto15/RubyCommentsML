UNK UNK on_nl on_ignored_nl UNK UNK on_nl on_ignored_nl UNK UNK on_nl on_ignored_nl UNK UNK UNK on_op UNK UNK on_ignored_nl UNK # @!visibility private
UNK UNK on_nl on_ignored_nl UNK UNK on_nl on_ignored_nl UNK UNK UNK on_op UNK UNK on_ignored_nl UNK UNK UNK on_period UNK # @!visibility private
UNK UNK on_nl on_ignored_nl UNK UNK UNK on_op UNK UNK on_ignored_nl UNK UNK UNK on_period UNK on_nl UNK UNK UNK # @!visibility private
UNK UNK UNK on_op UNK UNK on_ignored_nl UNK UNK UNK on_period UNK on_nl UNK UNK UNK on_period UNK UNK on_ignored_nl # Provides +volatile+ (in the JVM's sense) attribute accessors implemented # atop of +Concurrent::AtomicReference+. # # Usage: # class Foo # extend Concurrent::ThreadSafe::Util::Volatile # attr_volatile :foo, :bar # # def initialize(bar) # super() # must super() into parent initializers before using the volatile attribute accessors # self.bar = bar # end # # def hello # my_foo = foo # volatile read # self.foo = 1 # volatile write # cas_foo(1, 2) # => true | a strong CAS # end # end
