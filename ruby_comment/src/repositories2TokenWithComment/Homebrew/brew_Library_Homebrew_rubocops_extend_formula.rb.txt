on_ignored_nl UNK on_ignored_nl UNK on_op UNK on_nl UNK on_op nil on_nl UNK UNK on_tstring_content on_tstring_end on_nl UNK on_ignored_nl UNK on_op # frozen_string_literal: true
UNK on_ignored_nl UNK on_op UNK on_nl UNK on_op nil on_nl UNK UNK on_tstring_content on_tstring_end on_nl UNK on_ignored_nl UNK on_op UNK # Silence compatibility warning.
def UNK on_lparen node on_rparen on_ignored_nl on_ivar on_op UNK on_period UNK on_period name on_nl return unless UNK on_nl return unless # This method is called by RuboCop and is the main entry point
def UNK on_lparen node on_comma UNK on_rparen on_ignored_nl UNK on_op UNK on_lparen node on_rparen on_nl match_object on_op UNK on_period UNK # Checks for regex match of pattern in the node and # sets the appropriate instance variables to report the match
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK on_period each do on_op UNK on_op on_ignored_nl UNK on_op parameters on_lparen # Yields to block when there is a match. # @param urls [Array] url/mirror method call nodes # @param regex [Regexp] pattern to match urls
def UNK on_lparen node on_rparen on_ignored_nl return on_lbracket on_rbracket if node on_period nil? on_nl return on_lbracket node on_rbracket if node # Returns all string nodes among the descendants of given node
def UNK on_lparen node on_comma method_name on_rparen on_ignored_nl return if node on_period nil? on_nl on_ignored_nl node on_period each_child_node on_lparen on_symbeg # Returns method_node matching method_name
on_ivar on_op node on_period parent on_nl on_ivar on_op node on_period parent on_period source_range on_nl nil on_nl end on_nl on_ignored_nl def # If not found then, parent node becomes the offensive node
def offending_node on_lparen node on_rparen on_ignored_nl on_ivar on_op node on_nl on_ivar on_op node on_period source_range on_nl end on_nl on_ignored_nl def # Set the given node as the offending node when required in custom cops
def UNK on_lparen node on_comma method_name on_rparen on_ignored_nl return if node on_period nil? on_nl on_ignored_nl node on_period each_child_node on_lparen on_symbeg # Returns an array of method call nodes matching method_name inside node with depth first order (Children nodes)
def UNK on_lparen node on_comma method_name on_op nil on_rparen on_ignored_nl return if node on_period nil? on_nl on_ignored_nl node on_period each_descendant # Returns an array of method call nodes matching method_name in every descendant of node. # Returns every method call if no method_name is passed.
def UNK on_lparen node on_comma UNK on_op nil on_rparen on_ignored_nl return if node on_period nil? on_nl on_ignored_nl node on_period each_descendant # Returns array of function call nodes matching func_name in every descendant of node. # # - matches function call: `foo(*args, **kwargs)` # - does not match method calls: `foo.bar(*args, **kwargs)` # - returns every function calls if no func_name is passed
def UNK on_lparen node on_comma method_name on_comma on_op UNK on_rparen on_ignored_nl UNK on_op UNK on_lparen node on_comma method_name on_rparen on_nl # Given a method_name and arguments, yields to a block with # matching method passed as a parameter to the block
def UNK on_lparen node on_comma UNK on_comma method_name on_rparen on_ignored_nl UNK on_op UNK on_lparen node on_comma method_name on_rparen on_nl UNK # Matches a method with a receiver. # # - e.g. to match `Formula.factory(name)` # call `find_instance_method_call(node, "Formula", :factory)` # - e.g. to match `build.head?` # call `find_instance_method_call(node, :build, :head?)` # - yields to a block with matching method node
def UNK on_lparen node on_comma name on_rparen on_ignored_nl node on_period each_descendant on_lparen on_symbeg send on_rparen do on_op method_node on_op on_ignored_nl # Matches receiver part of method. # # - e.g. to match `ARGV.<whatever>()` # call `find_instance_call(node, "ARGV")` # - yields to a block with parent node of receiver
def UNK on_lparen UNK on_comma on_op UNK on_rparen on_ignored_nl UNK on_op on_lbracket on_symbeg UNK on_rbracket if UNK on_period UNK on_nl # Returns nil if does not depend on dependency_name. # @param dependency_name dependency's name
def UNK on_lparen node on_comma name on_op nil on_comma type on_op on_symbeg UNK on_rparen on_ignored_nl name_match on_op if name on_nl # Returns true if given dependency name and dependency type exist in given dependency method call node. # TODO: Add case where key of hash is an array
end on_nl on_ignored_nl UNK type on_nl when on_symbeg UNK on_nl type_match on_op UNK on_lparen node on_rparen on_nl name_match on_op UNK # Match only by type when name is nil
def UNK on_lparen node on_comma const_name on_rparen on_ignored_nl return if node on_period nil? on_nl on_ignored_nl node on_period each_descendant on_lparen on_symbeg # Find CONSTANTs in the source. # If block given, yield matching nodes.
def UNK on_lparen node on_comma UNK on_rparen on_ignored_nl node on_op on_const on_op on_const on_period UNK on_lparen UNK on_period UNK on_rparen # To compare node with appropriate Ruby variable
def UNK on_lparen node on_comma block_name on_rparen on_ignored_nl return if node on_period nil? on_nl on_ignored_nl node on_period each_child_node on_lparen on_symbeg # Returns a block named block_name inside node
on_ivar on_op node on_period parent on_nl on_ivar on_op node on_period parent on_period source_range on_nl nil on_nl end on_nl on_ignored_nl def # If not found then, parent node becomes the offensive node
def UNK on_lparen node on_comma block_name on_rparen on_ignored_nl return if node on_period nil? on_nl on_ignored_nl node on_period each_child_node on_lparen on_symbeg # Returns an array of block nodes named block_name inside node
def UNK on_lparen node on_comma block_name on_rparen on_ignored_nl return if node on_period nil? on_nl on_ignored_nl UNK on_op node on_period each_descendant # Returns an array of block nodes of any depth below node in AST. # If a block is given then yields matching block node to the block!
def UNK on_lparen node on_comma method_name on_op nil on_rparen on_ignored_nl return if node on_period nil? on_nl on_ignored_nl node on_period each_child_node # Returns a method definition node with method_name. # Returns first method def if method_name is nil.
on_ivar on_op node on_period parent on_nl on_ivar on_op node on_period parent on_period source_range on_nl nil on_nl end on_nl on_ignored_nl def # If not found then, parent node becomes the offensive node
def UNK on_lparen node on_comma method_name on_rparen on_ignored_nl UNK on_op node on_period UNK on_lbracket on_int on_rbracket on_nl UNK on_period each_child_node # Check if a method is called inside a block
def UNK on_lparen node on_comma method_name on_rparen on_ignored_nl if node on_period send_type? on_op node on_period method_name on_op method_name on_nl offending_node # Check if method_name is called among the direct children nodes in the given node. # Check if the node itself is the method.
def UNK on_lparen node on_comma method_name on_rparen on_ignored_nl node on_period each_descendant on_lparen on_symbeg send on_rparen do on_op call_node on_op on_ignored_nl # Check if method_name is called among every descendant node of given node
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK on_period each do on_op UNK on_op on_ignored_nl UNK on_period each do # Checks for precedence, returns the first pair of precedence violating nodes
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl return false if UNK on_lparen UNK on_rparen on_op UNK on_lparen UNK on_rparen # If first node does not precede next_node, sets appropriate instance variables for reporting
def UNK on_lparen node on_rparen on_ignored_nl return false unless node on_period parent on_op send_type? on_nl return false unless node on_period # Check if negation is present in the given node
def UNK on_nl UNK on_lparen UNK on_lparen on_ivar on_comma on_symbeg UNK on_rparen on_rparen on_nl end on_nl on_ignored_nl def parameters on_lparen # Return all the caveats' string nodes in an array
def parameters on_lparen method_node on_rparen on_ignored_nl method_node on_period UNK if method_node on_period send_type? on_op method_node on_period UNK on_nl end on_nl # Returns the array of arguments of the method_node
def UNK on_lparen method_node on_comma on_op UNK on_rparen on_ignored_nl UNK on_op parameters on_lparen method_node on_rparen on_nl on_ivar on_op method_node on_nl # Returns true if the given parameters are present in method call # and sets the method call as the offending node. # Params can be string, symbol, array, hash, matching regex.
def UNK on_lparen call on_rparen on_ignored_nl return if parameters on_lparen call on_rparen on_period UNK on_op parameters on_lparen call on_rparen on_period # Returns the sha256 str node given a sha256 call node
UNK parameters on_lparen call on_rparen on_period first on_period UNK on_nl parameters on_lparen call on_rparen on_period first on_period UNK on_period first # sha256 is passed as a key-value pair in bottle blocks
def UNK on_nl on_ivar on_period UNK on_period each do on_op UNK on_op on_ignored_nl on_ivar on_op UNK on_nl on_ivar on_op on_symbeg # Yields to a block with comment text as parameter
def UNK on_lparen node on_rparen on_ignored_nl node on_period source_range on_period UNK on_period UNK on_lparen node on_period UNK on_period UNK on_rparen # Returns the begin position of the node's line in source code
def UNK on_lparen node on_rparen on_ignored_nl node on_period source_range on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen node on_rparen # Returns the begin position of the node in source code
def UNK on_lparen node on_rparen on_ignored_nl node on_period source_range on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen node on_rparen # Returns the ending position of the node in source code
def UNK on_lparen node on_rparen on_ignored_nl node on_period UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen node on_rparen # Returns the line number of the node
def UNK on_lparen node on_rparen on_ignored_nl on_ivar on_op node on_nl on_ivar on_op node on_period source_range on_nl node on_period const_name on_nl # Returns the class node's name, nil if not a class node
def method_name on_lparen node on_rparen on_ignored_nl node on_period UNK on_lbracket on_int on_rbracket if node on_period UNK on_nl end on_nl on_ignored_nl # Returns the method name for a def node
def UNK on_lparen node on_rparen on_ignored_nl node on_period source_range on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen block on_rparen # Returns the node size in the source code
def UNK on_lparen block on_rparen on_ignored_nl block on_period UNK on_period end on_period UNK on_op block on_period UNK on_period UNK on_period # Returns the block length of the block node
def UNK on_lparen node on_rparen on_ignored_nl node on_period source_range on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen node on_rparen # Source buffer is required as an argument to report style violations
def UNK on_lparen node on_rparen on_ignored_nl UNK node on_period type on_nl when on_symbeg UNK on_nl node on_period UNK on_nl when # Returns the string representation if node is of type str(plain) or dstr(interpolated) or const
def UNK on_nl on_ivar on_period UNK on_lparen UNK on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen component_node on_rparen # Returns true if the formula is versioned
def UNK on_lparen component_node on_rparen on_ignored_nl return component_node on_period method_name if component_node on_period send_type? on_op component_node on_period UNK on_nl on_ignored_nl # Returns printable component name
def UNK on_nl return unless UNK on_op on_ivar on_period UNK on_lparen UNK on_tstring_content UNK on_rparen on_nl on_ignored_nl UNK on_lbracket on_int # Returns the formula tap
on_ignored_nl on_ivar on_op on_const on_period UNK on_lparen UNK on_rparen on_nl end on_nl end on_nl end on_nl end on_nl EMP EMP # file_path is nil when source is directly passed to the cop, e.g. in specs
