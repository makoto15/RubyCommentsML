on_ignored_nl UNK UNK on_nl def UNK on_nl dup on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_lparen UNK # frozen_string_literal: true
def UNK on_nl dup on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_lparen UNK on_tstring_content UNK on_comma on_tstring_beg # Returns the string, first removing all whitespace on both ends of # the string, and then changing remaining consecutive whitespace # groups into one space each. # # Note that it handles both ASCII and Unicode whitespace. # # %{ Multi-line # string }.squish # => "Multi-line string" # " foo bar \n \t boo".squish # => "foo bar boo"
def UNK on_nl UNK on_lparen UNK on_tstring_content UNK on_comma on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl UNK on_nl UNK on_nl end on_nl # Performs a destructive squish. See String#squish. # str = " foo bar \n \t boo" # str.squish! # => "foo bar boo" # str # => "foo bar boo"
def UNK on_lparen on_op UNK on_rparen on_ignored_nl dup on_period UNK on_lparen on_op UNK on_rparen on_nl end on_nl on_ignored_nl def UNK # Returns a new string with all occurrences of the patterns removed. # str = "foo bar test" # str.remove(" test") # => "foo bar" # str.remove(" test", /bar/) # => "foo " # str # => "foo bar test"
def UNK on_lparen on_op UNK on_rparen on_ignored_nl UNK on_period UNK UNK on_op UNK on_op on_ignored_nl UNK UNK on_comma on_tstring_beg on_tstring_end # Alters the string by removing all occurrences of the patterns. # str = "foo bar test" # str.remove!(" test", /bar/) # => "foo " # str # => "foo "
def UNK on_lparen truncate_at on_comma options on_op UNK UNK on_rparen on_ignored_nl UNK dup UNK UNK on_op truncate_at on_nl on_ignored_nl omission # Truncates a given +text+ after a given <tt>length</tt> if +text+ is longer than <tt>length</tt>: # # 'Once upon a time in a world far far away'.truncate(27) # # => "Once upon a time in a wo..." # # Pass a string or regexp <tt>:separator</tt> to truncate +text+ at a natural break: # # 'Once upon a time in a world far far away'.truncate(27, separator: ' ') # # => "Once upon a time in a..." # # 'Once upon a time in a world far far away'.truncate(27, separator: /\s/) # # => "Once upon a time in a..." # # The last characters will be replaced with the <tt>:omission</tt> string (defaults to "...") # for a total length not exceeding <tt>length</tt>: # # 'And they found that many people were sleeping better.'.truncate(25, omission: '... (continued)') # # => "And they f... (continued)"
def UNK on_lparen truncate_at on_comma UNK on_tstring_beg on_tstring_content on_tstring_end on_rparen on_ignored_nl omission on_op on_tstring_beg on_tstring_end on_nl on_ignored_nl UNK on_ignored_nl UNK # Truncates +text+ to at most <tt>bytesize</tt> bytes in length without # breaking string encoding by splitting multibyte characters or breaking # grapheme clusters ("perceptual characters") by truncating at combining # characters. # # >> "ðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ª".size # => 20 # >> "ðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ª".bytesize # => 80 # >> "ðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ª".truncate_bytes(20) # => "ðŸ”ªðŸ”ªðŸ”ªðŸ”ªâ€¦" # # The truncated text ends with the <tt>:omission</tt> string, defaulting # to "â€¦", for a total length not exceeding <tt>bytesize</tt>.
def UNK on_lparen UNK on_comma options on_op UNK UNK on_rparen on_ignored_nl sep on_op options on_lbracket UNK UNK on_rbracket on_op UNK # Truncates a given +text+ after a given number of words (<tt>words_count</tt>): # # 'Once upon a time in a world far far away'.truncate_words(4) # # => "Once upon a time..." # # Pass a string or regexp <tt>:separator</tt> to specify a different separator of words: # # 'Once<br>upon<br>a<br>time<br>in<br>a<br>world'.truncate_words(5, separator: '<br>') # # => "Once<br>upon<br>a<br>time<br>in..." # # The last characters will be replaced with the <tt>:omission</tt> string (defaults to "..."): # # 'And they found that many people were sleeping better.'.truncate_words(5, omission: '... (continued)') # # => "And they found that many... (continued)"
