on_ignored_nl UNK UNK UNK UNK on_nl UNK UNK UNK UNK on_nl on_ignored_nl UNK on_const on_op on_const on_nl def UNK on_lparen # frozen_string_literal: true
UNK on_const on_op on_const on_nl def UNK on_lparen UNK UNK database on_rparen on_ignored_nl UNK on_op UNK on_nl UNK on_lparen database # # `LinkageCacheStore` provides methods to fetch and mutate linkage-specific data used # by the `brew linkage` command. #
def UNK on_lparen UNK UNK database on_rparen on_ignored_nl UNK on_op UNK on_nl UNK on_lparen database on_rparen on_nl end on_nl on_ignored_nl # @param keg_path [String] # @param database [CacheStoreDatabase] # @return [nil]
def UNK on_nl on_op database on_period UNK on_lparen UNK on_rparen on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK # Returns `true` if the database has any value for the current `keg_path` # # @return [Boolean]
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK UNK on_op type on_op on_ignored_nl UNK UNK on_const on_period UNK on_lparen # Inserts dylib-related information into the cache if it does not exist or # updates data into the linkage cache if it does exist # # @param hash_values [Hash] hash containing KVPs of { :type => Hash } # @return [nil]
def UNK on_lparen type on_rparen on_ignored_nl UNK on_const on_period UNK on_lparen type on_rparen on_nl UNK on_const UNK UNK on_nl UNK # @param type [Symbol] the type to fetch from the `LinkageCacheStore` # @raise [TypeError] error if the type is not in `HASH_LINKAGE_TYPES` # @return [Hash]
def UNK on_nl database on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl on_const on_op UNK UNK # Delete the keg from the `LinkageCacheStore` # # @return [nil]
def UNK on_lparen type on_rparen on_ignored_nl UNK on_op database on_period UNK on_lparen UNK on_rparen on_nl UNK UNK UNK UNK UNK # @param type [Symbol] # @return [Hash]
