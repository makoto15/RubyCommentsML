on_ignored_nl UNK UNK UNK UNK on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const # frozen_string_literal: true
UNK on_const on_nl UNK on_const on_op on_const on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl on_ignored_nl def UNK on_nl UNK # A simple backend that reads translations from YAML files and stores them in # an in-memory hash. Relies on the Base backend. # # The implementation is provided by a Implementation module allowing to easily # extend Simple backend's behavior by including modules. E.g.: # # module I18n::Backend::Pluralization # def pluralize(*args) # # extended pluralization logic # super # end # end # # I18n::Backend::Simple.include(I18n::Backend::Pluralization)
def UNK on_lparen locale on_comma data on_comma UNK on_op on_const on_rparen on_ignored_nl UNK on_const on_period UNK on_op on_ignored_nl on_const on_period # Stores translations for the given locale in memory. # This uses a deep merge for the translations hash, so existing # translations will be overwritten by new ones only at the deepest # level of the hash.
def UNK on_nl UNK unless UNK on_nl UNK on_period UNK on_lparen on_lbracket on_rbracket on_rparen UNK on_op UNK on_comma on_lparen locale # Get available locales from the translations hash
def UNK on_nl UNK on_op UNK on_nl UNK on_op UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK # Clean up translations hash and set initialized to false on reload!
UNK UNK UNK on_op on_op UNK on_nl on_ignored_nl UNK on_op UNK UNK on_nl end on_nl on_ignored_nl UNK on_nl on_ignored_nl def # To avoid returning empty translations, # call `init_translations`
def UNK on_lparen locale on_comma UNK on_comma UNK on_op on_lbracket on_rbracket on_comma UNK on_op on_const on_rparen on_ignored_nl UNK unless UNK # Looks up a translation from the translations hash. Returns nil if # either key is nil, or locale, scope or key do not exist as a key in the # nested translations hash. Splits keys or scopes containing dots # into multiple keys, i.e. <tt>currency.format</tt> is regarded the same as # <tt>%w(currency format)</tt>.
