on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl on_const on_op # frozen_string_literal: true
UNK on_const on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_ignored_nl def UNK on_lparen UNK on_op on_lbracket on_rbracket on_comma UNK on_const on_rparen # +ParameterFilter+ allows you to specify keys for sensitive data from # hash-like object and replace corresponding value. Filtering only certain # sub-keys from a hash is possible by using the dot notation: # 'credit_card.number'. If a proc is given, each key and value of a hash and # all sub-hashes are passed to it, where the value or the key can be replaced # using String#replace or similar methods. # # ActiveSupport::ParameterFilter.new([:password]) # => replaces the value to all keys matching /password/i with "[FILTERED]" # # ActiveSupport::ParameterFilter.new([:foo, "bar"]) # => replaces the value to all keys matching /foo|bar/i with "[FILTERED]" # # ActiveSupport::ParameterFilter.new(["credit_card.code"]) # => replaces { credit_card: {code: "xxxx"} } with "[FILTERED]", does not # change { file: { code: "xxxx"} } # # ActiveSupport::ParameterFilter.new([-> (k, v) do # v.reverse! if k =~ /secret/i # end]) # => reverses the value to all keys matching /secret/i
on_ignored_nl def UNK on_lparen UNK on_op on_lbracket on_rbracket on_comma UNK on_const on_rparen on_ignored_nl on_ivar on_op UNK on_nl on_ivar on_op UNK # :nodoc:
def UNK on_lparen UNK on_op on_lbracket on_rbracket on_comma UNK on_const on_rparen on_ignored_nl on_ivar on_op UNK on_nl on_ivar on_op UNK on_nl # Create instance with given filters. Supported type of filters are +String+, +Regexp+, and +Proc+. # Other types of filters are treated as +String+ using +to_s+. # For +Proc+ filters, key, value, and optional original hash is passed to block arguments. # # ==== Options # # * <tt>:mask</tt> - A replaced object when filtered. Defaults to +"[FILTERED]"+
def UNK on_lparen params on_rparen on_ignored_nl UNK on_period UNK on_lparen params on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen key # Mask value of +params+ if key matches one of filters.
def UNK on_lparen key on_comma value on_rparen on_ignored_nl on_ivar on_period UNK on_op value on_op UNK on_period UNK on_lparen key on_comma # Returns filtered value for given key. For +Proc+ filters, third block argument is not populated.
def UNK on_period UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK UNK on_lbrace on_op params on_op params on_period UNK on_rbrace # :nodoc:
parents on_period UNK if deep_regexps on_nl value on_op value on_period UNK on_lbrace on_op UNK on_op UNK on_lparen key on_comma UNK # If we don't pop the current parent it will be duplicated as we # process each array value.
parents on_period UNK on_lparen key on_rparen if deep_regexps on_nl UNK blocks on_period UNK on_nl key on_op key on_period UNK if # Restore the parent stack after processing the array.
