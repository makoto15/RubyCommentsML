UNK on_const on_nl UNK on_const on_op on_const on_nl on_ignored_nl on_ignored_nl def UNK on_nl synchronize on_lbrace UNK on_rbrace on_nl end on_nl # An thread-safe variation of Ruby's standard `Struct`. Values can be set at # construction or safely changed at any time during the object's lifecycle. # # @see http://ruby-doc.org/core-2.2.0/Struct.html Ruby standard library `Struct`
on_ignored_nl def UNK on_nl synchronize on_lbrace UNK on_rbrace on_nl end on_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl def # @!macro struct_new # # Factory for creating new struct classes. # # ``` # new([class_name] [, member_name]+>) -> StructClass click to toggle source # new([class_name] [, member_name]+>) {|StructClass| block } -> StructClass # new(value, ...) -> obj # StructClass[value, ...] -> obj # ``` # # The first two forms are used to create a new struct subclass `class_name` # that can contain a value for each member_name . This subclass can be # used to create instances of the structure like any other Class . # # If the `class_name` is omitted an anonymous struct class will be created. # Otherwise, the name of this struct will appear as a constant in the struct class, # so it must be unique for all structs under this base class and must start with a # capital letter. Assigning a struct class to a constant also gives the class # the name of the constant. # # If a block is given it will be evaluated in the context of `StructClass`, passing # the created class as a parameter. This is the recommended way to customize a struct. # Subclassing an anonymous struct creates an extra anonymous class that will never be used. # # The last two forms create a new instance of a struct subclass. The number of value # parameters must be less than or equal to the number of attributes defined for the # struct. Unset parameters default to nil. Passing more parameters than number of attributes # will raise an `ArgumentError`. # # @see http://ruby-doc.org/core-2.2.0/Struct.html#method-c-new Ruby standard library `Struct#new`
def UNK on_nl synchronize on_lbrace UNK on_rbrace on_nl end on_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl def UNK # @!macro struct_values # # Returns the values for this struct as an Array. # # @return [Array] the values for this struct #
def UNK on_lparen on_op UNK on_rparen on_ignored_nl synchronize on_lbrace UNK on_lparen UNK on_rparen on_rbrace on_nl end on_nl on_ignored_nl def UNK # @!macro struct_values_at # # Returns the struct member values for each selector as an Array. # # A selector may be either an Integer offset or a Range of offsets (as in `Array#values_at`). # # @param [Fixnum, Range] indexes the index(es) from which to obatin the values (in order)
def UNK on_nl synchronize on_lbrace UNK on_rbrace on_nl end on_nl UNK on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl def UNK # @!macro struct_inspect # # Describe the contents of this struct in a string. # # @return [String] the contents of this struct in a string
def UNK on_lparen UNK on_comma on_op block on_rparen on_ignored_nl synchronize on_lbrace UNK on_lparen UNK on_comma on_op block on_rparen on_rbrace on_nl # @!macro struct_merge # # Returns a new struct containing the contents of `other` and the contents # of `self`. If no block is specified, the value for entries with duplicate # keys will be that of `other`. Otherwise the value for each duplicate key # is determined by calling the block with the key, its value in `self` and # its value in `other`. # # @param [Hash] other the hash from which to set the new values # @yield an options block for resolving duplicate keys # @yieldparam [String, Symbol] member the name of the member which is duplicated # @yieldparam [Object] selfvalue the value of the member in `self` # @yieldparam [Object] othervalue the value of the member in `other` # # @return [Synchronization::AbstractStruct] a new struct with the new values # # @raise [ArgumentError] of given a member that is not defined in the struct
def UNK on_nl synchronize on_lbrace UNK on_rbrace on_nl end on_nl on_ignored_nl def on_op on_lparen member on_rparen on_ignored_nl synchronize on_lbrace UNK # @!macro struct_to_h # # Returns a hash containing the names and values for the struct’s members. # # @return [Hash] the names and values for the struct’s members
def on_op on_lparen member on_rparen on_ignored_nl synchronize on_lbrace UNK on_lparen member on_rparen on_rbrace on_nl end on_nl on_ignored_nl def on_op on_lparen # @!macro struct_get # # Attribute Reference # # @param [Symbol, String, Integer] member the string or symbol name of the member # for which to obtain the value or the member's index # # @return [Object] the value of the given struct member or the member at the given index. # # @raise [NameError] if the member does not exist # @raise [IndexError] if the index is out of range.
def on_op on_lparen UNK on_rparen on_ignored_nl synchronize on_lbrace UNK on_lparen UNK on_rparen on_rbrace on_nl end on_nl on_ignored_nl def UNK on_lparen # @!macro struct_equality # # Equality # # @return [Boolean] true if other has the same struct subclass and has # equal member values (according to `Object#==`)
def UNK on_lparen on_op block on_rparen on_ignored_nl UNK UNK on_lparen on_symbeg UNK on_rparen UNK UNK on_nl synchronize on_lbrace UNK on_lparen # @!macro struct_each # # Yields the value of each struct member in order. If no block is given # an enumerator is returned. # # @yield the operation to be performed on each struct member # @yieldparam [Object] value each struct value (in order)
def UNK on_lparen on_op block on_rparen on_ignored_nl UNK UNK on_lparen on_symbeg UNK on_rparen UNK UNK on_nl synchronize on_lbrace UNK on_lparen # @!macro struct_each_pair # # Yields the name and value of each struct member in order. If no block is # given an enumerator is returned. # # @yield the operation to be performed on each struct member/value pair # @yieldparam [Object] member each struct member (in order) # @yieldparam [Object] value each struct value (in order)
def UNK on_lparen on_op block on_rparen on_ignored_nl UNK UNK on_lparen on_symbeg UNK on_rparen UNK UNK on_nl synchronize on_lbrace UNK on_lparen # @!macro struct_select # # Yields each member value from the struct to the block and returns an Array # containing the member values from the struct for which the given block # returns a true value (equivalent to `Enumerable#select`). # # @yield the operation to be performed on each struct member # @yieldparam [Object] value each struct value (in order) # # @return [Array] an array containing each value for which the block returns true
def on_op on_lparen member on_comma UNK on_rparen on_ignored_nl UNK member on_period UNK on_const on_nl length on_op synchronize on_lbrace UNK on_period # @!macro struct_set # # Attribute Assignment # # Sets the value of the given struct member or the member at the given index. # # @param [Symbol, String, Integer] member the string or symbol name of the member # for which to obtain the value or the member's index # # @return [Object] the value of the given struct member or the member at the given index. # # @raise [NameError] if the name does not exist # @raise [IndexError] if the index is out of range.
def UNK on_lparen UNK on_rparen on_ignored_nl synchronize do on_ignored_nl UNK on_lparen UNK on_rparen on_nl UNK on_nl end on_nl end on_nl # @!visibility private
def UNK on_period new on_lparen on_op args on_comma on_op block on_rparen on_ignored_nl UNK on_op UNK on_nl UNK args on_period length # @!macro struct_new
