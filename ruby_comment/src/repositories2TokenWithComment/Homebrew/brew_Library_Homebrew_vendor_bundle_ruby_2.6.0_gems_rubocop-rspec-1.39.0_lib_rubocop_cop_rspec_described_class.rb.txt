on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl on_const # frozen_string_literal: true
UNK on_const on_op on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op UNK on_tstring_content UNK on_nl on_const on_op UNK on_tstring_content UNK # Checks that tests use `described_class`. # # If the first argument of describe is a class, the class is exposed to # each example via described_class. # # This cop can be configured using the `EnforcedStyle` and `SkipBlocks` # options. # # @example `EnforcedStyle: described_class` # # bad # describe MyClass do # subject { MyClass.do_something } # end # # # good # describe MyClass do # subject { described_class.do_something } # end # # @example `EnforcedStyle: explicit` # # bad # describe MyClass do # subject { described_class.do_something } # end # # # good # describe MyClass do # subject { MyClass.do_something } # end # # There's a known caveat with rspec-rails's `controller` helper that # runs its block in a different context, and `described_class` is not # available to it. `SkipBlocks` option excludes detection in all # non-RSpec related blocks. # # To narrow down this setting to only a specific directory, it is # possible to use an overriding configuration file local to that # directory. # # @example `SkipBlocks: true` # # spec/controllers/.rubocop.yml # # RSpec/DescribedClass: # # SkipBlocks: true # # # acceptable # describe MyConcern do # controller(ApplicationController) do # include MyConcern # end # end #
UNK on_comma UNK on_op UNK on_lparen node on_rparen on_nl on_ignored_nl return UNK UNK on_nl on_ignored_nl UNK on_lparen UNK on_rparen UNK # In case the explicit style is used, we need to remember what's # being described.
return if UNK on_lparen node on_rparen on_nl on_ignored_nl UNK on_comma on_op node on_period UNK on_lparen on_symbeg UNK on_rparen on_ignored_nl on_period # E.g. `described_class::CONSTANT`
def UNK on_lparen namespace on_comma const on_rparen on_ignored_nl return const if namespace on_period UNK on_nl return const if const on_period # @param namespace [Array<Symbol>] # @param const [Array<Symbol>] # @return [Array<Symbol>] # @example # # nil represents base constant # collapse_namespace([], :C) # => [:C] # collapse_namespace([:A, :B], [:C) # => [:A, :B, :C] # collapse_namespace([:A, :B], [:B, :C) # => [:A, :B, :C] # collapse_namespace([:A, :B], [nil, :C) # => [nil, :C] # collapse_namespace([:A, :B], [nil, :B, :C) # => [nil, :B, :C]
def const_name on_lparen node on_rparen on_ignored_nl namespace on_comma UNK on_op on_op node on_nl if on_op namespace on_nl on_lbracket UNK on_rbracket # @param node [RuboCop::AST::Node] # @return [Array<Symbol>] # @example # const_name(s(:const, nil, :C)) # => [:C] # const_name(s(:const, s(:const, nil, :M), :C)) # => [:M, :C] # const_name(s(:const, s(:cbase), :C)) # => [nil, :C]
namespace on_comma UNK on_op on_op node on_nl if on_op namespace on_nl on_lbracket UNK on_rbracket on_nl UNK namespace on_period UNK on_nl # rubocop:disable InternalAffairs/NodeDestructuring
if on_op namespace on_nl on_lbracket UNK on_rbracket on_nl UNK namespace on_period UNK on_nl on_lbracket on_op const_name on_lparen namespace on_rparen on_comma # rubocop:enable InternalAffairs/NodeDestructuring
def namespace on_lparen node on_rparen on_ignored_nl node on_ignored_nl on_period UNK on_lparen on_symbeg UNK on_comma on_symbeg UNK on_rparen on_ignored_nl on_period UNK # @param node [RuboCop::AST::Node] # @return [Array<Symbol>] # @example # namespace(node) # => [:A, :B, :C]
