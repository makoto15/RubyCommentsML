UNK on_const on_ignored_nl if on_const on_period UNK on_symbeg UNK on_nl def self on_period UNK on_lparen UNK on_comma UNK on_op on_int # Methods to support different versions of Ruby. # # @private
on_ignored_nl if on_const on_period UNK on_symbeg UNK on_nl def self on_period UNK on_lparen UNK on_comma UNK on_op on_int on_rparen on_ignored_nl #:nodoc:
if on_const on_period UNK on_symbeg UNK on_nl def self on_period UNK on_lparen UNK on_comma UNK on_op on_int on_rparen on_ignored_nl on_const # Use Rational.new! for performance reasons in Ruby 1.8. # This has been removed from 1.9, but Rational performs better.
if on_const on_period UNK on_symbeg UNK on_nl def self on_period UNK on_lparen ajd on_op on_int on_comma of on_op on_int on_comma # Ruby 1.8.6 introduced new! and deprecated new0. # Ruby 1.9.0 removed new0. # Ruby trunk revision 31668 removed the new! method. # Still support new0 for better performance on older versions of Ruby (new0 indicates # that the rational has already been reduced to its lowest terms). # Fallback to jd with conversion from ajd if new! and new0 are unavailable.
UNK on_op ajd on_op of on_op on_const on_nl on_ignored_nl on_ignored_nl UNK on_op UNK on_period UNK on_nl UNK on_op on_int if # Convert from an Astronomical Julian Day number to a civil Julian Day number.
on_ignored_nl UNK on_op UNK on_period UNK on_nl UNK on_op on_int if UNK on_op on_int on_nl UNK on_op on_lparen UNK on_op # Ruby trunk revision 31862 changed the behaviour of DateTime.jd so that it will no # longer accept a fractional civil Julian Day number if further arguments are specified. # Calculate the hours, minutes and seconds to pass to jd.
if on_const on_period UNK on_lparen on_symbeg UNK on_rparen on_op on_op on_const on_period UNK on_lparen on_int on_comma on_int on_comma UNK on_lparen # DateTime in Ruby 1.8.6 doesn't consider times within the 60th second to be # valid. When attempting to specify such a DateTime, subtract the fractional # part and then add it back later
def self on_period UNK on_lparen UNK on_op on_op on_int on_comma UNK on_op on_int on_comma UNK on_op on_int on_comma UNK on_op # 0:0:59.001
UNK on_ignored_nl on_const on_period UNK on_lparen on_op on_int on_rparen on_nl on_const on_period UNK on_lparen on_op on_int on_rparen on_nl on_ignored_nl def # Returns true if Time on the runtime platform supports Times defined # by negative 32-bit timestamps, otherwise false.
UNK on_ignored_nl on_const on_period UNK on_lparen on_op on_int on_rparen on_nl on_const on_period UNK on_lparen on_int on_rparen on_nl on_ignored_nl def self # Returns true if Time on the runtime platform supports Times defined by # 64-bit timestamps, otherwise false.
if on_const on_period UNK on_lparen on_symbeg UNK on_rparen on_nl def self on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK # Return the result of Time#nsec if it exists, otherwise return the # result of Time#usec * 1000.
if on_const on_period UNK on_lparen on_symbeg UNK on_rparen on_nl def self on_period UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK # Call String#force_encoding if this version of Ruby has encoding support # otherwise treat as a no-op.
if on_const on_op UNK on_tstring_content UNK on_nl def self on_period UNK on_lparen UNK on_comma UNK on_comma UNK on_comma on_op UNK # Wrapper for File.open that supports passing hash options for specifying # encodings on Ruby 1.9+. The options are ignored on earlier versions of # Ruby.
UNK on_lparen UNK on_nl on_tstring_content UNK on_rparen on_nl end on_nl on_ignored_nl on_ignored_nl if on_op on_const on_period UNK on_period UNK on_lparen # Evaluate method as a string because **opts isn't valid syntax prior to # Ruby 2.0.
if on_op on_const on_period UNK on_period UNK on_lparen on_symbeg UNK on_rparen on_op on_const on_op UNK on_tstring_content UNK on_op on_lparen UNK # Object#untaint is a deprecated no-op in Ruby >= 2.7 and will be removed in # 3.2. Add a refinement to either silence the warning, or supply the method # if needed.
