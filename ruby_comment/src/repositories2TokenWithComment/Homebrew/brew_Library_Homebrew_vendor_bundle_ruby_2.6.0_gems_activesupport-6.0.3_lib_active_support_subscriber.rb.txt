on_ignored_nl UNK UNK on_tstring_content on_tstring_end on_nl UNK UNK on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_op # frozen_string_literal: true
UNK on_const on_nl UNK on_op UNK on_nl def UNK on_lparen namespace on_comma subscriber on_op UNK on_comma notifier on_op on_const on_op # ActiveSupport::Subscriber is an object set to consume # ActiveSupport::Notifications. The subscriber dispatches notifications to # a registered object based on its given namespace. # # An example would be an Active Record subscriber responsible for collecting # statistics about queries: # # module ActiveRecord # class StatsSubscriber < ActiveSupport::Subscriber # attach_to :active_record # # def sql(event) # Statsd.timing("sql.#{event.payload[:name]}", event.duration) # end # end # end # # After configured, whenever a "sql.active_record" notification is published, # it will properly dispatch the event (ActiveSupport::Notifications::Event) to # the +sql+ method. # # We can detach a subscriber as well: # # ActiveRecord::StatsSubscriber.detach_from(:active_record)
def UNK on_lparen namespace on_comma subscriber on_op UNK on_comma notifier on_op on_const on_op on_const on_rparen on_ignored_nl on_ivar on_op namespace on_nl # Attach the subscriber to a namespace.
subscriber on_period UNK on_lparen UNK on_rparen on_period UNK UNK on_op event on_op on_ignored_nl UNK on_lparen event on_rparen on_nl end on_nl # Add event subscribers for all existing methods on the class.
def UNK on_lparen namespace on_comma notifier on_op on_const on_op on_const on_rparen on_ignored_nl on_ivar on_op namespace on_nl on_ivar on_op UNK on_nl # Detach the subscriber from a namespace.
subscriber on_period UNK on_lparen UNK on_rparen on_period UNK UNK on_op event on_op on_ignored_nl UNK on_lparen event on_rparen on_nl end on_nl # Remove event subscribers of all existing methods on the class.
on_ivar on_op UNK on_nl end on_nl on_ignored_nl def UNK on_lparen event on_rparen on_ignored_nl UNK UNK on_lparen event on_rparen on_op notifier # Reset notifier so that event subscribers will not add for new methods added to the class.
def UNK on_lparen event on_rparen on_ignored_nl UNK UNK on_lparen event on_rparen on_op notifier on_nl UNK on_lparen event on_rparen on_nl end # Adds event subscribers for all new methods added to the class.
UNK UNK on_lparen event on_rparen on_op notifier on_nl UNK on_lparen event on_rparen on_nl end on_nl end on_nl on_ignored_nl def UNK # Only public methods are added as subscribers, and only if a notifier # has been set up. This means that subscribers will only be set up for # classes that call #attach_to.
UNK UNK UNK on_lparen event on_period UNK on_rparen on_nl on_ignored_nl pattern on_op UNK on_lparen event on_rparen on_nl on_ignored_nl UNK UNK # :doc:
UNK UNK UNK on_lparen pattern on_rparen on_nl on_ignored_nl subscriber on_period UNK on_lbracket pattern on_rbracket on_op notifier on_period UNK on_lparen pattern # Don't add multiple subscribers (eg. if methods are redefined).
UNK UNK UNK on_lparen event on_period UNK on_rparen on_nl on_ignored_nl pattern on_op UNK on_lparen event on_rparen on_nl on_ignored_nl UNK UNK # :doc:
on_ignored_nl def UNK on_nl on_ivar on_op on_lbracket UNK on_period UNK on_period UNK on_comma UNK on_rbracket on_period UNK UNK on_tstring_content on_tstring_end # :nodoc:
UNK on_const UNK on_const on_nl on_ignored_nl def UNK on_nl on_ivar on_op UNK UNK on_nl end on_nl on_ignored_nl def UNK on_lparen # This is a registry for all the event stacks kept for subscribers. # # See the documentation of <tt>ActiveSupport::PerThreadRegistry</tt> # for further details.
UNK on_const on_nl on_ignored_nl def UNK on_nl on_ivar on_op UNK UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen # :nodoc:
