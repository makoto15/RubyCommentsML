on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl # frozen_string_literal: true
require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl # make sure we get the gem, not stdlib
UNK UNK on_lparen UNK on_rparen on_ignored_nl on_const on_period UNK on_op UNK on_nl end on_nl on_ignored_nl UNK UNK on_nl on_const on_period # Sets the order in which test cases are run. # # ActiveSupport::TestCase.test_order = :random # => :random # # Valid values are: # * +:random+ (to run tests in random order) # * +:parallel+ (to run tests in parallel) # * +:sorted+ (to run tests alphabetically by method name) # * +:alpha+ (equivalent to +:sorted+)
UNK UNK on_nl on_const on_period UNK on_op on_symbeg UNK on_nl end on_nl on_ignored_nl UNK UNK on_lparen UNK on_symbeg UNK UNK # Returns the order in which test cases are run. # # ActiveSupport::TestCase.test_order # => :random # # Possible values are +:random+, +:parallel+, +:alpha+, +:sorted+. # Defaults to +:random+.
UNK UNK on_lparen UNK on_symbeg UNK UNK UNK on_symbeg UNK on_rparen on_ignored_nl workers on_op on_const on_period UNK UNK workers on_op # Parallelizes the test suite. # # Takes a +workers+ argument that controls how many times the process # is forked. For each process a new database will be created suffixed # with the worker number. # # test-database-0 # test-database-1 # # If <tt>ENV["PARALLEL_WORKERS"]</tt> is set the workers argument will be ignored # and the environment variable will be used instead. This is useful for CI # environments, or other environments where you may need more workers than # you do for local testing. # # If the number of workers is set to +1+ or fewer, the tests will not be # parallelized. # # If +workers+ is set to +:number_of_processors+, the number of workers will be # set to the actual core count on the machine you are on. # # The default parallelization method is to fork processes. If you'd like to # use threads instead you can pass <tt>with: :threads</tt> to the +parallelize+ # method. Note the threaded parallelization does not create multiple # database and will not work with system tests at this time. # # parallelize(workers: :number_of_processors, with: :threads) # # The threaded parallelization uses minitest's parallel executor directly. # The processes parallelization uses a Ruby DRb server.
UNK UNK on_lparen on_op UNK on_rparen on_ignored_nl on_const on_op on_const on_op on_const on_period UNK UNK on_op UNK on_op on_ignored_nl UNK # Set up hook for parallel testing. This can be used if you have multiple # databases or any behavior that needs to be run after the process is forked # but before the tests run. # # Note: this feature is not available with the threaded parallelization. # # In your +test_helper.rb+ add the following: # # class ActiveSupport::TestCase # parallelize_setup do # # create databases # end # end
UNK UNK on_lparen on_op UNK on_rparen on_ignored_nl on_const on_op on_const on_op on_const on_period UNK UNK on_op UNK on_op on_ignored_nl UNK # Clean up hook for parallel testing. This can be used to drop databases # if your app uses multiple write/read databases or other clean up before # the tests finish. This runs before the forked process is closed. # # Note: this feature is not available with the threaded parallelization. # # In your +test_helper.rb+ add the following: # # class ActiveSupport::TestCase # parallelize_teardown do # # drop databases # end # end
alias on_symbeg UNK on_symbeg UNK on_nl alias on_symbeg UNK on_symbeg UNK on_nl alias on_symbeg UNK on_symbeg UNK on_nl alias on_symbeg # test/unit backwards compatibility methods
