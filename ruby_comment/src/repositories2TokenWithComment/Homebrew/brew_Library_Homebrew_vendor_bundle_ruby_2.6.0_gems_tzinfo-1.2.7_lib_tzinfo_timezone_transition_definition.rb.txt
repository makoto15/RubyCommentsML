UNK on_const on_op on_const UNK UNK UNK on_nl UNK UNK UNK on_nl on_ignored_nl UNK UNK denominator on_nl UNK UNK denominator # A TimezoneTransition defined by as integer timestamp, as a rational to # create a DateTime or as both. # # @private
UNK UNK UNK on_nl UNK UNK UNK on_nl on_ignored_nl UNK UNK denominator on_nl UNK UNK denominator on_nl on_ignored_nl UNK UNK #:nodoc: # The numerator of the DateTime if the transition time is defined as a # DateTime, otherwise the transition time as a timestamp.
UNK UNK denominator on_nl UNK UNK denominator on_nl on_ignored_nl UNK UNK on_lparen UNK on_comma UNK on_comma UNK on_comma UNK on_op # Either the denominator of the DateTime if the transition time is defined # as a DateTime, otherwise nil.
UNK UNK on_lparen UNK on_comma UNK on_comma UNK on_comma UNK on_op nil on_comma denominator on_op nil on_rparen on_ignored_nl UNK on_lparen # Creates a new TimezoneTransitionDefinition with the given offset, # previous_offset (both TimezoneOffset instances) and UTC time. # # The time can be specified as a timestamp, as a rational to create a # DateTime, or as both. # # If both a timestamp and rational are given, then the rational will only # be used if the timestamp falls outside of the range of Time on the # platform being used at runtime. # # DateTimes are created from the rational as follows: # # RubyCoreSupport.datetime_new!(RubyCoreSupport.rational_new!(numerator, denominator), 0, Date::ITALY) # # For performance reasons, the numerator and denominator must be specified # in their lowest form.
UNK UNK on_op on_lparen on_ignored_nl on_op timestamp on_op on_ignored_nl on_lparen timestamp on_op UNK on_op on_op on_const on_period UNK on_rparen on_op # Determine whether to use the timestamp or the numerator and denominator.
UNK UNK on_nl on_ignored_nl UNK on_ivar on_nl UNK on_op UNK on_ivar on_nl on_const on_period UNK on_lparen on_ivar on_rparen on_nl UNK # A TimeOrDateTime instance representing the UTC time when this transition # occurs.
on_ignored_nl UNK on_ivar on_nl UNK on_op UNK on_ivar on_nl on_const on_period UNK on_lparen on_ivar on_rparen on_nl UNK on_ignored_nl UNK on_op # Thread-safety: It is possible that the value of @at may be calculated # multiple times in concurrently executing threads. It is not worth the # overhead of locking to ensure that @at is only calculated once.
UNK UNK on_lparen tti on_rparen on_ignored_nl tti on_period UNK on_lparen on_const on_rparen on_op on_ignored_nl UNK on_op tti on_period UNK on_op # Returns true if this TimezoneTransitionDefinition is equal to the given # TimezoneTransitionDefinition. Two TimezoneTransitionDefinition instances # are considered to be equal by eql? if offset, previous_offset, # numerator_or_time and denominator are all equal.
UNK UNK on_nl on_ivar on_period UNK on_op on_ivar on_period UNK on_op on_ivar on_period UNK on_op on_ivar on_period UNK on_nl end # Returns a hash of this TimezoneTransitionDefinition instance.
