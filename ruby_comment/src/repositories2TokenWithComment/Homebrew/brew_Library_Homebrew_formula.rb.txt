on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end on_nl require on_tstring_beg on_tstring_content on_tstring_end # frozen_string_literal: true
class on_const on_nl include on_const on_nl include on_const on_op on_const on_nl include on_const on_op on_const on_nl include on_const on_op on_const # A formula provides instructions and metadata for Homebrew to install a piece # of software. Every Homebrew formula is a {Formula}. # All subclasses of {Formula} (and all Ruby classes) have to be named # `UpperCase` and `not-use-dashes`. # A formula specified in `this-formula.rb` should have a class named # `ThisFormula`. Homebrew does enforce that the name of the file and the class # correspond. # Make sure you check with `brew search` that the name is free! # @abstract # @see SharedEnvExtension # @see Pathname # @see https://www.rubydoc.info/stdlib/fileutils FileUtils # @see https://docs.brew.sh/Formula-Cookbook Formula Cookbook # @see https://github.com/rubocop-hq/ruby-style-guide#the-ruby-style-guide Ruby Style Guide # # <pre>class Wget < Formula # homepage "https://www.gnu.org/software/wget/" # url "https://ftp.gnu.org/gnu/wget/wget-1.15.tar.gz" # sha256 "52126be8cf1bddd7536886e74c053ad7d0ed2aa89b4b630f76785bac21695fcd" # # def install # system "./configure", "--prefix=#{prefix}" # system "make", "install" # end # end</pre>
on_ignored_nl attr_reader on_symbeg name on_nl on_ignored_nl attr_reader on_symbeg alias_path on_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl attr_reader on_symbeg full_name on_nl # @!method inreplace(paths, before = nil, after = nil) # Actually implemented in {Utils::Inreplace.inreplace}. # Sometimes we have to change a bit before we install. Mostly we # prefer a patch but if you need the `prefix` of this formula in the # patch you have to resort to `inreplace`, because in the patch # you don't have access to any var defined by the formula. Only # `HOMEBREW_PREFIX` is available in the embedded patch. # # `inreplace` supports regular expressions: # <pre>inreplace "somefile.cfg", /look[for]what?/, "replace by #{bin}/tool"</pre> # @see Utils::Inreplace.inreplace
attr_reader on_symbeg name on_nl on_ignored_nl attr_reader on_symbeg alias_path on_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl attr_reader on_symbeg full_name on_nl on_ignored_nl # The name of this {Formula}. # e.g. `this-formula`
attr_reader on_symbeg alias_path on_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl attr_reader on_symbeg full_name on_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl # The path to the alias that was used to identify this {Formula}. # e.g. `/usr/local/Library/Taps/homebrew/homebrew-core/Aliases/another-name-for-this-formula`
attr_reader on_symbeg UNK on_nl on_ignored_nl attr_reader on_symbeg full_name on_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl attr_reader on_symbeg path on_nl on_ignored_nl # The name of the alias that was used to identify this {Formula}. # e.g. `another-name-for-this-formula`
attr_reader on_symbeg full_name on_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl attr_reader on_symbeg path on_nl on_ignored_nl attr_reader on_symbeg tap on_nl on_ignored_nl # The fully-qualified name of this {Formula}. # For core formula it's the same as {#name}. # e.g. `homebrew/tap-name/this-formula`
attr_reader on_symbeg UNK on_nl on_ignored_nl attr_reader on_symbeg path on_nl on_ignored_nl attr_reader on_symbeg tap on_nl on_ignored_nl attr_reader on_symbeg stable on_nl on_ignored_nl # The fully-qualified alias referring to this {Formula}. # For core formula it's the same as {#alias_name}. # e.g. `homebrew/tap-name/another-name-for-this-formula`
attr_reader on_symbeg path on_nl on_ignored_nl attr_reader on_symbeg tap on_nl on_ignored_nl attr_reader on_symbeg stable on_nl on_ignored_nl attr_reader on_symbeg devel on_nl on_ignored_nl # The full path to this {Formula}. # e.g. `/usr/local/Library/Taps/homebrew/homebrew-core/Formula/this-formula.rb`
attr_reader on_symbeg tap on_nl on_ignored_nl attr_reader on_symbeg stable on_nl on_ignored_nl attr_reader on_symbeg devel on_nl on_ignored_nl attr_reader on_symbeg head on_nl on_ignored_nl # The {Tap} instance associated with this {Formula}. # If it's <code>nil</code>, then this formula is loaded from path or URL. # @private
attr_reader on_symbeg stable on_nl on_ignored_nl attr_reader on_symbeg devel on_nl on_ignored_nl attr_reader on_symbeg head on_nl on_ignored_nl attr_reader on_symbeg active_spec on_nl UNK # The stable (and default) {SoftwareSpec} for this {Formula} # This contains all the attributes (e.g. URL, checksum) that apply to the # stable version of this formula. # @private
attr_reader on_symbeg devel on_nl on_ignored_nl attr_reader on_symbeg head on_nl on_ignored_nl attr_reader on_symbeg active_spec on_nl UNK on_symbeg active_spec on_nl on_ignored_nl attr_reader # The development {SoftwareSpec} for this {Formula}. # Installed when using `brew install --devel` # `nil` if there is no development version. # @see #stable # @private
attr_reader on_symbeg head on_nl on_ignored_nl attr_reader on_symbeg active_spec on_nl UNK on_symbeg active_spec on_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl attr_reader # The HEAD {SoftwareSpec} for this {Formula}. # Installed when using `brew install --HEAD` # This is always installed with the version `HEAD` and taken from the latest # commit in the version control system. # `nil` if there is no HEAD version. # @see #stable # @private
attr_reader on_symbeg active_spec on_nl UNK on_symbeg active_spec on_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl attr_reader # The currently active {SoftwareSpec}. # @see #determine_active_spec
attr_reader on_symbeg UNK on_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl attr_reader on_symbeg revision on_nl on_ignored_nl attr_reader on_symbeg version_scheme on_nl on_ignored_nl # A symbol to indicate currently active {SoftwareSpec}. # It's either :stable, :devel or :head # @see #active_spec # @private
attr_reader on_symbeg UNK on_nl on_ignored_nl attr_reader on_symbeg revision on_nl on_ignored_nl attr_reader on_symbeg version_scheme on_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl # most recent modified time for source files # @private
attr_reader on_symbeg revision on_nl on_ignored_nl attr_reader on_symbeg version_scheme on_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl # Used for creating new Homebrew versions of software without new upstream # versions. # @see .revision=
attr_reader on_symbeg version_scheme on_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl # Used to change version schemes for packages
attr_reader on_symbeg UNK on_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl # The current working directory during builds. # Will only be non-`nil` inside {#install}.
attr_reader on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg build on_nl on_ignored_nl # The current working directory during tests. # Will only be non-`nil` inside {.test}.
UNK on_symbeg UNK on_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg build on_nl on_ignored_nl UNK on_symbeg UNK on_nl UNK # When installing a bottle (binary package) from a local path this will be # set to the full path to the bottle tarball. If not, it will be `nil`. # @private
attr_reader on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg build on_nl on_ignored_nl UNK on_symbeg UNK on_nl UNK UNK UNK on_nl on_ignored_nl def # When performing a build, test, or other loggable action, indicates which # log file location to use. # @private
UNK on_symbeg build on_nl on_ignored_nl UNK on_symbeg UNK on_nl UNK UNK UNK on_nl on_ignored_nl def UNK on_lparen name on_comma path # The {BuildOptions} for this {Formula}. Lists the arguments passed and any # {.option}s in the {Formula}. Note that these may differ at different times # during the installation of a {Formula}. This is annoying but the result of # state that we're trying to eliminate. # @return [BuildOptions]
UNK on_symbeg UNK on_nl UNK UNK UNK on_nl on_ignored_nl def UNK on_lparen name on_comma path on_comma spec on_comma on_label nil # A Boolean indicating whether this formula should be considered outdated # if the target of the alias it was installed with has since changed. # Defaults to true. # @return [Boolean]
def UNK on_lparen name on_comma path on_comma spec on_comma on_label nil on_rparen on_ignored_nl on_ivar on_op name on_nl on_ivar on_op path # @private
def UNK on_lparen spec_sym on_rparen on_ignored_nl spec on_op UNK on_lparen spec_sym on_rparen on_nl raise on_const on_comma on_tstring_beg on_embexpr_beg spec_sym on_embexpr_end # @private
def UNK on_lparen name on_rparen on_ignored_nl if name on_period nil? on_op on_ivar on_period nil? on_op on_ivar on_period core_tap? on_nl name # Allow full name logic to be re-used between names, aliases, # and installed aliases.
def installed_alias_path on_nl path on_op build on_period UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket if build on_period is_a? on_lparen on_const on_rparen # The alias path that was used to install this formula, if it exists. # Can differ from {#alias_path}, which is the alias used to find the formula, # and is specified to this instance.
def UNK on_nl alias_path on_op path on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op name on_nl end on_nl on_ignored_nl # The path that was specified to find this formula.
def UNK on_nl UNK on_op name on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op full_name on_nl end on_nl on_ignored_nl # The name specified to find this formula.
def UNK on_nl UNK on_op full_name on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op name on_nl end on_nl on_ignored_nl # The name (including tap) specified to find this formula.
def UNK on_nl UNK on_op name on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op full_name on_nl end on_nl on_ignored_nl # The name specified to install this formula.
def UNK on_nl UNK on_op full_name on_nl end on_nl on_ignored_nl def UNK on_nl active_spec on_op stable on_nl end on_nl on_ignored_nl # The name (including tap) specified to install this formula.
def UNK on_nl active_spec on_op stable on_nl end on_nl on_ignored_nl def UNK on_nl active_spec on_op devel on_nl end on_nl on_ignored_nl # Is the currently active {SoftwareSpec} a {#stable} build? # @private
def UNK on_nl active_spec on_op devel on_nl end on_nl on_ignored_nl def head? on_nl active_spec on_op head on_nl end on_nl on_ignored_nl # Is the currently active {SoftwareSpec} a {#devel} build? # @private
def head? on_nl active_spec on_op head on_nl end on_nl on_ignored_nl delegate on_lbracket on_symbeg UNK on_comma on_ignored_nl on_symbeg UNK on_comma on_ignored_nl # Is the currently active {SoftwareSpec} a {#head} build? # @private
on_symbeg UNK on_comma on_ignored_nl on_symbeg UNK on_comma on_ignored_nl on_symbeg UNK on_comma on_ignored_nl on_symbeg UNK on_comma on_ignored_nl on_symbeg UNK on_comma on_ignored_nl # rubocop:disable Layout/HashAlignment
def UNK on_nl on_const on_period new on_lparen self on_comma UNK on_rparen if UNK on_nl end on_nl on_ignored_nl delegate on_label on_symbeg # The Bottle object for the currently active {SoftwareSpec}. # @private
delegate on_label on_symbeg on_tstring_content on_tstring_end on_nl on_ignored_nl delegate on_label on_symbeg on_tstring_content on_tstring_end on_nl on_ignored_nl delegate on_label on_symbeg on_tstring_content on_tstring_end on_nl # The description of the software. # @method desc # @see .desc=
delegate on_label on_symbeg on_tstring_content on_tstring_end on_nl on_ignored_nl delegate on_label on_symbeg on_tstring_content on_tstring_end on_nl on_ignored_nl delegate on_label on_symbeg on_tstring_content on_tstring_end on_nl # The homepage for the software. # @method homepage # @see .homepage=
delegate on_label on_symbeg on_tstring_content on_tstring_end on_nl on_ignored_nl delegate on_label on_symbeg on_tstring_content on_tstring_end on_nl on_ignored_nl delegate on_label on_symbeg active_spec on_nl on_ignored_nl # The livecheck specification for the software. # @method livecheck # @see .livecheck=
delegate on_label on_symbeg on_tstring_content on_tstring_end on_nl on_ignored_nl delegate on_label on_symbeg active_spec on_nl on_ignored_nl def UNK on_nl return unless head? on_nl # Is a livecheck specification defined for the software? # @method livecheckable? # @see .livecheckable?
delegate on_label on_symbeg active_spec on_nl on_ignored_nl def UNK on_nl return unless head? on_nl return unless head on_period downloader on_period is_a? # The version for the currently active {SoftwareSpec}. # The version is autodetected from the URL and/or tag so only needs to be # declared if it cannot be autodetected correctly. # @method version # @see .version
def pkg_version on_nl on_const on_period new on_lparen version on_comma revision on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl name on_period # The {PkgVersion} for this formula with {version} and {#revision} information.
def UNK on_nl name on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl return on_lbracket # If this is a `@`-versioned formula.
def UNK on_nl return on_lbracket on_rbracket if UNK on_nl on_ignored_nl on_const on_period UNK on_lparen path on_period to_s on_period UNK on_lparen # Returns any `@`-versioned formulae for an non-`@`-versioned formula.
delegate on_label on_symbeg active_spec on_nl on_ignored_nl def oldname on_nl on_ivar on_op if tap on_nl UNK on_op tap on_period UNK on_nl # A named Resource for the currently active {SoftwareSpec}. # Additional downloads can be defined as {#resource}s. # {Resource#stage} will create a temporary directory and yield to a block. # <pre>resource("additional_files").stage { bin.install "my/extra/tool" }</pre> # @method resource
def oldname on_nl on_ivar on_op if tap on_nl UNK on_op tap on_period UNK on_nl UNK on_period UNK on_period UNK on_lparen # An old name for the formula
def UNK on_nl on_ivar on_op if tap on_nl tap on_period UNK on_lbracket full_name on_rbracket on_period UNK on_period map do on_op # All aliases for the formula
UNK on_symbeg on_tstring_content on_tstring_end on_comma on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl delegate on_label on_symbeg active_spec on_nl on_ignored_nl delegate on_label # The {Resource}s for the currently active {SoftwareSpec}. # @method resources
delegate on_label on_symbeg active_spec on_nl on_ignored_nl delegate on_label on_symbeg active_spec on_nl on_ignored_nl delegate on_label on_symbeg active_spec on_nl on_ignored_nl delegate on_label # The {Dependency}s for the currently active {SoftwareSpec}.
delegate on_label on_symbeg active_spec on_nl on_ignored_nl delegate on_label on_symbeg active_spec on_nl on_ignored_nl delegate on_label on_symbeg active_spec on_nl on_ignored_nl delegate on_label # Dependencies provided by macOS for the currently active {SoftwareSpec}.
delegate on_label on_symbeg active_spec on_nl on_ignored_nl delegate on_label on_symbeg active_spec on_nl on_ignored_nl delegate on_label on_symbeg active_spec on_nl on_ignored_nl UNK on_symbeg # The {Requirement}s for the currently active {SoftwareSpec}.
delegate on_label on_symbeg active_spec on_nl on_ignored_nl delegate on_label on_symbeg active_spec on_nl on_ignored_nl UNK on_symbeg active_spec on_comma on_symbeg UNK on_comma on_symbeg # The cached download for the currently active {SoftwareSpec}.
delegate on_label on_symbeg active_spec on_nl on_ignored_nl UNK on_symbeg active_spec on_comma on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl delegate on_label on_symbeg # Deletes the download for the currently active {SoftwareSpec}.
UNK on_symbeg active_spec on_comma on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl delegate on_label on_symbeg active_spec on_nl on_ignored_nl delegate on_label on_symbeg # The list of patches for the currently active {SoftwareSpec}.
delegate on_label on_symbeg active_spec on_nl on_ignored_nl delegate on_label on_symbeg active_spec on_nl on_ignored_nl delegate on_label on_symbeg active_spec on_nl on_ignored_nl delegate on_label # The options for the currently active {SoftwareSpec}.
delegate on_label on_symbeg active_spec on_nl on_ignored_nl delegate on_label on_symbeg active_spec on_nl on_ignored_nl delegate on_label on_symbeg active_spec on_nl on_ignored_nl delegate on_label # The deprecated options for the currently active {SoftwareSpec}.
delegate on_label on_symbeg active_spec on_nl on_ignored_nl delegate on_label on_symbeg active_spec on_nl on_ignored_nl delegate on_label on_symbeg active_spec on_nl on_ignored_nl def UNK # The deprecated option flags for the currently active {SoftwareSpec}.
delegate on_label on_symbeg active_spec on_nl on_ignored_nl delegate on_label on_symbeg active_spec on_nl on_ignored_nl def UNK on_nl on_lparen UNK on_op UNK on_rparen # If a named option is defined for the currently active {SoftwareSpec}. # @method option_defined?
delegate on_label on_symbeg active_spec on_nl on_ignored_nl def UNK on_nl on_lparen UNK on_op UNK on_rparen on_period directory? on_op on_op UNK on_period # All the {.fails_with} for the currently active {SoftwareSpec}.
def UNK on_nl on_lparen UNK on_op UNK on_rparen on_period directory? on_op on_op UNK on_period UNK on_period empty? on_nl end on_nl # If this {Formula} is installed. # This is actually just a check for if the {#installed_prefix} directory # exists and is not empty. # @private
def UNK on_nl installed_prefixes on_period UNK on_lbrace on_op keg on_op on_lparen keg on_op on_const on_op on_const on_rparen on_period UNK on_rbrace # If at least one version of {Formula} is installed. # @private
def UNK on_nl on_const on_op name on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op installed_prefixes on_period map do on_op # @private # The link status symlink directory for this {Formula}. # You probably want {#opt_prefix} instead.
def UNK on_nl if head on_op on_lparen head_version on_op UNK on_rparen on_op on_op UNK on_lparen head_version on_rparen on_nl UNK on_nl # The latest prefix for this formula. Checks for {#head}, then {#devel} # and then {#stable}'s {#prefix} # @private
def UNK on_nl on_const on_period new on_lparen UNK on_rparen on_period version on_nl end on_nl on_ignored_nl def prefix on_lparen v on_op # The currently installed version for this formula. Will raise an exception # if the formula is not installed. # @private
def prefix on_lparen v on_op pkg_version on_rparen on_ignored_nl versioned_prefix on_op versioned_prefix on_lparen v on_rparen on_nl if on_op on_ivar on_op v # The directory in the cellar that the formula is installed to. # This directory points to {#opt_prefix} if it exists and if #{prefix} is not # called from within the same formula's {#install} or {#post_install} methods. # Otherwise, return the full path to the formula's versioned cellar.
def UNK on_nl UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl opt_prefix on_period UNK on_nl end on_nl on_ignored_nl # Is the formula linked?
def UNK on_nl opt_prefix on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen v on_op pkg_version on_rparen on_ignored_nl return false # Is the formula linked to `opt`?
def UNK on_lparen v on_op pkg_version on_rparen on_ignored_nl return false unless UNK on_nl on_ignored_nl UNK on_period UNK on_op versioned_prefix on_lparen # If a formula's linked keg points to the prefix.
def UNK on_nl return unless UNK on_nl on_ignored_nl on_const on_period UNK on_lparen UNK on_rparen on_period version on_nl end on_nl on_ignored_nl # {PkgVersion} of the linked keg for the formula.
def rack on_nl on_const on_period new on_lparen on_tstring_beg on_embexpr_beg on_const on_embexpr_end on_tstring_content on_embexpr_beg name on_embexpr_end on_tstring_end on_rparen on_nl end on_nl # The parent of the prefix; the named directory in the cellar containing all # installed versions of this software # @private
def installed_prefixes on_nl rack on_period directory? on_op rack on_period UNK on_period sort on_op on_lbracket on_rbracket on_nl end on_nl on_ignored_nl def # All currently installed prefix directories. # @private
def installed_kegs on_nl installed_prefixes on_period map on_lbrace on_op UNK on_op on_const on_period new on_lparen UNK on_rparen on_rbrace on_nl end on_nl # All currently installed kegs. # @private
def UNK on_nl prefix on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl share on_op on_tstring_beg on_tstring_content on_tstring_end # The directory where the formula's binaries should be installed. # This is symlinked into `HOMEBREW_PREFIX` after installation or with # `brew link` for formulae that are not keg-only. # # Need to install into the {.bin} but the makefile doesn't `mkdir -p prefix/bin`? # <pre>bin.mkpath</pre> # # No `make install` available? # <pre>bin.install "binary1"</pre>
def UNK on_nl share on_op on_tstring_beg on_tstring_content on_tstring_end on_op name on_nl end on_nl on_ignored_nl def include on_nl prefix on_op on_tstring_beg # The directory where the formula's documentation should be installed. # This is symlinked into `HOMEBREW_PREFIX` after installation or with # `brew link` for formulae that are not keg-only.
def include on_nl prefix on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl share on_op on_tstring_beg on_tstring_content on_tstring_end # The directory where the formula's headers should be installed. # This is symlinked into `HOMEBREW_PREFIX` after installation or with # `brew link` for formulae that are not keg-only. # # No `make install` available? # <pre>include.install "example.h"</pre>
def UNK on_nl share on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl prefix on_op on_tstring_beg on_tstring_content on_tstring_end # The directory where the formula's info files should be installed. # This is symlinked into `HOMEBREW_PREFIX` after installation or with # `brew link` for formulae that are not keg-only.
def UNK on_nl prefix on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl prefix on_op on_tstring_beg on_tstring_content on_tstring_end # The directory where the formula's libraries should be installed. # This is symlinked into `HOMEBREW_PREFIX` after installation or with # `brew link` for formulae that are not keg-only. # # No `make install` available? # <pre>lib.install "example.dylib"</pre>
def UNK on_nl prefix on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def man on_nl share on_op on_tstring_beg on_tstring_content on_tstring_end # The directory where the formula's binaries should be installed. # This is not symlinked into `HOMEBREW_PREFIX`. # It is also commonly used to install files that we do not wish to be # symlinked into `HOMEBREW_PREFIX` from one of the other directories and # instead manually create symlinks or wrapper scripts into e.g. {#bin}.
def man on_nl share on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl man on_op on_tstring_beg on_tstring_content on_tstring_end # The root directory where the formula's manual pages should be installed. # This is symlinked into `HOMEBREW_PREFIX` after installation or with # `brew link` for formulae that are not keg-only. # Often one of the more specific `man` functions should be used instead, # e.g. {#man1}
def UNK on_nl man on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl man on_op on_tstring_beg on_tstring_content on_tstring_end # The directory where the formula's man1 pages should be installed. # This is symlinked into `HOMEBREW_PREFIX` after installation or with # `brew link` for formulae that are not keg-only. # # No `make install` available? # <pre>man1.install "example.1"</pre>
def UNK on_nl man on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl man on_op on_tstring_beg on_tstring_content on_tstring_end # The directory where the formula's man2 pages should be installed. # This is symlinked into `HOMEBREW_PREFIX` after installation or with # `brew link` for formulae that are not keg-only.
def UNK on_nl man on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl man on_op on_tstring_beg on_tstring_content on_tstring_end # The directory where the formula's man3 pages should be installed. # This is symlinked into `HOMEBREW_PREFIX` after installation or with # `brew link` for formulae that are not keg-only. # # No `make install` available? # <pre>man3.install "man.3"</pre>
def UNK on_nl man on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl man on_op on_tstring_beg on_tstring_content on_tstring_end # The directory where the formula's man4 pages should be installed. # This is symlinked into `HOMEBREW_PREFIX` after installation or with # `brew link` for formulae that are not keg-only.
def UNK on_nl man on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl man on_op on_tstring_beg on_tstring_content on_tstring_end # The directory where the formula's man5 pages should be installed. # This is symlinked into `HOMEBREW_PREFIX` after installation or with # `brew link` for formulae that are not keg-only.
def UNK on_nl man on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl man on_op on_tstring_beg on_tstring_content on_tstring_end # The directory where the formula's man6 pages should be installed. # This is symlinked into `HOMEBREW_PREFIX` after installation or with # `brew link` for formulae that are not keg-only.
def UNK on_nl man on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl man on_op on_tstring_beg on_tstring_content on_tstring_end # The directory where the formula's man7 pages should be installed. # This is symlinked into `HOMEBREW_PREFIX` after installation or with # `brew link` for formulae that are not keg-only.
def UNK on_nl man on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl prefix on_op on_tstring_beg on_tstring_content on_tstring_end # The directory where the formula's man8 pages should be installed. # This is symlinked into `HOMEBREW_PREFIX` after installation or with # `brew link` for formulae that are not keg-only.
def UNK on_nl prefix on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def share on_nl prefix on_op on_tstring_beg on_tstring_content on_tstring_end # The directory where the formula's `sbin` binaries should be installed. # This is symlinked into `HOMEBREW_PREFIX` after installation or with # `brew link` for formulae that are not keg-only. # Generally we try to migrate these to {#bin} instead.
def share on_nl prefix on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl prefix on_op on_tstring_beg on_tstring_content on_tstring_end # The directory where the formula's shared files should be installed. # This is symlinked into `HOMEBREW_PREFIX` after installation or with # `brew link` for formulae that are not keg-only. # # Need a custom directory? # <pre>(share/"concept").mkpath</pre> # # Installing something into another custom directory? # <pre>(share/"concept2").install "ducks.txt"</pre> # # Install `./example_code/simple/ones` to share/demos # <pre>(share/"demos").install "example_code/simple/ones"</pre> # # Install `./example_code/simple/ones` to share/demos/examples # <pre>(share/"demos").install "example_code/simple/ones" => "examples"</pre>
def UNK on_nl prefix on_op on_tstring_beg on_tstring_content on_tstring_end on_op name on_nl end on_nl on_ignored_nl def UNK on_nl prefix on_op on_tstring_beg # The directory where the formula's shared files should be installed, # with the name of the formula appended to avoid linking conflicts. # This is symlinked into `HOMEBREW_PREFIX` after installation or with # `brew link` for formulae that are not keg-only. # # No `make install` available? # <pre>pkgshare.install "examples"</pre>
def UNK on_nl prefix on_op on_tstring_beg on_tstring_content on_tstring_end on_op name on_nl end on_nl on_ignored_nl def UNK on_nl prefix on_op on_tstring_beg # The directory where Emacs Lisp files should be installed, with the # formula name appended to avoid linking conflicts. # # Install an Emacs mode included with a software package: # <pre>elisp.install "contrib/emacs/example-mode.el"</pre>
def UNK on_nl prefix on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl prefix on_op on_tstring_beg on_tstring_content on_tstring_end # The directory where the formula's Frameworks should be installed. # This is symlinked into `HOMEBREW_PREFIX` after installation or with # `brew link` for formulae that are not keg-only. # This is not symlinked into `HOMEBREW_PREFIX`.
def UNK on_nl prefix on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl on_lparen on_const on_op on_tstring_beg on_tstring_content # The directory where the formula's kernel extensions should be installed. # This is symlinked into `HOMEBREW_PREFIX` after installation or with # `brew link` for formulae that are not keg-only. # This is not symlinked into `HOMEBREW_PREFIX`.
def UNK on_nl on_lparen on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period extend on_lparen on_const on_rparen on_nl end on_nl on_ignored_nl def # The directory where the formula's configuration files should be installed. # Anything using `etc.install` will not overwrite other files on e.g. upgrades # but will write a new file named `*.default`. # This directory is not inside the `HOMEBREW_CELLAR` so it persists # across upgrades.
def UNK on_nl on_lparen on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_op name on_rparen on_period extend on_lparen on_const on_rparen on_nl end on_nl # A subdirectory of `etc` with the formula name suffixed. # e.g. `$HOMEBREW_PREFIX/etc/openssl@1.1` # Anything using `pkgetc.install` will not overwrite other files on # e.g. upgrades but will write a new file named `*.default`.
def UNK on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl share on_op on_tstring_beg on_tstring_content on_tstring_end # The directory where the formula's variable files should be installed. # This directory is not inside the `HOMEBREW_CELLAR` so it persists # across upgrades.
def UNK on_nl share on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl share on_op on_tstring_beg on_tstring_content on_tstring_end # The directory where the formula's ZSH function files should be # installed. # This is symlinked into `HOMEBREW_PREFIX` after installation or with # `brew link` for formulae that are not keg-only.
def UNK on_nl share on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl prefix on_op on_tstring_beg on_tstring_content on_tstring_end # The directory where the formula's fish function files should be # installed. # This is symlinked into `HOMEBREW_PREFIX` after installation or with # `brew link` for formulae that are not keg-only.
def UNK on_nl prefix on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl share on_op on_tstring_beg on_tstring_content on_tstring_end # The directory where the formula's Bash completion files should be # installed. # This is symlinked into `HOMEBREW_PREFIX` after installation or with # `brew link` for formulae that are not keg-only.
def UNK on_nl share on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl share on_op on_tstring_beg on_tstring_content on_tstring_end # The directory where the formula's ZSH completion files should be # installed. # This is symlinked into `HOMEBREW_PREFIX` after installation or with # `brew link` for formulae that are not keg-only.
def UNK on_nl share on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl prefix on_op on_tstring_beg on_tstring_content on_tstring_end # The directory where the formula's fish completion files should be # installed. # This is symlinked into `HOMEBREW_PREFIX` after installation or with # `brew link` for formulae that are not keg-only.
def UNK on_nl prefix on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl on_const on_op name on_nl end # The directory used for as the prefix for {#etc} and {#var} files on # installation so, despite not being in `HOMEBREW_CELLAR`, they are installed # there after pouring a bottle. # @private
def UNK on_nl on_const on_op name on_nl end on_nl on_ignored_nl def UNK on_nl if UNK on_nl on_tstring_beg on_embexpr_beg UNK on_embexpr_end # The directory where the formula's installation or test logs will be written. # @private
def UNK on_nl if UNK on_nl on_tstring_beg on_embexpr_beg UNK on_embexpr_end on_tstring_content on_tstring_end on_nl else on_ignored_nl on_tstring_beg on_tstring_end on_nl end on_nl # The prefix, if any, to use in filenames for logging current activity
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op on_ivar on_nl on_ivar on_op UNK on_nl yield on_nl ensure on_ignored_nl on_ivar on_op # Runs a block with the given log type in effect for its duration
def UNK on_nl nil on_nl end on_nl on_ignored_nl def UNK on_nl on_tstring_beg on_tstring_content on_tstring_end on_op name on_nl end on_nl on_ignored_nl # This method can be overridden to provide a plist. # @see https://www.unix.com/man-page/all/5/plist/ Apple's plist(5) man page # <pre>def plist; <<~EOS # <?xml version="1.0" encoding="UTF-8"?> # <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"> # <plist version="1.0"> # <dict> # <key>Label</key> # <string>#{plist_name}</string> # <key>ProgramArguments</key> # <array> # <string>#{opt_bin}/example</string> # <string>--do-this</string> # </array> # <key>RunAtLoad</key> # <true/> # <key>KeepAlive</key> # <true/> # <key>StandardErrorPath</key> # <string>/dev/null</string> # <key>StandardOutPath</key> # <string>/dev/null</string> # </dict> # </plist> # EOS # end</pre>
def UNK on_nl on_tstring_beg on_tstring_content on_tstring_end on_op name on_nl end on_nl on_ignored_nl def UNK on_nl prefix on_op on_lparen UNK on_op # The generated launchd {.plist} service name.
def UNK on_nl prefix on_op on_lparen UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl self # The generated launchd {.plist} file path.
def UNK on_nl self on_period class on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl self on_period class on_period UNK # @private
def UNK on_nl self on_period class on_period UNK on_nl end on_nl on_ignored_nl def opt_prefix on_nl on_const on_period new on_lparen on_tstring_beg # @private
def opt_prefix on_nl on_const on_period new on_lparen on_tstring_beg on_embexpr_beg on_const on_embexpr_end on_tstring_content on_embexpr_beg name on_embexpr_end on_tstring_end on_rparen on_nl end on_nl # A stable path for this formula, when installed. Contains the formula name # but no version number. Only the active version will be linked here if # multiple versions are installed. # # This is the preferred way to refer to a formula in plists or from another # formula, as the path is stable even when the software is updated. # <pre>args << "--with-readline=#{Formula["readline"].opt_prefix}" if build.with? "readline"</pre>
def UNK on_nl true on_nl end on_nl on_ignored_nl def UNK on_nl self on_period class on_period UNK on_nl end on_nl on_ignored_nl # Indicates that this formula supports bottles. (Not necessarily that one # should be used in the current installation run.) # Can be overridden to selectively disable bottles from formulae. # Defaults to true so overridden version does not have to check if bottles # are supported. # Replaced by {.pour_bottle}'s `satisfy` method if it is specified.
def UNK on_nl self on_period class on_period UNK on_nl end on_nl on_ignored_nl def UNK UNK end on_nl on_ignored_nl def UNK # @private
def UNK UNK end on_nl on_ignored_nl def UNK on_nl on_ivar on_op true on_nl build on_op self on_period build on_nl self # Can be overridden to run commands on both source and bottle installation.
def UNK on_nl on_ivar on_op true on_nl build on_op self on_period build on_nl self on_period build on_op on_const on_period UNK # @private
def UNK on_nl nil on_nl end on_nl on_ignored_nl def UNK on_nl return false unless UNK on_nl on_ignored_nl UNK on_period UNK # Warn the user about any Homebrew-specific issues or quirks for this package # These should not contain setup instructions that would apply to installation # through a different package manager on a different OS. # @return [String] # <pre>def caveats # <<~EOS # Are optional. Something the user must be warned about? # EOS # end</pre> # # <pre>def caveats # s = <<~EOS # Print some important notice to the user when `brew info [formula]` is # called or when brewing a formula. # This is optional. You can use all the vars like #{version} here. # EOS # s += "Some issue only on older systems" if MacOS.version < :el_capitan # s # end</pre>
def UNK on_nl return false unless UNK on_nl on_ignored_nl UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl self # Rarely, you don't want your library symlinked into the main prefix. # See `gettext.rb` for an example.
def UNK on_nl self on_period class on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen path on_rparen on_ignored_nl return true # @private
def UNK on_lparen path on_rparen on_ignored_nl return true if path on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_op self on_period class # sometimes the formula cleaner breaks things # skip cleaning paths in a formula with a class method like this: # skip_clean "bin/foo", "lib/bar" # keep .la files with: # skip_clean :la # @private
def UNK on_lparen path on_rparen on_ignored_nl return false unless path on_period UNK on_period UNK on_op on_const on_period UNK on_period UNK # Sometimes we accidentally install files outside prefix. After we fix that, # users will get nasty link conflict error. So we create a whitelist here to # allow overwriting certain files. e.g. # link_overwrite "bin/foo", "lib/bar" # link_overwrite "share/man/man1/baz-*" # @private
return false unless path on_period UNK on_period UNK on_op on_const on_period UNK on_period UNK on_nl on_ignored_nl begin on_ignored_nl keg on_op # Don't overwrite files not created by Homebrew.
begin on_ignored_nl keg on_op on_const on_period UNK on_lparen path on_rparen on_nl rescue on_const on_comma on_const on_op on_const on_nl else on_ignored_nl # Don't overwrite files belong to other keg except when that # keg's formula is deleted.
else on_ignored_nl UNK on_op on_const on_period for_keg on_lparen keg on_rparen on_period tap on_nl return false if UNK on_period nil? on_nl # file doesn't belong to any keg.
return false if UNK on_period nil? on_nl on_ignored_nl begin on_ignored_nl on_const on_period UNK on_lparen keg on_period name on_rparen on_nl rescue # this keg doesn't below to any core/tap formula, most likely coming from a DIY install.
rescue on_const on_comma on_const on_nl return false else on_ignored_nl return false end on_nl end on_nl to_check on_op path on_period UNK # formula for this keg is deleted, so defer to whitelist
else on_ignored_nl return false end on_nl end on_nl to_check on_op path on_period UNK on_lparen on_const on_rparen on_period to_s on_nl self # this keg belongs to another formula
end on_nl end on_nl to_check on_op path on_period UNK on_lparen on_const on_rparen on_period to_s on_nl self on_period class on_period UNK # this keg belongs to another formula
def UNK on_nl self on_period class on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl self on_period class on_period UNK # Whether this {Formula} is deprecated (i.e. warns on installation). # Defaults to false. # @return [Boolean]
def UNK on_nl self on_period class on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl false on_nl end on_nl on_ignored_nl # Whether this {Formula} is disabled (i.e. cannot be installed). # Defaults to false. # @return [Boolean]
def UNK on_nl false on_nl end on_nl on_ignored_nl def UNK on_nl return if UNK on_period empty? on_nl on_ignored_nl UNK on_tstring_beg # @private
def UNK on_nl return if UNK on_period empty? on_nl on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_period each on_lparen on_op # @private
def UNK on_nl on_ivar on_op true on_nl active_spec on_period UNK on_nl UNK do on_op staging on_op on_ignored_nl staging on_period UNK # yields |self,staging| with current working directory set to the uncompressed tarball # where staging is a Mktemp staging context # @private
def UNK on_nl on_ivar on_op on_const on_period new on_lparen name on_rparen on_nl on_ivar on_period UNK on_nl return unless oldname on_nl # @private
def UNK on_nl on_ivar on_op UNK on_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl return false unless # @private
def UNK on_lparen on_label false on_rparen on_ignored_nl raise on_const on_op on_const on_comma self if UNK on_nl on_ignored_nl UNK on_op on_tstring_beg # @private
next if UNK on_op UNK on_nl on_ignored_nl UNK on_op true on_nl UNK on_nl end on_nl on_ignored_nl if UNK on_nl on_lbracket # don't consider this keg current if there's a newer formula available
UNK on_op true on_nl UNK on_nl end on_nl on_ignored_nl if UNK on_nl on_lbracket on_rbracket on_nl elsif on_lparen head_version on_op UNK # this keg is the current version of the formula, so it's not outdated
def UNK on_nl UNK on_op UNK on_nl return false unless UNK on_nl on_ignored_nl UNK on_period name on_op name on_nl end # Has the target of the alias used to install this formula changed? # Returns false if the formula wasn't installed with an alias.
def UNK on_nl UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op UNK on_nl end on_nl on_ignored_nl # Is this formula the target of an alias used to install an old formula?
def UNK on_nl UNK on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op UNK on_op self on_nl end # Has the alias used to install the formula changed, or are different # formulae already installed with this alias?
def UNK on_nl UNK on_op UNK on_op self on_nl end on_nl on_ignored_nl def UNK on_nl return on_lbracket on_rbracket if alias_path # If the alias has changed value, return the new formula. # Otherwise, return self.
return on_lbracket on_rbracket if alias_path on_period nil? on_op UNK on_nl on_ignored_nl self on_period class on_period UNK on_lparen alias_path on_rparen on_period # If this formula isn't the current target of the alias, # it doesn't make sense to say that other formulae are older versions of it # because we don't know which came first.
def UNK on_lparen on_label false on_rparen on_ignored_nl on_op UNK on_lparen on_label UNK on_rparen on_period empty? on_nl rescue on_const on_op on_const # @private
def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl # @private
def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl # @private
def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl # @private
def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl # @private
def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def on_op on_lparen other on_rparen on_ignored_nl UNK on_lparen other on_period # @private
def on_op on_lparen other on_rparen on_ignored_nl UNK on_lparen other on_period class on_rparen on_op on_ignored_nl name on_op other on_period name on_op # @private
def UNK on_nl name on_period UNK on_nl end on_nl on_ignored_nl def on_op on_lparen other on_rparen on_ignored_nl return unless other on_period # @private
def on_op on_lparen other on_rparen on_ignored_nl return unless other on_period is_a? on_lparen on_const on_rparen on_nl on_ignored_nl name on_op other on_period # @private
def UNK on_nl on_tstring_beg on_tstring_content on_embexpr_beg name on_embexpr_end on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_content on_embexpr_beg path on_embexpr_end on_tstring_content on_tstring_end on_nl end # @private
def UNK on_nl args on_op UNK on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_embexpr_beg prefix on_embexpr_end on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep # Standard parameters for CMake builds. # Setting `CMAKE_FIND_FRAMEWORK` to "LAST" tells CMake to search for our # libraries before trying to utilize Frameworks, many of which will be from # 3rd party installs. # Note: there isn't a std_autotools variant because autotools is a lot # less consistent and the standard parameters are more memorable.
args on_op on_tstring_beg on_tstring_content on_tstring_end if on_const on_period version on_op on_tstring_beg on_tstring_content on_tstring_end on_op on_const on_op on_const on_period version on_op # Avoid false positives for clock_gettime support on 10.11. # CMake cache entries for other weak symbols may be added here as needed.
args on_op on_tstring_beg on_tstring_content on_embexpr_beg on_const on_period UNK on_lparen self on_rparen on_period path on_embexpr_end on_tstring_end if on_const on_period UNK on_nl # Ensure CMake is using the same SDK we are using.
def UNK on_nl on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma UNK on_op name on_rbracket on_nl end on_nl on_ignored_nl # Standard parameters for Go builds.
def UNK on_nl on_lbracket on_tstring_beg on_tstring_content on_embexpr_beg on_const on_period UNK on_embexpr_end on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end # Standard parameters for cabal-v2 builds.
on_lbracket on_tstring_beg on_tstring_content on_embexpr_beg on_const on_period UNK on_embexpr_end on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content # cabal-install's dependency-resolution backtracking strategy can # easily need more than the default 2,000 maximum number of # "backjumps," since Hackage is a fast-moving, rolling-release # target. The highest known needed value by a formula was 43,478 # for git-annex, so 100,000 should be enough to avoid most # gratuitous backjumps build failures.
def UNK on_nl on_lbracket on_tstring_beg on_tstring_content on_embexpr_beg prefix on_embexpr_end on_tstring_end on_comma on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_end on_rbracket on_nl end # Standard parameters for meson builds.
def self on_period UNK on_nl on_const on_period instance on_period UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_nl on_const # an array of all core {Formula} names # @private
def self on_period UNK on_nl on_const on_period instance on_period UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_nl on_ivar # an array of all core {Formula} files # @private
def self on_period UNK on_nl on_ivar on_op on_const on_period reject on_lparen on_op on_symbeg core_tap? on_rparen on_period UNK on_lparen on_op on_symbeg # an array of all tap {Formula} names # @private
def self on_period UNK on_nl on_ivar on_op on_const on_period reject on_lparen on_op on_symbeg core_tap? on_rparen on_period UNK on_lparen on_op on_symbeg # an array of all tap {Formula} files # @private
def self on_period UNK on_nl on_ivar on_op on_lparen UNK on_op UNK on_period map on_lbrace on_op name on_op name on_period UNK # an array of all {Formula} names # @private
def self on_period UNK on_nl on_ivar on_op UNK on_op UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_nl on_ivar # an array of all {Formula} files # @private
def self on_period UNK on_nl on_ivar on_op UNK on_op UNK on_nl end on_nl on_ignored_nl def self on_period each on_nl UNK # an array of all {Formula} names, which the tap formulae have the fully-qualified name # @private
def self on_period each on_nl UNK on_period each do on_op UNK on_op on_ignored_nl yield on_const on_period UNK on_lparen UNK on_rparen # @private
UNK on_tstring_beg on_tstring_content on_embexpr_beg UNK on_embexpr_end on_tstring_end on_nl puts UNK on_nl next on_nl end on_nl end on_nl on_ignored_nl def self # Don't let one broken formula break commands. But do complain.
def self on_period UNK on_nl on_ivar on_op nil on_nl end on_nl on_ignored_nl def self on_period UNK on_nl UNK on_nl on_ivar # Clear cache of .racks
def self on_period UNK on_nl UNK on_nl on_ivar on_op nil on_nl end on_nl on_ignored_nl def self on_period UNK on_nl on_ivar # Clear caches of .racks and .installed.
def self on_period UNK on_nl on_ivar on_op if on_const on_period directory? on_nl on_const on_period UNK on_period reject do on_op rack # An array of all racks currently installed. # @private
def self on_period UNK on_nl on_ivar on_op UNK on_period UNK do on_op rack on_op on_ignored_nl on_const on_period UNK on_lparen rack # An array of all installed {Formula} # @private
def self on_period UNK on_nl on_const on_period instance on_period UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_nl on_const # an array of all alias files of core {Formula} # @private
def self on_period UNK on_nl on_const on_period instance on_period UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_nl on_ivar # an array of all core aliases # @private
def self on_period UNK on_nl on_ivar on_op on_const on_period reject on_lparen on_op on_symbeg core_tap? on_rparen on_period UNK on_lparen on_op on_symbeg # an array of all tap aliases # @private
def self on_period UNK on_nl on_ivar on_op on_lparen UNK on_op UNK on_period map on_lbrace on_op name on_op name on_period UNK # an array of all aliases # @private
def self on_period UNK on_nl on_ivar on_op UNK on_op UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_nl on_const # an array of all aliases, , which the tap formulae have the fully-qualified name # @private
def self on_period UNK on_nl on_const on_period instance on_period UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_nl on_const # a table mapping core alias to formula name # @private
def self on_period UNK on_nl on_const on_period instance on_period UNK on_nl end on_nl on_ignored_nl def self on_period on_op on_lparen name # a table mapping core formula name to aliases # @private
def UNK on_nl tap on_op core_tap? on_nl end on_nl on_ignored_nl def UNK on_nl return false unless tap on_nl on_ignored_nl on_op # True if this formula is provided by Homebrew itself # @private
def UNK on_nl return false unless tap on_nl on_ignored_nl on_op tap on_period core_tap? on_nl end on_nl on_ignored_nl def UNK on_lparen # True if this formula is provided by external Tap # @private
def UNK on_lparen options on_op on_lbrace on_rbrace on_rparen on_ignored_nl return unless UNK on_nl on_ignored_nl UNK on_op options on_lbracket on_symbeg UNK # @private
def UNK on_nl self on_period class on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl self on_period class on_period UNK # @private
def UNK on_nl self on_period class on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen on_op block on_rparen on_ignored_nl on_const # @private
def UNK on_lparen on_op block on_rparen on_ignored_nl on_const on_period UNK on_lparen self on_comma on_op block on_rparen on_nl end on_nl on_ignored_nl # Returns a list of Dependency objects in an installable order, which # means if a depends on b then b will be ordered before a in this list # @private
def UNK on_lparen on_op block on_rparen on_ignored_nl on_const on_period UNK on_lparen self on_comma on_op block on_rparen on_nl end on_nl on_ignored_nl # The full set of Requirements for this formula's dependency tree. # @private
def opt_or_installed_prefix_keg on_nl on_const on_period cache on_lbracket on_symbeg opt_or_installed_prefix_keg on_rbracket on_op on_lbrace on_rbrace on_nl on_const on_period cache on_lbracket on_symbeg opt_or_installed_prefix_keg # Returns a Keg for the opt_prefix or installed_prefix if they exist. # If not, return nil. # @private
def UNK on_lparen on_label true on_comma on_label true on_rparen on_ignored_nl deps on_op if UNK on_op UNK on_op on_ignored_nl on_lparen UNK # Returns a list of Dependency objects that are required at runtime. # @private
def UNK on_lparen on_label true on_comma on_label true on_rparen on_ignored_nl UNK on_op on_tstring_beg on_embexpr_beg name on_embexpr_end on_tstring_content on_embexpr_beg UNK on_embexpr_end # Returns a list of Formula objects that are required at runtime. # @private
on_const on_period cache on_lbracket on_symbeg UNK on_rbracket on_op on_lbrace on_rbrace on_nl on_const on_period cache on_lbracket on_symbeg UNK on_rbracket on_lbracket name # `opt_or_installed_prefix_keg` and `runtime_dependencies` `select`s ensure # that we don't end up with something `Formula#runtime_dependencies` can't # read from a `Tab`.
def UNK on_lparen on_label nil on_rparen on_ignored_nl UNK on_op on_lbracket on_rbracket on_nl UNK on_period select do on_op f on_op on_ignored_nl # Returns a list of formulae depended on by this formula that aren't # installed
rescue on_const on_nl on_lbracket on_rbracket on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op deps on_nl UNK on_op UNK on_op # If we're still getting unavailable formulae at this stage the best we can # do is just return no results.
def UNK on_nl UNK on_op deps on_nl UNK on_op UNK on_op on_lbracket on_rbracket on_nl on_ignored_nl hsh on_op on_lbrace on_ignored_nl on_tstring_beg # @private
def UNK on_lparen on_label true on_rparen on_ignored_nl active_spec on_period UNK on_lparen on_label UNK on_rparen on_nl end on_nl on_ignored_nl def UNK # @private
def UNK on_lparen UNK on_rparen on_ignored_nl active_spec on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar # @private
def UNK on_nl on_ivar on_op true on_nl on_ignored_nl UNK on_op on_lbrace on_ignored_nl on_label on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op # @private
staging on_period UNK if on_const on_period UNK on_nl raise on_nl end on_nl end on_nl ensure on_ignored_nl on_ivar on_op nil on_nl # rubocop:disable Lint/RescueException
def UNK on_nl false on_nl end on_nl on_ignored_nl def UNK UNK end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl # @private
def UNK UNK end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_op UNK on_nl # @private
def UNK on_lparen UNK on_rparen on_ignored_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_op UNK on_nl end on_nl on_ignored_nl def UNK UNK # @private
def UNK UNK end on_nl on_ignored_nl UNK on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_op on_tstring_beg # This method is overridden in {Formula} subclasses to provide the installation instructions. # The sources (from {.url}) are downloaded, hash-checked and # Homebrew changes into a temporary directory where the # archive was unpacked or repository cloned. # <pre>def install # system "./configure", "--prefix=#{prefix}" # system "make", "install" # end</pre>
UNK on_op UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_period UNK on_nl on_lparen UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period # keep Homebrew's site-packages in sys.path when using system Python
def UNK on_nl UNK do on_op UNK on_comma UNK on_op on_ignored_nl on_const on_period UNK if UNK on_period UNK on_nl next # Returns a list of Dependency objects that are declared in the formula. # @private
def UNK on_nl keg on_op opt_or_installed_prefix_keg on_nl return on_lbracket on_rbracket unless keg on_nl on_ignored_nl UNK on_op on_const on_period UNK on_lparen # Returns a list of Dependency objects that are not declared in the formula # but the formula links to. # @private
def UNK on_lparen cmd on_comma on_op args on_rparen on_ignored_nl UNK on_op on_const on_period args on_period UNK on_nl UNK on_op on_const # To call out to the system, we use the `system` method and we prefer # you give the args separately as in the line below, otherwise a subshell # has to be opened first. # <pre>system "./bootstrap.sh", "--arg1", "--prefix=#{prefix}"</pre> # # For CMake we have some necessary defaults in {#std_cmake_args}: # <pre>system "cmake", ".", *std_cmake_args</pre> # # If the arguments given to configure (or make or cmake) are depending # on options defined above, we usually make a list first and then # use the `args << if <condition>` to append to: # <pre>args = ["--with-option1", "--with-option2"] # # # Most software still uses `configure` and `make`. # # Check with `./configure --help` what our options are. # system "./configure", "--disable-debug", "--disable-dependency-tracking", # "--disable-silent-rules", "--prefix=#{prefix}", # *args # our custom arg list (needs `*` to unpack) # # # If there is a "make", "install" available, please use it! # system "make", "install"</pre>
pretty_args on_op args on_period UNK on_nl unless UNK on_nl UNK cmd on_nl when on_tstring_beg on_tstring_content on_tstring_end on_nl pretty_args on_op UNK # remove "boring" arguments so that the important ones are more likely to # be shown considering that we trim long ohai lines to the terminal width
next unless on_lparen on_const on_period UNK on_op UNK on_rparen on_op on_int on_nl on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_period # make sure dots printed with interval of at least 1 min.
def UNK on_lparen on_label false on_rparen on_ignored_nl UNK on_op on_lbracket on_rbracket on_nl if UNK on_nl UNK on_op if head? on_op # @private
UNK on_tstring_beg on_tstring_content on_embexpr_beg full_name on_embexpr_end on_tstring_content on_embexpr_beg pkg_version on_embexpr_end on_tstring_content on_tstring_end unless UNK on_nl end on_nl UNK on_nl end # If the cellar only has one version installed, don't complain # that we can't tell which one to keep. Don't complain at all if the # only installed version is a pinned formula.
def UNK on_lparen prefix on_op name on_comma UNK on_op on_lbrace on_rbrace on_rparen on_ignored_nl on_const on_period new on_lparen prefix on_comma UNK # Create a temporary directory then yield. When the block returns, # recursively delete the temporary directory. Passing `opts[:retain]` # or calling `do |staging| ... staging.retain!` in the block will skip # the deletion and retain the temporary directory's contents.
def UNK on_lparen name on_rparen on_ignored_nl UNK on_op on_const on_period UNK on_lparen name on_rparen on_nl return UNK unless UNK on_nl # A version of `FileUtils.mkdir` that also changes to that folder in # a block.
def UNK on_lparen on_op args on_rparen on_ignored_nl UNK on_op on_const on_period UNK on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_comma on_op args # Run `xcodebuild` without Homebrew's compiler environment variables set.
def versioned_prefix on_lparen v on_rparen on_ignored_nl rack on_op v on_nl end on_nl on_ignored_nl def UNK on_lparen cmd on_comma args on_comma # Returns the prefix for a given formula version number. # @private
if cmd on_op on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_op UNK on_tstring_content on_words_sep on_tstring_content on_tstring_end on_period UNK on_lparen args on_period UNK # Turn on argument filtering in the superenv compiler wrapper. # We should probably have a better mechanism for this than adding # special cases to this method.
end on_nl on_ignored_nl def UNK on_nl active_spec on_period UNK do on_op staging on_op on_ignored_nl on_ivar on_op active_spec on_period UNK on_nl # never gets here unless exec threw or failed
class on_op self on_nl include on_const on_op on_const on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK UNK on_nl when # The methods below define the formula DSL.
attr_reader on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_nl on_ivar on_op # The reason for why this software is not linked (by default) to # {::HOMEBREW_PREFIX}. # @private
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_nl on_ivar on_op true on_nl end on_nl on_ignored_nl # @!attribute [w] # A one-line description of the software. Used by users to get an overview # of the software and Homebrew maintainers. # Shows when running `brew info`. # # <pre>desc "Example formula"</pre>
UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_nl on_ivar on_op true on_nl end on_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl # @!attribute [w] homepage # The homepage for the software. Used by users to get more information # about the software and Homebrew maintainers as a point of contact for # e.g. submitting patches. # Can be opened with running `brew home`. # # <pre>homepage "https://www.example.com"</pre>
def UNK on_nl on_ivar on_op true on_nl end on_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl # Whether a livecheck specification is defined or not. # It returns true when a livecheck block is present in the {Formula} and # false otherwise, and is used by livecheck.
attr_reader on_symbeg UNK on_nl on_ignored_nl attr_reader on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg revision on_nl on_ignored_nl # The `:startup` attribute set by {.plist_options}. # @private
attr_reader on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg revision on_nl on_ignored_nl UNK on_symbeg version_scheme on_nl on_ignored_nl # The `:manual` attribute set by {.plist_options}. # @private
UNK on_symbeg UNK on_nl on_ignored_nl UNK on_symbeg revision on_nl on_ignored_nl UNK on_symbeg version_scheme on_nl on_ignored_nl def specs on_nl on_ivar on_op # If `pour_bottle?` returns `false` the user-visible reason to display for # why they cannot use the bottle. # @private
UNK on_symbeg revision on_nl on_ignored_nl UNK on_symbeg version_scheme on_nl on_ignored_nl def specs on_nl on_ivar on_op on_lbracket stable on_comma devel on_comma # @!attribute [w] revision # Used for creating new Homebrew versions of software without new upstream # versions. For example, if we bump the major version of a library this # {Formula} {.depends_on} then we may need to update the `revision` of this # {Formula} to install a new version linked against the new library version. # `0` if unset. # # <pre>revision 1</pre>
UNK on_symbeg version_scheme on_nl on_ignored_nl def specs on_nl on_ivar on_op on_lbracket stable on_comma devel on_comma head on_rbracket on_period UNK on_nl # @!attribute [w] version_scheme # Used for creating new Homebrew version schemes. For example, if we want # to change version scheme from one to another, then we may need to update # `version_scheme` of this {Formula} to be able to use new version scheme. # e.g. to move from 20151020 scheme to 1.0.0 we need to increment # `version_scheme`. Without this, the prior scheme will always equate to a # higher version. # `0` if unset. # # <pre>version_scheme 1</pre>
def specs on_nl on_ivar on_op on_lbracket stable on_comma devel on_comma head on_rbracket on_period UNK on_nl end on_nl on_ignored_nl def url # A list of the {.stable}, {.devel} and {.head} {SoftwareSpec}s. # @private
def url on_lparen val on_comma specs on_op on_lbrace on_rbrace on_rparen on_ignored_nl stable on_period url on_lparen val on_comma specs on_rparen on_nl # @!attribute [w] url # The URL used to download the source for the {.stable} version of the formula. # We prefer `https` for security and proxy reasons. # If not inferrable, specify the download strategy with `:using => ...` # # - `:git`, `:hg`, `:svn`, `:bzr`, `:fossil`, `:cvs`, # - `:curl` (normal file download. Will also extract.) # - `:nounzip` (without extracting) # - `:post` (download via an HTTP POST) # - `:s3` (download from S3 using signed request) # # <pre>url "https://packed.sources.and.we.prefer.https.example.com/archive-1.2.3.tar.bz2"</pre> # <pre>url "https://some.dont.provide.archives.example.com", # :using => :git, # :tag => "1.2.3", # :revision => "db8e4de5b2d6653f66aea53094624468caad15d2"</pre>
def version on_lparen val on_op nil on_rparen on_ignored_nl stable on_period version on_lparen val on_rparen on_nl end on_nl on_ignored_nl def UNK # @!attribute [w] version # The version string for the {.stable} version of the formula. # The version is autodetected from the URL and/or tag so only needs to be # declared if it cannot be autodetected correctly. # # <pre>version "1.2-final"</pre>
def UNK on_lparen val on_rparen on_ignored_nl stable on_period UNK on_lparen val on_rparen on_nl end on_nl on_ignored_nl on_const on_op on_const on_period # @!attribute [w] mirror # Additional URLs for the {.stable} version of the formula. # These are only used if the {.url} fails to download. It's optional and # there can be more than one. Generally we add them when the main {.url} # is unreliable. If {.url} is really unreliable then we may swap the # {.mirror} and {.url}. # # <pre>mirror "https://in.case.the.host.is.down.example.com" # mirror "https://in.case.the.mirror.is.down.example.com</pre>
on_const on_op on_const on_period each do on_op UNK on_op on_ignored_nl UNK on_lparen UNK on_rparen on_lbrace on_op val on_op stable on_period # @!attribute [w] sha256 # @scope class # To verify the cached download's integrity and security we verify the # SHA-256 hash matches which we've declared in the {Formula}. To quickly fill # this value you can leave it blank and run `brew fetch --force` and it'll # tell you the currently valid value. # # <pre>sha256 "2a2ba417eebaadcb4418ee7b12fe2998f26d6e6f7fda7983412ff66a741ab6f7"</pre>
def UNK on_lparen on_op args on_comma on_op block on_rparen on_ignored_nl stable on_period UNK on_lparen on_op args on_comma on_op block on_rparen # @!attribute [w] bottle # Adds a {.bottle} {SoftwareSpec}. # This provides a pre-built binary package built by the Homebrew maintainers for you. # It will be installed automatically if there is a binary package for your platform # and you haven't passed or previously used any options on this formula. # # If you maintain your own repository, you can add your own bottle links. # @see https://docs.brew.sh/Bottles # You can ignore this block entirely if submitting to Homebrew/homebrew-core. # It'll be handled for you by the Brew Test Bot. # # <pre>bottle do # root_url "https://example.com" # Optional root to calculate bottle URLs # prefix "/opt/homebrew" # Optional HOMEBREW_PREFIX in which the bottles were built. # cellar "/opt/homebrew/Cellar" # Optional HOMEBREW_CELLAR in which the bottles were built. # rebuild 1 # Making the old bottle outdated without bumping the version/revision of the formula. # sha256 "4355a46b19d348dc2f57c046f8ef63d4538ebb936000f3c9ee954a27460dd865" => :el_capitan # sha256 "53c234e5e8472b6ac51c1ae1cab3fe06fad053beb8ebfd8977b010655bfdd3c3" => :yosemite # sha256 "1121cfccd5913f0a63fec40a6ffd44ea64f9dc135c66634ba001d10bcf4302a2" => :mavericks # end</pre> # # Only formulae where the upstream URL breaks or moves frequently, require compiling # or have a reasonable amount of patches/resources should be bottled. # Formulae which do not meet the above requirements should not be bottled. # # Formulae which should not be bottled and can be installed without any compile # required should be tagged with: # <pre>bottle :unneeded</pre> # # Otherwise formulae which do not meet the above requirements and should not # be bottled should be tagged with: # <pre>bottle :disable, "reasons"</pre>
def build on_nl stable on_period build on_nl end on_nl on_ignored_nl def stable on_lparen on_op block on_rparen on_ignored_nl on_ivar on_op on_const # @private
def stable on_lparen on_op block on_rparen on_ignored_nl on_ivar on_op on_const on_period new on_nl return on_ivar unless UNK on_nl on_ignored_nl on_ivar # @!attribute [w] stable # Allows adding {.depends_on} and {Patch}es just to the {.stable} {SoftwareSpec}. # This is required instead of using a conditional. # It is preferrable to also pull the {url} and {.sha256} into the block if one is added. # # <pre>stable do # url "https://example.com/foo-1.0.tar.gz" # sha256 "2a2ba417eebaadcb4418ee7b12fe2998f26d6e6f7fda7983412ff66a741ab6f7" # # depends_on "libxml2" # depends_on "libffi" # end</pre>
def devel on_lparen on_op block on_rparen on_ignored_nl on_ivar on_op on_const on_period new on_nl return on_ivar unless UNK on_nl on_ignored_nl on_ivar # @!attribute [w] devel # Adds a {.devel} {SoftwareSpec}. # This can be installed by passing the `--devel` option to allow # installing non-stable (e.g. beta) versions of software. # # <pre>devel do # url "https://example.com/archive-2.0-beta.tar.gz" # sha256 "2a2ba417eebaadcb4418ee7b12fe2998f26d6e6f7fda7983412ff66a741ab6f7" # # depends_on "cairo" # depends_on "pixman" # end</pre>
def head on_lparen val on_op nil on_comma specs on_op on_lbrace on_rbrace on_comma on_op block on_rparen on_ignored_nl on_ivar on_op on_const on_period # @!attribute [w] head # Adds a {.head} {SoftwareSpec}. # This can be installed by passing the `--HEAD` option to allow # installing software directly from a branch of a version-control repository. # If called as a method this provides just the {url} for the {SoftwareSpec}. # If a block is provided you can also add {.depends_on} and {Patch}es just to the {.head} {SoftwareSpec}. # The download strategies (e.g. `:using =>`) are the same as for {url}. # `master` is the default branch and doesn't need stating with a `:branch` parameter. # <pre>head "https://we.prefer.https.over.git.example.com/.git"</pre> # <pre>head "https://example.com/.git", :branch => "name_of_branch", :revision => "abc123"</pre> # or (if autodetect fails): # <pre>head "https://hg.is.awesome.but.git.has.won.example.com/", :using => :hg</pre>
def UNK on_lparen name on_comma UNK on_op on_const on_comma on_op block on_rparen on_ignored_nl specs on_period each do on_op spec on_op # Additional downloads can be defined as resources and accessed in the # install method. Resources can also be defined inside a {.stable}, {.devel} or # {.head} block. This mechanism replaces ad-hoc "subformula" classes. # <pre>resource "additional_files" do # url "https://example.com/additional-stuff.tar.gz" # sha256 "c6bc3f48ce8e797854c4b865f6a8ff969867bbcaebd648ae6fd825683e59fef2" # end</pre>
def UNK on_lparen dep on_rparen on_ignored_nl specs on_period each on_lbrace on_op spec on_op spec on_period UNK on_lparen dep on_rparen on_rbrace # The dependencies for this formula. Use strings for the names of other # formulae. Homebrew provides some :special dependencies for stuff that # requires certain extra handling (often changing some ENV vars or # deciding if to use the system provided version or not.) # <pre># `:build` means this dep is only needed during build. # depends_on "cmake" => :build</pre> # <pre>depends_on "homebrew/dupes/tcl-tk" => :optional</pre> # <pre># `:recommended` dependencies are built by default. # # But a `--without-...` option is generated to opt-out. # depends_on "readline" => :recommended</pre> # <pre># `:optional` dependencies are NOT built by default. # # But a `--with-...` options is generated. # depends_on "glib" => :optional</pre> # <pre># If you need to specify that another formula has to be built with/out # # certain options (note, no `--` needed before the option): # depends_on "zeromq" => "with-pgm" # depends_on "qt" => ["with-qtdbus", "developer"] # Multiple options.</pre> # <pre># Optional and enforce that boost is built with `--with-c++11`. # depends_on "boost" => [:optional, "with-c++11"]</pre> # <pre># If a dependency is only needed in certain cases: # depends_on "sqlite" if MacOS.version == :mavericks # depends_on :xcode # If the formula really needs full Xcode. # depends_on :macos => :mojave # Needs at least macOS Mojave (10.14). # depends_on :x11 => :optional # X11/XQuartz components. # depends_on :osxfuse # Permits the use of the upstream signed binary or our source package. # depends_on :tuntap # Does the same thing as above. This is vital for Yosemite and above.</pre> # <pre># It is possible to only depend on something if # # `build.with?` or `build.without? "another_formula"`: # depends_on "postgresql" if build.without? "sqlite"</pre> # <pre># Python 3.x if the `--with-python` is given to `brew install example` # depends_on "python3" => :optional</pre>
def UNK on_lparen dep on_comma UNK on_op on_lbrace on_rbrace on_rparen on_ignored_nl specs on_period each on_lbrace on_op spec on_op spec on_period # Indicates use of dependencies provided by macOS. # On macOS this is a no-op (as we use the system libraries there). # On Linux this will act as `depends_on`.
def UNK on_lparen on_op UNK on_rparen UNK end on_nl on_ignored_nl def UNK on_lparen on_op UNK on_rparen UNK end on_nl on_ignored_nl # Block executed only executed on macOS. No-op on Linux. # <pre>on_macos do # depends_on "mac_only_dep" # end</pre>
def UNK on_lparen on_op UNK on_rparen UNK end on_nl on_ignored_nl def UNK on_lparen name on_comma UNK on_op on_tstring_beg on_tstring_end on_rparen # Block executed only executed on Linux. No-op on macOS. # <pre>on_linux do # depends_on "linux_only_dep" # end</pre>
def UNK on_lparen name on_comma UNK on_op on_tstring_beg on_tstring_end on_rparen on_ignored_nl specs on_period each on_lbrace on_op spec on_op spec on_period # @!attribute [w] option # Options can be used as arguments to `brew install`. # To switch features on/off: `"with-something"` or `"with-otherthing"`. # To use other software: `"with-other-software"` or `"without-foo"` # Note that for {.depends_on} that are `:optional` or `:recommended`, options # are generated automatically. # # There are also some special options: # # - `:universal`: build a universal binary/library (e.g. on newer Intel Macs # this means a combined x86_64/x86 binary/library). # <pre>option "with-spam", "The description goes here without a dot at the end"</pre> # <pre>option "with-qt", "Text here overwrites the autogenerated one from 'depends_on "qt" => :optional'"</pre> # <pre>option :universal</pre>
def UNK on_lparen UNK on_rparen on_ignored_nl specs on_period each on_lbrace on_op spec on_op spec on_period UNK on_lparen UNK on_rparen on_rbrace # @!attribute [w] deprecated_option # Deprecated options are used to rename options and migrate users who used # them to newer ones. They are mostly used for migrating non-`with` options # (e.g. `enable-debug`) to `with` options (e.g. `with-debug`). # <pre>deprecated_option "enable-debug" => "with-debug"</pre>
def UNK on_lparen UNK on_op on_symbeg UNK on_comma UNK on_op nil on_comma on_op block on_rparen on_ignored_nl specs on_period each on_lbrace # External patches can be declared using resource-style blocks. # <pre>patch do # url "https://example.com/example_patch.diff" # sha256 "c6bc3f48ce8e797854c4b865f6a8ff969867bbcaebd648ae6fd825683e59fef2" # end</pre> # # A strip level of `-p1` is assumed. It can be overridden using a symbol # argument: # <pre>patch :p0 do # url "https://example.com/example_patch.diff" # sha256 "c6bc3f48ce8e797854c4b865f6a8ff969867bbcaebd648ae6fd825683e59fef2" # end</pre> # # Patches can be declared in stable, devel, and head blocks. This form is # preferred over using conditionals. # <pre>stable do # patch do # url "https://example.com/example_patch.diff" # sha256 "c6bc3f48ce8e797854c4b865f6a8ff969867bbcaebd648ae6fd825683e59fef2" # end # end</pre> # # Embedded (`__END__`) patches are declared like so: # <pre>patch :DATA # patch :p0, :DATA</pre> # # Patches can also be embedded by passing a string. This makes it possible # to provide multiple embedded patches while making only some of them # conditional. # <pre>patch :p0, "..."</pre>
def UNK on_lparen options on_rparen on_ignored_nl on_ivar on_op options on_lbracket on_symbeg UNK on_rbracket on_nl on_ivar on_op options on_lbracket on_symbeg UNK # Defines launchd plist handling. # # Does your plist need to be loaded at startup? # <pre>plist_options :startup => true</pre> # # Or only when necessary or desired by the user? # <pre>plist_options :manual => "foo"</pre> # # Or perhaps you'd like to give the user a choice? Ooh fancy. # <pre>plist_options :startup => true, :manual => "foo start"</pre>
def UNK on_nl on_ivar on_op on_lbracket on_rbracket on_nl end on_nl on_ignored_nl def UNK on_lparen on_op UNK on_rparen on_ignored_nl UNK on_op # @private
def UNK on_lparen on_op UNK on_rparen on_ignored_nl UNK on_op UNK on_period UNK on_period is_a? on_lparen on_const on_rparen on_op UNK on_period # If this formula conflicts with another one. # <pre>conflicts_with "imagemagick", :because => "because both install 'convert' binaries"</pre>
UNK on_period UNK on_lparen paths on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op on_const on_period new on_nl end # Specifying :all is deprecated and will become an error
def UNK on_nl on_ivar on_op on_const on_period new on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_comma UNK on_op on_tstring_beg # @private
def UNK on_lparen UNK on_comma UNK on_op on_tstring_beg on_tstring_end on_rparen on_ignored_nl on_ivar on_op on_const on_period new on_lparen UNK on_comma UNK # Software that will not be symlinked into the `brew --prefix` will only # live in its Cellar. Other formulae can depend on it and then brew will # add the necessary includes and libs (etc.) during the brewing of that # other formula. But generally, keg-only formulae are not in your PATH # and not seen by compilers if you build your own software outside of # Homebrew. This way, we don't shadow software provided by macOS. # <pre>keg_only :provided_by_macos</pre> # <pre>keg_only "because I want it so"</pre>
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_lparen on_symbeg UNK on_rparen on_lbrace true on_rbrace if UNK on_op on_symbeg UNK on_nl # Pass `:skip` to this method to disable post-install stdlib checking
def UNK on_lparen UNK on_comma on_op block on_rparen on_ignored_nl specs on_period each on_lbrace on_op spec on_op spec on_period UNK on_lparen # Marks the {Formula} as failing with a particular compiler so it will fall back to others. # For Apple compilers, this should be in the format: # <pre>fails_with :clang do # build 600 # cause "multiple configure and compile errors" # end</pre> # # The block may be omitted, and if present the build may be omitted; # if so, then the compiler will be blacklisted for *all* versions. # # `major_version` should be the major release number only, for instance # '7' for the GCC 7 series (7.0, 7.1, etc.). # If `version` or the block is omitted, then the compiler will be # blacklisted for all compilers in that series. # # For example, if a bug is only triggered on GCC 7.1 but is not # encountered on 7.2: # # <pre>fails_with :gcc => '7' do # version '7.1' # end</pre>
def UNK on_lparen on_op block on_rparen on_ignored_nl UNK on_lparen on_symbeg UNK on_comma on_op block on_rparen on_nl end on_nl on_ignored_nl def # A test is required for new formulae and makes us happy. # @return [Boolean] # # The block will create, run in and delete a temporary directory. # # We are fine if the executable does not error out, so we know linking # and building the software was OK. # <pre>system bin/"foobar", "--version"</pre> # # <pre>(testpath/"test.file").write <<~EOS # writing some test file, if you need to # EOS # assert_equal "OK", shell_output("test_command test.file").strip</pre> # # Need complete control over stdin, stdout? # <pre>require "open3" # Open3.popen3("#{bin}/example", "argument") do |stdin, stdout, _| # stdin.write("some text") # stdin.close # assert_equal "result", stdout.read # end</pre> # # The test will fail if it returns false, or if an exception is raised. # Failed assertions and failed `system` commands will raise exceptions.
def UNK on_lparen on_op block on_rparen on_ignored_nl on_ivar on_op on_const on_period new on_nl return on_ivar unless UNK on_nl on_ignored_nl on_ivar # @!attribute [w] livecheck # Livecheck can be used to check for newer versions of the software. # This method evaluates the DSL specified in the livecheck block of the # {Formula} (if it exists) and sets the instance variables of a Livecheck # object accordingly. This is used by brew livecheck to check for newer # versions of the software. # # <pre>livecheck do # skip "Not maintained" # url "https://example.com/foo/releases" # regex /foo-(\d+(?:\.\d+)+)\.tar/ # end</pre>
def UNK on_lparen on_op block on_rparen on_ignored_nl on_ivar on_op on_const on_period new on_lparen self on_rparen on_nl on_ivar on_period UNK on_lparen # Defines whether the {Formula}'s bottle can be used on the given Homebrew # installation. # # For example, if the bottle requires the Xcode CLT to be installed a # {Formula} would declare: # <pre>pour_bottle? do # reason "The bottle needs the Xcode CLT to be installed." # satisfy { MacOS::CLT.installed? } # end</pre> # # If `satisfy` returns `false` then a bottle will not be used and instead # the {Formula} will be built from source and `reason` will be printed.
def UNK on_lparen on_label nil on_rparen on_ignored_nl return if UNK on_period UNK on_op on_const on_period UNK on_lparen UNK on_rparen on_op # Deprecates a {Formula} (on a given date, if provided) so a warning is # shown on each installation. If the date has not yet passed the formula # will not be deprecated.
def UNK on_nl on_ivar on_op true on_nl end on_nl on_ignored_nl def UNK on_lparen on_label nil on_rparen on_ignored_nl if UNK on_period # Whether this {Formula} is deprecated (i.e. warns on installation). # Defaults to false. # @return [Boolean]
def UNK on_lparen on_label nil on_rparen on_ignored_nl if UNK on_period UNK on_op on_const on_period UNK on_lparen UNK on_rparen on_op on_const # Disables a {Formula} (on a given date, if provided) so it cannot be # installed. If the date has not yet passed the formula # will be deprecated instead of disabled.
def UNK on_nl on_ivar on_op true on_nl end on_nl on_ignored_nl def UNK on_lparen on_op paths on_rparen on_ignored_nl paths on_period UNK # Whether this {Formula} is disabled (i.e. cannot be installed). # Defaults to false. # @return [Boolean]
def UNK on_lparen on_op paths on_rparen on_ignored_nl paths on_period UNK on_nl UNK on_period UNK on_lparen paths on_rparen on_nl end on_nl # @private
def UNK on_nl on_ivar on_op on_const on_period new on_nl end on_nl end on_nl end on_nl on_ignored_nl require on_tstring_beg on_tstring_content on_tstring_end # @private
