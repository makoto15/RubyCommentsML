UNK on_const on_op on_const on_nl end on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl on_ignored_nl UNK on_op UNK on_nl on_ignored_nl # Raised by Country#get if the code given is not valid.
UNK on_const on_nl UNK on_const on_nl on_ignored_nl UNK on_op UNK on_nl on_ignored_nl UNK on_op UNK on_nl on_ignored_nl def self on_period # The Country class represents an ISO 3166-1 country. It can be used to # obtain a list of Timezones for a country. For example: # # us = Country.get('US') # us.zone_identifiers # us.zones # us.zone_info # # The Country class is thread-safe. It is safe to use class and instance # methods of Country in concurrently executing threads. Instances of Country # can be shared across thread boundaries. # # Country information available through TZInfo is intended as an aid for # users, to help them select time zone data appropriate for their practical # needs. It is not intended to take or endorse any position on legal or # territorial claims.
UNK on_op UNK on_nl on_ignored_nl UNK on_op UNK on_nl on_ignored_nl def self on_period UNK on_lparen identifier on_rparen on_ignored_nl instance on_op # Defined countries. # # @!visibility private
UNK on_op UNK on_nl on_ignored_nl def self on_period UNK on_lparen identifier on_rparen on_ignored_nl instance on_op UNK UNK identifier UNK on_nl # Whether the countries index has been loaded yet. # # @!visibility private
def self on_period UNK on_lparen identifier on_rparen on_ignored_nl instance on_op UNK UNK identifier UNK on_nl on_ignored_nl UNK instance on_nl UNK # Gets a Country by its ISO 3166-1 alpha-2 code. Raises an # InvalidCountryCode exception if it couldn't be found.
UNK on_op UNK on_period UNK on_lparen identifier on_rparen on_nl instance on_op on_const on_period UNK on_lparen UNK on_rparen on_nl UNK UNK # Thread-safety: It is possible that multiple equivalent Country # instances could be created here in concurrently executing threads. # The consequences of this are that the data may be loaded more than # once (depending on the data source) and memoized calculations could # be discarded. The performance benefit of ensuring that only a single # instance is created is unlikely to be worth the overhead of only # allowing one Country to be loaded at a time.
def self on_period UNK on_lparen identifier on_rparen on_ignored_nl UNK identifier on_period UNK on_lparen on_const on_rparen on_nl instance on_op UNK on_lparen # If identifier is a CountryInfo object, initializes the Country instance, # otherwise calls get(identifier).
def self on_period UNK on_nl UNK on_period UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_nl UNK on_period UNK # Returns an Array of all the valid country codes.
def self on_period UNK on_nl UNK on_period UNK on_period UNK UNK on_op code on_op UNK on_lparen code on_rparen UNK on_nl # Returns an Array of all the defined Countries.
def code on_nl on_ivar on_period code on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl # The ISO 3166-1 alpha-2 country code.
def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK # The name of the country.
def UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK UNK UNK self on_period UNK UNK UNK UNK # Alias for name.
def UNK on_nl UNK UNK UNK self on_period UNK UNK UNK UNK on_ivar on_period code UNK UNK UNK on_nl end # Returns internal object state as a programmer-readable string.
def UNK on_nl on_ivar on_period UNK on_nl end on_nl UNK UNK UNK on_nl on_ignored_nl def UNK on_nl UNK on_period UNK # Returns a frozen array of all the zone identifiers for the country. These # are in an order that # # 1. makes some geographical sense, and # 2. puts the most populous zones first, where that does not contradict 1. # # Returned zone identifiers may refer to cities and regions outside of the # country. This will occur if the zone covers multiple countries. Any zones # referring to a city or region in a different country will be listed after # those relating to this country.
def UNK on_nl UNK on_period UNK UNK on_op UNK on_op on_ignored_nl on_const on_period UNK on_lparen UNK on_rparen on_nl UNK on_nl # An array of all the Timezones for this country. Returns TimezoneProxy # objects to avoid the overhead of loading Timezone definitions until # a conversion is actually required. The Timezones are returned in an order # that # # 1. makes some geographical sense, and # 2. puts the most populous zones first, where that does not contradict 1. # # Identifiers of the zones returned may refer to cities and regions outside # of the country. This will occur if the zone covers multiple countries. Any # zones referring to a city or region in a different country will be listed # after those relating to this country.
def UNK on_nl on_ivar on_period UNK on_nl end on_nl on_ignored_nl def on_op on_lparen UNK on_rparen on_ignored_nl UNK UNK UNK UNK # Returns a frozen array of all the timezones for the for the country as # CountryTimezone instances (containing extra information about each zone). # These are in an order that # # 1. makes some geographical sense, and # 2. puts the most populous zones first, where that does not contradict 1. # # Identifiers and descriptions of the zones returned may refer to cities and # regions outside of the country. This will occur if the zone covers # multiple countries. Any zones referring to a city or region in a different # country will be listed after those relating to this country.
def on_op on_lparen UNK on_rparen on_ignored_nl UNK UNK UNK UNK on_period UNK on_lparen on_const on_rparen on_nl code on_op UNK on_period # Compare two Countries based on their code. Returns -1 if c is less # than self, 0 if c is equal to self and +1 if c is greater than self. # # Returns nil if c is not comparable with Country instances.
def UNK on_lparen UNK on_rparen on_ignored_nl self on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl code on_period UNK on_nl # Returns true if and only if the code of c is equal to the code of this # Country.
def UNK on_nl code on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl code on_nl end on_nl # Returns a hash value for this Country.
def UNK on_lparen UNK on_rparen on_ignored_nl code on_nl end on_nl on_ignored_nl def self on_period UNK on_lparen UNK on_rparen on_ignored_nl on_const # Dumps this Country for marshalling.
def self on_period UNK on_lparen UNK on_rparen on_ignored_nl on_const on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl UNK on_nl # Loads a marshalled Country.
def UNK on_lparen UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def self on_period UNK on_nl UNK on_op # Called by Country.new to initialize a new Country instance. The info # parameter is a CountryInfo that defines the country.
def self on_period UNK on_nl UNK on_op on_const on_op on_const on_period UNK on_nl end on_nl UNK on_nl on_ignored_nl def self # Initializes @@countries.
def self on_period UNK on_nl on_const on_period UNK on_nl end on_nl end on_nl end on_nl EMP EMP EMP EMP EMP # Returns the current DataSource
