UNK UNK on_op UNK on_nl def UNK on_period UNK on_lparen identifier on_rparen on_ignored_nl UNK on_op UNK on_lparen on_rparen on_nl UNK # A proxy class representing a timezone with a given identifier. TimezoneProxy # inherits from Timezone and can be treated like any Timezone loaded with # Timezone.get. # # The first time an attempt is made to access the data for the timezone, the # real Timezone is loaded. If the proxy's identifier was not valid, then an # exception will be raised at this point.
def UNK on_period UNK on_lparen identifier on_rparen on_ignored_nl UNK on_op UNK on_lparen on_rparen on_nl UNK on_period UNK on_lparen UNK UNK # Construct a new TimezoneProxy for the given identifier. The identifier # is not checked when constructing the proxy. It will be validated on the # when the real Timezone is loaded.
UNK on_op UNK on_lparen on_rparen on_nl UNK on_period UNK on_lparen UNK UNK UNK identifier on_rparen on_nl UNK on_nl end on_nl # Need to override new to undo the behaviour introduced in Timezone#new.
def identifier on_nl on_ivar on_op on_ivar on_period identifier on_op on_ivar on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl # The identifier of the timezone, e.g. "Europe/Paris".
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen UNK # Returns the TimezonePeriod for the given UTC time. utc can either be # a DateTime, Time or integer timestamp (Time.to_i). Any timezone # information in utc is ignored (it is treated as a UTC time).
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen UNK # Returns the set of TimezonePeriod instances that are valid for the given # local time as an array. If you just want a single period, use # period_for_local instead and specify how abiguities should be resolved. # Returns an empty array if no periods are found for the given time.
def UNK on_lparen UNK UNK UNK on_op UNK on_rparen on_ignored_nl UNK on_period UNK on_lparen UNK UNK UNK on_rparen on_nl end # Returns an Array of TimezoneTransition instances representing the times # where the UTC offset of the timezone changes. # # Transitions are returned up to a given date and time up to a given date # and time (to). # # A from date and time may also be supplied using the from parameter. If # from is not nil, only transitions from that date and time onwards will be # returned. # # Comparisons with to are exclusive. Comparisons with from are inclusive. # If a transition falls precisely on to, it will be excluded. If a # transition falls on from, it will be included. # # Transitions returned are ordered by when they occur, from earliest to # latest. # # to and from can be specified using either a Time, DateTime, Time or # Timestamp. # # If from is specified and to is not greater than from, then an # ArgumentError exception is raised. # # ArgumentError is raised if to is nil or of either to or from are # Timestamps with unspecified offsets.
def UNK on_nl UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl identifier on_nl end on_nl # Returns the canonical zone for this Timezone.
def UNK on_lparen UNK on_rparen on_ignored_nl identifier on_nl end on_nl on_ignored_nl def UNK on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK # Dumps this TimezoneProxy for marshalling.
def UNK on_period UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK on_lparen UNK on_rparen on_nl end on_nl on_ignored_nl UNK on_nl # Loads a marshalled TimezoneProxy.
UNK on_ivar on_nl UNK on_op UNK on_period UNK on_lparen on_ivar on_rparen on_nl UNK UNK UNK UNK on_nl on_ivar on_op UNK # Thread-safety: It is possible that the value of @real_timezone may be # calculated multiple times in concurrently executing threads. It is not # worth the overhead of locking to ensure that @real_timezone is only # calculated once.
