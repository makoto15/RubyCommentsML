on_ignored_nl UNK UNK UNK UNK on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_symbeg # frozen_string_literal: true
UNK on_const on_nl UNK on_const on_op on_const on_nl UNK on_symbeg reset on_nl on_ignored_nl UNK on_op UNK on_nl def UNK on_nl # Abstract super class that provides a thread-isolated attributes singleton, which resets automatically # before and after each request. This allows you to keep all the per-request attributes easily # available to the whole system. # # The following full app-like example demonstrates how to use a Current class to # facilitate easy access to the global, per-request attributes without passing them deeply # around everywhere: # # # app/models/current.rb # class Current < ActiveSupport::CurrentAttributes # attribute :account, :user # attribute :request_id, :user_agent, :ip_address # # resets { Time.zone = nil } # # def user=(user) # super # self.account = user.account # Time.zone = user.time_zone # end # end # # # app/controllers/concerns/authentication.rb # module Authentication # extend ActiveSupport::Concern # # included do # before_action :authenticate # end # # private # def authenticate # if authenticated_user = User.find_by(id: cookies.encrypted[:user_id]) # Current.user = authenticated_user # else # redirect_to new_session_url # end # end # end # # # app/controllers/concerns/set_current_request_details.rb # module SetCurrentRequestDetails # extend ActiveSupport::Concern # # included do # before_action do # Current.request_id = request.uuid # Current.user_agent = request.user_agent # Current.ip_address = request.ip # end # end # end # # class ApplicationController < ActionController::Base # include Authentication # include SetCurrentRequestDetails # end # # class MessagesController < ApplicationController # def create # Current.account.messages.create(message_params) # end # end # # class Message < ApplicationRecord # belongs_to :creator, default: -> { Current.user } # after_create { |message| Event.create(record: message) } # end # # class Event < ApplicationRecord # before_create do # self.request_id = Current.request_id # self.user_agent = Current.user_agent # self.ip_address = Current.ip_address # end # end # # A word of caution: It's easy to overdo a global singleton like Current and tangle your model as a result. # Current should only be used for a few, top-level globals, like account, user, and request details. # The attributes stuck in Current should be used by more or less all actions on all requests. If you start # sticking controller-specific attributes in there, you're going to create a mess.
def UNK on_nl UNK UNK name UNK on_op UNK on_nl end on_nl on_ignored_nl def UNK on_lparen on_op UNK on_rparen on_ignored_nl # Returns singleton instance for this class in this thread. If none exists, one is created.
def UNK on_lparen on_op UNK on_rparen on_ignored_nl UNK on_period UNK do on_ignored_nl UNK on_period UNK do on_op name on_op on_ignored_nl # Declares one or more attributes that will be given both class and instance accessor methods.
def UNK on_lparen on_op block on_rparen on_ignored_nl UNK on_symbeg reset on_comma on_symbeg UNK on_comma on_op block on_nl end on_nl on_ignored_nl # Calls this block before #reset is called on the instance. Used for resetting external collaborators that depend on current values.
def UNK on_lparen on_op block on_rparen on_ignored_nl UNK on_symbeg reset on_comma on_symbeg UNK on_comma on_op block on_nl end on_nl UNK # Calls this block after #reset is called on the instance. Used for resetting external collaborators, like Time.zone.
UNK on_period UNK on_lparen on_op on_symbeg reset on_rparen on_nl end on_nl on_ignored_nl def UNK UNK on_nl UNK on_period UNK on_nl # :nodoc:
UNK on_nl UNK on_period UNK on_nl end on_nl on_ignored_nl UNK on_nl def UNK on_nl UNK on_op on_const on_period UNK on_period # :nodoc:
UNK on_period UNK name on_comma UNK on_symbeg UNK on_nl on_ignored_nl UNK on_lparen name on_comma on_op UNK on_comma on_op block on_rparen # Caches the method definition as a singleton method of the receiver. # # By letting #delegate handle it, we avoid an enclosure that'll capture args.
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_lparen UNK on_period UNK on_rparen on_nl UNK on_lparen UNK on_rparen on_nl # Expose one or more attributes within a block. Old values are returned after the block concludes. # Example demonstrating the common use of needing to set Current attributes outside the request-cycle: # # class Chat::PublicationJob < ApplicationJob # def perform(attributes, room_number, creator) # Current.set(person: creator) do # Chat::Publisher.publish(attributes: attributes, room_number: room_number) # end # end # end
def reset on_nl UNK on_symbeg reset do on_ignored_nl UNK on_period UNK on_op on_lbrace on_rbrace on_nl end on_nl end on_nl on_ignored_nl # Reset all attributes. Should be called before and after actions, when used as a per-request singleton.
