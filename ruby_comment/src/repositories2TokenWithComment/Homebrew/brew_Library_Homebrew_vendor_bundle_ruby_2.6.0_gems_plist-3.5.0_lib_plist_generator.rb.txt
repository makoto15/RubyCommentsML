on_ignored_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl def UNK on_lparen UNK on_op # encoding: utf-8
on_ignored_nl UNK on_const on_nl UNK on_const on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl def UNK on_lparen UNK on_op UNK # = plist # # Copyright 2006-2010 Ben Bleything and Patrick May # Distributed under the MIT License #
UNK on_const on_nl on_const on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl def UNK on_lparen UNK on_op UNK on_comma options on_op on_lbrace # === Create a plist # You can dump an object to a plist in one of two ways: # # * <tt>Plist::Emit.dump(obj)</tt> # * <tt>obj.to_plist</tt> # * This requires that you mixin the <tt>Plist::Emit</tt> module, which is already done for +Array+ and +Hash+. # # The following Ruby classes are converted into native plist types: # Array, Bignum, Date, DateTime, Fixnum, Float, Hash, Integer, String, Symbol, Time, true, false # * +Array+ and +Hash+ are both recursive; their elements will be converted into plist nodes inside the <array> and <dict> containers (respectively). # * +IO+ (and its descendants) and +StringIO+ objects are read from and their contents placed in a <data> element. # * User classes may implement +to_plist_node+ to dictate how they should be serialized; otherwise the object will be passed to <tt>Marshal.dump</tt> and the result placed in a <data> element. # # For detailed usage instructions, refer to USAGE[link:files/docs/USAGE.html] and the methods documented below.
def UNK on_lparen UNK on_op UNK on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl options on_op on_lbrace on_symbeg indent on_op on_const # Helper method for injecting into classes. Calls <tt>Plist::Emit.dump</tt> with +self+.
def UNK on_lparen UNK on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl options on_op on_lbrace on_symbeg indent on_op on_const on_rbrace on_period # Helper method for injecting into classes. Calls <tt>Plist::Emit.save_plist</tt> with +self+.
def self on_period UNK on_lparen UNK on_comma UNK on_op UNK on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl options on_op on_lbrace # The following Ruby classes are converted into native plist types: # Array, Bignum, Date, DateTime, Fixnum, Float, Hash, Integer, String, Symbol, Time # # Write us (via RubyForge) if you think another class can be coerced safely into one of the expected plist classes. # # +IO+ and +StringIO+ objects are encoded and placed in <data> elements; other objects are <tt>Marshal.dump</tt>'ed unless they implement +to_plist_node+. # # The +envelope+ parameters dictates whether or not the resultant plist fragment is wrapped in the normal XML/plist header and footer. Set it to false if you only want the fragment.
def self on_period UNK on_lparen UNK on_comma UNK on_comma options on_op on_lbrace on_rbrace on_rparen on_ignored_nl options on_op on_lbrace on_symbeg indent # Writes the serialized object's plist to the specified filename.
output on_op tag on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma element on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_comma options on_rparen on_nl # also catches DateTime
data on_op on_tstring_beg on_tstring_content on_tstring_end on_nl on_const on_period UNK on_lparen contents on_rparen on_period UNK on_lparen on_regexp_beg on_tstring_content on_regexp_end on_comma on_tstring_beg # note that apple plists are wrapped at a different length then # what ruby's base64 wraps by default. # I used #encode64 instead of #b64encode (which allows a length arg) # because b64encode is b0rked and ignores the length arg.
UNK on_symbeg UNK on_nl on_ignored_nl def UNK on_lparen UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_rparen on_ignored_nl on_ivar on_op UNK on_nl on_ivar #:nodoc:
UNK val on_op on_regexp_beg on_tstring_content on_embexpr_beg on_ivar on_embexpr_end on_regexp_end on_nl indent on_op on_ivar on_op on_ivar on_nl on_ignored_nl on_ivar on_op val # if it's already indented, don't bother indenting further
on_ivar on_op on_tstring_beg on_tstring_content on_tstring_end UNK val on_op on_regexp_beg on_tstring_content on_regexp_end on_nl end on_nl end on_nl end on_nl end on_nl # it already has a newline, don't add another
UNK on_const on_op on_const on_nl end on_nl on_ignored_nl UNK on_const UNK on_const on_op on_const on_nl end on_nl EMP EMP EMP #:nodoc:
UNK on_const on_op on_const on_nl end on_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP #:nodoc:
