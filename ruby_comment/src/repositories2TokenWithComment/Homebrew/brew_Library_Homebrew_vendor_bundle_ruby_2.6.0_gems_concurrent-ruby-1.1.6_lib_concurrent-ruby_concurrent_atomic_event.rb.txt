UNK UNK on_op UNK on_op UNK on_nl on_ignored_nl def UNK on_nl UNK on_nl synchronize UNK UNK UNK on_nl end on_nl # Old school kernel-style event reminiscent of Win32 programming in C++. # # When an `Event` is created it is in the `unset` state. Threads can choose to # `#wait` on the event, blocking until released by another thread. When one # thread wants to alert all blocking threads it calls the `#set` method which # will then wake up all listeners. Once an `Event` has been set it remains set. # New threads calling `#wait` will return immediately. An `Event` may be # `#reset` at any time once it has been set. # # @see http://msdn.microsoft.com/en-us/library/windows/desktop/ms682655.aspx # @example # event = Concurrent::Event.new # # t1 = Thread.new do # puts "t1 is waiting" # event.wait(1) # puts "event ocurred" # end # # t2 = Thread.new do # puts "t2 calling set" # event.set # end # # [t1, t2].each(&:join) # # # prints: # # t2 calling set # # t1 is waiting # # event occurred
def UNK on_nl UNK on_nl synchronize UNK UNK UNK on_nl end on_nl on_ignored_nl def UNK on_nl synchronize UNK on_ivar UNK # Creates a new `Event` in the unset state. Threads calling `#wait` on the # `Event` will block.
def UNK on_nl synchronize UNK on_ivar UNK on_nl end on_nl on_ignored_nl def UNK on_nl synchronize UNK UNK UNK on_nl end # Is the object in the set state? # # @return [Boolean] indicating whether or not the `Event` has been set
def UNK on_nl synchronize UNK UNK UNK on_nl end on_nl on_ignored_nl def UNK on_nl synchronize UNK on_ivar on_op UNK on_op # Trigger the event, setting the state to `set` and releasing all threads # waiting on the event. Has no effect if the `Event` has already been set. # # @return [Boolean] should always return `true`
def UNK on_nl synchronize UNK on_ignored_nl UNK on_ivar on_nl on_ivar on_op UNK on_nl on_ivar on_op UNK on_nl end on_nl UNK # Reset a previously set event back to the `unset` state. # Has no effect if the `Event` has not yet been set. # # @return [Boolean] should always return `true`
def UNK UNK UNK on_op UNK UNK on_ignored_nl synchronize UNK on_ignored_nl UNK on_ivar on_nl UNK on_op on_ivar on_nl UNK UNK # Wait a given number of seconds for the `Event` to be set by another # thread. Will wait forever when no `timeout` value is given. Returns # immediately if the `Event` has already been set. # # @return [Boolean] true if the `Event` was set before timeout else false
