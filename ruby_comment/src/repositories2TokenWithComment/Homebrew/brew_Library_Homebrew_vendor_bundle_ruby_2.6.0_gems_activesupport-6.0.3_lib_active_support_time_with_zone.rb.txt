on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end # frozen_string_literal: true
UNK on_const on_nl def UNK on_period UNK on_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl on_const on_op on_const on_period UNK # A Time-like class that can represent a time in any time zone. Necessary # because standard Ruby Time instances are limited to UTC and the # system's <tt>ENV['TZ']</tt> zone. # # You shouldn't ever need to create a TimeWithZone instance directly via +new+. # Instead use methods +local+, +parse+, +at+ and +now+ on TimeZone instances, # and +in_time_zone+ on Time and DateTime instances. # # Time.zone = 'Eastern Time (US & Canada)' # => 'Eastern Time (US & Canada)' # Time.zone.local(2007, 2, 10, 15, 30, 45) # => Sat, 10 Feb 2007 15:30:45 EST -05:00 # Time.zone.parse('2007-02-10 15:30:45') # => Sat, 10 Feb 2007 15:30:45 EST -05:00 # Time.zone.at(1171139445) # => Sat, 10 Feb 2007 15:30:45 EST -05:00 # Time.zone.now # => Sun, 18 May 2008 13:07:55 EDT -04:00 # Time.utc(2007, 2, 10, 20, 30, 45).in_time_zone # => Sat, 10 Feb 2007 15:30:45 EST -05:00 # # See Time and TimeZone for further documentation of these methods. # # TimeWithZone instances implement the same API as Ruby Time instances, so # that Time and TimeWithZone instances are interchangeable. # # t = Time.zone.now # => Sun, 18 May 2008 13:27:25 EDT -04:00 # t.hour # => 13 # t.dst? # => true # t.utc_offset # => -14400 # t.zone # => "EDT" # t.to_s(:rfc822) # => "Sun, 18 May 2008 13:27:25 -0400" # t + 1.day # => Mon, 19 May 2008 13:27:25 EDT -04:00 # t.beginning_of_year # => Tue, 01 Jan 2008 00:00:00 EST -05:00 # t > Time.utc(1999) # => true # t.is_a?(Time) # => true # t.is_a?(ActiveSupport::TimeWithZone) # => true
def UNK on_period UNK on_nl on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl on_const on_op on_const on_period UNK UNK on_op UNK # Report class name as 'Time' to thwart type checking.
def time on_nl on_ivar on_op period on_period UNK on_lparen on_ivar on_rparen on_nl end on_nl on_ignored_nl def utc on_nl on_ivar on_op # Returns a <tt>Time</tt> instance that represents the time in +time_zone+.
def utc on_nl on_ivar on_op period on_period UNK on_lparen on_ivar on_rparen on_nl end on_nl alias_method on_symbeg UNK on_comma on_symbeg utc # Returns a <tt>Time</tt> instance of the simultaneous time in the UTC timezone.
def period on_nl on_ivar on_op time_zone on_period UNK on_lparen on_ivar on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen new_zone on_op # Returns the underlying TZInfo::TimezonePeriod.
def UNK on_lparen new_zone on_op on_op on_const on_period zone on_rparen on_ignored_nl UNK UNK if time_zone on_op new_zone on_nl utc on_period # Returns the simultaneous time in <tt>Time.zone</tt>, or the specified zone.
def UNK on_lparen utc_offset on_op nil on_rparen on_ignored_nl utc on_period UNK on_lparen utc_offset on_rparen on_nl end on_nl alias_method on_symbeg UNK # Returns a <tt>Time</tt> instance of the simultaneous time in the system timezone.
def UNK on_nl period on_period UNK on_nl end on_nl alias_method on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl def UNK on_nl # Returns true if the current time is within Daylight Savings Time for the # specified time zone. # # Time.zone = 'Eastern Time (US & Canada)' # => 'Eastern Time (US & Canada)' # Time.zone.parse("2012-5-30").dst? # => true # Time.zone.parse("2012-11-30").dst? # => false
def UNK on_nl period on_period UNK on_period UNK on_op on_symbeg on_const on_op period on_period UNK on_period UNK on_op on_symbeg on_const # Returns true if the current time zone is set to UTC. # # Time.zone = 'UTC' # => 'UTC' # Time.zone.now.utc? # => true # Time.zone = 'Eastern Time (US & Canada)' # => 'Eastern Time (US & Canada)' # Time.zone.now.utc? # => false
def utc_offset on_nl period on_period UNK on_nl end on_nl alias_method on_symbeg UNK on_comma on_symbeg utc_offset on_nl alias_method on_symbeg UNK on_comma # Returns the offset from current time to UTC time in seconds.
def UNK on_lparen UNK on_op UNK on_comma UNK on_op nil on_rparen on_ignored_nl UNK on_op UNK on_op on_const on_period UNK on_lparen # Returns a formatted string of the offset from UTC, or an alternative # string if the time zone is already UTC. # # Time.zone = 'Eastern Time (US & Canada)' # => "Eastern Time (US & Canada)" # Time.zone.now.formatted_offset(true) # => "-05:00" # Time.zone.now.formatted_offset(false) # => "-0500" # Time.zone = 'UTC' # => "UTC" # Time.zone.now.formatted_offset(true, "0") # => "0"
def zone on_nl period on_period UNK on_period to_s on_nl end on_nl on_ignored_nl def UNK on_nl on_tstring_beg on_embexpr_beg time on_period strftime # Returns the time zone abbreviation. # # Time.zone = 'Eastern Time (US & Canada)' # => "Eastern Time (US & Canada)" # Time.zone.now.zone # => "EST"
def UNK on_nl on_tstring_beg on_embexpr_beg time on_period strftime on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_embexpr_end on_tstring_content on_embexpr_beg zone on_embexpr_end on_tstring_content on_embexpr_beg # Returns a string of the object's date, time, zone, and offset from UTC. # # Time.zone.now.inspect # => "Thu, 04 Dec 2014 11:00:25 EST -05:00"
def UNK on_lparen UNK on_op on_int on_rparen on_ignored_nl on_tstring_beg on_embexpr_beg time on_period strftime on_lparen on_const on_lbracket UNK on_period UNK on_rbracket # Returns a string of the object's date and time in the ISO 8601 standard # format. # # Time.zone.now.xmlschema # => "2014-12-04T11:02:37-05:00"
def UNK on_lparen options on_op nil on_rparen on_ignored_nl if on_const on_op on_const on_op on_const on_period UNK on_nl UNK on_lparen on_const # Coerces time to a string for JSON encoding. The default format is ISO 8601. # You can get %Y/%m/%d %H:%M:%S +offset style by setting # <tt>ActiveSupport::JSON::Encoding.use_standard_json_time_format</tt> # to +false+. # # # With ActiveSupport::JSON::Encoding.use_standard_json_time_format = true # Time.utc(2005,2,1,15,15,10).in_time_zone("Hawaii").to_json # # => "2005-02-01T05:15:10.000-10:00" # # # With ActiveSupport::JSON::Encoding.use_standard_json_time_format = false # Time.utc(2005,2,1,15,15,10).in_time_zone("Hawaii").to_json # # => "2005/02/01 05:15:10 -1000"
UNK on_lparen coder on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_comma coder on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_comma coder on_lbracket on_tstring_beg on_tstring_content #:nodoc:
coder on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl coder on_period UNK on_op UNK on_tstring_beg on_tstring_content on_tstring_end on_op utc on_comma on_tstring_beg #:nodoc:
def UNK on_nl utc on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl to_s on_lparen on_symbeg UNK on_rparen on_nl end # Returns a string of the object's date and time in the format used by # HTTP requests. # # Time.zone.now.httpdate # => "Tue, 01 Jan 2013 04:39:43 GMT"
def UNK on_nl to_s on_lparen on_symbeg UNK on_rparen on_nl end on_nl alias_method on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl def # Returns a string of the object's date and time in the RFC 2822 standard # format. # # Time.zone.now.rfc2822 # => "Tue, 01 Jan 2013 04:51:39 +0000"
def to_s on_lparen format on_op on_symbeg UNK on_rparen on_ignored_nl if format on_op on_symbeg UNK on_nl utc on_period to_s on_lparen format # Returns a string of the object's date and time. # Accepts an optional <tt>format</tt>: # * <tt>:default</tt> - default value, mimics Ruby Time#to_s format. # * <tt>:db</tt> - format outputs time in UTC :db time. See Time#to_formatted_s(:db). # * Any key in <tt>Time::DATE_FORMATS</tt> can be used. See active_support/core_ext/time/conversions.rb.
end on_nl end on_nl alias_method on_symbeg UNK on_comma on_symbeg to_s on_nl on_ignored_nl def strftime on_lparen format on_rparen on_ignored_nl format on_op # mimicking Ruby Time#to_s format
def strftime on_lparen format on_rparen on_ignored_nl format on_op format on_period UNK on_lparen UNK on_tstring_content UNK on_comma on_tstring_beg on_tstring_content on_embexpr_beg zone # Replaces <tt>%Z</tt> directive with +zone before passing to Time#strftime, # so that zone information is correct.
def on_op on_lparen other on_rparen on_ignored_nl utc on_op other on_nl end on_nl alias_method on_symbeg UNK on_comma on_symbeg on_op on_nl alias_method # Use the time in UTC for comparisons.
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl utc on_period UNK on_lparen UNK on_comma UNK on_rparen on_nl end on_nl on_ignored_nl # Returns true if the current object's time is within the specified # +min+ and +max+ time.
def UNK on_nl utc on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl time on_period UNK on_nl end on_nl on_ignored_nl # Returns true if the current object's time is in the past.
def UNK on_nl time on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl utc on_period UNK on_nl end on_nl on_ignored_nl # Returns true if the current object's time falls within # the current day.
def UNK on_nl utc on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen other on_rparen on_ignored_nl other on_period UNK on_lparen # Returns true if the current object's time is in the future.
def UNK on_lparen other on_rparen on_ignored_nl other on_period UNK on_lparen utc on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl utc # Returns +true+ if +other+ is equal to current object.
def on_op on_lparen other on_rparen on_ignored_nl if UNK on_lparen other on_rparen on_nl UNK on_lparen on_symbeg on_op on_comma other on_rparen on_nl # Adds an interval of time to the current object's time and returns that # value as a new TimeWithZone object. # # Time.zone = 'Eastern Time (US & Canada)' # => 'Eastern Time (US & Canada)' # now = Time.zone.now # => Sun, 02 Nov 2014 01:26:28 EDT -04:00 # now + 1000 # => Sun, 02 Nov 2014 01:43:08 EDT -04:00 # # If we're adding a Duration of variable length (i.e., years, months, days), # move forward from #time, otherwise move forward from #utc, for accuracy # when moving across DST boundaries. # # For instance, a time + 24.hours will advance exactly 24 hours, while a # time + 1.day will advance 23-25 hours, depending on the day. # # now + 24.hours # => Mon, 03 Nov 2014 00:26:28 EST -05:00 # now + 1.day # => Mon, 03 Nov 2014 01:26:28 EST -05:00
def on_op on_lparen other on_rparen on_ignored_nl if other on_period UNK on_lparen on_symbeg time on_rparen on_nl UNK on_op other on_period UNK # Subtracts an interval of time and returns a new TimeWithZone object unless # the other value `acts_like?` time. Then it will return a Float of the difference # between the two times that represents the difference between the current # object's time and the +other+ time. # # Time.zone = 'Eastern Time (US & Canada)' # => 'Eastern Time (US & Canada)' # now = Time.zone.now # => Mon, 03 Nov 2014 00:26:28 EST -05:00 # now - 1000 # => Mon, 03 Nov 2014 00:09:48 EST -05:00 # # If subtracting a Duration of variable length (i.e., years, months, days), # move backward from #time, otherwise move backward from #utc, for accuracy # when moving across DST boundaries. # # For instance, a time - 24.hours will go subtract exactly 24 hours, while a # time - 1.day will subtract 23-25 hours, depending on the day. # # now - 24.hours # => Sun, 02 Nov 2014 01:26:28 EDT -04:00 # now - 1.day # => Sun, 02 Nov 2014 00:26:28 EDT -04:00 # # If both the TimeWithZone object and the other value act like Time, a Float # will be returned. # # Time.zone.now - 1.day.ago # => 86399.999967 #
def UNK on_lparen other on_rparen on_ignored_nl UNK on_lparen on_op other on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen options on_rparen # Subtracts an interval of time from the current object's time and returns # the result as a new TimeWithZone object. # # Time.zone = 'Eastern Time (US & Canada)' # => 'Eastern Time (US & Canada)' # now = Time.zone.now # => Mon, 03 Nov 2014 00:26:28 EST -05:00 # now.ago(1000) # => Mon, 03 Nov 2014 00:09:48 EST -05:00 # # If we're subtracting a Duration of variable length (i.e., years, months, # days), move backward from #time, otherwise move backward from #utc, for # accuracy when moving across DST boundaries. # # For instance, <tt>time.ago(24.hours)</tt> will move back exactly 24 hours, # while <tt>time.ago(1.day)</tt> will move back 23-25 hours, depending on # the day. # # now.ago(24.hours) # => Sun, 02 Nov 2014 01:26:28 EDT -04:00 # now.ago(1.day) # => Sun, 02 Nov 2014 00:26:28 EDT -04:00
def UNK on_lparen options on_rparen on_ignored_nl if options on_lbracket on_symbeg zone on_rbracket on_op options on_lbracket on_symbeg UNK on_rbracket on_nl UNK # Returns a new +ActiveSupport::TimeWithZone+ where one or more of the elements have # been changed according to the +options+ parameter. The time options (<tt>:hour</tt>, # <tt>:min</tt>, <tt>:sec</tt>, <tt>:usec</tt>, <tt>:nsec</tt>) reset cascadingly, # so if only the hour is passed, then minute, sec, usec and nsec is set to 0. If the # hour and minute is passed, then sec, usec and nsec is set to 0. The +options+ # parameter takes a hash with any of these keys: <tt>:year</tt>, <tt>:month</tt>, # <tt>:day</tt>, <tt>:hour</tt>, <tt>:min</tt>, <tt>:sec</tt>, <tt>:usec</tt>, # <tt>:nsec</tt>, <tt>:offset</tt>, <tt>:zone</tt>. Pass either <tt>:usec</tt> # or <tt>:nsec</tt>, not both. Similarly, pass either <tt>:zone</tt> or # <tt>:offset</tt>, not both. # # t = Time.zone.now # => Fri, 14 Apr 2017 11:45:15 EST -05:00 # t.change(year: 2020) # => Tue, 14 Apr 2020 11:45:15 EST -05:00 # t.change(hour: 12) # => Fri, 14 Apr 2017 12:00:00 EST -05:00 # t.change(min: 30) # => Fri, 14 Apr 2017 11:30:00 EST -05:00 # t.change(offset: "-10:00") # => Fri, 14 Apr 2017 11:45:15 HST -10:00 # t.change(zone: "Hawaii") # => Fri, 14 Apr 2017 11:45:15 HST -10:00
def UNK on_lparen options on_rparen on_ignored_nl if options on_period UNK on_lparen on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma # Uses Date to provide precise Time calculations for years, months, and days # according to the proleptic Gregorian calendar. The result is returned as a # new TimeWithZone object. # # The +options+ parameter takes a hash with any of these keys: # <tt>:years</tt>, <tt>:months</tt>, <tt>:weeks</tt>, <tt>:days</tt>, # <tt>:hours</tt>, <tt>:minutes</tt>, <tt>:seconds</tt>. # # If advancing by a value of variable length (i.e., years, weeks, months, # days), move forward from #time, otherwise move forward from #utc, for # accuracy when moving across DST boundaries. # # Time.zone = 'Eastern Time (US & Canada)' # => 'Eastern Time (US & Canada)' # now = Time.zone.now # => Sun, 02 Nov 2014 01:26:28 EDT -04:00 # now.advance(seconds: 1) # => Sun, 02 Nov 2014 01:26:29 EDT -04:00 # now.advance(minutes: 1) # => Sun, 02 Nov 2014 01:27:28 EDT -04:00 # now.advance(hours: 1) # => Sun, 02 Nov 2014 01:26:28 EST -05:00 # now.advance(days: 1) # => Mon, 03 Nov 2014 01:26:28 EST -05:00 # now.advance(weeks: 1) # => Sun, 09 Nov 2014 01:26:28 EST -05:00 # now.advance(months: 1) # => Tue, 02 Dec 2014 01:26:28 EST -05:00 # now.advance(years: 1) # => Mon, 02 Nov 2015 01:26:28 EST -05:00
if options on_period UNK on_lparen on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_comma on_symbeg UNK on_rparen on_period UNK on_nl # If we're advancing a value of variable length (i.e., years, weeks, months, days), advance from #time, # otherwise advance from #utc, for accuracy when moving across DST boundaries
def UNK on_nl on_lbracket time on_period UNK on_comma time on_period UNK on_comma time on_period UNK on_comma time on_period UNK on_comma # Returns Array of parts of Time in sequence of # [seconds, minutes, hours, day, month, year, weekday, yearday, dst?, zone]. # # now = Time.zone.now # => Tue, 18 Aug 2015 02:29:27 UTC +00:00 # now.to_a # => [27, 29, 2, 18, 8, 2015, 2, 230, false, "UTC"]
def UNK on_nl utc on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl utc on_period UNK on_nl end on_nl alias_method # Returns the object's date and time as a floating point number of seconds # since the Epoch (January 1, 1970 00:00 UTC). # # Time.zone.now.to_f # => 1417709320.285418
def UNK on_nl utc on_period UNK on_nl end on_nl alias_method on_symbeg UNK on_comma on_symbeg UNK on_nl on_ignored_nl def UNK on_nl # Returns the object's date and time as an integer number of seconds # since the Epoch (January 1, 1970 00:00 UTC). # # Time.zone.now.to_i # => 1417709320
def UNK on_nl utc on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op utc on_period UNK on_period UNK # Returns the object's date and time as a rational number of seconds # since the Epoch (January 1, 1970 00:00 UTC). # # Time.zone.now.to_r # => (708854548642709/500000)
def UNK on_nl on_ivar on_op utc on_period UNK on_period UNK on_lparen on_const on_lparen utc_offset on_comma on_int on_rparen on_rparen on_nl end # Returns an instance of DateTime with the timezone's UTC offset # # Time.zone.now.to_datetime # => Tue, 18 Aug 2015 02:32:20 +0000 # Time.current.in_time_zone('Hawaii').to_datetime # => Mon, 17 Aug 2015 16:32:20 -1000
def UNK on_nl if UNK on_nl on_ivar on_op UNK on_lparen utc_offset on_rparen on_nl else on_ignored_nl on_ivar on_op UNK on_nl end # Returns an instance of +Time+, either with the same UTC offset # as +self+ or in the local system timezone depending on the setting # of +ActiveSupport.to_time_preserves_timezone+.
def UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op on_op on_const on_op UNK # So that +self+ <tt>acts_like?(:time)</tt>.
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op on_op on_const on_op UNK on_nl end on_nl alias_method on_symbeg UNK on_comma on_symbeg # Say we're a Time to thwart type checking.
def UNK on_nl false on_nl end on_nl on_ignored_nl def UNK on_nl period UNK utc UNK time UNK UNK UNK UNK # An instance of ActiveSupport::TimeWithZone is never blank
period UNK utc UNK time UNK UNK UNK UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_lbracket utc # preload instance variables before freezing
def UNK on_lparen sym on_comma UNK on_op false on_rparen on_ignored_nl UNK false if sym on_period UNK on_op on_symbeg UNK on_nl # respond_to_missing? is not called in some cases, such as when type conversion is # performed with Kernel#String
UNK false if sym on_period UNK on_op on_symbeg UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_lparen sym on_comma # ensure that we're not going to throw and rescue from NoMethodError in method_missing which is slow
def UNK on_lparen sym on_comma UNK on_rparen on_ignored_nl UNK false if sym on_period UNK on_op on_symbeg UNK on_nl time on_period # Ensure proxy class responds to all methods that underlying time instance # responds to.
def UNK on_lparen sym on_comma on_op UNK on_comma on_op UNK on_rparen on_ignored_nl UNK time on_period UNK on_lparen sym on_comma on_op # Send the missing method to +time+ instance, and wrap result in a new # TimeWithZone with the existing +time_zone+.
on_ivar on_op UNK on_lparen on_ivar on_rparen UNK on_ivar on_period UNK on_nl UNK on_ignored_nl period on_op on_ivar on_period UNK on_lparen on_ivar # we don't want a Time.local instance enforcing its own DST rules as well, # so transfer time values to a utc constructor if necessary
on_ivar on_op on_int on_period UNK on_nl UNK on_nl end on_nl end on_nl on_ignored_nl def UNK on_lparen time on_rparen on_ignored_nl UNK # time is in the "spring forward" hour gap, so we're moving the time forward one hour and trying again
UNK time if time on_period UNK on_lparen on_op on_const on_rparen on_op time on_period UNK on_nl on_op on_const on_period utc on_lparen # avoid creating another Time object if possible
