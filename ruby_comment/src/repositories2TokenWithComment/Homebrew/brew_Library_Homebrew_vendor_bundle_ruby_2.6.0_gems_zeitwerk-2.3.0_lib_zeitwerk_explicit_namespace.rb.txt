UNK UNK UNK on_op UNK on_nl UNK UNK on_nl on_ignored_nl UNK UNK UNK on_nl on_ignored_nl UNK UNK UNK on_nl on_ignored_nl # Centralizes the logic for the trace point used to detect the creation of # explicit namespaces, needed to descend into matching subdirectories right # after the constant has been defined. # # The implementation assumes an explicit namespace is managed by one loader. # Loaders that reopen namespaces owned by other projects are responsible for # loading their constant before setup. This is documented.
UNK on_op UNK on_nl UNK UNK on_nl on_ignored_nl UNK UNK UNK on_nl on_ignored_nl UNK UNK UNK on_nl on_ignored_nl UNK UNK # :nodoc: all
UNK UNK UNK on_nl on_ignored_nl UNK UNK UNK on_nl on_ignored_nl UNK UNK UNK on_nl on_ignored_nl UNK UNK on_lparen UNK UNK # Maps constant paths that correspond to explicit namespaces according to # the file system, to the loader responsible for them. # # @private # @return [{String => Zeitwerk::Loader}]
UNK UNK UNK on_nl on_ignored_nl UNK UNK UNK on_nl on_ignored_nl UNK UNK on_lparen UNK UNK loader on_rparen on_ignored_nl UNK on_period # @private # @return [Mutex]
UNK UNK UNK on_nl on_ignored_nl UNK UNK on_lparen UNK UNK loader on_rparen on_ignored_nl UNK on_period UNK UNK on_ignored_nl UNK UNK # @private # @return [TracePoint]
UNK UNK on_lparen UNK UNK loader on_rparen on_ignored_nl UNK on_period UNK UNK on_ignored_nl UNK UNK UNK UNK on_op loader on_nl # Asserts `cpath` corresponds to an explicit namespace for which `loader` # is responsible. # # @private # @param cpath [String] # @param loader [Zeitwerk::Loader] # @return [void]
UNK on_period UNK UNK UNK on_period UNK on_nl end on_nl end on_nl on_ignored_nl UNK UNK on_lparen loader on_rparen on_ignored_nl UNK # We check enabled? because, looking at the C source code, enabling an # enabled tracer does not seem to be a simple no-op.
UNK UNK on_lparen loader on_rparen on_ignored_nl UNK on_period UNK UNK on_op UNK UNK UNK on_op UNK on_op loader UNK on_nl # @private # @param loader [Zeitwerk::Loader] # @return [void]
UNK UNK UNK on_period UNK on_period UNK on_nl on_ignored_nl UNK loader on_op UNK on_period UNK on_lparen UNK on_lparen UNK on_period # If the class is a singleton class, we won't do anything with it so we # can bail out immediately. This is several orders of magnitude faster # than accessing its name.
UNK loader on_op UNK on_period UNK on_lparen UNK on_lparen UNK on_period UNK on_rparen on_rparen on_nl loader on_period UNK on_lparen UNK # Note that it makes sense to compute the hash code unconditionally, # because the trace point is disabled if cpaths is empty.
UNK on_op UNK on_period UNK on_lparen UNK UNK UNK on_op UNK on_lparen UNK UNK on_rparen on_rparen on_nl end on_nl end # We go through a method instead of defining a block mainly to have a better # label when profiling.
