on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end # frozen_string_literal: true
on_op on_const on_op UNK on_nl on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end if on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl on_ignored_nl def # rubocop:disable Naming/ConstantName # rubocop:disable Style/MutableConstant
on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end if on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_nl on_ignored_nl def UNK on_nl on_ivar on_op on_const # rubocop:enable Naming/ConstantName # rubocop:enable Style/MutableConstant
def UNK on_nl on_ivar on_op on_const on_period new on_lparen UNK on_period UNK on_lbracket UNK on_tstring_content UNK on_rbracket on_rparen on_nl end # This can be compared to numerics, strings, or symbols # using the standard Ruby Comparable methods.
def UNK on_nl on_ivar on_op on_const on_period new on_lparen on_lparen on_const on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_op on_const on_lbracket on_tstring_beg # This can be compared to numerics, strings, or symbols # using the standard Ruby Comparable methods.
on_const on_period new on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl on_const on_period new on_tstring_beg on_tstring_content on_tstring_end on_nl # TODO: bump version when new Xcode macOS SDK is released
on_const on_period new on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end # TODO: bump version when new macOS is released and also update # references in docs/Installation.md and # https://github.com/Homebrew/install/blob/master/install
UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op UNK on_nl end on_nl on_ignored_nl def # TODO: bump version when new macOS is released and also update # references in docs/Installation.md and # https://github.com/Homebrew/install/blob/master/install
UNK UNK UNK on_const on_op on_const on_period UNK on_nl UNK UNK UNK on_const on_op on_const on_period UNK on_nl end on_nl # If there's no CLT SDK, return false
UNK UNK UNK on_const on_op on_const on_period UNK on_nl end on_nl on_ignored_nl UNK on_nl end on_nl on_ignored_nl on_ignored_nl def UNK # If the CLT is installed and headers are provided by the system, return false
on_ignored_nl def UNK on_lparen v on_op UNK on_rparen on_ignored_nl on_ivar on_op if on_const on_period UNK on_op on_const on_period UNK on_nl # If a specific SDK is requested: # # 1. The requested SDK is returned, if it's installed. # 2. If the requested SDK is not installed, the newest SDK (if any SDKs # are available) is returned. # 3. If no SDKs are available, nil is returned. # # If no specific SDK is requested, the SDK matching the OS version is returned, # if available. Otherwise, the latest SDK is returned.
UNK on_const on_period UNK if UNK on_period UNK on_period UNK on_lbrace on_op UNK on_op UNK on_period UNK on_const on_rbrace on_nl # If the formula requires Xcode, don't return the CLT SDK
def UNK on_lparen v on_op UNK on_rparen on_ignored_nl UNK on_op UNK on_lparen v on_rparen on_nl UNK on_op path on_nl end # Returns the path to an SDK or nil, following the rules set by {.sdk}.
on_ignored_nl UNK UNK UNK on_nl on_ignored_nl UNK on_lparen v on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op on_lbracket # Prefer CLT SDK when both Xcode and the CLT are installed. # Expected results: # 1. On Xcode-only systems, return the Xcode SDK. # 2. On Xcode-and-CLT systems where headers are provided by the system, return nil. # 3. On CLT-only systems with no CLT SDK, return nil. # 4. On CLT-only systems with a CLT SDK, where headers are provided by the system, return nil. # 5. On CLT-only systems with a CLT SDK, where headers are not provided by the system, return the CLT SDK.
def UNK on_nl UNK on_op on_lbracket on_rbracket on_nl on_ignored_nl UNK on_tstring_content UNK on_tstring_content on_tstring_end on_period UNK UNK on_op UNK on_op # See these issues for some history: # # - https://github.com/Homebrew/legacy-homebrew/issues/13 # - https://github.com/Homebrew/legacy-homebrew/issues/41 # - https://github.com/Homebrew/legacy-homebrew/issues/48
UNK on_tstring_content UNK on_tstring_content on_tstring_end on_period UNK UNK on_op UNK on_op on_ignored_nl path on_op UNK on_lparen UNK on_rparen on_nl UNK # First look in the path because MacPorts is relocatable and Fink # may become relocatable in the future.
UNK on_tstring_content UNK on_tstring_content on_tstring_end on_period UNK UNK on_op UNK on_op on_ignored_nl path on_op on_const on_period new on_lparen UNK on_rparen # Look in the standard locations, because even if port or fink are # not in the path they can still break builds if the build scripts # have these paths baked in.
UNK on_tstring_content UNK on_tstring_content on_tstring_end on_period UNK on_lbrace on_op UNK on_op on_const on_period new on_lparen UNK on_rparen on_rbrace on_period UNK # Finally, some users make their MacPorts or Fink directories # read-only in order to try out Homebrew, but this doesn't work as # some build scripts error out when trying to read from these now # unreadable paths.
