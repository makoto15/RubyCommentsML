on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl on_ignored_nl on_const # frozen_string_literal: true
UNK on_const on_nl UNK on_const on_nl on_ignored_nl on_const on_op on_qwords_beg on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_tstring_end on_period UNK # Homebrew extends Ruby's `ENV` to make our code more readable. # Implemented in {SharedEnvExtension} and either {Superenv} or # {Stdenv} (depending on the build mode). # @see Superenv # @see Stdenv # @see https://www.rubydoc.info/stdlib/Env Ruby's ENV API
on_const on_op on_qwords_beg on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_tstring_end on_period UNK on_nl on_const on_op on_qwords_beg on_tstring_content on_words_sep on_tstring_content # @private
on_const on_op on_qwords_beg on_tstring_content on_words_sep on_tstring_content on_tstring_end on_period UNK on_nl on_const on_op on_qwords_beg on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep # @private
on_const on_op on_qwords_beg on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep # @private
def UNK on_lparen UNK on_op UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl UNK on_nl end on_nl on_ignored_nl def UNK on_nl # @private
def UNK on_nl on_const on_period each UNK on_op UNK on_op UNK on_lparen UNK on_rparen UNK on_nl end on_nl on_ignored_nl def # @private
def UNK on_lparen key on_comma path on_rparen on_ignored_nl UNK if on_qwords_beg on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_words_sep on_tstring_content on_tstring_end on_period # Prepends a directory to `PATH`. # Is the formula struggling to find the pkgconfig file? Point it to it. # This is done automatically for keg-only formulae. # <pre>ENV.prepend_path "PKG_CONFIG_PATH", "#{Formula["glib"].opt_lib}/pkgconfig"</pre> # Prepending a system path such as /usr/bin is a no-op so that requirements # don't accidentally override superenv shims or formulae's `bin` directories, e.g. # <pre>ENV.prepend_path "PATH", which("emacs").dirname</pre>
def compiler on_nl on_ivar on_op if on_lparen cc on_op on_const on_period cc on_rparen on_nl UNK on_lparen UNK on_rparen if cc # Outputs the current compiler. # @return [Symbol] # <pre># Do something only for the system clang # if ENV.compiler == :clang # # modify CFLAGS CXXFLAGS OBJCFLAGS OBJCXXFLAGS in one go: # ENV.append_to_cflags "-I ./missing/includes" # end</pre>
def UNK on_nl on_const on_period UNK on_period UNK on_lparen compiler on_comma compiler on_rparen on_nl end on_nl on_ignored_nl on_const on_period each # @private
def UNK on_nl append on_tstring_beg on_tstring_content on_tstring_end on_comma on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl def UNK on_nl path on_op # Snow Leopard defines an NCURSES value the opposite of most distros. # @see https://bugs.python.org/issue6848 # Currently only used by aalib in core.
def UNK on_nl path on_op on_const on_period UNK on_lparen self on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_rparen on_period UNK do on_op # @private
UNK on_period UNK on_lparen on_tstring_beg on_embexpr_beg on_const on_embexpr_end on_tstring_content on_tstring_end on_comma on_tstring_beg on_embexpr_beg on_const on_embexpr_end on_tstring_content on_tstring_end on_rparen on_nl end # put Superenv.bin and opt path at the first
path on_period append on_lparen self on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_rparen path on_period append on_lparen on_ignored_nl on_const on_period UNK do # XXX hot fix to prefer brewed stuff (e.g. python) over /usr/bin.
path on_period append on_lparen on_ignored_nl on_const on_period UNK do on_op UNK on_op on_ignored_nl UNK on_period UNK on_period to_s on_nl UNK # reset of self["PATH"]
on_const on_period UNK do on_op UNK on_op on_ignored_nl UNK on_period UNK on_period to_s on_nl UNK on_nl UNK on_nl end on_op # user paths
UNK if on_ivar on_nl on_ignored_nl on_ivar on_op UNK on_nl on_ignored_nl UNK on_op on_lbracket on_rbracket on_nl on_ignored_nl if UNK on_nl UNK # Ignore repeated calls to this function as it will misleadingly warn about # building with an alternative Fortran compiler without optimization flags, # despite it often being the Homebrew-provided one set up in the first call.
def UNK on_nl if on_const on_period UNK on_period UNK on_op on_const on_period UNK on_period UNK on_nl on_const on_period UNK on_period # @private
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op UNK on_lbracket on_const on_comma UNK on_rbracket on_nl UNK on_op on_tstring_beg on_tstring_content on_embexpr_beg # @private
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_ignored_nl UNK on_op UNK on_lparen UNK on_rparen on_nl UNK on_const on_op UNK on_nl # @private
def UNK UNK end on_nl on_ignored_nl def UNK on_lparen cc on_op compiler on_rparen on_ignored_nl on_qwords_beg on_tstring_content on_words_sep on_tstring_content on_tstring_end on_period # A no-op until we enable this by default again (which we may never do).
def UNK on_lparen cc on_op compiler on_rparen on_ignored_nl on_qwords_beg on_tstring_content on_words_sep on_tstring_content on_tstring_end on_period UNK on_lparen cc on_period to_s on_rparen # @private
