on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end # frozen_string_literal: true
class on_const on_nl UNK on_const on_nl on_ignored_nl UNK on_symbeg tags on_comma on_symbeg name on_comma on_symbeg cask on_comma on_symbeg download on_nl # A base class for non-formula requirements needed by formulae. # A "fatal" requirement is one that will fail the build if it is not present. # By default, Requirements are non-fatal.
def UNK on_nl UNK on_comma UNK on_comma UNK on_op self on_period class on_period UNK on_period UNK on_tstring_beg on_tstring_content on_tstring_end on_nl # The message to show when the requirement is not met.
def UNK on_nl UNK on_op self on_period class on_period UNK on_nl return UNK unless UNK on_nl on_ignored_nl on_ivar on_op UNK # Overriding {#satisfied?} is unsupported. # Pass a block or boolean to the satisfy DSL method instead.
def UNK on_nl self on_period class on_period UNK on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl return unless on_ivar # Overriding {#fatal?} is unsupported. # Pass a boolean to the fatal DSL method instead.
def UNK on_nl UNK on_nl UNK on_lparen on_op UNK on_rparen if UNK on_nl on_ignored_nl parent on_op UNK on_nl return unless # Overriding {#modify_build_environment} is unsupported. # Pass a block to the env DSL method instead.
parent on_op UNK on_nl return unless parent on_nl return if on_lbracket on_tstring_beg on_embexpr_beg on_const on_embexpr_end on_tstring_content on_tstring_end on_comma on_tstring_beg on_embexpr_beg # XXX If the satisfy block returns a Pathname, then make sure that it # remains available on the PATH. This makes requirements like # satisfy { which("executable") } # work, even under superenv where "executable" wouldn't normally be on the # PATH.
def UNK on_lparen dependent on_comma on_op block on_rparen on_ignored_nl UNK on_op on_const on_period new on_nl on_ignored_nl UNK on_op dependent on_period # Expand the requirements of dependent recursively, optionally yielding # `[dependent, req]` pairs to allow callers to apply arbitrary filters to # the list. # The default filter, which is applied when a block is not given, omits # optionals and recommendeds based on what the dependent has asked for.
def UNK on_nl UNK on_lparen on_symbeg UNK on_comma UNK on_rparen on_nl end on_nl end on_nl end on_nl EMP EMP EMP # Used to prune requirements when calling expand with a block.
