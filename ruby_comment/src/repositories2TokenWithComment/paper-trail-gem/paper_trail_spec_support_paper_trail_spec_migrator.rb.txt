on_ignored_nl UNK on_const on_nl def UNK on_nl UNK on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op on_op # frozen_string_literal: true
UNK on_const on_nl def UNK on_nl UNK on_op UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op on_op on_const # Manage migrations including running generators to build them, and cleaning up strays
def UNK on_nl UNK on_op on_op on_const on_period UNK on_nl UNK UNK on_op on_op on_const on_op on_const on_period UNK on_lparen # Looks like the API for programatically running migrations will change # in rails 5.2. This is an undocumented change, AFAICT. Then again, # how many people use the programmatic interface? Most people probably # just use rake. Maybe we're doing it wrong.
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK on_op UNK on_lparen UNK on_comma UNK on_rparen on_nl UNK on_ignored_nl UNK # Generate a migration, run it, and delete it. We use this for testing the # UpdateStiGenerator. We delete the file because we don't want it to exist # when we run migrations at the beginning of the next full test suite run. # # - generator [String] - name of generator, eg. "paper_trail:update_sti" # - generator_invoke_args [Array] - arguments to `Generators#invoke`
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK on_nl on_const on_op on_const on_period UNK on_lparen UNK on_comma UNK on_comma # Run the specified migration generator. # # We sleep until the next whole second because that is the precision of the # timestamp that rails puts in generator filenames. If we didn't sleep, # there's a good chance two tests would run within the same second and # generate the same exact migration filename. Then, even though we delete the # generated migrations after running them, some form of caching (perhaps # filesystem, perhaps rails) will run the cached migration file. # # - generator [String] - name of generator, eg. "paper_trail:update_sti" # - generator_invoke_args [Array] - arguments to `Generators#invoke`
