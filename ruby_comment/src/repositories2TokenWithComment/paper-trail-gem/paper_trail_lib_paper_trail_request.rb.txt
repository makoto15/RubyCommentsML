on_ignored_nl UNK UNK UNK UNK on_nl on_ignored_nl UNK on_const on_nl UNK on_const on_nl UNK on_const on_op on_const on_nl end on_nl # frozen_string_literal: true
UNK on_const on_nl UNK on_const on_op on_const on_nl end on_nl on_ignored_nl UNK on_op UNK on_nl def UNK on_lparen value on_rparen # Manages variables that affect the current HTTP request, such as `whodunnit`. # # Please do not use `PaperTrail::Request` directly, use `PaperTrail.request`. # Currently, `Request` is a `Module`, but in the future it is quite possible # we may make it a `Class`. If we make such a choice, we will not provide any # warning and will not treat it as a breaking change. You've been warned :) # # @api private
def UNK on_lparen value on_rparen on_ignored_nl store on_lbracket on_symbeg UNK on_rbracket on_op value on_nl end on_nl on_ignored_nl def UNK on_nl # Sets any data from the controller that you want PaperTrail to store. # See also `PaperTrail::Rails::Controller#info_for_paper_trail`. # # PaperTrail.request.controller_info = { ip: request_user_ip } # PaperTrail.request.controller_info # => { ip: '127.0.0.1' } # # @api public
def UNK on_nl store on_lbracket on_symbeg UNK on_rbracket on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_lparen # Returns the data from the controller that you want PaperTrail to store. # See also `PaperTrail::Rails::Controller#info_for_paper_trail`. # # PaperTrail.request.controller_info = { ip: request_user_ip } # PaperTrail.request.controller_info # => { ip: '127.0.0.1' } # # @api public
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_lparen UNK on_comma UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen UNK # Switches PaperTrail off for the given model. # @api public
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_lparen UNK on_comma UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen value # Switches PaperTrail on for the given model. # @api public
def UNK on_lparen value on_rparen on_ignored_nl store on_lbracket on_symbeg UNK on_rbracket on_op value on_nl end on_nl on_ignored_nl def UNK on_nl # Sets whether PaperTrail is enabled or disabled for the current request. # @api public
def UNK on_nl on_op on_op store on_lbracket on_symbeg UNK on_rbracket on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_comma value # Returns `true` if PaperTrail is enabled for the request, `false` otherwise. # See `PaperTrail::Rails::Controller#paper_trail_enabled_for_controller`. # @api public
def UNK on_lparen UNK on_comma value on_rparen on_ignored_nl store on_lbracket on_symbeg UNK UNK UNK UNK UNK on_rbracket on_op value on_nl # Sets whether PaperTrail is enabled or disabled for this model in the # current request. # @api public
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_period UNK on_lparen on_op on_const on_op on_const on_op on_const on_rparen on_op on_ignored_nl on_op # Returns `true` if PaperTrail is enabled for this model in the current # request, `false` otherwise. # @api public
def UNK on_lparen options on_rparen on_ignored_nl options on_period UNK on_period UNK UNK on_op UNK on_comma UNK on_op on_ignored_nl store on_lbracket # @api private
def UNK on_lparen options on_rparen on_ignored_nl store on_period UNK on_nl UNK on_lparen options on_rparen on_nl end on_nl on_ignored_nl def UNK # @api private
def UNK on_nl store on_period UNK on_nl end on_nl on_ignored_nl def UNK on_lparen options on_rparen on_ignored_nl UNK UNK UNK on_nl # Returns a deep copy of the internal hash from our RequestStore. Keys are # all symbols. Values are mostly primitives, but whodunnit can be a Proc. # We cannot use Marshal.dump here because it doesn't support Proc. It is # unclear exactly how `deep_dup` handles a Proc, but it doesn't complain. # @api private
def UNK on_lparen options on_rparen on_ignored_nl UNK UNK UNK on_nl UNK on_lparen options on_rparen on_nl UNK on_op UNK on_nl UNK # Temporarily set `options` and execute a block. # @api private
def UNK on_lparen value on_rparen on_ignored_nl store on_lbracket on_symbeg UNK on_rbracket on_op value on_nl end on_nl on_ignored_nl def UNK on_nl # Sets who is responsible for any changes that occur during request. You # would normally use this in a migration or on the console, when working # with models directly. # # `value` is usually a string, the name of a person, but you can set # anything that responds to `to_s`. You can also set a Proc, which will # not be evaluated until `whodunnit` is called later, usually right before # inserting a `Version` record. # # @api public
def UNK on_nl UNK on_op store on_lbracket on_symbeg UNK on_rbracket on_nl UNK on_period UNK on_lparen on_symbeg UNK on_rparen on_op UNK # Returns who is reponsible for any changes that occur during request. # # @api public
def store on_nl on_const on_period store on_lbracket on_symbeg UNK on_rbracket on_op UNK on_ignored_nl UNK UNK on_nl UNK on_nl end on_nl # Returns a Hash, initializing with default values if necessary. # @api private
def UNK on_lparen options on_rparen on_ignored_nl options on_period UNK UNK on_op UNK on_comma UNK on_op on_ignored_nl UNK UNK on_nl UNK # Provide a helpful error message if someone has a typo in one of their # option keys. We don't validate option values here. That's traditionally # been handled with casting (`to_s`, `!!`) in the accessor method. # @api private
