on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl on_const on_period describe on_lparen on_op on_const on_comma on_label # frozen_string_literal: true
expect on_lparen changeset on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_lbracket on_int on_rbracket on_rparen on_period to be_nil on_nl expect on_lparen changeset on_lbracket # When comparing timestamps, round off to the nearest second, because # mysql doesn't do fractional seconds.
expect on_lparen expected on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period to_i on_rparen on_period to eq on_lparen actual on_lbracket on_tstring_beg on_tstring_content on_tstring_end # We are using `to_i` to truncate to the nearest second, but isn't # there still a chance of this failing intermittently if # ___ and ___ occured more than 0.5s apart?
context on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl before do on_ignored_nl on_ivar on_op on_const on_period UNK on_nl on_ivar on_op on_const on_period UNK # rubocop:disable RSpec/InstanceVariable
on_ignored_nl describe on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl context on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl it on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl widget # rubocop:enable RSpec/InstanceVariable
UNK on_lparen on_const on_op on_const on_rparen on_period to UNK on_lparen on_symbeg UNK on_rparen on_period UNK on_lparen true on_rparen on_nl UNK # Json fields for `object` & `object_changes` attributes is most efficient way # to do the things - this way we will save even more RAM, as well as will skip # the whole YAML serialization
UNK on_period UNK on_nl end on_nl on_ignored_nl describe on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl UNK on_lparen on_symbeg UNK on_rparen do on_ignored_nl # Force the loading of all lazy things like class definitions, # in order to get the pure benchmark
expect on_lparen on_op UNK on_rparen on_period to UNK on_lparen on_int on_rparen on_period UNK on_nl end on_nl end on_nl on_ignored_nl describe # Some time ago there was 95kbs.. # At the time of commit the test passes with assertion on 17kbs. # Lets assert 20kbs then, to avoid flaky fails.
expect on_lparen on_op UNK on_rparen on_period to UNK on_lparen on_int on_rparen on_period UNK on_nl end on_nl end on_nl end on_nl # Some time ago there was 144kbs.. # At the time of commit the test passes with assertion on 27kbs. # Lets assert 35kbs then, to avoid flaky fails.
