on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl on_const on_period UNK on_const on_comma on_label on_symbeg UNK # frozen_string_literal: true
UNK on_lparen on_symbeg UNK on_rparen UNK on_const on_period create UNK on_ignored_nl UNK do on_ignored_nl cat on_period update on_lparen on_label on_tstring_beg # Index 0
on_ignored_nl UNK do on_ignored_nl cat on_period update on_lparen on_label on_tstring_beg on_tstring_content on_tstring_end on_rparen cat on_period update on_lparen on_label on_tstring_beg on_tstring_content # Index 4
cat on_period update on_lparen on_label on_tstring_beg on_tstring_content on_tstring_end on_rparen cat on_period update on_lparen on_label on_tstring_beg on_tstring_content on_tstring_end on_rparen cat on_period # This line runs the `let` for :cat, creating two entries
cat on_period update on_lparen on_label on_tstring_beg on_tstring_content on_tstring_end on_rparen cat on_period UNK on_ignored_nl versions on_op on_const on_op on_const on_period order # Index 1 - second
cat on_period UNK on_ignored_nl versions on_op on_const on_op on_const on_period order on_lparen on_symbeg id on_rparen on_nl versions on_period UNK on_period # Index 2 - third
on_ignored_nl versions on_op on_const on_op on_const on_period order on_lparen on_symbeg id on_rparen on_nl versions on_period UNK on_period update on_lparen on_label # Index 3 - fourth
versions on_op on_const on_op on_const on_period order on_lparen on_symbeg id on_rparen on_nl versions on_period UNK on_period update on_lparen on_label UNK # Prior to PR#1143 a subclassed version's item_subtype would be nil. In order to simulate # an entry having been made in the old way, set one of the item_subtype entries to be nil # instead of "Cat".
UNK on_period update on_lparen on_label on_tstring_beg on_tstring_content on_tstring_end on_rparen UNK on_period UNK end on_nl on_ignored_nl it on_tstring_beg on_tstring_content on_tstring_end do # This line runs the `let` for :animal, creating two entries
UNK on_period UNK end on_nl on_ignored_nl it on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl versions on_op on_const on_op on_const on_period order on_lparen # Index 5
end on_nl on_ignored_nl it on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl versions on_op on_const on_op on_const on_period order on_lparen on_symbeg id on_rparen # Index 6
expect on_lparen versions on_period UNK on_period UNK on_rparen on_period to UNK on_lparen on_const on_rparen expect on_lparen versions on_period UNK on_period # Still the reification process correctly brings back Cat since `species` is # properly set to this sub-classed name.
expect on_lparen versions on_period UNK on_period UNK on_rparen on_period to UNK on_lparen on_const on_rparen expect on_lparen versions on_period UNK on_period # Sylvester
expect on_lparen versions on_period UNK on_period UNK on_rparen on_period to UNK on_lparen on_const on_rparen expect on_lparen versions UNK on_int UNK # Cheshire
expect on_lparen versions UNK on_int UNK on_period UNK on_rparen on_period to UNK on_lparen on_const on_rparen expect on_lparen versions UNK on_int # Cheshire that was destroyed # Creating an object from the base class is correctly identified as "Animal"
expect on_lparen versions UNK on_int UNK on_period UNK on_rparen on_period to UNK on_lparen on_const on_rparen end on_nl on_ignored_nl it on_tstring_beg # Muppets Drummer
end on_nl on_ignored_nl it on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl expect on_lparen on_const on_op on_const on_period where on_lparen on_label on_tstring_beg on_tstring_content # Animal that was destroyed
expect on_lparen on_const on_op on_const on_period where on_lparen on_label on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period UNK on_rparen on_period to eq on_lparen # Only newer versions have item_subtype that refers directly to the subclass name.
migrator on_op on_op on_const on_period UNK on_nl expect UNK on_ignored_nl migrator on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_comma UNK UNK # To have has_many :versions work properly, you can generate and run a migration # that examines all existing models to identify use of STI, then updates all older # version entries that may refer to the base_class so they refer to the subclass. # (This is the same as running: rails g paper_trail:update_sti; rails db:migrate)
cat_versions on_op on_const on_op on_const on_period where on_lparen on_label on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period order on_lparen on_symbeg id on_rparen on_period # And now it finds all four changes
animal_versions on_op on_const on_op on_const on_period where on_lparen on_label on_tstring_beg on_tstring_content on_tstring_end on_rparen on_period order on_lparen on_symbeg id on_rparen on_period # And Animal is unaffected
UNK on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl UNK do on_ignored_nl on_const on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl # After creating a bunch of records above, we change the inheritance_column # so that we can demonstrate passing hints to the migration generator.
on_const on_period UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_nl end on_nl on_ignored_nl it on_tstring_beg on_tstring_content on_tstring_end do on_ignored_nl migrator on_op on_op # Clean up the temporary switch-up
migrator on_op on_op on_const on_period UNK on_nl UNK on_op UNK UNK on_nl expect UNK on_ignored_nl migrator on_period UNK on_lparen on_tstring_beg # Because of the change to inheritance_column, the generator `rails g # paper_trail:update_sti` would be unable to determine the previous # inheritance_column, so a generated migration *with no hints* would # accomplish nothing.
expect on_lparen on_const on_op on_const on_period where on_lparen on_label UNK on_comma on_label cat on_period id on_rparen on_period UNK on_rparen on_period # And older Cat changes remain as nil.
UNK on_op on_const on_op on_const on_period where on_lparen on_label on_tstring_beg on_tstring_content on_tstring_end on_comma on_label cat on_period id on_rparen on_period on_ignored_nl # Pick up all version IDs regarding our single cat Garfield / Sylvester / Cheshire
on_ignored_nl migrator on_op on_op on_const on_period UNK on_nl UNK on_op UNK on_tstring_beg on_tstring_content UNK UNK on_period UNK UNK on_tstring_content UNK # This time (as opposed to above example) we are going to provide hints # to the generator. # # You can specify custom inheritance_column settings over a range of # IDs so that the generated migration will properly update all your historic versions, # having them now to refer to the proper subclass.
migrator on_op on_op on_const on_period UNK on_nl UNK on_op UNK on_tstring_beg on_tstring_content UNK UNK on_period UNK UNK on_tstring_content UNK UNK # This is the same as running: # rails g paper_trail:update_sti Animal(species):1..4; rails db:migrate
cat_versions on_op cat on_period versions on_period order on_lparen on_symbeg id on_rparen on_period UNK on_nl expect on_lparen cat_versions on_period UNK on_rparen # And now the has_many :versions properly finds all four changes
animal_versions on_op UNK on_period versions on_period order on_lparen on_symbeg id on_rparen on_period UNK on_nl expect on_lparen animal_versions on_period UNK on_rparen # And Animal is still unaffected
