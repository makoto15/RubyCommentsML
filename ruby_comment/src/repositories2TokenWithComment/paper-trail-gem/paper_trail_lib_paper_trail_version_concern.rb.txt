on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl # frozen_string_literal: true
UNK on_const on_nl UNK on_op on_const on_op on_const on_nl on_ignored_nl UNK UNK on_ignored_nl if on_op on_const on_period UNK on_op on_const # Originally, PaperTrail did not provide this module, and all of this # functionality was in `PaperTrail::Version`. That model still exists (and is # used by most apps) but by moving the functionality to this module, people # can include this concern instead of sub-classing the `Version` model.
UNK on_const on_nl def UNK on_nl UNK on_period UNK on_lparen on_tstring_beg on_tstring_content on_tstring_end on_rparen on_nl end on_nl on_ignored_nl def UNK # :nodoc:
def UNK on_lparen UNK on_op on_tstring_beg on_tstring_content on_tstring_end on_rparen on_ignored_nl on_lbracket arel_table on_lbracket on_symbeg created_at on_rbracket on_period UNK on_lparen UNK # Defaults to using the primary key as the secondary sort order if # possible.
def UNK on_lparen args on_op UNK UNK on_rparen on_ignored_nl UNK on_const on_comma on_tstring_beg on_tstring_content on_tstring_end unless args on_period UNK on_lparen # Given a hash of attributes like `name: 'Joan'`, query the # `versions.objects` column. # # ``` # SELECT "versions".* # FROM "versions" # WHERE ("versions"."object" LIKE '% # name: Joan # %') # ``` # # This is useful for finding versions where a given attribute had a given # value. Imagine, in the example above, that Joan had changed her name # and we wanted to find the versions before that change. # # Based on the data type of the `object` column, the appropriate SQL # operator is used. For example, a text column will use `like`, and a # jsonb column will use `@>`. # # @api public
def UNK on_lparen args on_op UNK UNK on_rparen on_ignored_nl UNK on_const on_comma on_tstring_beg on_tstring_content on_tstring_end unless args on_period UNK on_lparen # Given a hash of attributes like `name: 'Joan'`, query the # `versions.objects_changes` column. # # ``` # SELECT "versions".* # FROM "versions" # WHERE .. ("versions"."object_changes" LIKE '% # name: # - Joan # %' OR "versions"."object_changes" LIKE '% # name: # -% # - Joan # %') # ``` # # This is useful for finding versions immediately before and after a given # attribute had a given value. Imagine, in the example above, that someone # changed their name to Joan and we wanted to find the versions # immediately before and after that change. # # Based on the data type of the `object` column, the appropriate SQL # operator is used. For example, a text column will use `like`, and a # jsonb column will use `@>`. # # @api public
true on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_tstring_content UNK on_tstring_content on_tstring_end on_period UNK on_lparen UNK on_lbracket on_tstring_beg on_tstring_content # TODO: Rescue something more specific
def UNK on_nl UNK on_tstring_content UNK on_tstring_content on_tstring_end on_period UNK on_lparen UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period UNK on_rparen # Returns whether the `object` column is using the `json` type supported # by PostgreSQL.
def UNK on_nl UNK on_tstring_content UNK on_tstring_content on_tstring_end on_period UNK on_lparen UNK on_lbracket on_tstring_beg on_tstring_content on_tstring_end on_rbracket on_period UNK on_lparen # Returns whether the `object_changes` column is using the `json` type # supported by PostgreSQL.
def UNK on_lparen obj on_comma UNK on_op UNK on_rparen on_ignored_nl if UNK on_op true on_op UNK on_nl UNK on_lparen obj # Returns versions before `obj`. # # @param obj - a `Version` or a timestamp # @param timestamp_arg - boolean - When true, `obj` is a timestamp. # Default: false. # @return `ActiveRecord::Relation` # @api public
def UNK on_lparen obj on_comma UNK on_op UNK on_rparen on_ignored_nl if UNK on_op true on_op UNK on_nl UNK on_lparen obj # Returns versions after `obj`. # # @param obj - a `Version` or a timestamp # @param timestamp_arg - boolean - When true, `obj` is a timestamp. # Default: false. # @return `ActiveRecord::Relation` # @api public
def UNK on_lparen obj on_rparen on_ignored_nl where on_lparen arel_table on_lbracket primary_key on_rbracket on_period UNK on_lparen obj on_period UNK on_rparen on_rparen # @api private
def UNK on_lparen obj on_rparen on_ignored_nl obj on_op obj on_period UNK on_lparen on_symbeg created_at on_rparen if obj on_period UNK on_lparen # @api private
def UNK on_lparen UNK on_rparen on_ignored_nl where on_lparen arel_table on_lbracket primary_key on_rbracket on_period UNK on_lparen UNK on_period UNK on_rparen on_rparen # @api private
def UNK on_lparen obj on_rparen on_ignored_nl obj on_op obj on_period UNK on_lparen on_symbeg created_at on_rparen if obj on_period UNK on_lparen # @api private
def UNK on_nl if self on_period class on_period UNK on_nl UNK on_nl UNK on_ignored_nl on_const on_period UNK on_period UNK on_lparen # @api private
def UNK on_lparen UNK on_op UNK UNK on_rparen on_ignored_nl unless self on_period class on_period UNK on_period UNK on_tstring_beg on_tstring_content on_tstring_end # Restore the item from this version. # # Options: # # - :mark_for_destruction # - `true` - Mark the has_one/has_many associations that did not exist in # the reified version for destruction, instead of removing them. # - `false` - Default. Useful for persisting the reified version. # - :dup # - `false` - Default. # - `true` - Always create a new object instance. Useful for # comparing two versions of the same object. # - :unversioned_attributes # - `:nil` - Default. Attributes undefined in version record are set to # nil in reified record. # - `:preserve` - Attributes undefined in version record are not modified. #
def UNK on_nl return UNK unless self on_period class on_period UNK on_period UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ivar on_op UNK # Returns what changed in this version of the item. # `ActiveModel::Dirty#changes`. returns `nil` if your `versions` table does # not have an `object_changes` text column.
def UNK on_nl on_ivar on_op UNK on_period UNK on_lparen on_symbeg UNK on_rparen on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar # Returns who put the item into the state stored in this version.
def UNK on_nl on_ivar on_op UNK on_nl end on_nl UNK UNK UNK on_nl on_ignored_nl def UNK on_lparen UNK on_op UNK # Returns who changed the item from the state it had in this version. This # is an alias for `whodunnit`.
def UNK on_nl on_ivar on_op on_const on_period new on_lparen UNK on_comma self on_period class on_rparen on_period UNK on_lparen self on_rparen # Returns an integer representing the chronological position of the # version among its siblings (see `sibling_versions`). The "create" event, # for example, has an index of 0. # @api public
def UNK on_nl if on_const on_period UNK on_period UNK on_op UNK on_lparen on_symbeg UNK on_rparen on_nl return on_const on_period UNK # @api private
UNK on_op on_const on_period new on_lparen UNK on_rparen on_nl on_ignored_nl unless UNK on_period UNK on_nl on_const on_op on_const on_period on_ignored_nl # First, deserialize the `object_changes` column.
unless UNK on_period UNK on_nl on_const on_op on_const on_period on_ignored_nl new on_lparen UNK on_period class on_rparen on_period on_ignored_nl UNK on_lparen # The next step is, perhaps unfortunately, called "de-serialization", # and appears to be responsible for custom attribute serializers. For an # example of a custom attribute serializer, see # `Person::TimeZoneSerializer` in the test suite. # # Is `item.class` good enough? Does it handle `inheritance_column` # as well as `Reifier#version_reification_class`? We were using # `item_type.constantize`, but that is problematic when the STI parent # is not versioned. (See `Vehicle` and `Car` in the test suite). # # Note: `item` returns nil if `event` is "destroy".
UNK on_nl end on_nl on_ignored_nl def UNK on_nl if self on_period class on_period UNK on_nl UNK on_nl UNK on_ignored_nl UNK # Finally, return a Hash mapping each attribute name to # a two-element array representing before and after.
def UNK on_nl if self on_period class on_period UNK on_nl UNK on_nl UNK on_ignored_nl UNK on_ignored_nl on_const on_period UNK on_period # If the `object_changes` column is a Postgres JSON column, then # ActiveRecord will deserialize it for us. Otherwise, it's a string column # and we must deserialize it ourselves. # @api private
UNK UNK on_nl end on_nl end on_nl end on_nl on_ignored_nl def UNK on_nl limit on_op UNK on_nl return unless limit # TODO: Rescue something more specific
def UNK on_nl limit on_op UNK on_nl return unless limit on_period UNK on_const on_nl UNK on_op UNK on_period UNK on_period # Enforces the `version_limit`, if set. Default: no limit. # @api private
def UNK on_nl if self on_period class on_period UNK on_nl UNK on_op on_lparen UNK on_op UNK on_rparen on_period UNK on_nl # See docs section 2.e. Limiting the Number of Versions Created. # The version limit can be global or per-model. # # @api private # # TODO: Duplication: similar `constantize` in Reifier#version_reification_class
