on_ignored_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl UNK on_tstring_beg on_tstring_content on_tstring_end on_nl on_ignored_nl UNK on_const on_nl # frozen_string_literal: true
class on_const on_nl on_const on_op on_op on_const on_period UNK on_op on_op on_const on_op on_const on_period new on_lparen on_tstring_beg on_tstring_content on_tstring_end # Represents the "paper trail" for a single record.
def UNK on_nl versions on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_period send on_lparen on_tstring_beg on_embexpr_beg on_ivar # Invoked after rollbacks to ensure versions records are not created for # changes that never actually took place. Optimization: Use lazy `reset` # instead of eager `reload` because, in many use cases, the association will # not be used.
def UNK on_nl on_ivar on_period send on_lparen on_tstring_beg on_embexpr_beg on_ivar on_period class on_period UNK on_embexpr_end on_tstring_content on_tstring_end on_comma UNK on_rparen # Invoked via`after_update` callback for when a previous version is # reified and then saved.
def enabled? on_nl on_const on_period enabled? on_op on_ignored_nl on_const on_period UNK on_period enabled? on_op on_ignored_nl on_const on_period UNK on_period UNK # Is PT enabled for this particular record? # @api private
def UNK on_nl source_version on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl UNK on_op source_version on_period UNK on_nl UNK # Returns true if this instance is the current, live one; # returns false if this instance came from a previous version.
def UNK on_nl UNK on_op source_version on_period UNK on_nl UNK on_op UNK on_period UNK on_op on_ivar on_period class on_period UNK # Returns the object (not a Version) as it became next. # NOTE: if self (the item) was not reified from a version, i.e. it is the # "live" item, we return nil. Perhaps we should return self instead?
UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_lparen source_version on_op versions on_period UNK on_rparen on_period UNK on_lparen on_symbeg UNK # TODO: Rescue something more specific
def UNK on_nl on_lparen source_version on_op versions on_period UNK on_rparen on_period UNK on_lparen on_symbeg UNK on_rparen on_nl end on_nl on_ignored_nl # Returns who put `@record` into its current state. # # @api public
def UNK on_nl on_lparen source_version on_op source_version on_period UNK on_op versions on_period UNK on_rparen on_period UNK on_lparen on_symbeg UNK on_rparen # Returns the object (not a Version) as it was most recently. # # @api public
versions on_period UNK on_nl end on_nl end on_nl on_ignored_nl def UNK on_nl on_lbrace on_rbrace on_nl end on_nl on_ignored_nl def UNK # Because the version object was created using version_class.new instead # of versions_assoc.build?, the association cache is unaware. So, we # invalidate the `versions` association cache with `reset`.
def UNK on_nl on_lbrace on_rbrace on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl return unless enabled? on_op on_op # PT-AT extends this method to add its transaction id. # # @api private
def UNK on_lparen UNK on_rparen on_ignored_nl return unless enabled? on_op on_op on_ivar on_period UNK on_nl UNK on_op UNK on_op on_tstring_beg # `recording_order` is "after" or "before". See ModelConfig#on_destroy. # # @api private # @return - The created version object, so that plugins can use it, e.g. # paper_trail-association_tracking
data on_op event on_period data on_period UNK on_lparen UNK on_rparen on_nl on_ignored_nl version on_op on_ivar on_period class on_period UNK on_period # Merge data from `Event` with data from PT-AT. We no longer use # `data_for_destroy` but PT-AT still does.
def UNK on_nl on_lbrace on_rbrace on_nl end on_nl on_ignored_nl def UNK on_lparen on_label on_comma on_label on_comma on_label on_rparen on_ignored_nl return # PT-AT extends this method to add its transaction id. # # @api private
def UNK on_lparen on_label on_comma on_label on_comma on_label on_rparen on_ignored_nl return unless enabled? on_nl on_ignored_nl version on_op UNK on_lparen on_ignored_nl # @api private # @return - The created version object, so that plugins can use it, e.g. # paper_trail-association_tracking
versions on_period UNK on_nl version on_nl UNK on_ignored_nl UNK on_lparen version on_comma on_symbeg UNK on_rparen on_nl end on_nl end on_nl # Because the version object was created using version_class.new instead # of versions_assoc.build?, the association cache is unaware. So, we # invalidate the `versions` association cache with `reset`.
def UNK on_nl on_lbrace on_rbrace on_nl end on_nl on_ignored_nl def UNK on_lparen UNK on_rparen on_ignored_nl return unless enabled? on_nl event # PT-AT extends this method to add its transaction id. # # @api private
def UNK on_lparen UNK on_rparen on_ignored_nl return unless enabled? on_nl event on_op on_const on_op on_const on_period new on_lparen on_ivar on_comma # @api private # @return - The created version object, so that plugins can use it, e.g. # paper_trail-association_tracking
data on_op event on_period data on_period UNK on_lparen UNK on_rparen on_nl on_ignored_nl UNK on_op on_ivar on_period send on_lparen on_ivar on_period # Merge data from `Event` with data from PT-AT. We no longer use # `data_for_update_columns` but PT-AT still does.
def UNK on_nl on_lbrace on_rbrace on_nl end on_nl on_ignored_nl def UNK on_nl return if UNK on_nl on_ivar on_period send on_lparen # PT-AT extends this method to add its transaction id. # # @api private
def UNK on_nl return if UNK on_nl on_ivar on_period send on_lparen on_symbeg UNK on_rparen on_period UNK UNK on_op UNK on_op # Invoked via callback when a user attempts to persist a reified # `Version`.
def UNK on_nl UNK on_op on_ivar on_period UNK UNK on_symbeg if UNK on_nl UNK on_op on_ivar on_period UNK UNK on_symbeg # AR callback. # @api private
def UNK on_lparen on_op UNK on_rparen on_ignored_nl on_op on_const on_period UNK on_lparen on_label UNK on_rparen UNK on_ignored_nl on_ivar on_period UNK # Save, and create a version record regardless of options such as `:on`, # `:if`, or `:unless`. # # Arguments are passed to `save`. # # This is an "update" event. That is, we record the same data we would in # the case of a normal AR `update`.
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl UNK on_lparen UNK on_op UNK on_rparen on_nl end on_nl on_ignored_nl def UNK # Like the `update_column` method from `ActiveRecord::Persistence`, but also # creates a version to record those changes. # @api public
def UNK on_lparen UNK on_rparen on_ignored_nl UNK on_op on_lbrace on_rbrace on_nl UNK on_period UNK UNK on_op UNK on_comma UNK on_op # Like the `update_columns` method from `ActiveRecord::Persistence`, but also # creates a version to record those changes. # @api public
UNK on_op on_lbrace on_rbrace on_nl UNK on_period UNK UNK on_op UNK on_comma UNK on_op on_ignored_nl UNK UNK UNK UNK on_op # `@record.update_columns` skips dirty-tracking, so we can't just use # `@record.changes` or @record.saved_changes` from `ActiveModel::Dirty`. # We need to build our own hash with the changes that will be made # directly to the database.
def UNK on_lparen UNK on_comma UNK on_op on_lbrace on_rbrace on_rparen on_ignored_nl UNK on_op versions on_period UNK on_lparen UNK on_comma UNK # Returns the object (not a Version) as it was at the given timestamp.
UNK on_op versions on_period UNK on_lparen UNK on_comma UNK on_rparen on_period UNK on_nl return UNK on_period UNK on_lparen UNK on_rparen # Because a version stores how its object looked *before* the change, # we need to look for the first version created *after* the timestamp.
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl versions on_op send on_lparen on_ivar on_period class on_period UNK on_rparen on_period UNK # Returns the objects (not Versions) as they were between the given times.
def UNK on_lparen version on_rparen on_ignored_nl on_ivar on_period send on_lparen on_tstring_beg on_embexpr_beg on_ivar on_period class on_period UNK on_embexpr_end on_tstring_content on_tstring_end # @api private
def UNK on_lparen on_label on_rparen on_ignored_nl event on_op on_const on_op on_const on_period new on_lparen on_ivar on_comma UNK on_rparen on_nl on_ignored_nl # @api private
data on_op event on_period data on_period UNK on_lparen UNK on_rparen on_nl on_ignored_nl on_ivar on_period class on_period UNK on_period UNK on_period # Merge data from `Event` with data from PT-AT. We no longer use # `data_for_create` but PT-AT still does.
on_ivar on_period class on_period UNK on_period UNK on_period new on_lparen data on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen on_label # Pure `version_class.new` reduces memory usage compared to `versions_assoc.build`
def UNK on_lparen on_label on_comma on_label on_comma on_label on_rparen on_ignored_nl event on_op on_const on_op on_const on_period new on_lparen on_ivar on_comma # @api private
data on_op event on_period data on_period UNK on_lparen UNK on_rparen on_nl on_ignored_nl on_ivar on_period class on_period UNK on_period UNK on_period # Merge data from `Event` with data from PT-AT. We no longer use # `data_for_update` but PT-AT still does. To save memory, we use `merge!` # instead of `merge`.
on_ivar on_period class on_period UNK on_period UNK on_period new on_lparen data on_rparen on_nl end on_nl on_ignored_nl def UNK on_lparen version # Using `version_class.new` reduces memory usage compared to # `versions_assoc.build`. It's a trade-off though. We have to clear # the association cache (see `versions.reset`) and that could cause an # additional query in certain applications.
