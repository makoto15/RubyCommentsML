on_ignored_nl UNK on_const on_nl UNK on_const on_nl class on_const on_nl on_const on_op on_op on_const on_period UNK on_op on_op on_const on_op # frozen_string_literal: true
class on_const on_nl on_const on_op on_op on_const on_period UNK on_op on_op on_const on_op on_const on_period UNK on_lparen UNK UNK UNK # We refer to times in the lifecycle of a record as "events". There are # three events: # # - create # - `after_create` we call `RecordTrail#record_create` # - update # - `after_update` we call `RecordTrail#record_update` # - `after_touch` we call `RecordTrail#record_update` # - `RecordTrail#save_with_version` calls `RecordTrail#record_update` # - `RecordTrail#update_columns` is also referred to as an update, though # it uses `RecordTrail#record_update_columns` rather than # `RecordTrail#record_update` # - destroy # - `before_destroy` or `after_destroy` we call `RecordTrail#record_destroy` # # The value inserted into the `event` column of the versions table can also # be overridden by the user, with `paper_trail_event`. # # @api private
def UNK on_lparen UNK on_comma UNK on_rparen on_ignored_nl on_ivar on_op UNK on_nl on_ivar on_op UNK on_nl end on_nl on_ignored_nl def # @api private
def UNK on_nl if UNK on_nl UNK on_op on_ivar on_period UNK on_lparen on_symbeg UNK on_rparen on_period UNK on_lparen on_op on_symbeg # Determines whether it is appropriate to generate a new version # instance. A timestamp-only update (e.g. only `updated_at` changed) is # considered notable unless an ignored attribute was also changed. # # @api private
def UNK on_lparen attr_name on_rparen on_ignored_nl if on_ivar on_op on_const on_nl on_ivar on_period UNK on_lparen attr_name on_period to_s on_rparen on_nl # Rails 5.1 changed the API of `ActiveRecord::Dirty`. See # https://github.com/paper-trail-gem/paper_trail/pull/899 # # @api private
def UNK on_lparen is_touch on_rparen on_ignored_nl UNK UNK on_ignored_nl UNK on_op on_ivar on_period UNK on_period UNK on_lparen on_op on_ivar on_period # @api private
def UNK on_nl if on_const on_nl UNK on_nl else on_ignored_nl on_ivar on_period UNK on_lparen on_symbeg UNK on_rparen UNK UNK UNK # Rails 5.1 changed the API of `ActiveRecord::Dirty`. # @api private
UNK on_nl else on_ignored_nl on_ivar on_period UNK on_lparen on_symbeg UNK on_rparen UNK UNK UNK on_nl end on_nl end on_nl on_ignored_nl # Everything works fine as it is
on_ivar on_period UNK on_lparen on_symbeg UNK on_rparen UNK UNK UNK on_nl end on_nl end on_nl on_ignored_nl def UNK on_lparen attr_name # Any particular call to `changed_attributes` produces the huge memory allocation. # Lets use the generic AR workaround for that.
def UNK on_lparen attr_name on_comma is_touch on_rparen on_ignored_nl if on_const on_nl if on_ivar on_op on_op is_touch on_nl on_ivar on_period UNK # Rails 5.1 changed the API of `ActiveRecord::Dirty`. See # https://github.com/paper-trail-gem/paper_trail/pull/899 # # Event can be any of the three (create, update, destroy). # # @api private
on_ivar on_period UNK on_lparen attr_name on_period to_s on_rparen on_nl else on_ignored_nl on_ivar on_period UNK on_lparen attr_name on_period to_s on_rparen on_nl # For most events, we want the original value of the attribute, before # the last save.
on_ivar on_period UNK on_lparen attr_name on_period to_s on_rparen on_nl end on_nl else on_ignored_nl on_ivar on_period UNK on_lparen attr_name on_period to_s # We are either performing a `record_destroy` or a # `record_update(is_touch: true)`.
def UNK on_nl ignore on_op on_ivar on_period paper_trail_options on_lbracket on_symbeg ignore on_rbracket on_period UNK on_nl ignore on_period UNK UNK on_op # @api private
ignore on_period UNK UNK on_op obj on_op on_ignored_nl obj on_period UNK on_lparen on_const on_rparen on_op on_ignored_nl obj on_period UNK UNK # Remove Hash arguments and then evaluate whether the attributes (the # keys of the hash) should also get pushed into the collection.
def UNK on_nl on_ivar on_op UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op UNK on_ignored_nl if # @api private
on_ivar on_op UNK on_period UNK on_nl end on_nl on_ignored_nl def UNK on_nl on_ivar on_op UNK on_ignored_nl if on_ivar on_op on_const # Memoized to reduce memory usage
def UNK on_nl on_ivar on_op UNK on_ignored_nl if on_ivar on_op on_const on_nl on_ivar on_period UNK on_nl else on_ignored_nl on_ivar on_period # Rails 5.1 changed the API of `ActiveRecord::Dirty`. See # https://github.com/paper-trail-gem/paper_trail/pull/899 # # @api private
on_ivar on_op UNK on_ignored_nl if on_ivar on_op on_const on_nl on_ivar on_period UNK on_nl else on_ignored_nl on_ivar on_period changes on_nl end # Memoized to reduce memory usage
def UNK on_nl UNK on_op on_ivar on_period paper_trail_options on_lbracket on_symbeg ignore on_rbracket on_op on_ivar on_period paper_trail_options on_lbracket on_symbeg UNK on_rbracket # An attributed is "ignored" if it is listed in the `:ignore` option # and/or the `:skip` option. Returns true if an ignored attribute has # changed. # # @api private
def UNK on_lparen data on_rparen on_ignored_nl if on_ivar on_period class on_period UNK on_period UNK on_period UNK on_period UNK on_lparen UNK # PT 10 has a new optional column, `item_subtype` # # @api private
def UNK on_lparen data on_rparen on_ignored_nl UNK on_lparen data on_rparen on_nl UNK on_lparen data on_rparen on_nl end on_nl on_ignored_nl def # Updates `data` from the model's `meta` option and from `controller_info`. # Metadata is always recorded; that means all three events (create, update, # destroy) and `update_columns`. # # @api private
def UNK on_lparen data on_rparen on_ignored_nl data on_period UNK on_lparen on_const on_period UNK on_period UNK on_op UNK UNK on_rparen on_nl # Updates `data` from `controller_info`. # # @api private
def UNK on_lparen data on_rparen on_ignored_nl on_ivar on_period paper_trail_options on_lbracket on_symbeg UNK on_rbracket on_period UNK UNK on_op k on_comma UNK # Updates `data` from the model's `meta` option. # # @api private
def UNK on_lparen value on_comma UNK on_rparen on_ignored_nl if value on_period UNK on_lparen on_symbeg call on_rparen on_nl value on_period call # Given a `value` from the model's `meta` option, returns an object to be # persisted. The `value` can be a simple scalar value, but it can also # be a symbol that names a model method, or even a Proc. # # @api private
if UNK on_op UNK UNK UNK on_op on_ignored_nl on_ivar on_period UNK on_lparen value on_rparen on_op on_ignored_nl UNK on_lparen value on_rparen # If it is an attribute that is changing in an existing object, # be sure to grab the current version.
def UNK on_nl UNK on_period UNK UNK on_op k on_comma UNK on_op on_ignored_nl on_op UNK on_period UNK on_lparen k on_rparen # @api private
def UNK on_nl on_ivar on_op UNK on_ignored_nl only on_op on_ivar on_period paper_trail_options on_lbracket on_symbeg only on_rbracket on_period UNK on_nl only # @api private
on_ivar on_op UNK on_ignored_nl only on_op on_ivar on_period paper_trail_options on_lbracket on_symbeg only on_rbracket on_period UNK on_nl only on_period UNK UNK # Memoized to reduce memory usage
only on_period UNK UNK on_op obj on_op on_ignored_nl obj on_period UNK on_lparen on_const on_rparen on_op on_ignored_nl obj on_period UNK UNK # Remove Hash arguments and then evaluate whether the attributes (the # keys of the hash) should also get pushed into the collection.
def UNK on_lparen is_touch on_rparen on_ignored_nl UNK on_op UNK on_lparen is_touch on_rparen on_nl on_const on_op on_const on_period UNK on_lparen on_ivar # Returns hash of attributes (with appropriate attributes serialized), # omitting attributes to be skipped. # # @api private
def UNK on_lparen changes on_rparen on_ignored_nl changes on_op UNK on_lparen changes on_rparen on_nl changes on_op UNK on_lparen changes on_rparen on_nl # @api private
def UNK on_lparen changes on_rparen on_ignored_nl if on_const on_period UNK on_period UNK on_op UNK on_lparen on_symbeg UNK on_rparen on_nl changes # Returns an object which can be assigned to the `object_changes` # attribute of a nascent version record. If the `object_changes` column is # a postgres `json` column, then a hash can be used in the assignment, # otherwise the column is a `text` column, and we must perform the # serialization here, using `PaperTrail.serializer`. # # @api private # @param changes HashWithIndifferentAccess
changes on_op on_const on_period UNK on_period UNK on_period UNK on_lparen changes on_period UNK on_rparen on_nl end on_nl on_ignored_nl if on_ivar # We'd like to avoid the `to_hash` here, because it increases memory # usage, but that would be a breaking change because # `object_changes_adapter` expects a plain `Hash`, not a # `HashWithIndifferentAccess`.
def UNK on_nl on_ivar on_period class on_period UNK on_period UNK on_period UNK on_period UNK on_lparen UNK UNK UNK on_rparen on_nl # Returns a boolean indicating whether to store serialized version diffs # in the `object_changes` column of the version record. # # @api private
def UNK on_nl on_ivar on_period class on_period UNK on_period UNK on_period UNK on_period UNK on_lparen UNK UNK UNK on_rparen on_nl # Returns a boolean indicating whether to store the original object during save. # # @api private
def UNK on_lparen is_touch on_rparen on_ignored_nl if on_ivar on_period class on_period UNK on_period UNK on_period UNK on_nl UNK on_lparen is_touch # Returns an object which can be assigned to the `object` attribute of a # nascent version record. If the `object` column is a postgres `json` # column, then a hash can be used in the assignment, otherwise the column # is a `text` column, and we must perform the serialization here, using # `PaperTrail.serializer`. # # @api private
def UNK on_lparen changes on_rparen on_ignored_nl on_const on_op on_const on_period on_ignored_nl UNK on_lparen on_ivar on_period class on_rparen on_period on_ignored_nl UNK # @api private
changes on_nl end on_nl end on_nl end on_nl end on_nl EMP EMP EMP EMP EMP EMP EMP EMP EMP EMP # We'd like to convert this `HashWithIndifferentAccess` to a plain # `Hash`, but we don't, to save memory.
